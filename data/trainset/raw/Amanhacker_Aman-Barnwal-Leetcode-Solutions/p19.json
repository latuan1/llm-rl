[
    {
        "f": [],
        "fm": "int calculateTime(string keyboard, string word) {\r     \r         int res = 0;\r         \r         int pre = -1;\r         \r         for(int i=0; i<word.length(); i++) {\r             \r             int ind = find(keyboard.begin(), keyboard.end(), word[i]) - keyboard.begin();\r             \r             if(pre == -1)                                       res += ind;\r             else                                                res += abs(ind - pre);\r             \r             pre = ind;\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_calculateTime_string_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_calculateTime_string_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1165-single-row-keyboard.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName838121 = new char[2];akaRandomName838121[0] = 105;akaRandomName838121[1] = '\\0';string keyboard=akaRandomName838121;\nchar* akaRandomName675805 = new char[2];akaRandomName675805[0] = -18;akaRandomName675805[1] = '\\0';string word=akaRandomName675805;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode keyboard */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_calculateTime_string_string_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->calculateTime(keyboard,word);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p19\\\\1165-single-row-keyboard\\\\1165-single-row-keyboard.cpp\\\\Solution\\\\calculateTime(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1165-single-row-keyboard.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName235633 = new char[2];akaRandomName235633[0] = 105;akaRandomName235633[1] = '\\0';string keyboard=akaRandomName235633;\nchar* akaRandomName469141 = new char[2];akaRandomName469141[0] = -18;akaRandomName469141[1] = '\\0';string word=akaRandomName469141;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode keyboard */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   \r     int calculateTime(string keyboard, string word) {\r     \r         int res = 0;\r         \r         int pre = -1;\r         \r         for(int i=0; i<word.length(); i++) {\r             \r             int ind = find(keyboard.begin(), keyboard.end(), word[i]) - keyboard.begin();\r             \r             if(pre == -1)                                       res += ind;\r             else                                                res += abs(ind - pre);\r             \r             pre = ind;\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p19\\1165-single-row-keyboard\\1165-single-row-keyboard.cpp\\Solution\\calculateTime(string,string)"
    },
    {
        "f": [],
        "fm": "ListNode* removeZeroSumSublists(ListNode* head) {\r     \r         ListNode* res = NULL;\r         \r         vector<int> v;\r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             if(temp->val != 0)                              v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         int s = 0;\r         for(auto &x : v)                                    s += x;\r         \r         if(s == 0)                                          return res;\r         \r         int i = 0, j = 1;\r         \r         // Remove those elements whose subarray sum is zero\r         \r         bool flag = true;\r         \r         while(flag == true) {\r             \r             if(v.size() == 0)                                                       return res;\r             \r             int n = v.size();\r             \r             for(int i=0; i<v.size()-1; i++) {\r                 for(int j=i+1; j<v.size(); j++) {\r \r                     int sum = 0;\r \r                     // Subarray is from index i to j\r                     for(int k=i; k<=j; k++)                     sum += v[k];\r \r                     if(sum == 0) {\r \r                         // Erase elements from vector v from range [i, j]\r                         int siz = j - i + 1;\r \r                         while(siz--) {\r                             v.erase(v.begin() + i);\r                         }\r                         \r                         if(v.size() == 0)                                           return res;\r                     }\r                 }\r             }\r             \r             if(v.size() == 0)                                                       return res;\r             \r             // If after running 2 for loops, no element is deleted from vector, then come out of while loop\r             if(n == v.size()) {\r                 flag = false;\r                 break;\r             }\r             \r         }\r         \r         // Now, convert vector v into Linked List\r         ListNode* t = new ListNode(v[0]);\r         res = t;\r         \r         for(int i=1; i<v.size(); i++) {\r             \r             ListNode* node = new ListNode(v[i]);\r             \r             t->next = node;\r             t = node;\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeZeroSumSublists_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_removeZeroSumSublists_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=-996019834;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head1_x=0;\n/* PointerStructureDataNode next */\nListNode* head1_next;\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x,head1_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head2_x=0;\n/* PointerStructureDataNode next */\nListNode* head2_next;\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_2\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x,head2_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeZeroSumSublists_ListNodemul_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeZeroSumSublists(head);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\Solution\\\\removeZeroSumSublists(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1165-single-row-keyboard.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName235633 = new char[2];akaRandomName235633[0] = 105;akaRandomName235633[1] = '\\0';string keyboard=akaRandomName235633;\nchar* akaRandomName469141 = new char[2];akaRandomName469141[0] = -18;akaRandomName469141[1] = '\\0';string word=akaRandomName469141;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode keyboard */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     ListNode* removeZeroSumSublists(ListNode* head) {\r     \r         ListNode* res = NULL;\r         \r         vector<int> v;\r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             if(temp->val != 0)                              v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         int s = 0;\r         for(auto &x : v)                                    s += x;\r         \r         if(s == 0)                                          return res;\r         \r         int i = 0, j = 1;\r         \r         // Remove those elements whose subarray sum is zero\r         \r         bool flag = true;\r         \r         while(flag == true) {\r             \r             if(v.size() == 0)                                                       return res;\r             \r             int n = v.size();\r             \r             for(int i=0; i<v.size()-1; i++) {\r                 for(int j=i+1; j<v.size(); j++) {\r \r                     int sum = 0;\r \r                     // Subarray is from index i to j\r                     for(int k=i; k<=j; k++)                     sum += v[k];\r \r                     if(sum == 0) {\r \r                         // Erase elements from vector v from range [i, j]\r                         int siz = j - i + 1;\r \r                         while(siz--) {\r                             v.erase(v.begin() + i);\r                         }\r                         \r                         if(v.size() == 0)                                           return res;\r                     }\r                 }\r             }\r             \r             if(v.size() == 0)                                                       return res;\r             \r             // If after running 2 for loops, no element is deleted from vector, then come out of while loop\r             if(n == v.size()) {\r                 flag = false;\r                 break;\r             }\r             \r         }\r         \r         // Now, convert vector v into Linked List\r         ListNode* t = new ListNode(v[0]);\r         res = t;\r         \r         for(int i=1; i<v.size(); i++) {\r             \r             ListNode* node = new ListNode(v[i]);\r             \r             t->next = node;\r             t = node;\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p19\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\Solution\\removeZeroSumSublists(ListNode*)"
    },
    {
        "f": [],
        "fm": "int dietPlanPerformance(vector<int>& cal, int k, int lower, int upper) {\r     \r         int res = 0;\r         \r         int n = cal.size();\r         int sum = 0;\r         \r         for(int i=0; i<k; i++)                          sum += cal[i];\r         \r         if(sum < lower)                                 res--;\r         else if(sum > upper)                            res++;\r         \r         for(int i=k; i<n; i++) {\r          \r             sum += cal[i] - cal[i-k];\r             \r             if(sum < lower)                             res--;\r             else if(sum > upper)                        res++;\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dietPlanPerformance_vector_int_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_dietPlanPerformance_vector_int_int_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1176-diet-plan-performance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> cal;\n\n\nint k=2;\n\n\nint lower=2133260879;\n\n\nint upper=1393718847;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode cal */\nint cal_element0=-663857199;\ncal.push_back(cal_element0);\nint cal_element1=1872096455;\ncal.push_back(cal_element1);\nint cal_element2=891044929;\ncal.push_back(cal_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode lower */\n/* NormalNumberDataNode upper */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dietPlanPerformance_vector_int_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dietPlanPerformance(cal,k,lower,upper);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p19\\\\1176-diet-plan-performance\\\\1176-diet-plan-performance.cpp\\\\Solution\\\\dietPlanPerformance(vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_cal;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1165-single-row-keyboard.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName235633 = new char[2];akaRandomName235633[0] = 105;akaRandomName235633[1] = '\\0';string keyboard=akaRandomName235633;\nchar* akaRandomName469141 = new char[2];akaRandomName469141[0] = -18;akaRandomName469141[1] = '\\0';string word=akaRandomName469141;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode keyboard */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_dietPlanPerformance_vector_int_int_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_dietPlanPerformance_vector_int_int_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1176-diet-plan-performance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> cal;\n\n\nint k=3;\n\n\nint lower=-534472598;\n\n\nint upper=-1214930423;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode cal */\nint cal_element0=-1303324538;\ncal.push_back(cal_element0);\nint cal_element1=-1487238705;\ncal.push_back(cal_element1);\nint cal_element2=22494758;\ncal.push_back(cal_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode lower */\n/* NormalNumberDataNode upper */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dietPlanPerformance_vector_int_int_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dietPlanPerformance(cal,k,lower,upper);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p19\\\\1176-diet-plan-performance\\\\1176-diet-plan-performance.cpp\\\\Solution\\\\dietPlanPerformance(vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_cal;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=-996019834;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head1_x=0;\n/* PointerStructureDataNode next */\nListNode* head1_next;\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x,head1_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head2_x=0;\n/* PointerStructureDataNode next */\nListNode* head2_next;\nAKA_mark(\"Calling: .\\\\p19\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\1171-remove-zero-sum-consecutive-nodes-from-linked-list.cpp\\\\removeZeroSumSublists(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_2\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x,head2_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_dietPlanPerformance_vector_int_int_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_dietPlanPerformance_vector_int_int_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1176-diet-plan-performance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> cal;\n\n\nint k=3;\n\n\nint lower=-1295384596;\n\n\nint upper=-405560000;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode cal */\nint cal_element0=-1077066626;\ncal.push_back(cal_element0);\nint cal_element1=1573884501;\ncal.push_back(cal_element1);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode lower */\n/* NormalNumberDataNode upper */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dietPlanPerformance_vector_int_int_int_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dietPlanPerformance(cal,k,lower,upper);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p19\\\\1176-diet-plan-performance\\\\1176-diet-plan-performance.cpp\\\\Solution\\\\dietPlanPerformance(vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_cal;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1176-diet-plan-performance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> cal;\n\n\nint k=2;\n\n\nint lower=2133260879;\n\n\nint upper=1393718847;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode cal */\nint cal_element0=-663857199;\ncal.push_back(cal_element0);\nint cal_element1=1872096455;\ncal.push_back(cal_element1);\nint cal_element2=891044929;\ncal.push_back(cal_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode lower */\n/* NormalNumberDataNode upper */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r    \r     int dietPlanPerformance(vector<int>& cal, int k, int lower, int upper) {\r     \r         int res = 0;\r         \r         int n = cal.size();\r         int sum = 0;\r         \r         for(int i=0; i<k; i++)                          sum += cal[i];\r         \r         if(sum < lower)                                 res--;\r         else if(sum > upper)                            res++;\r         \r         for(int i=k; i<n; i++) {\r          \r             sum += cal[i] - cal[i-k];\r             \r             if(sum < lower)                             res--;\r             else if(sum > upper)                        res++;\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p19\\1176-diet-plan-performance\\1176-diet-plan-performance.cpp\\Solution\\dietPlanPerformance(vector<int>&,int,int,int)"
    },
    {
        "f": [],
        "fm": "int countLetters(string s) {\r \r         int n = s.length();\r         int res = 0;                    // For every character\r         \r         // If a letter repeats n times, it forms n * (n + 1) / 2 valid substrings:\r         \r         // For all other substrings having length >= 2\r         \r         int i = 0, j = 0;\r         \r         while(i < n && j < n) {\r             \r             // Divide the substring with only one distinct character of maximum length\r             \r             while(j + 1 < n && s[j] == s[j + 1]) {\r                 j++;\r             }\r             \r             // Here, j is the index of new substring\r             // So, length of substring is from [i, j]\r             \r             if(j < n) {\r             \r                 int len = (j - i + 1);\r                 \r                 // string temp = s.substr(i, len);\r                 // cout << temp << \" \";\r \r                 // No.of required substrings of length l = l * (l + 1) / 2;\r                 res += len * (len + 1) / 2;\r \r                 // Update i and j\r                 i = j + 1;\r                 j++;\r             }\r         }\r          \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countLetters_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_countLetters_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1180-count-substrings-with-only-one-distinct-letter.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName631139 = new char[2];akaRandomName631139[0] = 67;akaRandomName631139[1] = '\\0';string s=akaRandomName631139;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countLetters_string_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countLetters(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p19\\\\1180-count-substrings-with-only-one-distinct-letter\\\\1180-count-substrings-with-only-one-distinct-letter.cpp\\\\Solution\\\\countLetters(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1165-single-row-keyboard.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName235633 = new char[2];akaRandomName235633[0] = 105;akaRandomName235633[1] = '\\0';string keyboard=akaRandomName235633;\nchar* akaRandomName469141 = new char[2];akaRandomName469141[0] = -18;akaRandomName469141[1] = '\\0';string word=akaRandomName469141;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode keyboard */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     int countLetters(string s) {\r \r         int n = s.length();\r         int res = 0;                    // For every character\r         \r         // If a letter repeats n times, it forms n * (n + 1) / 2 valid substrings:\r         \r         // For all other substrings having length >= 2\r         \r         int i = 0, j = 0;\r         \r         while(i < n && j < n) {\r             \r             // Divide the substring with only one distinct character of maximum length\r             \r             while(j + 1 < n && s[j] == s[j + 1]) {\r                 j++;\r             }\r             \r             // Here, j is the index of new substring\r             // So, length of substring is from [i, j]\r             \r             if(j < n) {\r             \r                 int len = (j - i + 1);\r                 \r                 // string temp = s.substr(i, len);\r                 // cout << temp << \" \";\r \r                 // No.of required substrings of length l = l * (l + 1) / 2;\r                 res += len * (len + 1) / 2;\r \r                 // Update i and j\r                 i = j + 1;\r                 j++;\r             }\r         }\r          \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p19\\1180-count-substrings-with-only-one-distinct-letter\\1180-count-substrings-with-only-one-distinct-letter.cpp\\Solution\\countLetters(string)"
    }
]