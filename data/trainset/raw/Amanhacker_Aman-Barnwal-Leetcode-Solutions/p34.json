[
    {
        "f": [],
        "fm": "void addNodeAtBeginning(ListNode** head, int val) {\r         \r         ListNode* temp = new ListNode(val);\r         \r         if(head == NULL) {\r             *head = temp;\r             return;\r         }\r         \r         else {\r             temp->next = *head;\r             *head = temp;\r         }\r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_addNodeAtBeginning_ListNodemulmul_int_random_5(void) {\n{\nAKA_test_case_name=\"Solution_addNodeAtBeginning_ListNodemulmul_int_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addNodeAtBeginning_ListNodemulmul_int_random_5\");AKA_INSTANCE___Solution->addNodeAtBeginning(head,val);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\Solution\\\\addNodeAtBeginning(ListNode**,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void addNodeAtBeginning(ListNode** head, int val) {\r         \r         ListNode* temp = new ListNode(val);\r         \r         if(head == NULL) {\r             *head = temp;\r             return;\r         }\r         \r         else {\r             temp->next = *head;\r             *head = temp;\r         }\r         \r         return;\r     }\r     \r     ListNode* insertionSortList(ListNode* head) {\r     \r         vector<int> v;\r         \r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         ListNode* res = NULL;\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&res, x);\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\147-insertion-sort-list\\147-insertion-sort-list.cpp\\Solution\\addNodeAtBeginning(ListNode**,int)"
    },
    {
        "f": [],
        "fm": "ListNode* insertionSortList(ListNode* head) {\r     \r         vector<int> v;\r         \r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         ListNode* res = NULL;\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&res, x);\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_insertionSortList_ListNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_insertionSortList_ListNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\insertionSortList(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head1_x=440626176;\n/* PointerStructureDataNode next */\nListNode* head1_next;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\147-insertion-sort-list.cpp\\\\insertionSortList(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x,head1_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_insertionSortList_ListNodemul_random_4\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->insertionSortList(head);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\Solution\\\\insertionSortList(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void addNodeAtBeginning(ListNode** head, int val) {\r         \r         ListNode* temp = new ListNode(val);\r         \r         if(head == NULL) {\r             *head = temp;\r             return;\r         }\r         \r         else {\r             temp->next = *head;\r             *head = temp;\r         }\r         \r         return;\r     }\r     \r     ListNode* insertionSortList(ListNode* head) {\r     \r         vector<int> v;\r         \r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         ListNode* res = NULL;\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&res, x);\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\147-insertion-sort-list\\147-insertion-sort-list.cpp\\Solution\\insertionSortList(ListNode*)"
    },
    {
        "f": [],
        "fm": "void addNodeAtBeginning(ListNode** head, int val) {\r         \r         ListNode* temp = new ListNode(val);\r         \r         if(head == NULL) {\r             *head = temp;\r             return;\r         }\r         \r         else {\r             temp->next = *head;\r             *head = temp;\r         }\r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_addNodeAtBeginning_ListNodemulmul_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_addNodeAtBeginning_ListNodemulmul_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\148-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode** head;\n\n\nint val=1151302983;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addNodeAtBeginning_ListNodemulmul_int_random_1\");AKA_INSTANCE___Solution->addNodeAtBeginning(head,val);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\148-sort-list\\\\148-sort-list.cpp\\\\Solution\\\\addNodeAtBeginning(ListNode**,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void addNodeAtBeginning(ListNode** head, int val) {\r         \r         ListNode* temp = new ListNode(val);\r         \r         if(head == NULL) {\r             *head = temp;\r             return;\r         }\r         \r         else {\r             temp->next = *head;\r             *head = temp;\r         }\r         \r         return;\r     }\r     \r     ListNode* sortList(ListNode* head) {\r     \r         vector<int> v;\r         \r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         ListNode* res = NULL;\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&res, x);\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\148-sort-list\\148-sort-list.cpp\\Solution\\addNodeAtBeginning(ListNode**,int)"
    },
    {
        "f": [],
        "fm": "ListNode* sortList(ListNode* head) {\r     \r         vector<int> v;\r         \r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         ListNode* res = NULL;\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&res, x);\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_sortList_ListNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_sortList_ListNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\148-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\148-sort-list\\\\148-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\148-sort-list.cpp\\\\sortList(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head1_x=-2042666875;\n/* PointerStructureDataNode next */\nListNode* head1_next;\nAKA_mark(\"Calling: .\\\\p34\\\\148-sort-list\\\\148-sort-list.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\148-sort-list.cpp\\\\sortList(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x,head1_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortList_ListNodemul_random_1\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortList(head);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\148-sort-list\\\\148-sort-list.cpp\\\\Solution\\\\sortList(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void addNodeAtBeginning(ListNode** head, int val) {\r         \r         ListNode* temp = new ListNode(val);\r         \r         if(head == NULL) {\r             *head = temp;\r             return;\r         }\r         \r         else {\r             temp->next = *head;\r             *head = temp;\r         }\r         \r         return;\r     }\r     \r     ListNode* sortList(ListNode* head) {\r     \r         vector<int> v;\r         \r         ListNode* temp = head;\r         \r         while(temp != NULL) {\r             v.push_back(temp->val);\r             temp = temp->next;\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         ListNode* res = NULL;\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&res, x);\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\148-sort-list\\148-sort-list.cpp\\Solution\\sortList(ListNode*)"
    },
    {
        "f": [],
        "fm": "NodeCopy* helpCopyRandom(Node* root, unordered_map<Node*, NodeCopy*>& u) {\r         if (root == NULL) return NULL;\r         if (u.count(root)) return u[root];\r \r         NodeCopy* newRoot = new NodeCopy(root->val);\r         u[root] = newRoot;\r \r         newRoot->left = helpCopyRandom(root->left, u);\r         newRoot->right = helpCopyRandom(root->right, u);\r         newRoot->random = helpCopyRandom(root->random, u);\r \r         return newRoot;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_helpCopyRandom_Nodemul_unordered_map_Nodemul_NodeCopymul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_helpCopyRandom_Nodemul_unordered_map_Nodemul_NodeCopymul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=600531500;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=2001418555;\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node(int)|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::Node(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-1372470457;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).random;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::Node();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-1210075822;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).random;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-921483045;\n/* PointerStructureDataNode left */\nNode* root0_left2_left;\n/* PointerStructureDataNode right */\nNode* root0_left2_right;\n/* PointerStructureDataNode random */\nNode* root0_left2_random;\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::Node(root0_left2_x,root0_left2_left,root0_left2_right,root0_left2_random);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=-944438589;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).random;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::Node();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-499572664;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).random;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode x */\nint root0_right1_x=-1673275023;\n/* PointerStructureDataNode left */\nNode* root0_right1_left;\n/* PointerStructureDataNode right */\nNode* root0_right1_right;\n/* PointerStructureDataNode random */\nNode* root0_right1_random;\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::Node(root0_right1_x,root0_right1_left,root0_right1_right,root0_right1_random);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=812667743;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).random;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode x */\nint root0_right2_x=1140937318;\n/* PointerStructureDataNode left */\nNode* root0_right2_left;\n/* PointerStructureDataNode right */\nNode* root0_right2_right;\n/* PointerStructureDataNode random */\nNode* root0_right2_random;\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[2]\\\\right\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::Node(root0_right2_x,root0_right2_left,root0_right2_right,root0_right2_random);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=-1219398274;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).random;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n/* PointerStructureDataNode random */\nstd::vector<Node*> AKA_VECTOR_INIT_root_0_DOT_random;\n/* SubStructDataNode random */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode x */\nint root0_random0_x=-713646270;\n/* PointerStructureDataNode left */\nNode* root0_random0_left;\n/* PointerStructureDataNode right */\nNode* root0_random0_right;\n/* PointerStructureDataNode random */\nNode* root0_random0_random;\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\random\\\\random[0]\\\\random\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_random_0 = new ::Node(root0_random0_x,root0_random0_left,root0_random0_right,root0_random0_random);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_random_0).val=-1248827715;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_random_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_random_0).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_random_0).random;\nAKA_VECTOR_INIT_root_0_DOT_random.push_back(AKA_VECTOR_INIT_root_0_DOT_random_0);\n/* SubStructDataNode random */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\random\\\\random[1]\\\\random\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_random_1 = new ::Node();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_random_1).val=514723153;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_random_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_random_1).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0_DOT_random_1).random;\nAKA_VECTOR_INIT_root_0_DOT_random.push_back(AKA_VECTOR_INIT_root_0_DOT_random_1);\n(*AKA_VECTOR_INIT_root_0).random = AKA_VECTOR_INIT_root_0_DOT_random[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=12197728;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\right\\\\right[0]\\\\right\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::Node();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-2087687138;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).random;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n/* PointerStructureDataNode random */\nstd::vector<Node*> AKA_VECTOR_INIT_root_1_DOT_random;\n/* SubStructDataNode random */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode x */\nint root1_random0_x=65188258;\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node(int)|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\random\\\\random[0]\\\\random\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_random_0 = new ::Node(root1_random0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_random_0).val=-227223674;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_random_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_random_0).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_1_DOT_random_0).random;\nAKA_VECTOR_INIT_root_1_DOT_random.push_back(AKA_VECTOR_INIT_root_1_DOT_random_0);\n/* SubStructDataNode random */\n/* ConstructorDataNode Node(int,Node*,Node*,Node*) */\n/* NormalNumberDataNode x */\nint root1_random1_x=-1612943819;\n/* PointerStructureDataNode left */\nNode* root1_random1_left;\n/* PointerStructureDataNode right */\nNode* root1_random1_right;\n/* PointerStructureDataNode random */\nNode* root1_random1_random;\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node(int,Node*,Node*,Node*)|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\random\\\\random[1]\\\\random\\\\Node(int,Node*,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_random_1 = new ::Node(root1_random1_x,root1_random1_left,root1_random1_right,root1_random1_random);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_random_1).val=-1116006064;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_random_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_random_1).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_1_DOT_random_1).random;\nAKA_VECTOR_INIT_root_1_DOT_random.push_back(AKA_VECTOR_INIT_root_1_DOT_random_1);\n(*AKA_VECTOR_INIT_root_1).random = AKA_VECTOR_INIT_root_1_DOT_random[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nunordered_map<Node*, NodeCopy*> u;\nNodeCopy* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* UnorderedMapDataNode u */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_helpCopyRandom_Nodemul_unordered_map_Nodemul_NodeCopymul_random_2\");NodeCopy* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->helpCopyRandom(root,u);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Solution\\\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)\");\n\n\nunordered_map<Node*, NodeCopy*> EXPECTED_u;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     // Sử dụng map để sao chép cây nhị phân có con trỏ random\r     NodeCopy* helpCopyRandom(Node* root, unordered_map<Node*, NodeCopy*>& u) {\r         if (root == NULL) return NULL;\r         if (u.count(root)) return u[root];\r \r         NodeCopy* newRoot = new NodeCopy(root->val);\r         u[root] = newRoot;\r \r         newRoot->left = helpCopyRandom(root->left, u);\r         newRoot->right = helpCopyRandom(root->right, u);\r         newRoot->random = helpCopyRandom(root->random, u);\r \r         return newRoot;\r     }\r \r     NodeCopy* copyRandomBinaryTree(Node* root) {\r         if (root == NULL) return NULL;\r \r         unordered_map<Node*, NodeCopy*> u; // Bản đồ ánh xạ giữa Node gốc và Node sao chép\r         return helpCopyRandom(root, u);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\1485-clone-binary-tree-with-random-pointer\\1485-clone-binary-tree-with-random-pointer.cpp\\Solution\\helpCopyRandom(Node*,unordered_map<Node*,NodeCopy*>&)"
    },
    {
        "f": [],
        "fm": "NodeCopy* copyRandomBinaryTree(Node* root) {\r         if (root == NULL) return NULL;\r \r         unordered_map<Node*, NodeCopy*> u; // Bản đồ ánh xạ giữa Node gốc và Node sao chép\r         return helpCopyRandom(root, u);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_copyRandomBinaryTree_Nodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_copyRandomBinaryTree_Nodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\copyRandomBinaryTree(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_0).random;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode Node() */\nAKA_mark(\"Calling: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Node\\\\Node()|ROOT\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\copyRandomBinaryTree(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::Node();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_root_1).random;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNodeCopy* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_copyRandomBinaryTree_Nodemul_random_0\");NodeCopy* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->copyRandomBinaryTree(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\1485-clone-binary-tree-with-random-pointer\\\\1485-clone-binary-tree-with-random-pointer.cpp\\\\Solution\\\\copyRandomBinaryTree(Node*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     // Sử dụng map để sao chép cây nhị phân có con trỏ random\r     NodeCopy* helpCopyRandom(Node* root, unordered_map<Node*, NodeCopy*>& u) {\r         if (root == NULL) return NULL;\r         if (u.count(root)) return u[root];\r \r         NodeCopy* newRoot = new NodeCopy(root->val);\r         u[root] = newRoot;\r \r         newRoot->left = helpCopyRandom(root->left, u);\r         newRoot->right = helpCopyRandom(root->right, u);\r         newRoot->random = helpCopyRandom(root->random, u);\r \r         return newRoot;\r     }\r \r     NodeCopy* copyRandomBinaryTree(Node* root) {\r         if (root == NULL) return NULL;\r \r         unordered_map<Node*, NodeCopy*> u; // Bản đồ ánh xạ giữa Node gốc và Node sao chép\r         return helpCopyRandom(root, u);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\1485-clone-binary-tree-with-random-pointer\\1485-clone-binary-tree-with-random-pointer.cpp\\Solution\\copyRandomBinaryTree(Node*)"
    },
    {
        "f": [],
        "fm": "Node* dfs(Node* root) {\r         \r         if(root == NULL)                                return NULL;\r         \r         Node* newRoot = new Node(root->val);\r \r         vector<Node*> ch = root->children;\r         vector<Node*> newChild;\r         \r         for(auto &x : ch) {\r             \r             Node* temp = x;                 // temp is one of the children of root node\r             Node* newTemp = dfs(temp);\r             \r             newChild.push_back(newTemp);\r         }\r         \r         newRoot->children = newChild;\r         return newRoot;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_Nodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_dfs_Nodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1490-clone-n-ary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int,vector<Node*>) */\n/* NormalNumberDataNode _val */\nint root0__val=-1185782095;\n/* VectorDataNode _children */\nvector<Node*> root0__children;\nAKA_mark(\"Calling: .\\\\p34\\\\1490-clone-n-ary-tree\\\\1490-clone-n-ary-tree.cpp\\\\Node\\\\Node(int,vector<Node*>)|ROOT\\\\1490-clone-n-ary-tree.cpp\\\\dfs(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int,vector<Node*>)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val,root0__children);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1794501115;\n/* VectorDataNode children */\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_Nodemul_random_3\");Node* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dfs(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\1490-clone-n-ary-tree\\\\1490-clone-n-ary-tree.cpp\\\\Solution\\\\dfs(Node*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     Node* dfs(Node* root) {\r         \r         if(root == NULL)                                return NULL;\r         \r         Node* newRoot = new Node(root->val);\r \r         vector<Node*> ch = root->children;\r         vector<Node*> newChild;\r         \r         for(auto &x : ch) {\r             \r             Node* temp = x;                 // temp is one of the children of root node\r             Node* newTemp = dfs(temp);\r             \r             newChild.push_back(newTemp);\r         }\r         \r         newRoot->children = newChild;\r         return newRoot;\r     }\r     \r     Node* cloneTree(Node* root) {\r     \r         Node* newRoot = NULL;\r         \r         newRoot = dfs(root);\r         return newRoot;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\1490-clone-n-ary-tree\\1490-clone-n-ary-tree.cpp\\Solution\\dfs(Node*)"
    },
    {
        "f": [],
        "fm": "Node* cloneTree(Node* root) {\r     \r         Node* newRoot = NULL;\r         \r         newRoot = dfs(root);\r         return newRoot;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_cloneTree_Nodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_cloneTree_Nodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1490-clone-n-ary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<Node*> AKA_VECTOR_INIT_root;\n\n\n/* SubClassDataNode root */\n/* ConstructorDataNode Node(int) */\n/* NormalNumberDataNode _val */\nint root0__val=-1662104095;\nAKA_mark(\"Calling: .\\\\p34\\\\1490-clone-n-ary-tree\\\\1490-clone-n-ary-tree.cpp\\\\Node\\\\Node(int)|ROOT\\\\1490-clone-n-ary-tree.cpp\\\\cloneTree(Node*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\Node(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::Node(root0__val);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* VectorDataNode children */\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nNode* root = AKA_VECTOR_INIT_root[0];\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_cloneTree_Nodemul_random_1\");Node* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->cloneTree(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p34\\\\1490-clone-n-ary-tree\\\\1490-clone-n-ary-tree.cpp\\\\Solution\\\\cloneTree(Node*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\147-insertion-sort-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode**> AKA_VECTOR_INIT_head;\nstd::vector<ListNode*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0;\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_0 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head00_x=1798718397;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_0\\\\AKA_VECTOR_INIT_head_0_0\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_0 = new ::ListNode(head00_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_0).val=690841018;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_0).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_0);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_1\\\\AKA_VECTOR_INIT_head_0_1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_1 = new ::ListNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_1).val=965853715;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_1).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_1);\n\n\n/* SubStructDataNode AKA_VECTOR_INIT_head_0_2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head02_x=-1249170264;\nAKA_mark(\"Calling: .\\\\p34\\\\147-insertion-sort-list\\\\147-insertion-sort-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\147-insertion-sort-list.cpp\\\\addNodeAtBeginning(ListNode**,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\AKA_VECTOR_INIT_head_0_2\\\\AKA_VECTOR_INIT_head_0_2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_2 = new ::ListNode(head02_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_2).val=-1338301384;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_2).next;\n\nAKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0.push_back(AKA_VECTOR_INIT_head_0_2);\n\nauto AKA_VECTOR_INIT_head_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_0[0]);\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode** head = AKA_VECTOR_INIT_head[0];\n\n\nint val=452378595;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     Node* dfs(Node* root) {\r         \r         if(root == NULL)                                return NULL;\r         \r         Node* newRoot = new Node(root->val);\r \r         vector<Node*> ch = root->children;\r         vector<Node*> newChild;\r         \r         for(auto &x : ch) {\r             \r             Node* temp = x;                 // temp is one of the children of root node\r             Node* newTemp = dfs(temp);\r             \r             newChild.push_back(newTemp);\r         }\r         \r         newRoot->children = newChild;\r         return newRoot;\r     }\r     \r     Node* cloneTree(Node* root) {\r     \r         Node* newRoot = NULL;\r         \r         newRoot = dfs(root);\r         return newRoot;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p34\\1490-clone-n-ary-tree\\1490-clone-n-ary-tree.cpp\\Solution\\cloneTree(Node*)"
    }
]