[
    {
        "f": [],
        "fm": "bool bfs(TreeNode* root) {\r         \r         if(root == NULL)                            return true;\r \r         bool flag = true;\r         \r         queue<TreeNode*> q;\r         q.push(root);\r         \r         vector<int> path;\r         int lev = 0;\r         \r         while(q.empty() == false) {\r             \r             int n = q.size();\r             \r             while(n--) {\r                 \r                 TreeNode* temp = q.front();\r                 q.pop();\r                 \r                 path.push_back(temp->val);\r                 \r                 if(temp->left != NULL)              q.push(temp->left);\r                 if(temp->right != NULL)             q.push(temp->right);\r             }\r             \r             // For odd-indexed level -> All even values -> All nodes strictly decreasing \r             if(lev % 2 == 1) {\r                 \r                 if(path[0] % 2 == 1)                    return false;\r                 \r                 for(int i=1; i<path.size(); i++) {\r                     \r                     if(path[i] % 2 == 1)                return false;\r                     if(path[i-1] <= path[i])            return false;\r                 }\r             }\r             \r             // For even-indexed level -> All odd values -> All nodes strictly increasing \r             else {\r                 \r                 if(path[0] % 2 == 0)                    return false;\r                 \r                 for(int i=1; i<path.size(); i++) {\r                     \r                     if(path[i] % 2 == 0)                return false;\r                     if(path[i-1] >= path[i])            return false;\r                 }\r             }\r             \r             lev++;\r             path.clear();\r         }\r         \r         return true;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_bfs_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_bfs_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_bfs_TreeNodemul_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->bfs(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\Solution\\\\bfs(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_bfs_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_bfs_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-959673596;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_bfs_TreeNodemul_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->bfs(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\Solution\\\\bfs(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-959673596;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     bool bfs(TreeNode* root) {\r         \r         if(root == NULL)                            return true;\r \r         bool flag = true;\r         \r         queue<TreeNode*> q;\r         q.push(root);\r         \r         vector<int> path;\r         int lev = 0;\r         \r         while(q.empty() == false) {\r             \r             int n = q.size();\r             \r             while(n--) {\r                 \r                 TreeNode* temp = q.front();\r                 q.pop();\r                 \r                 path.push_back(temp->val);\r                 \r                 if(temp->left != NULL)              q.push(temp->left);\r                 if(temp->right != NULL)             q.push(temp->right);\r             }\r             \r             // For odd-indexed level -> All even values -> All nodes strictly decreasing \r             if(lev % 2 == 1) {\r                 \r                 if(path[0] % 2 == 1)                    return false;\r                 \r                 for(int i=1; i<path.size(); i++) {\r                     \r                     if(path[i] % 2 == 1)                return false;\r                     if(path[i-1] <= path[i])            return false;\r                 }\r             }\r             \r             // For even-indexed level -> All odd values -> All nodes strictly increasing \r             else {\r                 \r                 if(path[0] % 2 == 0)                    return false;\r                 \r                 for(int i=1; i<path.size(); i++) {\r                     \r                     if(path[i] % 2 == 0)                return false;\r                     if(path[i-1] >= path[i])            return false;\r                 }\r             }\r             \r             lev++;\r             path.clear();\r         }\r         \r         return true;\r     }\r     \r     bool isEvenOddTree(TreeNode* root) {\r     \r         if(root == NULL)                                return true;\r         \r         return bfs(root);\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1609-even-odd-tree\\1609-even-odd-tree.cpp\\Solution\\bfs(TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool isEvenOddTree(TreeNode* root) {\r     \r         if(root == NULL)                                return true;\r         \r         return bfs(root);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isEvenOddTree_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isEvenOddTree_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1421335167;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1359955834;\n/* PointerStructureDataNode left */\nTreeNode* root0_left0_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode(root0_left0_x,root0_left0_left,root0_left0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_1).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_1);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1359955834;\n/* PointerStructureDataNode left */\nTreeNode* root0_left0_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x,root0_left0_left,root0_left0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isEvenOddTree_TreeNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isEvenOddTree(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\Solution\\\\isEvenOddTree(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     bool bfs(TreeNode* root) {\r         \r         if(root == NULL)                            return true;\r \r         bool flag = true;\r         \r         queue<TreeNode*> q;\r         q.push(root);\r         \r         vector<int> path;\r         int lev = 0;\r         \r         while(q.empty() == false) {\r             \r             int n = q.size();\r             \r             while(n--) {\r                 \r                 TreeNode* temp = q.front();\r                 q.pop();\r                 \r                 path.push_back(temp->val);\r                 \r                 if(temp->left != NULL)              q.push(temp->left);\r                 if(temp->right != NULL)             q.push(temp->right);\r             }\r             \r             // For odd-indexed level -> All even values -> All nodes strictly decreasing \r             if(lev % 2 == 1) {\r                 \r                 if(path[0] % 2 == 1)                    return false;\r                 \r                 for(int i=1; i<path.size(); i++) {\r                     \r                     if(path[i] % 2 == 1)                return false;\r                     if(path[i-1] <= path[i])            return false;\r                 }\r             }\r             \r             // For even-indexed level -> All odd values -> All nodes strictly increasing \r             else {\r                 \r                 if(path[0] % 2 == 0)                    return false;\r                 \r                 for(int i=1; i<path.size(); i++) {\r                     \r                     if(path[i] % 2 == 0)                return false;\r                     if(path[i-1] >= path[i])            return false;\r                 }\r             }\r             \r             lev++;\r             path.clear();\r         }\r         \r         return true;\r     }\r     \r     bool isEvenOddTree(TreeNode* root) {\r     \r         if(root == NULL)                                return true;\r         \r         return bfs(root);\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1609-even-odd-tree\\1609-even-odd-tree.cpp\\Solution\\isEvenOddTree(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int maxDepth(string s) {\r     \r         int res = 0, cur = 0;\r         int n = s.length();\r         \r         // Ignore digits and signs, only count the current open parentheses cur.\r         // The depth equals to the maximum open parentheses.\r         \r         for(int i=0; i<n; i++) {\r             \r             if(s[i] == '(') {\r                 cur++;\r                 res = max(res, cur);                \r             }\r             \r             else if(s[i] == ')') {\r                 cur--;\r             }\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxDepth_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_maxDepth_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1614-maximum-nesting-depth-of-the-parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName839240 = new char[2];akaRandomName839240[0] = 6;akaRandomName839240[1] = '\\0';string s=akaRandomName839240;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxDepth_string_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxDepth(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1614-maximum-nesting-depth-of-the-parentheses\\\\1614-maximum-nesting-depth-of-the-parentheses.cpp\\\\Solution\\\\maxDepth(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int maxDepth(string s) {\r     \r         int res = 0, cur = 0;\r         int n = s.length();\r         \r         // Ignore digits and signs, only count the current open parentheses cur.\r         // The depth equals to the maximum open parentheses.\r         \r         for(int i=0; i<n; i++) {\r             \r             if(s[i] == '(') {\r                 cur++;\r                 res = max(res, cur);                \r             }\r             \r             else if(s[i] == ')') {\r                 cur--;\r             }\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1614-maximum-nesting-depth-of-the-parentheses\\1614-maximum-nesting-depth-of-the-parentheses.cpp\\Solution\\maxDepth(string)"
    },
    {
        "f": [],
        "fm": "int maxLengthBetweenEqualCharacters(string s) {\r     \r         int maxi = -1;\r         vector<int> v(26, -1);\r         \r         for (int i=0; i<s.size(); i++) {\r             \r             if(v[s[i] - 'a'] == -1)                            v[s[i] - 'a'] = i;\r             else                                               maxi = max(maxi, abs(v[s[i] - 'a'] - i) - 1);      \r         }\r         \r         return maxi;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxLengthBetweenEqualCharacters_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_maxLengthBetweenEqualCharacters_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1624-largest-substring-between-two-equal-characters.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName223381 = new char[2];akaRandomName223381[0] = 110;akaRandomName223381[1] = '\\0';string s=akaRandomName223381;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxLengthBetweenEqualCharacters_string_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxLengthBetweenEqualCharacters(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1624-largest-substring-between-two-equal-characters\\\\1624-largest-substring-between-two-equal-characters.cpp\\\\Solution\\\\maxLengthBetweenEqualCharacters(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxLengthBetweenEqualCharacters_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maxLengthBetweenEqualCharacters_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1624-largest-substring-between-two-equal-characters.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName417181 = new char[2];akaRandomName417181[0] = 79;akaRandomName417181[1] = '\\0';string s=akaRandomName417181;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxLengthBetweenEqualCharacters_string_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxLengthBetweenEqualCharacters(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1624-largest-substring-between-two-equal-characters\\\\1624-largest-substring-between-two-equal-characters.cpp\\\\Solution\\\\maxLengthBetweenEqualCharacters(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-959673596;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int maxLengthBetweenEqualCharacters(string s) {\r     \r         int maxi = -1;\r         vector<int> v(26, -1);\r         \r         for (int i=0; i<s.size(); i++) {\r             \r             if(v[s[i] - 'a'] == -1)                            v[s[i] - 'a'] = i;\r             else                                               maxi = max(maxi, abs(v[s[i] - 'a'] - i) - 1);      \r         }\r         \r         return maxi;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1624-largest-substring-between-two-equal-characters\\1624-largest-substring-between-two-equal-characters.cpp\\Solution\\maxLengthBetweenEqualCharacters(string)"
    },
    {
        "f": [
            "int val;"
        ],
        "fm": "int evaluate() const {\r             return val;\r         }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_NumNode_evaluate_random_0(void) {\n{\nAKA_test_case_name=\"NumNode_evaluate_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___NumNode */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___NumNode_val=-1987045830;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___NumNode\\\\AKA_INSTANCE___NumNode\\\\NumNode(int)\");AKA_fCall++;AKA_INSTANCE___NumNode = new ::NumNode(AKA_INSTANCE___NumNode_val);\n/* NormalNumberDataNode val */\nAKA_INSTANCE___NumNode->val=-1987045830;\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test NumNode_evaluate_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___NumNode->evaluate();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\evaluate()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class NumNode: public Node {\r     \r     public:\r         \r         NumNode(int val) : val(val) {};\r         \r         int evaluate() const {\r             return val;\r         };\r     \r     protected:\r         \r         int val;\r };",
        "c": [
            "NumNode(int val) : val(val) {}"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1628-design-an-expression-tree-with-evaluate-function\\1628-design-an-expression-tree-with-evaluate-function.cpp\\NumNode\\evaluate()"
    },
    {
        "f": [],
        "fm": "int OpNode::evaluate() const {\r    \r     switch(this->op) {\r        \r         case '+':\r             return left->evaluate() + right->evaluate(); \r         \r         case '-':\r             return left->evaluate() - right->evaluate(); \r         \r         case '*':\r             return left->evaluate() * right->evaluate(); \r         \r         case '/':\r             return left->evaluate() / right->evaluate(); \r         \r         default:\r             return 0;\r     }\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_OpNode_evaluate_random_0(void) {\n{\nAKA_test_case_name=\"OpNode_evaluate_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___OpNode */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_op=-93;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left0_val=522356054;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_0).val=522356054;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left1_val=-1975190888;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_1).val=-1975190888;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_1);\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_left2_op=-61;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left0_val=-1930058350;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_0).val=-1930058350;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left1_val=-1416292493;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_1).val=-1416292493;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_1);\nNode* AKA_INSTANCE___OpNode_left2_left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_left2_right0_op=-70;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_left2_right0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_left2_right0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0 = new ::OpNode(AKA_INSTANCE___OpNode_left2_right0_op,AKA_INSTANCE___OpNode_left2_right0_left,AKA_INSTANCE___OpNode_left2_right0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0).op=-70;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0);\nNode* AKA_INSTANCE___OpNode_left2_right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right[0];\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2 = new ::OpNode(AKA_INSTANCE___OpNode_left2_op,AKA_INSTANCE___OpNode_left2_left,AKA_INSTANCE___OpNode_left2_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2).op=-61;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left0_val=-1930058350;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[2]\\\\left\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left_0).val=-1930058350;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left1_val=-1416292493;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[2]\\\\left\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left_1).val=-1416292493;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2).left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_left2_right0_op=-70;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_left2_right0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_left2_right0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[2]\\\\left\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right_0 = new ::OpNode(AKA_INSTANCE___OpNode_left2_right0_op,AKA_INSTANCE___OpNode_left2_right0_left,AKA_INSTANCE___OpNode_left2_right0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right_0).op=-70;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right_0);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2).right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2_DOT_right[0];\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left_2);\nNode* AKA_INSTANCE___OpNode_left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_op=69;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_left0_op=74;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_left0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[0]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0 = new ::OpNode(AKA_INSTANCE___OpNode_right0_left0_op,AKA_INSTANCE___OpNode_right0_left0_left,AKA_INSTANCE___OpNode_right0_left0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0).op=74;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_left1_val=-755332774;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_right0_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_1).val=-755332774;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_1);\nNode* AKA_INSTANCE___OpNode_right0_left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_right0_val=17758217;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right0_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_0).val=17758217;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_right1_op=98;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_right1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_right1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1 = new ::OpNode(AKA_INSTANCE___OpNode_right0_right1_op,AKA_INSTANCE___OpNode_right0_right1_left,AKA_INSTANCE___OpNode_right0_right1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1).op=98;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1);\nNode* AKA_INSTANCE___OpNode_right0_right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right[0];\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0 = new ::OpNode(AKA_INSTANCE___OpNode_right0_op,AKA_INSTANCE___OpNode_right0_left,AKA_INSTANCE___OpNode_right0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0).op=69;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_left0_op=74;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_left0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\left\\\\left[0]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_0 = new ::OpNode(AKA_INSTANCE___OpNode_right0_left0_op,AKA_INSTANCE___OpNode_right0_left0_left,AKA_INSTANCE___OpNode_right0_left0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_0).op=74;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_left1_val=-755332774;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_right0_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_1).val=-755332774;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0).left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_right0_val=17758217;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right0_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_0).val=17758217;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_right1_op=98;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_right1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_right1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_1 = new ::OpNode(AKA_INSTANCE___OpNode_right0_right1_op,AKA_INSTANCE___OpNode_right0_right1_left,AKA_INSTANCE___OpNode_right0_right1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_1).op=98;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0).right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0_DOT_right[0];\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right1_op=-98;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_left0_val=-46890238;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_0).val=-46890238;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right1_left1_op=-118;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right1_left1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right1_left1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[1]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1 = new ::OpNode(AKA_INSTANCE___OpNode_right1_left1_op,AKA_INSTANCE___OpNode_right1_left1_left,AKA_INSTANCE___OpNode_right1_left1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1).op=-118;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1);\nNode* AKA_INSTANCE___OpNode_right1_left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right0_val=-361221153;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_0).val=-361221153;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right1_val=1562191968;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_1 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_1).val=1562191968;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_1);\nNode* AKA_INSTANCE___OpNode_right1_right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right[0];\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1 = new ::OpNode(AKA_INSTANCE___OpNode_right1_op,AKA_INSTANCE___OpNode_right1_left,AKA_INSTANCE___OpNode_right1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1).op=-98;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_left0_val=-46890238;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_0).val=-46890238;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right1_left1_op=-118;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right1_left1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right1_left1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\left\\\\left[1]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_1 = new ::OpNode(AKA_INSTANCE___OpNode_right1_left1_op,AKA_INSTANCE___OpNode_right1_left1_left,AKA_INSTANCE___OpNode_right1_left1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_1).op=-118;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1).left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right0_val=-361221153;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right_0).val=-361221153;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right1_val=1562191968;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\right\\\\right[1]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right_1 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right_1).val=1562191968;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1).right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1_DOT_right[0];\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right_1);\nNode* AKA_INSTANCE___OpNode_right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right[0];\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;AKA_INSTANCE___OpNode = new ::OpNode(AKA_INSTANCE___OpNode_op,AKA_INSTANCE___OpNode_left,AKA_INSTANCE___OpNode_right);\n/* NormalCharacterDataNode op */\nAKA_INSTANCE___OpNode->op=-93;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left0_val=522356054;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_0).val=522356054;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left1_val=-1975190888;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_1).val=-1975190888;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_1);\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_left2_op=-61;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left0_val=-1930058350;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_0).val=-1930058350;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left1_val=-1416292493;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_1).val=-1416292493;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left_1);\nNode* AKA_INSTANCE___OpNode_left2_left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_left2_right0_op=-70;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_left2_right0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_left2_right0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0 = new ::OpNode(AKA_INSTANCE___OpNode_left2_right0_op,AKA_INSTANCE___OpNode_left2_right0_left,AKA_INSTANCE___OpNode_left2_right0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0).op=-70;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right_0);\nNode* AKA_INSTANCE___OpNode_left2_right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_left2_right[0];\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[2]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2 = new ::OpNode(AKA_INSTANCE___OpNode_left2_op,AKA_INSTANCE___OpNode_left2_left,AKA_INSTANCE___OpNode_left2_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2).op=-61;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left0_val=-1930058350;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[2]\\\\left\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left_0).val=-1930058350;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_left2_left1_val=-1416292493;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[2]\\\\left\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_left2_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left_1).val=-1416292493;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2).left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_left2_right0_op=-70;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_left2_right0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_left2_right0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\left\\\\left[2]\\\\left\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right_0 = new ::OpNode(AKA_INSTANCE___OpNode_left2_right0_op,AKA_INSTANCE___OpNode_left2_right0_left,AKA_INSTANCE___OpNode_left2_right0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right_0).op=-70;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right_0);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2).right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2_DOT_right[0];\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left_2);\nAKA_INSTANCE___OpNode->left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_op=69;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_left0_op=74;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_left0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[0]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0 = new ::OpNode(AKA_INSTANCE___OpNode_right0_left0_op,AKA_INSTANCE___OpNode_right0_left0_left,AKA_INSTANCE___OpNode_right0_left0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0).op=74;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_left1_val=-755332774;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_right0_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_1).val=-755332774;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left_1);\nNode* AKA_INSTANCE___OpNode_right0_left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_right0_val=17758217;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right0_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_0).val=17758217;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_right1_op=98;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_right1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_right1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1 = new ::OpNode(AKA_INSTANCE___OpNode_right0_right1_op,AKA_INSTANCE___OpNode_right0_right1_left,AKA_INSTANCE___OpNode_right0_right1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1).op=98;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right_1);\nNode* AKA_INSTANCE___OpNode_right0_right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right0_right[0];\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0 = new ::OpNode(AKA_INSTANCE___OpNode_right0_op,AKA_INSTANCE___OpNode_right0_left,AKA_INSTANCE___OpNode_right0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0).op=69;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_left0_op=74;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_left0_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\left\\\\left[0]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_0 = new ::OpNode(AKA_INSTANCE___OpNode_right0_left0_op,AKA_INSTANCE___OpNode_right0_left0_left,AKA_INSTANCE___OpNode_right0_left0_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_0).op=74;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_left1_val=-755332774;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\left\\\\left[1]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_1 = new ::NumNode(AKA_INSTANCE___OpNode_right0_left1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_1).val=-755332774;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0).left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right0_right0_val=17758217;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right0_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_0).val=17758217;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right0_right1_op=98;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right0_right1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right0_right1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[0]\\\\right\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_1 = new ::OpNode(AKA_INSTANCE___OpNode_right0_right1_op,AKA_INSTANCE___OpNode_right0_right1_left,AKA_INSTANCE___OpNode_right0_right1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_1).op=98;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0).right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0_DOT_right[0];\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right1_op=-98;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_left0_val=-46890238;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_0).val=-46890238;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right1_left1_op=-118;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right1_left1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right1_left1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\left\\\\left[1]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1 = new ::OpNode(AKA_INSTANCE___OpNode_right1_left1_op,AKA_INSTANCE___OpNode_right1_left1_left,AKA_INSTANCE___OpNode_right1_left1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1).op=-118;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left_1);\nNode* AKA_INSTANCE___OpNode_right1_left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right0_val=-361221153;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_0).val=-361221153;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right1_val=1562191968;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\\\\right\\\\right[1]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_1 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_1).val=1562191968;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right_1);\nNode* AKA_INSTANCE___OpNode_right1_right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_right1_right[0];\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1 = new ::OpNode(AKA_INSTANCE___OpNode_right1_op,AKA_INSTANCE___OpNode_right1_left,AKA_INSTANCE___OpNode_right1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1).op=-98;\n/* PointerStructureDataNode left */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left;\n/* SubClassDataNode left */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_left0_val=-46890238;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\left\\\\left[0]\\\\left\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_left0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_0).val=-46890238;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_0);\n/* SubClassDataNode left */\n/* ConstructorDataNode OpNode(char,Node*,Node*) */\n/* NormalCharacterDataNode op */\nchar AKA_INSTANCE___OpNode_right1_left1_op=-118;\n/* PointerStructureDataNode left */\nNode* AKA_INSTANCE___OpNode_right1_left1_left;\n/* PointerStructureDataNode right */\nNode* AKA_INSTANCE___OpNode_right1_left1_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode\\\\OpNode(char,Node*,Node*)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\left\\\\left[1]\\\\left\\\\OpNode(char,Node*,Node*)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_1 = new ::OpNode(AKA_INSTANCE___OpNode_right1_left1_op,AKA_INSTANCE___OpNode_right1_left1_left,AKA_INSTANCE___OpNode_right1_left1_right);\n/* NormalCharacterDataNode op */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_1).op=-118;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1).left = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<Node*> AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right;\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right0_val=-361221153;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\right\\\\right[0]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right_0 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right0_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right_0).val=-361221153;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right_0);\n/* SubClassDataNode right */\n/* ConstructorDataNode NumNode(int) */\n/* NormalNumberDataNode val */\nint AKA_INSTANCE___OpNode_right1_right1_val=1562191968;\nAKA_mark(\"Calling: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\NumNode\\\\NumNode(int)|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___OpNode\\\\AKA_INSTANCE___OpNode\\\\right\\\\right[1]\\\\right\\\\right\\\\right[1]\\\\right\\\\NumNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right_1 = new ::NumNode(AKA_INSTANCE___OpNode_right1_right1_val);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right_1).val=1562191968;\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right_1);\n(*AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1).right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1_DOT_right[0];\nAKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right_1);\nAKA_INSTANCE___OpNode->right = AKA_VECTOR_INIT_AKA_INSTANCE___OpNode_POINT_TO_right[0];\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test OpNode_evaluate_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___OpNode->evaluate();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\OpNode::evaluate()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1628-design-an-expression-tree-with-evaluate-function\\1628-design-an-expression-tree-with-evaluate-function.cpp\\OpNode::evaluate()"
    },
    {
        "f": [],
        "fm": "Node* buildTree(vector<string>& postfix) {\r         \r         stack<Node*> st;\r         \r         for (auto s: postfix) {\r         \r             if(isdigit(s[0])) {\r             \r                 st.push(new NumNode(stoi(s)));\r             }\r             \r             else{\r             \r                 auto right = st.top();\r                 st.pop();\r                 \r                 auto left = st.top();\r                 st.pop();\r                 \r                 st.push(new OpNode(s[0], left, right));\r             }\r         }\r         \r         return st.top();\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeBuilder_buildTree_vector_string_random_4(void) {\n{\nAKA_test_case_name=\"TreeBuilder_buildTree_vector_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___TreeBuilder */\n/* ConstructorDataNode TreeBuilder() */\nAKA_mark(\"Calling: \\\\TreeBuilder()|ROOT\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeBuilder\\\\AKA_INSTANCE___TreeBuilder\\\\TreeBuilder()\");AKA_fCall++;AKA_INSTANCE___TreeBuilder = new ::TreeBuilder();\n\n\nvector<string> postfix;\nNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode postfix */\nchar* akaRandomName981613 = new char[2];akaRandomName981613[0] = -17;akaRandomName981613[1] = '\\0';string postfix_element0=akaRandomName981613;\npostfix.push_back(postfix_element0);\nchar* akaRandomName852354 = new char[2];akaRandomName852354[0] = 39;akaRandomName852354[1] = '\\0';string postfix_element1=akaRandomName852354;\npostfix.push_back(postfix_element1);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test TreeBuilder_buildTree_vector_string_random_4\");Node* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___TreeBuilder->buildTree(postfix);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1628-design-an-expression-tree-with-evaluate-function\\\\1628-design-an-expression-tree-with-evaluate-function.cpp\\\\TreeBuilder\\\\buildTree(vector<string>&)\");\n\n\nvector<string> EXPECTED_postfix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class TreeBuilder {\r public:\r     \r     // Build the expression tree\r     Node* buildTree(vector<string>& postfix) {\r         \r         stack<Node*> st;\r         \r         for (auto s: postfix) {\r         \r             if(isdigit(s[0])) {\r             \r                 st.push(new NumNode(stoi(s)));\r             }\r             \r             else{\r             \r                 auto right = st.top();\r                 st.pop();\r                 \r                 auto left = st.top();\r                 st.pop();\r                 \r                 st.push(new OpNode(s[0], left, right));\r             }\r         }\r         \r         return st.top();\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1628-design-an-expression-tree-with-evaluate-function\\1628-design-an-expression-tree-with-evaluate-function.cpp\\TreeBuilder\\buildTree(vector<string>&)"
    },
    {
        "f": [],
        "fm": "vector<bool> checkArithmeticSubarrays(vector<int>& a, vector<int>& l, vector<int>& r) {\r     \r         vector<bool> res;\r         int n = a.size();\r         \r         int m = l.size();\r         \r         for(int i=0; i<m; i++) {\r             \r             int start = l[i];\r             int end = r[i];\r             \r             // Range is from start to end\r             vector<int> path;\r             \r             for(int j=start; j<=end; j++)           path.push_back(a[j]);    \r             sort(path.begin(), path.end());\r             \r             bool flag = true;\r             int diff = path[1] - path[0];\r             \r             for(int k=2; k<path.size(); k++) {\r                 if(diff != path[k] - path[k-1]) {\r                     flag = false;\r                     break;\r                 }\r             }\r             \r             res.push_back(flag);\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_checkArithmeticSubarrays_vector_int_vector_int_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_checkArithmeticSubarrays_vector_int_vector_int_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1630-arithmetic-subarrays.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\nvector<int> l;\nvector<int> r;\nvector<bool> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=1112398075;\na.push_back(a_element0);\n/* VectorDataNode l */\nint l_element0=1974576489;\nl.push_back(l_element0);\n/* VectorDataNode r */\nint r_element0=1267794237;\nr.push_back(r_element0);\nint r_element1=-657553466;\nr.push_back(r_element1);\nint r_element2=-84964496;\nr.push_back(r_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkArithmeticSubarrays_vector_int_vector_int_vector_int_random_1\");vector<bool> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkArithmeticSubarrays(a,l,r);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1630-arithmetic-subarrays\\\\1630-arithmetic-subarrays.cpp\\\\Solution\\\\checkArithmeticSubarrays(vector<int>&,vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_a;\n\nvector<int> EXPECTED_l;\n\nvector<int> EXPECTED_r;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_checkArithmeticSubarrays_vector_int_vector_int_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_checkArithmeticSubarrays_vector_int_vector_int_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1630-arithmetic-subarrays.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\nvector<int> l;\nvector<int> r;\nvector<bool> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=-1232414566;\na.push_back(a_element0);\nint a_element1=-1429783169;\na.push_back(a_element1);\n/* VectorDataNode l */\nint l_element0=-1366007095;\nl.push_back(l_element0);\nint l_element1=1511528582;\nl.push_back(l_element1);\n/* VectorDataNode r */\nint r_element0=1415767363;\nr.push_back(r_element0);\nint r_element1=1052854611;\nr.push_back(r_element1);\nint r_element2=-1185643628;\nr.push_back(r_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkArithmeticSubarrays_vector_int_vector_int_vector_int_random_3\");vector<bool> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkArithmeticSubarrays(a,l,r);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p41\\\\1630-arithmetic-subarrays\\\\1630-arithmetic-subarrays.cpp\\\\Solution\\\\checkArithmeticSubarrays(vector<int>&,vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_a;\n\nvector<int> EXPECTED_l;\n\nvector<int> EXPECTED_r;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-959673596;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     vector<bool> checkArithmeticSubarrays(vector<int>& a, vector<int>& l, vector<int>& r) {\r     \r         vector<bool> res;\r         int n = a.size();\r         \r         int m = l.size();\r         \r         for(int i=0; i<m; i++) {\r             \r             int start = l[i];\r             int end = r[i];\r             \r             // Range is from start to end\r             vector<int> path;\r             \r             for(int j=start; j<=end; j++)           path.push_back(a[j]);    \r             sort(path.begin(), path.end());\r             \r             bool flag = true;\r             int diff = path[1] - path[0];\r             \r             for(int k=2; k<path.size(); k++) {\r                 if(diff != path[k] - path[k-1]) {\r                     flag = false;\r                     break;\r                 }\r             }\r             \r             res.push_back(flag);\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p41\\1630-arithmetic-subarrays\\1630-arithmetic-subarrays.cpp\\Solution\\checkArithmeticSubarrays(vector<int>&,vector<int>&,vector<int>&)"
    }
]