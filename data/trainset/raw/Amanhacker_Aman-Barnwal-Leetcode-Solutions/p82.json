[
    {
        "f": [],
        "fm": "vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\r     \r         vector<int> res;\r         \r         int n = nums1.size();\r         int m = nums2.size();\r         \r         map<int, int> mp;\r         \r         for(auto &x : nums1)                mp[x]++;\r         \r         for(auto &x : nums2) {\r             if(mp[x] > 0) {\r                 res.push_back(x);\r                 mp[x]--;\r             }\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_intersect_vector_int_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_intersect_vector_int_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\350-intersection-of-two-arrays-ii.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\n/* VectorDataNode nums2 */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_intersect_vector_int_vector_int_directed_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->intersect(nums1,nums2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\350-intersection-of-two-arrays-ii\\\\350-intersection-of-two-arrays-ii.cpp\\\\Solution\\\\intersect(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\350-intersection-of-two-arrays-ii.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\n/* VectorDataNode nums2 */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_intersect_vector_int_vector_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_intersect_vector_int_vector_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\350-intersection-of-two-arrays-ii.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\n/* VectorDataNode nums2 */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_intersect_vector_int_vector_int_directed_1\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->intersect(nums1,nums2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\350-intersection-of-two-arrays-ii\\\\350-intersection-of-two-arrays-ii.cpp\\\\Solution\\\\intersect(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\350-intersection-of-two-arrays-ii.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\n/* VectorDataNode nums2 */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\r     \r         vector<int> res;\r         \r         int n = nums1.size();\r         int m = nums2.size();\r         \r         map<int, int> mp;\r         \r         for(auto &x : nums1)                mp[x]++;\r         \r         for(auto &x : nums2) {\r             if(mp[x] > 0) {\r                 res.push_back(x);\r                 mp[x]--;\r             }\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p82\\350-intersection-of-two-arrays-ii\\350-intersection-of-two-arrays-ii.cpp\\Solution\\intersect(vector<int>&,vector<int>&)"
    },
    {
        "f": [
            "map<string, int> u;"
        ],
        "fm": "bool shouldPrintMessage(int timestamp, string message) {\r \r         if(u[message] == 0 || ( u[message] != 0 && timestamp >= u[message]) ) {\r             u[message] = timestamp + 10;\r             return true;\r         }\r         \r         return false;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Logger_shouldPrintMessage_int_string_directed_0(void) {\n{\nAKA_test_case_name=\"Logger_shouldPrintMessage_int_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Logger */\n/* ConstructorDataNode Logger() */\nAKA_mark(\"Calling: .\\\\p82\\\\359-logger-rate-limiter\\\\359-logger-rate-limiter.cpp\\\\Logger\\\\Logger()|ROOT\\\\359-logger-rate-limiter.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Logger\\\\AKA_INSTANCE___Logger\\\\Logger()\");AKA_fCall++;AKA_INSTANCE___Logger = new ::Logger();\n/* MapDataNode u */\n\n\n\n\nint timestamp=-2147483648;\nstring message=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode timestamp */\n/* NormalStringDataNode message */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Logger_shouldPrintMessage_int_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Logger->shouldPrintMessage(timestamp,message);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\359-logger-rate-limiter\\\\359-logger-rate-limiter.cpp\\\\Logger\\\\shouldPrintMessage(int,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Logger */\n/* ConstructorDataNode Logger() */\nAKA_mark(\"Calling: .\\\\p82\\\\359-logger-rate-limiter\\\\359-logger-rate-limiter.cpp\\\\Logger\\\\Logger()|ROOT\\\\359-logger-rate-limiter.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Logger\\\\AKA_INSTANCE___Logger\\\\Logger()\");AKA_fCall++;AKA_INSTANCE___Logger = new ::Logger();\n/* MapDataNode u */\n\n\n\n\nint timestamp=-2147483648;\nstring message=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode timestamp */\n/* NormalStringDataNode message */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Logger {\r public:\r    \r     map<string, int> u;\r         \r     Logger() {\r     \r     }\r     \r     bool shouldPrintMessage(int timestamp, string message) {\r \r         if(u[message] == 0 || ( u[message] != 0 && timestamp >= u[message]) ) {\r             u[message] = timestamp + 10;\r             return true;\r         }\r         \r         return false;\r     }\r     \r };",
        "c": [
            "Logger() {\r\n    \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p82\\359-logger-rate-limiter\\359-logger-rate-limiter.cpp\\Logger\\shouldPrintMessage(int,string)"
    },
    {
        "f": [],
        "fm": "void helperFindLeaves(TreeNode* &root, vector<int> &path) {\r         \r         if(root == NULL)                                       return;\r         \r         TreeNode* temp = root;\r         \r         // Base Condition\r         if(root->left == NULL && root->right == NULL) {\r             path.push_back(root->val);\r             root = NULL;\r         }\r         \r         helperFindLeaves(temp->left, path);\r         helperFindLeaves(temp->right, path);\r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_helperFindLeaves_TreeNodemul_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_helperFindLeaves_TreeNodemul_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=778911633;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1520324951;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=1605561421;\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-1016355113;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=885466426;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-290041059;\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=670194881;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> path;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode path */\nint path_element0=1808603895;\npath.push_back(path_element0);\nint path_element1=-2039364651;\npath.push_back(path_element1);\nint path_element2=-1053756462;\npath.push_back(path_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_helperFindLeaves_TreeNodemul_vector_int_random_0\");AKA_INSTANCE___Solution->helperFindLeaves(root,path);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\Solution\\\\helperFindLeaves(TreeNode*&,vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_path;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=778911633;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1520324951;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=1605561421;\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-1016355113;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=885466426;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-290041059;\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=670194881;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> path;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode path */\nint path_element0=1808603895;\npath.push_back(path_element0);\nint path_element1=-2039364651;\npath.push_back(path_element1);\nint path_element2=-1053756462;\npath.push_back(path_element2);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_helperFindLeaves_TreeNodemul_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_helperFindLeaves_TreeNodemul_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> path;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode path */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_helperFindLeaves_TreeNodemul_vector_int_directed_0\");AKA_INSTANCE___Solution->helperFindLeaves(root,path);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\Solution\\\\helperFindLeaves(TreeNode*&,vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_path;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\helperFindLeaves(TreeNode*&,vector<int>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> path;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode path */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void helperFindLeaves(TreeNode* &root, vector<int> &path) {\r         \r         if(root == NULL)                                       return;\r         \r         TreeNode* temp = root;\r         \r         // Base Condition\r         if(root->left == NULL && root->right == NULL) {\r             path.push_back(root->val);\r             root = NULL;\r         }\r         \r         helperFindLeaves(temp->left, path);\r         helperFindLeaves(temp->right, path);\r         \r         return;\r     }\r     \r     vector<vector<int>> findLeaves(TreeNode* root) {\r     \r         vector<vector<int>> res;\r         \r         if(root == NULL)                                        return res;\r         \r         while(root != NULL) {\r             \r             vector<int> path;\r             helperFindLeaves(root, path);\r             \r             res.push_back(path);\r             path.clear();\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p82\\366-find-leaves-of-binary-tree\\366-find-leaves-of-binary-tree.cpp\\Solution\\helperFindLeaves(TreeNode*&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> findLeaves(TreeNode* root) {\r     \r         vector<vector<int>> res;\r         \r         if(root == NULL)                                        return res;\r         \r         while(root != NULL) {\r             \r             vector<int> path;\r             helperFindLeaves(root, path);\r             \r             res.push_back(path);\r             path.clear();\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findLeaves_TreeNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_findLeaves_TreeNodemul_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLeaves_TreeNodemul_directed_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLeaves(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\Solution\\\\findLeaves(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_findLeaves_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_findLeaves_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=141443978;\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\findLeaves(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLeaves_TreeNodemul_random_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLeaves(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\Solution\\\\findLeaves(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=141443978;\nAKA_mark(\"Calling: .\\\\p82\\\\366-find-leaves-of-binary-tree\\\\366-find-leaves-of-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\366-find-leaves-of-binary-tree.cpp\\\\findLeaves(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void helperFindLeaves(TreeNode* &root, vector<int> &path) {\r         \r         if(root == NULL)                                       return;\r         \r         TreeNode* temp = root;\r         \r         // Base Condition\r         if(root->left == NULL && root->right == NULL) {\r             path.push_back(root->val);\r             root = NULL;\r         }\r         \r         helperFindLeaves(temp->left, path);\r         helperFindLeaves(temp->right, path);\r         \r         return;\r     }\r     \r     vector<vector<int>> findLeaves(TreeNode* root) {\r     \r         vector<vector<int>> res;\r         \r         if(root == NULL)                                        return res;\r         \r         while(root != NULL) {\r             \r             vector<int> path;\r             helperFindLeaves(root, path);\r             \r             res.push_back(path);\r             path.clear();\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p82\\366-find-leaves-of-binary-tree\\366-find-leaves-of-binary-tree.cpp\\Solution\\findLeaves(TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool isPerfectSquare(int num) {\r     \r         long n = num;\r         \r         while(n * n > num) {\r             n = (n + num / n) / 2;\r         }\r         \r         return (n * n == num);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPerfectSquare_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isPerfectSquare_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\367-valid-perfect-square.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=3;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPerfectSquare_int_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPerfectSquare(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p82\\\\367-valid-perfect-square\\\\367-valid-perfect-square.cpp\\\\Solution\\\\isPerfectSquare(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\367-valid-perfect-square.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=3;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     bool isPerfectSquare(int num) {\r     \r         long n = num;\r         \r         while(n * n > num) {\r             n = (n + num / n) / 2;\r         }\r         \r         return (n * n == num);\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p82\\367-valid-perfect-square\\367-valid-perfect-square.cpp\\Solution\\isPerfectSquare(int)"
    }
]