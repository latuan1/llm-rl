[
    {
        "f": [],
        "fm": "string reformatNumber(string number) {\r     \r         string res = \"\";\r         \r         string temp = \"\";\r         int n = number.size();\r         \r         // Remove all spaces and dashes\r         for(auto &x : number) {\r             if(x != '-' && x != ' ')                                temp += x;\r         }\r         \r         cout << temp << endl;\r         \r         // Now, group the digits in 2 or 3 digits with dashes in between\r         \r         if(temp.size() % 3 == 0) {\r             \r             int m = temp.size();\r             \r             // Group them in block of 3\r             for(int i=0; i<m;) {\r                 \r                 if(i + 3 <= m) {\r                    res += temp.substr(i, 3); \r                    i += 3;\r                    if(i != m)                                       res += \"-\";\r                 } \r                 else {\r                     i = m;\r                 }\r             }\r         }\r         \r         else {\r             \r             // Group them in block of 2 and 3\r             if(temp.size() == 2)                                    return temp;\r             \r             else if(temp.size() == 4) {\r                 res += temp.substr(0, 2) + \"-\" + temp.substr(2, 2);\r             }\r             \r             else if(temp.size() >= 5) {\r                 \r                 int i;\r                 \r                 if((temp.size() - 2) % 3 == 0) {\r                     // Then group them into blocks of 3 and 1 blocks of 2\r                     for(i=0; i<temp.size()-2; i += 3) {\r                         res += temp.substr(i, 3) + \"-\";\r                     }\r                     \r                     res += temp.substr(i, 2);\r                 }\r                 \r                 else if((temp.size() - 4) % 3 == 0) {\r                     // Then group them into blocks of 3 and 2 blocks of 2\r                     for(i=0; i<temp.size()-4; i += 3) {\r                         res += temp.substr(i, 3) + \"-\";\r                     }\r                     \r                     res += temp.substr(i, 2) + \"-\" + temp.substr(i+2, 2);\r                 }\r             }\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_reformatNumber_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_reformatNumber_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1694-reformat-phone-number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName793673 = new char[2];akaRandomName793673[0] = -39;akaRandomName793673[1] = '\\0';string number=akaRandomName793673;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode number */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reformatNumber_string_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reformatNumber(number);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p45\\\\1694-reformat-phone-number\\\\1694-reformat-phone-number.cpp\\\\Solution\\\\reformatNumber(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     string reformatNumber(string number) {\r     \r         string res = \"\";\r         \r         string temp = \"\";\r         int n = number.size();\r         \r         // Remove all spaces and dashes\r         for(auto &x : number) {\r             if(x != '-' && x != ' ')                                temp += x;\r         }\r         \r         cout << temp << endl;\r         \r         // Now, group the digits in 2 or 3 digits with dashes in between\r         \r         if(temp.size() % 3 == 0) {\r             \r             int m = temp.size();\r             \r             // Group them in block of 3\r             for(int i=0; i<m;) {\r                 \r                 if(i + 3 <= m) {\r                    res += temp.substr(i, 3); \r                    i += 3;\r                    if(i != m)                                       res += \"-\";\r                 } \r                 else {\r                     i = m;\r                 }\r             }\r         }\r         \r         else {\r             \r             // Group them in block of 2 and 3\r             if(temp.size() == 2)                                    return temp;\r             \r             else if(temp.size() == 4) {\r                 res += temp.substr(0, 2) + \"-\" + temp.substr(2, 2);\r             }\r             \r             else if(temp.size() >= 5) {\r                 \r                 int i;\r                 \r                 if((temp.size() - 2) % 3 == 0) {\r                     // Then group them into blocks of 3 and 1 blocks of 2\r                     for(i=0; i<temp.size()-2; i += 3) {\r                         res += temp.substr(i, 3) + \"-\";\r                     }\r                     \r                     res += temp.substr(i, 2);\r                 }\r                 \r                 else if((temp.size() - 4) % 3 == 0) {\r                     // Then group them into blocks of 3 and 2 blocks of 2\r                     for(i=0; i<temp.size()-4; i += 3) {\r                         res += temp.substr(i, 3) + \"-\";\r                     }\r                     \r                     res += temp.substr(i, 2) + \"-\" + temp.substr(i+2, 2);\r                 }\r             }\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p45\\1694-reformat-phone-number\\1694-reformat-phone-number.cpp\\Solution\\reformatNumber(string)"
    },
    {
        "f": [
            "vector<int> v;"
        ],
        "fm": "void add(int number) {\r     \r         v.push_back(number);\r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TwoSum_add_int_random_3(void) {\n{\nAKA_test_case_name=\"TwoSum_add_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___TwoSum */\n/* ConstructorDataNode TwoSum() */\nAKA_mark(\"Calling: .\\\\p45\\\\170-two-sum-iii-data-structure-design\\\\170-two-sum-iii-data-structure-design.cpp\\\\TwoSum\\\\TwoSum()|ROOT\\\\170-two-sum-iii-data-structure-design.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TwoSum\\\\AKA_INSTANCE___TwoSum\\\\TwoSum()\");AKA_fCall++;AKA_INSTANCE___TwoSum = new ::TwoSum();\n/* VectorDataNode v */\nint AKA_INSTANCE___TwoSum_v_element0=-1531780254;\nAKA_INSTANCE___TwoSum->v.push_back(AKA_INSTANCE___TwoSum_v_element0);\nint AKA_INSTANCE___TwoSum_v_element1=96970813;\nAKA_INSTANCE___TwoSum->v.push_back(AKA_INSTANCE___TwoSum_v_element1);\n\n\n\n\nint number=1030573466;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode number */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test TwoSum_add_int_random_3\");AKA_INSTANCE___TwoSum->add(number);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p45\\\\170-two-sum-iii-data-structure-design\\\\170-two-sum-iii-data-structure-design.cpp\\\\TwoSum\\\\add(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class TwoSum {\r public:\r     \r     vector<int> v;\r     \r     TwoSum() {\r     \r         \r     }\r     \r     void add(int number) {\r     \r         v.push_back(number);\r         return;\r     }\r     \r     bool find(int value) {\r         \r         // Checks whether we are able to find two value whose sum is equal to value\r         sort(v.begin(), v.end());\r         \r         int i = 0, j = v.size() - 1;\r         \r         while(i < j) {\r             if(v[i] + v[j] == value)                                return true;\r             else if(v[i] + v[j] > value)                            j--;\r             else if(v[i] + v[j] < value)                            i++;                                        \r         }\r         \r         return false;\r     }\r     \r };",
        "c": [
            "TwoSum() {\r\n    \r\n        \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p45\\170-two-sum-iii-data-structure-design\\170-two-sum-iii-data-structure-design.cpp\\TwoSum\\add(int)"
    },
    {
        "f": [
            "vector<int> v;"
        ],
        "fm": "bool find(int value) {\r         \r         // Checks whether we are able to find two value whose sum is equal to value\r         sort(v.begin(), v.end());\r         \r         int i = 0, j = v.size() - 1;\r         \r         while(i < j) {\r             if(v[i] + v[j] == value)                                return true;\r             else if(v[i] + v[j] > value)                            j--;\r             else if(v[i] + v[j] < value)                            i++;                                        \r         }\r         \r         return false;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TwoSum_find_int_random_0(void) {\n{\nAKA_test_case_name=\"TwoSum_find_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___TwoSum */\n/* ConstructorDataNode TwoSum() */\nAKA_mark(\"Calling: .\\\\p45\\\\170-two-sum-iii-data-structure-design\\\\170-two-sum-iii-data-structure-design.cpp\\\\TwoSum\\\\TwoSum()|ROOT\\\\170-two-sum-iii-data-structure-design.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TwoSum\\\\AKA_INSTANCE___TwoSum\\\\TwoSum()\");AKA_fCall++;AKA_INSTANCE___TwoSum = new ::TwoSum();\n/* VectorDataNode v */\nint AKA_INSTANCE___TwoSum_v_element0=-1594300510;\nAKA_INSTANCE___TwoSum->v.push_back(AKA_INSTANCE___TwoSum_v_element0);\nint AKA_INSTANCE___TwoSum_v_element1=1560431810;\nAKA_INSTANCE___TwoSum->v.push_back(AKA_INSTANCE___TwoSum_v_element1);\nint AKA_INSTANCE___TwoSum_v_element2=10892831;\nAKA_INSTANCE___TwoSum->v.push_back(AKA_INSTANCE___TwoSum_v_element2);\n\n\n\n\nint value=-1299032746;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode value */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test TwoSum_find_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___TwoSum->find(value);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p45\\\\170-two-sum-iii-data-structure-design\\\\170-two-sum-iii-data-structure-design.cpp\\\\TwoSum\\\\find(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class TwoSum {\r public:\r     \r     vector<int> v;\r     \r     TwoSum() {\r     \r         \r     }\r     \r     void add(int number) {\r     \r         v.push_back(number);\r         return;\r     }\r     \r     bool find(int value) {\r         \r         // Checks whether we are able to find two value whose sum is equal to value\r         sort(v.begin(), v.end());\r         \r         int i = 0, j = v.size() - 1;\r         \r         while(i < j) {\r             if(v[i] + v[j] == value)                                return true;\r             else if(v[i] + v[j] > value)                            j--;\r             else if(v[i] + v[j] < value)                            i++;                                        \r         }\r         \r         return false;\r     }\r     \r };",
        "c": [
            "TwoSum() {\r\n    \r\n        \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p45\\170-two-sum-iii-data-structure-design\\170-two-sum-iii-data-structure-design.cpp\\TwoSum\\find(int)"
    },
    {
        "f": [],
        "fm": "int eatenApples(vector<int>& apples, vector<int>& days) {\r     \r         int d = 1;\r         int time = 0;\r \r         // Form a Max Heap\r         priority_queue<pair<int, int>> pq;\t\t// 1st arg - rotten days, 2nd arg - No.of apples\r \r         for(int i=0; i<apples.size(); i++) {\r \r             pq.push({ -(d + days[i]), apples[i] });\r \r             while(pq.empty() == false && -pq.top().first <= d)                      pq.pop();\r \r             if(pq.size() >= 1) {\r \r                 pair<int, int> temp = pq.top();\r                 pq.pop();\r \r                 temp.second--;\r                 time++;\r \r                 if(temp.second >= 1)\t\t\t                                    pq.push(temp);\r             }\r \r             d++;\r         }\r \r         while(pq.empty() == false) {\r \r             while(pq.empty() == false && -pq.top().first <= d)                      pq.pop();\r \r             if(pq.size() >= 1) {\r \r                 pair<int, int> temp = pq.top();\r                 pq.pop();\r \r                 temp.second--;\r                 time++;\r \r                 if(temp.second >= 1)\t\t\t                                    pq.push(temp);\r             }\r \r             d++;\r         }\r \r         return time;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_eatenApples_vector_int_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_eatenApples_vector_int_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1705-maximum-number-of-eaten-apples.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> apples;\nvector<int> days;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode apples */\nint apples_element0=-1562360136;\napples.push_back(apples_element0);\nint apples_element1=224158154;\napples.push_back(apples_element1);\nint apples_element2=-1763681834;\napples.push_back(apples_element2);\n/* VectorDataNode days */\nint days_element0=1970223534;\ndays.push_back(days_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_eatenApples_vector_int_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->eatenApples(apples,days);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p45\\\\1705-maximum-number-of-eaten-apples\\\\1705-maximum-number-of-eaten-apples.cpp\\\\Solution\\\\eatenApples(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_apples;\n\nvector<int> EXPECTED_days;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_eatenApples_vector_int_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_eatenApples_vector_int_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1705-maximum-number-of-eaten-apples.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> apples;\nvector<int> days;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode apples */\nint apples_element0=-336050432;\napples.push_back(apples_element0);\n/* VectorDataNode days */\nint days_element0=-452437400;\ndays.push_back(days_element0);\nint days_element1=-697300777;\ndays.push_back(days_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_eatenApples_vector_int_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->eatenApples(apples,days);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p45\\\\1705-maximum-number-of-eaten-apples\\\\1705-maximum-number-of-eaten-apples.cpp\\\\Solution\\\\eatenApples(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_apples;\n\nvector<int> EXPECTED_days;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-959673596;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int eatenApples(vector<int>& apples, vector<int>& days) {\r     \r         int d = 1;\r         int time = 0;\r \r         // Form a Max Heap\r         priority_queue<pair<int, int>> pq;\t\t// 1st arg - rotten days, 2nd arg - No.of apples\r \r         for(int i=0; i<apples.size(); i++) {\r \r             pq.push({ -(d + days[i]), apples[i] });\r \r             while(pq.empty() == false && -pq.top().first <= d)                      pq.pop();\r \r             if(pq.size() >= 1) {\r \r                 pair<int, int> temp = pq.top();\r                 pq.pop();\r \r                 temp.second--;\r                 time++;\r \r                 if(temp.second >= 1)\t\t\t                                    pq.push(temp);\r             }\r \r             d++;\r         }\r \r         while(pq.empty() == false) {\r \r             while(pq.empty() == false && -pq.top().first <= d)                      pq.pop();\r \r             if(pq.size() >= 1) {\r \r                 pair<int, int> temp = pq.top();\r                 pq.pop();\r \r                 temp.second--;\r                 time++;\r \r                 if(temp.second >= 1)\t\t\t                                    pq.push(temp);\r             }\r \r             d++;\r         }\r \r         return time;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p45\\1705-maximum-number-of-eaten-apples\\1705-maximum-number-of-eaten-apples.cpp\\Solution\\eatenApples(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> largestSubarray(vector<int>& a, int k) {\r     \r         vector<int> res;\r         \r         // Find all subarrays of length k, and find the largest subarray\r         \r         int n = a.size();\r         \r         // Find the largest element in the range [0, n-k]\r         auto it = max_element(a.begin(), a.begin() + n - k + 1);\r         int index = it - a.begin();\r         \r         int ele = *it;\r         \r         // Now, the required subarray is from [index, index + k - 1]\r         for(int i=index; i<=index + k - 1; i++)                             res.push_back(a[i]);\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_largestSubarray_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_largestSubarray_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1708-largest-subarray-length-k.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\n\n\nint k=3;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=-2012304657;\na.push_back(a_element0);\nint a_element1=-2082368093;\na.push_back(a_element1);\nint a_element2=-1005725406;\na.push_back(a_element2);\n/* NormalNumberDataNode k */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_largestSubarray_vector_int_int_random_3\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->largestSubarray(a,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p45\\\\1708-largest-subarray-length-k\\\\1708-largest-subarray-length-k.cpp\\\\Solution\\\\largestSubarray(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_a;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     vector<int> largestSubarray(vector<int>& a, int k) {\r     \r         vector<int> res;\r         \r         // Find all subarrays of length k, and find the largest subarray\r         \r         int n = a.size();\r         \r         // Find the largest element in the range [0, n-k]\r         auto it = max_element(a.begin(), a.begin() + n - k + 1);\r         int index = it - a.begin();\r         \r         int ele = *it;\r         \r         // Now, the required subarray is from [index, index + k - 1]\r         for(int i=index; i<=index + k - 1; i++)                             res.push_back(a[i]);\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p45\\1708-largest-subarray-length-k\\1708-largest-subarray-length-k.cpp\\Solution\\largestSubarray(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int totalMoney(int n) {\r     \r         int ans = 0;\r         vector<int> a(n + 1);\r         \r         a[1] = 1;\r         \r         for(int i=2; i<=n; i++) {\r             \r             if(i >= 8 && i % 7 == 1)                a[i] = a[i - 7] + 1;\r             else                                    a[i] = a[i-1] + 1;\r         }\r         \r         for(auto &x : a)                            ans += x;\r         \r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_totalMoney_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_totalMoney_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1716-calculate-money-in-leetcode-bank.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_totalMoney_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->totalMoney(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p45\\\\1716-calculate-money-in-leetcode-bank\\\\1716-calculate-money-in-leetcode-bank.cpp\\\\Solution\\\\totalMoney(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int totalMoney(int n) {\r     \r         int ans = 0;\r         vector<int> a(n + 1);\r         \r         a[1] = 1;\r         \r         for(int i=2; i<=n; i++) {\r             \r             if(i >= 8 && i % 7 == 1)                a[i] = a[i - 7] + 1;\r             else                                    a[i] = a[i-1] + 1;\r         }\r         \r         for(auto &x : a)                            ans += x;\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p45\\1716-calculate-money-in-leetcode-bank\\1716-calculate-money-in-leetcode-bank.cpp\\Solution\\totalMoney(int)"
    }
]