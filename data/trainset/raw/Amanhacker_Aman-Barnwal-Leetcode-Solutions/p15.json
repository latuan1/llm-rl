[
    {
        "f": [],
        "fm": "TreeNode* sortedListToBST(ListNode* head, ListNode* tail = NULL) {\r     \r         if(head == tail)                                return NULL;\r         \r         ListNode* slow = head;\r         ListNode* fast = head;\r         \r         while(fast != tail && fast->next != tail) {\r             slow = slow->next;\r             fast = fast->next->next;\r         }\r         \r         // Here, slow pointer leads to mid node of Linked List\r         \r         TreeNode* root = new TreeNode(slow->val);\r         \r         root->left = sortedListToBST(head, slow);\r         root->right = sortedListToBST(slow->next, tail);\r         \r         return root;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_sortedListToBST_ListNodemul_ListNodemulequal_random_4(void) {\n{\nAKA_test_case_name=\"Solution_sortedListToBST_ListNodemul_ListNodemulequal_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=151468449;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* tail;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode tail */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedListToBST_ListNodemul_ListNodemulequal_random_4\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedListToBST(head,tail);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\Solution\\\\sortedListToBST(ListNode*,ListNode*=)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=151468449;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* tail;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode tail */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     TreeNode* sortedListToBST(ListNode* head, ListNode* tail = NULL) {\r     \r         if(head == tail)                                return NULL;\r         \r         ListNode* slow = head;\r         ListNode* fast = head;\r         \r         while(fast != tail && fast->next != tail) {\r             slow = slow->next;\r             fast = fast->next->next;\r         }\r         \r         // Here, slow pointer leads to mid node of Linked List\r         \r         TreeNode* root = new TreeNode(slow->val);\r         \r         root->left = sortedListToBST(head, slow);\r         root->right = sortedListToBST(slow->next, tail);\r         \r         return root;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p15\\109-convert-sorted-list-to-binary-search-tree\\109-convert-sorted-list-to-binary-search-tree.cpp\\Solution\\sortedListToBST(ListNode*,ListNode*=)"
    },
    {
        "f": [],
        "fm": "bool carPooling(vector<vector<int>>& trips, int cap) {\r     \r         int n = trips.size();\r         using pi = pair<int, int>;                          // 1st arg - location, 2nd arg - no.of persons\r             \r         priority_queue<pi, vector<pi>, greater<pi>> pq;\r         unordered_map<int, int> u;                          // 1st arg - location, 2nd arg - no.of persons at this location\r         \r         for(auto &x : trips) {\r             \r             int from = x[1];\r             int to = x[2];\r             \r             for(int i=from; i<to; i++)                     u[i] += x[0];\r         }\r         \r         for(auto &x : u)                                    pq.push({x.first, x.second});\r         \r         while(pq.empty() == false) {\r             \r             pi temp = pq.top();\r             pq.pop();\r             \r             if(temp.second > cap)                           return false;\r         }\r         \r         return true;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_carPooling_vector_vector_int_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_carPooling_vector_vector_int_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_carPooling_vector_vector_int_int_directed_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->carPooling(trips,cap);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1094-car-pooling\\\\1094-car-pooling.cpp\\\\Solution\\\\carPooling(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_trips;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=151468449;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* tail;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode tail */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_carPooling_vector_vector_int_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_carPooling_vector_vector_int_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_carPooling_vector_vector_int_int_directed_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->carPooling(trips,cap);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1094-car-pooling\\\\1094-car-pooling.cpp\\\\Solution\\\\carPooling(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_trips;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_carPooling_vector_vector_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_carPooling_vector_vector_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_carPooling_vector_vector_int_int_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->carPooling(trips,cap);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1094-car-pooling\\\\1094-car-pooling.cpp\\\\Solution\\\\carPooling(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_trips;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_carPooling_vector_vector_int_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_carPooling_vector_vector_int_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=-1;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_carPooling_vector_vector_int_int_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->carPooling(trips,cap);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1094-car-pooling\\\\1094-car-pooling.cpp\\\\Solution\\\\carPooling(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_trips;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_carPooling_vector_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_carPooling_vector_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=916676897;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\nvector<int> trips_element0;\nint trips_element0_element0=1784250308;\ntrips_element0.push_back(trips_element0_element0);\nint trips_element0_element1=525935271;\ntrips_element0.push_back(trips_element0_element1);\nint trips_element0_element2=-321443250;\ntrips_element0.push_back(trips_element0_element2);\ntrips.push_back(trips_element0);\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_carPooling_vector_vector_int_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->carPooling(trips,cap);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1094-car-pooling\\\\1094-car-pooling.cpp\\\\Solution\\\\carPooling(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_trips;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=-1;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     bool carPooling(vector<vector<int>>& trips, int cap) {\r     \r         int n = trips.size();\r         using pi = pair<int, int>;                          // 1st arg - location, 2nd arg - no.of persons\r             \r         priority_queue<pi, vector<pi>, greater<pi>> pq;\r         unordered_map<int, int> u;                          // 1st arg - location, 2nd arg - no.of persons at this location\r         \r         for(auto &x : trips) {\r             \r             int from = x[1];\r             int to = x[2];\r             \r             for(int i=from; i<to; i++)                     u[i] += x[0];\r         }\r         \r         for(auto &x : u)                                    pq.push({x.first, x.second});\r         \r         while(pq.empty() == false) {\r             \r             pi temp = pq.top();\r             pq.pop();\r             \r             if(temp.second > cap)                           return false;\r         }\r         \r         return true;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p15\\1094-car-pooling\\1094-car-pooling.cpp\\Solution\\carPooling(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "int twoSumLessThanK(vector<int>& a, int k) {\r     \r         int sum = -1;\r         int n = a.size();\r         \r         sort(a.begin(), a.end());\r         \r         for(int i=0, j=n-1; i<j; ) {\r                 \r             if(a[i] + a[j] < k) {\r                sum = max(sum, a[i] + a[j]);\r                i++;\r             }   \r             else                                        j--;\r         }\r         \r         return sum;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_twoSumLessThanK_vector_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_twoSumLessThanK_vector_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1099-two-sum-less-than-k.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\n\n\nint k=206890036;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=-272402627;\na.push_back(a_element0);\nint a_element1=-1628418973;\na.push_back(a_element1);\nint a_element2=1047482022;\na.push_back(a_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_twoSumLessThanK_vector_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->twoSumLessThanK(a,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1099-two-sum-less-than-k\\\\1099-two-sum-less-than-k.cpp\\\\Solution\\\\twoSumLessThanK(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_a;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=151468449;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* tail;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode tail */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_twoSumLessThanK_vector_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_twoSumLessThanK_vector_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1099-two-sum-less-than-k.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\n\n\nint k=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_twoSumLessThanK_vector_int_int_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->twoSumLessThanK(a,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1099-two-sum-less-than-k\\\\1099-two-sum-less-than-k.cpp\\\\Solution\\\\twoSumLessThanK(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_a;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1094-car-pooling.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> trips;\n\n\nint cap=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode trips */\n/* NormalNumberDataNode cap */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int twoSumLessThanK(vector<int>& a, int k) {\r     \r         int sum = -1;\r         int n = a.size();\r         \r         sort(a.begin(), a.end());\r         \r         for(int i=0, j=n-1; i<j; ) {\r                 \r             if(a[i] + a[j] < k) {\r                sum = max(sum, a[i] + a[j]);\r                i++;\r             }   \r             else                                        j--;\r         }\r         \r         return sum;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p15\\1099-two-sum-less-than-k\\1099-two-sum-less-than-k.cpp\\Solution\\twoSumLessThanK(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int height(TreeNode* root) {\r         \r         int h = 0;\r         \r         if(root == NULL)                            return h;\r         \r         return 1 + max(height(root->left), height(root->right));       \r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_height_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_height_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\110-balanced-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=298226998;\nAKA_mark(\"Calling: .\\\\p15\\\\110-balanced-binary-tree\\\\110-balanced-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\110-balanced-binary-tree.cpp\\\\height(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1937977882;\nAKA_mark(\"Calling: .\\\\p15\\\\110-balanced-binary-tree\\\\110-balanced-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\110-balanced-binary-tree.cpp\\\\height(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\n/* PointerStructureDataNode left */\nTreeNode* root0_left1_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left1_right;\nAKA_mark(\"Calling: .\\\\p15\\\\110-balanced-binary-tree\\\\110-balanced-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\110-balanced-binary-tree.cpp\\\\height(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x,root0_left1_left,root0_left1_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\n/* PointerStructureDataNode left */\nTreeNode* root0_left2_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left2_right;\nAKA_mark(\"Calling: .\\\\p15\\\\110-balanced-binary-tree\\\\110-balanced-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\110-balanced-binary-tree.cpp\\\\height(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x,root0_left2_left,root0_left2_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root1_x=-1635303103;\n/* PointerStructureDataNode left */\nTreeNode* root1_left;\n/* PointerStructureDataNode right */\nTreeNode* root1_right;\nAKA_mark(\"Calling: .\\\\p15\\\\110-balanced-binary-tree\\\\110-balanced-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\110-balanced-binary-tree.cpp\\\\height(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x,root1_left,root1_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_height_TreeNodemul_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->height(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\110-balanced-binary-tree\\\\110-balanced-binary-tree.cpp\\\\Solution\\\\height(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=151468449;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* tail;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode tail */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     int height(TreeNode* root) {\r         \r         int h = 0;\r         \r         if(root == NULL)                            return h;\r         \r         return 1 + max(height(root->left), height(root->right));       \r     }\r     \r     bool isBalanced(TreeNode* root) {\r     \r         if(root == NULL)                            return true;\r         \r         return abs(height(root->left) - height(root->right)) <= 1 && isBalanced(root->left) && isBalanced(root->right);\r         \r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p15\\110-balanced-binary-tree\\110-balanced-binary-tree.cpp\\Solution\\height(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int numKLenSubstrNoRepeats(string s, int k) {\r     \r         int res = 0;\r         \r         int n = s.length();\r         vector<string> v;\r         \r         for(int i=0; i<=n-k; i++) {\r             \r             // Substring is from [i, i+k-1]\r             string temp = s.substr(i, k);\r             \r             // Check whether there is not characters\r             set<char> w;\r             bool flag = true;\r             \r             for(auto &x : temp) {\r                 \r                 if(w.find(x) != w.end()) {\r                     flag = false;\r                     break;\r                 }\r                 \r                 else                            w.insert(x);\r             }\r             \r             if(flag == true)                    res++;\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numKLenSubstrNoRepeats_string_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_numKLenSubstrNoRepeats_string_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1100-find-k-length-substrings-with-no-repeated-characters.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName788776 = new char[2];akaRandomName788776[0] = 36;akaRandomName788776[1] = '\\0';string s=akaRandomName788776;\n\n\nint k=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numKLenSubstrNoRepeats_string_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numKLenSubstrNoRepeats(s,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p15\\\\1100-find-k-length-substrings-with-no-repeated-characters\\\\1100-find-k-length-substrings-with-no-repeated-characters.cpp\\\\Solution\\\\numKLenSubstrNoRepeats(string,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int,ListNode*) */\n/* NormalNumberDataNode x */\nint head0_x=151468449;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head0_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head0_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head0_next_0).next;\nAKA_VECTOR_INIT_head0_next.push_back(AKA_VECTOR_INIT_head0_next_0);\nListNode* head0_next = AKA_VECTOR_INIT_head0_next[0];\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode(int,ListNode*)|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int,ListNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x,head0_next);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: .\\\\p15\\\\109-convert-sorted-list-to-binary-search-tree\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\109-convert-sorted-list-to-binary-search-tree.cpp\\\\sortedListToBST(ListNode*,ListNode*=)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* tail;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode tail */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int numKLenSubstrNoRepeats(string s, int k) {\r     \r         int res = 0;\r         \r         int n = s.length();\r         vector<string> v;\r         \r         for(int i=0; i<=n-k; i++) {\r             \r             // Substring is from [i, i+k-1]\r             string temp = s.substr(i, k);\r             \r             // Check whether there is not characters\r             set<char> w;\r             bool flag = true;\r             \r             for(auto &x : temp) {\r                 \r                 if(w.find(x) != w.end()) {\r                     flag = false;\r                     break;\r                 }\r                 \r                 else                            w.insert(x);\r             }\r             \r             if(flag == true)                    res++;\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p15\\1100-find-k-length-substrings-with-no-repeated-characters\\1100-find-k-length-substrings-with-no-repeated-characters.cpp\\Solution\\numKLenSubstrNoRepeats(string,int)"
    }
]