[
    {
        "f": [
            "queue<int> q1;",
            "queue<int> q2;"
        ],
        "fm": "void push(int x) {\r         \r         while(q2.empty() == false)                                  q2.pop();\r         \r         q2.push(x);\r         \r         // Now, push the all elements of q1\r         while(q1.empty() == false) {\r             q2.push(q1.front());\r             q1.pop();\r         }\r         \r         // Now, q2 becomes our stack\r         q1 = q2;\r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_MyStack_push_int_random_0(void) {\n{\nAKA_test_case_name=\"MyStack_push_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test MyStack_push_int_random_0\");AKA_INSTANCE___MyStack->push(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\push(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class MyStack {\r public:\r    \r     queue<int> q1, q2;\r     \r     MyStack() {\r     \r         \r     }\r     \r     void push(int x) {\r         \r         while(q2.empty() == false)                                  q2.pop();\r         \r         q2.push(x);\r         \r         // Now, push the all elements of q1\r         while(q1.empty() == false) {\r             q2.push(q1.front());\r             q1.pop();\r         }\r         \r         // Now, q2 becomes our stack\r         q1 = q2;\r         \r         return;\r     }\r     \r     int pop() {\r         \r         int top = q1.front();\r         q1.pop();\r         \r         return top;\r     }\r     \r     int top() {\r         \r         int top = q1.front();\r         return top;\r     }\r     \r     bool empty() {\r         \r         return (q1.empty() == true);\r     }\r                                                                                                                                                                                  \r };",
        "c": [
            "MyStack() {\r\n    \r\n        \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\225-implement-stack-using-queues\\225-implement-stack-using-queues.cpp\\MyStack\\push(int)"
    },
    {
        "f": [
            "queue<int> q1;",
            "queue<int> q2;"
        ],
        "fm": "int pop() {\r         \r         int top = q1.front();\r         q1.pop();\r         \r         return top;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_MyStack_pop_random_0(void) {\n{\nAKA_test_case_name=\"MyStack_pop_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=-981407064;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test MyStack_pop_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___MyStack->pop();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\pop()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class MyStack {\r public:\r    \r     queue<int> q1, q2;\r     \r     MyStack() {\r     \r         \r     }\r     \r     void push(int x) {\r         \r         while(q2.empty() == false)                                  q2.pop();\r         \r         q2.push(x);\r         \r         // Now, push the all elements of q1\r         while(q1.empty() == false) {\r             q2.push(q1.front());\r             q1.pop();\r         }\r         \r         // Now, q2 becomes our stack\r         q1 = q2;\r         \r         return;\r     }\r     \r     int pop() {\r         \r         int top = q1.front();\r         q1.pop();\r         \r         return top;\r     }\r     \r     int top() {\r         \r         int top = q1.front();\r         return top;\r     }\r     \r     bool empty() {\r         \r         return (q1.empty() == true);\r     }\r                                                                                                                                                                                  \r };",
        "c": [
            "MyStack() {\r\n    \r\n        \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\225-implement-stack-using-queues\\225-implement-stack-using-queues.cpp\\MyStack\\pop()"
    },
    {
        "f": [
            "queue<int> q1;",
            "queue<int> q2;"
        ],
        "fm": "bool empty() {\r         \r         return (q1.empty() == true);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_MyStack_empty_random_0(void) {\n{\nAKA_test_case_name=\"MyStack_empty_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=1818122194;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\nint AKA_INSTANCE___MyStack_q1_element2=1907297116;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element2);\n/* QueueDataNode q2 */\n\n\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test MyStack_empty_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___MyStack->empty();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\empty()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class MyStack {\r public:\r    \r     queue<int> q1, q2;\r     \r     MyStack() {\r     \r         \r     }\r     \r     void push(int x) {\r         \r         while(q2.empty() == false)                                  q2.pop();\r         \r         q2.push(x);\r         \r         // Now, push the all elements of q1\r         while(q1.empty() == false) {\r             q2.push(q1.front());\r             q1.pop();\r         }\r         \r         // Now, q2 becomes our stack\r         q1 = q2;\r         \r         return;\r     }\r     \r     int pop() {\r         \r         int top = q1.front();\r         q1.pop();\r         \r         return top;\r     }\r     \r     int top() {\r         \r         int top = q1.front();\r         return top;\r     }\r     \r     bool empty() {\r         \r         return (q1.empty() == true);\r     }\r                                                                                                                                                                                  \r };",
        "c": [
            "MyStack() {\r\n    \r\n        \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\225-implement-stack-using-queues\\225-implement-stack-using-queues.cpp\\MyStack\\empty()"
    },
    {
        "f": [],
        "fm": "TreeNode* invertTreeHelper(TreeNode* &root) {\r         \r         if(root == NULL)                        return root;\r         \r         // Change left and right subtree interchangeably\r         swap(root->left, root->right);\r         \r         invertTreeHelper(root->left);\r         invertTreeHelper(root->right);\r         \r         return root;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_invertTreeHelper_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_invertTreeHelper_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\226-invert-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTreeHelper(TreeNode*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTreeHelper(TreeNode*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTreeHelper(TreeNode*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\n/* PointerStructureDataNode left */\nTreeNode* root0_left2_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left2_right;\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTreeHelper(TreeNode*&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x,root0_left2_left,root0_left2_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root1_x=157154660;\n/* PointerStructureDataNode left */\nTreeNode* root1_left;\n/* PointerStructureDataNode right */\nTreeNode* root1_right;\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTreeHelper(TreeNode*&)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x,root1_left,root1_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root2_x=1709769114;\n/* PointerStructureDataNode left */\nTreeNode* root2_left;\n/* PointerStructureDataNode right */\nTreeNode* root2_right;\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTreeHelper(TreeNode*&)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x,root2_left,root2_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_invertTreeHelper_TreeNodemul_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->invertTreeHelper(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\Solution\\\\invertTreeHelper(TreeNode*&)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     TreeNode* invertTreeHelper(TreeNode* &root) {\r         \r         if(root == NULL)                        return root;\r         \r         // Change left and right subtree interchangeably\r         swap(root->left, root->right);\r         \r         invertTreeHelper(root->left);\r         invertTreeHelper(root->right);\r         \r         return root;\r     }\r     \r     TreeNode* invertTree(TreeNode* root) {\r     \r         if(root == NULL)                        return root;\r         \r         // Invert the binary tree\r         \r         invertTreeHelper(root);\r         return root;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\226-invert-binary-tree\\226-invert-binary-tree.cpp\\Solution\\invertTreeHelper(TreeNode*&)"
    },
    {
        "f": [],
        "fm": "TreeNode* invertTree(TreeNode* root) {\r     \r         if(root == NULL)                        return root;\r         \r         // Invert the binary tree\r         \r         invertTreeHelper(root);\r         return root;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_invertTree_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_invertTree_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\226-invert-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\226-invert-binary-tree.cpp\\\\invertTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_invertTree_TreeNodemul_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->invertTree(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\226-invert-binary-tree\\\\226-invert-binary-tree.cpp\\\\Solution\\\\invertTree(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     TreeNode* invertTreeHelper(TreeNode* &root) {\r         \r         if(root == NULL)                        return root;\r         \r         // Change left and right subtree interchangeably\r         swap(root->left, root->right);\r         \r         invertTreeHelper(root->left);\r         invertTreeHelper(root->right);\r         \r         return root;\r     }\r     \r     TreeNode* invertTree(TreeNode* root) {\r     \r         if(root == NULL)                        return root;\r         \r         // Invert the binary tree\r         \r         invertTreeHelper(root);\r         return root;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\226-invert-binary-tree\\226-invert-binary-tree.cpp\\Solution\\invertTree(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int totalSum(TreeNode* root, unordered_map<TreeNode*, int> &subtreeSum, vector<TreeNode*> &w) {\r         \r         if(root == NULL)                    return 0;\r         \r         w.push_back(root);\r         \r         subtreeSum[root] = root->val + totalSum(root->left, subtreeSum, w) \r                             + totalSum(root->right, subtreeSum, w);\r         \r         return subtreeSum[root];\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_totalSum_TreeNodemul_unordered_map_TreeNodemul_int_vector_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_totalSum_TreeNodemul_unordered_map_TreeNodemul_int_vector_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-989177486;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-1615927772;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=34623806;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1922929590;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-555174492;\n/* PointerStructureDataNode left */\nTreeNode* root1_right0_left;\n/* PointerStructureDataNode right */\nTreeNode* root1_right0_right;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x,root1_right0_left,root1_right0_right);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1710873661;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=695771700;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=-14372106;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=-703923059;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=-30630039;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root2_left1_x=-1843310816;\n/* PointerStructureDataNode left */\nTreeNode* root2_left1_left;\n/* PointerStructureDataNode right */\nTreeNode* root2_left1_right;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_1 = new ::TreeNode(root2_left1_x,root2_left1_left,root2_left1_right);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).val=-1954619668;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_1);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=1266764479;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=1307300896;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right1_x=-1392880938;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_1 = new ::TreeNode(root2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).val=-1498009700;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root2_right2_x=1648546458;\n/* PointerStructureDataNode left */\nTreeNode* root2_right2_left;\n/* PointerStructureDataNode right */\nTreeNode* root2_right2_right;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_2 = new ::TreeNode(root2_right2_x,root2_right2_left,root2_right2_right);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).val=-111156297;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_2);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nunordered_map<TreeNode*, int> subtreeSum;\nvector<TreeNode*> w;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* UnorderedMapDataNode subtreeSum */\n/* VectorDataNode w */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_w_element0;\n/* SubStructDataNode  */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: C:\\\\Users\\\\daidu\\\\Desktop\\\\Projects\\\\AKAUT\\\\prj-data\\\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\w\\\\element #0\\\\element #0[0]\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_w_element0_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_w_element0_0).val=-94863732;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_w_element0_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: C:\\\\Users\\\\daidu\\\\Desktop\\\\Projects\\\\AKAUT\\\\prj-data\\\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\w\\\\element #0\\\\element #0[0]\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_w_element0_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_0).val=-675714507;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_0).right;\nAKA_VECTOR_INIT_w_element0_0_DOT_left.push_back(AKA_VECTOR_INIT_w_element0_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint w_element00_left1_x=-653654281;\nAKA_mark(\"Calling: C:\\\\Users\\\\daidu\\\\Desktop\\\\Projects\\\\AKAUT\\\\prj-data\\\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\w\\\\element #0\\\\element #0[0]\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_w_element0_0_DOT_left_1 = new ::TreeNode(w_element00_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_1).val=-1371548520;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_1).right;\nAKA_VECTOR_INIT_w_element0_0_DOT_left.push_back(AKA_VECTOR_INIT_w_element0_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint w_element00_left2_x=-1859297629;\nAKA_mark(\"Calling: C:\\\\Users\\\\daidu\\\\Desktop\\\\Projects\\\\AKAUT\\\\prj-data\\\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\w\\\\element #0\\\\element #0[0]\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_w_element0_0_DOT_left_2 = new ::TreeNode(w_element00_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_2).val=-1407171328;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_left_2).right;\nAKA_VECTOR_INIT_w_element0_0_DOT_left.push_back(AKA_VECTOR_INIT_w_element0_0_DOT_left_2);\n(*AKA_VECTOR_INIT_w_element0_0).left = AKA_VECTOR_INIT_w_element0_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_w_element0_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: C:\\\\Users\\\\daidu\\\\Desktop\\\\Projects\\\\AKAUT\\\\prj-data\\\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\\\\w\\\\element #0\\\\element #0[0]\\\\right\\\\right[0]\\\\right\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_w_element0_0_DOT_right_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_right_0).val=-405043883;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_w_element0_0_DOT_right_0).right;\nAKA_VECTOR_INIT_w_element0_0_DOT_right.push_back(AKA_VECTOR_INIT_w_element0_0_DOT_right_0);\n(*AKA_VECTOR_INIT_w_element0_0).right = AKA_VECTOR_INIT_w_element0_0_DOT_right[0];\nAKA_VECTOR_INIT_w_element0.push_back(AKA_VECTOR_INIT_w_element0_0);\nTreeNode* w_element0 = AKA_VECTOR_INIT_w_element0[0];\nw.push_back(w_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_totalSum_TreeNodemul_unordered_map_TreeNodemul_int_vector_TreeNodemul_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->totalSum(root,subtreeSum,w);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\Solution\\\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)\");\n\n\nunordered_map<TreeNode*, int> EXPECTED_subtreeSum;\n\nvector<TreeNode*> EXPECTED_w;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int countNodes(TreeNode* root, unordered_map<TreeNode*, int> &subtreeSize) {\r         \r         if(root == NULL)                    return 0;\r         \r         subtreeSize[root] = 1 + countNodes(root->left, subtreeSize) \r                             + countNodes(root->right, subtreeSize);\r         \r         return subtreeSize[root];\r     }\r \r     int totalSum(TreeNode* root, unordered_map<TreeNode*, int> &subtreeSum, vector<TreeNode*> &w) {\r         \r         if(root == NULL)                    return 0;\r         \r         w.push_back(root);\r         \r         subtreeSum[root] = root->val + totalSum(root->left, subtreeSum, w) \r                             + totalSum(root->right, subtreeSum, w);\r         \r         return subtreeSum[root];\r     }\r     \r     int averageOfSubtree(TreeNode* root) {\r     \r         int ans = 0;\r         \r         if(root == NULL)                                        return ans;\r         \r         unordered_map<TreeNode*, int> subtreeSize, subtreeSum;\r         countNodes(root, subtreeSize);\r         \r         vector<TreeNode*> w;\r         totalSum(root, subtreeSum, w);\r         \r         for(auto &node : w) {\r             if((int)(subtreeSum[node] / subtreeSize[node]) == node->val)                 ans++;\r         }\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\2265-count-nodes-equal-to-average-of-subtree\\2265-count-nodes-equal-to-average-of-subtree.cpp\\Solution\\totalSum(TreeNode*,unordered_map<TreeNode*,int>&,vector<TreeNode*>&)"
    },
    {
        "f": [],
        "fm": "int averageOfSubtree(TreeNode* root) {\r     \r         int ans = 0;\r         \r         if(root == NULL)                                        return ans;\r         \r         unordered_map<TreeNode*, int> subtreeSize, subtreeSum;\r         countNodes(root, subtreeSize);\r         \r         vector<TreeNode*> w;\r         totalSum(root, subtreeSum, w);\r         \r         for(auto &node : w) {\r             if((int)(subtreeSum[node] / subtreeSize[node]) == node->val)                 ans++;\r         }\r         \r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_averageOfSubtree_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_averageOfSubtree_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2071983678;\nAKA_mark(\"Calling: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\averageOfSubtree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_averageOfSubtree_TreeNodemul_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->averageOfSubtree(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\2265-count-nodes-equal-to-average-of-subtree\\\\2265-count-nodes-equal-to-average-of-subtree.cpp\\\\Solution\\\\averageOfSubtree(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int countNodes(TreeNode* root, unordered_map<TreeNode*, int> &subtreeSize) {\r         \r         if(root == NULL)                    return 0;\r         \r         subtreeSize[root] = 1 + countNodes(root->left, subtreeSize) \r                             + countNodes(root->right, subtreeSize);\r         \r         return subtreeSize[root];\r     }\r \r     int totalSum(TreeNode* root, unordered_map<TreeNode*, int> &subtreeSum, vector<TreeNode*> &w) {\r         \r         if(root == NULL)                    return 0;\r         \r         w.push_back(root);\r         \r         subtreeSum[root] = root->val + totalSum(root->left, subtreeSum, w) \r                             + totalSum(root->right, subtreeSum, w);\r         \r         return subtreeSum[root];\r     }\r     \r     int averageOfSubtree(TreeNode* root) {\r     \r         int ans = 0;\r         \r         if(root == NULL)                                        return ans;\r         \r         unordered_map<TreeNode*, int> subtreeSize, subtreeSum;\r         countNodes(root, subtreeSize);\r         \r         vector<TreeNode*> w;\r         totalSum(root, subtreeSum, w);\r         \r         for(auto &node : w) {\r             if((int)(subtreeSum[node] / subtreeSize[node]) == node->val)                 ans++;\r         }\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\2265-count-nodes-equal-to-average-of-subtree\\2265-count-nodes-equal-to-average-of-subtree.cpp\\Solution\\averageOfSubtree(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int calculate(string s) {\r     \r         int res = 0;\r         int n = s.length();\r \r         if(n == 0)                                      return 0;\r         \r         int curNo = 0;\r         char op = '+';\r         \r         stack<int> w;\r         \r         for(int i=0; i<n; i++) {\r             \r             if(isdigit(s[i]))                            curNo = (curNo * 10) + (s[i] - '0');\r             \r             if(!isdigit(s[i]) && !iswspace(s[i]) || i == n-1) {\r                 \r                 if(op == '-')                            w.push(-curNo);\r                 else if(op == '+')                       w.push(curNo);\r                 \r                 else if(op == '*') {\r                     \r                     int top = w.top();\r                     w.pop();\r                     \r                     w.push(top * curNo);\r                 }\r                 \r                 else if(op == '/') {\r                     \r                     int top = w.top();\r                     w.pop();\r                     \r                     w.push(top / curNo);\r                 }\r                 \r                 op = s[i];\r                 curNo = 0;\r             }\r         }\r         \r         while(w.empty() == false) {\r             res += w.top();\r             w.pop();\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_calculate_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_calculate_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\227-basic-calculator-ii.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName182137 = new char[2];akaRandomName182137[0] = 73;akaRandomName182137[1] = '\\0';string s=akaRandomName182137;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_calculate_string_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->calculate(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\227-basic-calculator-ii\\\\227-basic-calculator-ii.cpp\\\\Solution\\\\calculate(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   \r     int calculate(string s) {\r     \r         int res = 0;\r         int n = s.length();\r \r         if(n == 0)                                      return 0;\r         \r         int curNo = 0;\r         char op = '+';\r         \r         stack<int> w;\r         \r         for(int i=0; i<n; i++) {\r             \r             if(isdigit(s[i]))                            curNo = (curNo * 10) + (s[i] - '0');\r             \r             if(!isdigit(s[i]) && !iswspace(s[i]) || i == n-1) {\r                 \r                 if(op == '-')                            w.push(-curNo);\r                 else if(op == '+')                       w.push(curNo);\r                 \r                 else if(op == '*') {\r                     \r                     int top = w.top();\r                     w.pop();\r                     \r                     w.push(top * curNo);\r                 }\r                 \r                 else if(op == '/') {\r                     \r                     int top = w.top();\r                     w.pop();\r                     \r                     w.push(top / curNo);\r                 }\r                 \r                 op = s[i];\r                 curNo = 0;\r             }\r         }\r         \r         while(w.empty() == false) {\r             res += w.top();\r             w.pop();\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\227-basic-calculator-ii\\227-basic-calculator-ii.cpp\\Solution\\calculate(string)"
    },
    {
        "f": [],
        "fm": "long long maximumImportance(int n, vector<vector<int>>& roads) {\r     \r         long long score = 0;\r         unordered_map<int, vector<int>> adj;\r         \r         vector<int> degree(n, 0);\r         \r         for(auto &x : roads) {\r             \r             adj[x[0]].push_back(x[1]);\r             adj[x[1]].push_back(x[0]);\r             \r             degree[x[0]]++;\r             degree[x[1]]++;\r         }        \r         \r         // Assign a number from [1, n] to each city\r         \r         // 1st arg - degree, 2nd arg - city\r         vector<pair<int, int>> nodes;\r         \r         for(int i=0; i<n; i++) {\r             nodes.push_back({degree[i], i});    \r         }\r         \r         // Sorting the cities in order of decreasing degrees\r         sort(nodes.begin(), nodes.end(), greater<pair<int, int>>());\r         \r         vector<int> importance(n, 0);\r         int k = n;\r         \r         for(int i=0; i<n; i++) {\r             int curCity = nodes[i].second;\r             importance[curCity] = k--;\r         }\r         \r         for(auto &x : roads) {\r             score += importance[x[0]] + importance[x[1]];\r         }\r         \r         return score;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maximumImportance_int_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maximumImportance_int_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2285-maximum-total-importance-of-roads.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\nvector<vector<int>> roads;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode roads */\nvector<int> roads_element0;\nint roads_element0_element0=1802395340;\nroads_element0.push_back(roads_element0_element0);\nroads.push_back(roads_element0);\nvector<int> roads_element1;\nint roads_element1_element0=1248785824;\nroads_element1.push_back(roads_element1_element0);\nint roads_element1_element1=1076238166;\nroads_element1.push_back(roads_element1_element1);\nroads.push_back(roads_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumImportance_int_vector_vector_int_random_1\");long long AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumImportance(n,roads);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p71\\\\2285-maximum-total-importance-of-roads\\\\2285-maximum-total-importance-of-roads.cpp\\\\Solution\\\\maximumImportance(int,vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_roads;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r    \r     long long maximumImportance(int n, vector<vector<int>>& roads) {\r     \r         long long score = 0;\r         unordered_map<int, vector<int>> adj;\r         \r         vector<int> degree(n, 0);\r         \r         for(auto &x : roads) {\r             \r             adj[x[0]].push_back(x[1]);\r             adj[x[1]].push_back(x[0]);\r             \r             degree[x[0]]++;\r             degree[x[1]]++;\r         }        \r         \r         // Assign a number from [1, n] to each city\r         \r         // 1st arg - degree, 2nd arg - city\r         vector<pair<int, int>> nodes;\r         \r         for(int i=0; i<n; i++) {\r             nodes.push_back({degree[i], i});    \r         }\r         \r         // Sorting the cities in order of decreasing degrees\r         sort(nodes.begin(), nodes.end(), greater<pair<int, int>>());\r         \r         vector<int> importance(n, 0);\r         int k = n;\r         \r         for(int i=0; i<n; i++) {\r             int curCity = nodes[i].second;\r             importance[curCity] = k--;\r         }\r         \r         for(auto &x : roads) {\r             score += importance[x[0]] + importance[x[1]];\r         }\r         \r         return score;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p71\\2285-maximum-total-importance-of-roads\\2285-maximum-total-importance-of-roads.cpp\\Solution\\maximumImportance(int,vector<vector<int>>&)"
    }
]