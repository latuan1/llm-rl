[
    {
        "f": [],
        "fm": "vector<int> majorityElement(vector<int>& nums) {         vector<int> result;         set<int> s;         map<int, int> m;         int n = nums.size();         for(int i = 0; i < n; i++) {             m[nums[i]]++;             if(m[nums[i]] > n / 3)                 s.insert(nums[i]);         }         for(auto it = s.begin(); it != s.end(); it++)             result.push_back(*it);         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_majorityElement_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_majorityElement_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/229. Majority Element II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=42268008;\nnums.push_back(nums_element0);\nint nums_element1=-549949666;\nnums.push_back(nums_element1);\nint nums_element2=-1118696330;\nnums.push_back(nums_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_majorityElement_vector_int_random_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->majorityElement(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./32/229. Majority Element II.cpp/Solution/majorityElement(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/229. Majority Element II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=42268008;\nnums.push_back(nums_element0);\nint nums_element1=-549949666;\nnums.push_back(nums_element1);\nint nums_element2=-1118696330;\nnums.push_back(nums_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_majorityElement_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_majorityElement_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/229. Majority Element II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-214810892;\nnums.push_back(nums_element0);\nint nums_element1=-1471355920;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_majorityElement_vector_int_random_1\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->majorityElement(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./32/229. Majority Element II.cpp/Solution/majorityElement(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/229. Majority Element II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-214810892;\nnums.push_back(nums_element0);\nint nums_element1=-1471355920;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> majorityElement(vector<int>& nums) {         vector<int> result;         set<int> s;         map<int, int> m;         int n = nums.size();         for(int i = 0; i < n; i++) {             m[nums[i]]++;             if(m[nums[i]] > n / 3)                 s.insert(nums[i]);         }         for(auto it = s.begin(); it != s.end(); it++)             result.push_back(*it);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/229. Majority Element II.cpp/Solution/majorityElement(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool isPowerOfTwo(int n) {         if(n <= 0)             return false;         while(n != 1) {             if(n % 2 == 0) {                 n = n / 2;             } else {                 return false;             }         }         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPowerOfTwo_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isPowerOfTwo_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/231. Power of Two.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPowerOfTwo_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPowerOfTwo(n);\nAKA_fCall++;AKA_mark(\"Return from: ./32/231. Power of Two.cpp/Solution/isPowerOfTwo(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/231. Power of Two.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPowerOfTwo_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isPowerOfTwo_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/231. Power of Two.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=4;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPowerOfTwo_int_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPowerOfTwo(n);\nAKA_fCall++;AKA_mark(\"Return from: ./32/231. Power of Two.cpp/Solution/isPowerOfTwo(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/231. Power of Two.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=4;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isPowerOfTwo(int n) {         if(n <= 0)             return false;         while(n != 1) {             if(n % 2 == 0) {                 n = n / 2;             } else {                 return false;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/231. Power of Two.cpp/Solution/isPowerOfTwo(int)"
    },
    {
        "f": [],
        "fm": "ListNode* func(ListNode* head) {         if(head->next != NULL) {             ListNode *tail = func(head->next);             tail->next = head;             head->next = NULL;         }         return head;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_func_ListNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_func_ListNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=35176281;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-226120322;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=137701079;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=1539460539;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_func_ListNodemul_random_2\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->func(head);\nAKA_fCall++;AKA_mark(\"Return from: ./32/234. Palindrome Linked List.cpp/Solution/func(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=35176281;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-226120322;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=137701079;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=1539460539;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/func(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* func(ListNode* head) {         if(head->next != NULL) {             ListNode *tail = func(head->next);             tail->next = head;             head->next = NULL;         }         return head;     }          ListNode* reverseList(ListNode* head) {         if(head == NULL || head->next == NULL)              return head;         ListNode *newhead = head;         while(newhead->next != NULL) {             newhead = newhead->next;         }         func(head);         return newhead;     }          bool isPalindrome(ListNode* head) {         if(head == NULL || head->next == NULL)             return true;         ListNode *p, *q;         p = head;         q = head;         while(q != NULL) {             p = p->next;             q = q->next;             if(q != NULL) {                 q = q->next;             }         }         p = reverseList(p);         while(p != NULL) {             if(head->val != p->val)                 return false;             else {                 head = head->next;                 p = p->next;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/234. Palindrome Linked List.cpp/Solution/func(ListNode*)"
    },
    {
        "f": [],
        "fm": "ListNode* reverseList(ListNode* head) {         if(head == NULL || head->next == NULL)              return head;         ListNode *newhead = head;         while(newhead->next != NULL) {             newhead = newhead->next;         }         func(head);         return newhead;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseList_ListNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_reverseList_ListNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=142094878;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=1664255539;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1454613414;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseList_ListNodemul_random_2\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseList(head);\nAKA_fCall++;AKA_mark(\"Return from: ./32/234. Palindrome Linked List.cpp/Solution/reverseList(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=142094878;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=1664255539;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1454613414;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseList_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_reverseList_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1134101647;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseList_ListNodemul_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseList(head);\nAKA_fCall++;AKA_mark(\"Return from: ./32/234. Palindrome Linked List.cpp/Solution/reverseList(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1134101647;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/reverseList(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseList_ListNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_reverseList_ListNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseList_ListNodemul_random_4\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseList(head);\nAKA_fCall++;AKA_mark(\"Return from: ./32/234. Palindrome Linked List.cpp/Solution/reverseList(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* func(ListNode* head) {         if(head->next != NULL) {             ListNode *tail = func(head->next);             tail->next = head;             head->next = NULL;         }         return head;     }          ListNode* reverseList(ListNode* head) {         if(head == NULL || head->next == NULL)              return head;         ListNode *newhead = head;         while(newhead->next != NULL) {             newhead = newhead->next;         }         func(head);         return newhead;     }          bool isPalindrome(ListNode* head) {         if(head == NULL || head->next == NULL)             return true;         ListNode *p, *q;         p = head;         q = head;         while(q != NULL) {             p = p->next;             q = q->next;             if(q != NULL) {                 q = q->next;             }         }         p = reverseList(p);         while(p != NULL) {             if(head->val != p->val)                 return false;             else {                 head = head->next;                 p = p->next;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/234. Palindrome Linked List.cpp/Solution/reverseList(ListNode*)"
    },
    {
        "f": [],
        "fm": "bool isPalindrome(ListNode* head) {         if(head == NULL || head->next == NULL)             return true;         ListNode *p, *q;         p = head;         q = head;         while(q != NULL) {             p = p->next;             q = q->next;             if(q != NULL) {                 q = q->next;             }         }         p = reverseList(p);         while(p != NULL) {             if(head->val != p->val)                 return false;             else {                 head = head->next;                 p = p->next;             }         }         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPalindrome_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isPalindrome_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1642370755;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=-1261939748;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPalindrome_ListNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPalindrome(head);\nAKA_fCall++;AKA_mark(\"Return from: ./32/234. Palindrome Linked List.cpp/Solution/isPalindrome(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1642370755;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=-1261939748;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPalindrome_ListNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isPalindrome_ListNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1107729664;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=-2143037966;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-722868121;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).val=-581477500;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=-676419756;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).val=552677543;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1176038934;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1).val=619138605;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_next0_x=641950994;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1_DOT_next_0 = new ::ListNode(head1_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).val=821185602;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).next;\nAKA_VECTOR_INIT_head_1_DOT_next.push_back(AKA_VECTOR_INIT_head_1_DOT_next_0);\n(*AKA_VECTOR_INIT_head_1).next = AKA_VECTOR_INIT_head_1_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=1366467158;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_2).val=1063091576;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPalindrome_ListNodemul_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPalindrome(head);\nAKA_fCall++;AKA_mark(\"Return from: ./32/234. Palindrome Linked List.cpp/Solution/isPalindrome(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1107729664;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=-2143037966;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-722868121;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).val=-581477500;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=-676419756;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).val=552677543;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1176038934;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1).val=619138605;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_next0_x=641950994;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1_DOT_next_0 = new ::ListNode(head1_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).val=821185602;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).next;\nAKA_VECTOR_INIT_head_1_DOT_next.push_back(AKA_VECTOR_INIT_head_1_DOT_next_0);\n(*AKA_VECTOR_INIT_head_1).next = AKA_VECTOR_INIT_head_1_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=1366467158;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/234. Palindrome Linked List.cpp/isPalindrome(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_2).val=1063091576;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPalindrome_ListNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isPalindrome_ListNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPalindrome_ListNodemul_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPalindrome(head);\nAKA_fCall++;AKA_mark(\"Return from: ./32/234. Palindrome Linked List.cpp/Solution/isPalindrome(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/234. Palindrome Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* func(ListNode* head) {         if(head->next != NULL) {             ListNode *tail = func(head->next);             tail->next = head;             head->next = NULL;         }         return head;     }          ListNode* reverseList(ListNode* head) {         if(head == NULL || head->next == NULL)              return head;         ListNode *newhead = head;         while(newhead->next != NULL) {             newhead = newhead->next;         }         func(head);         return newhead;     }          bool isPalindrome(ListNode* head) {         if(head == NULL || head->next == NULL)             return true;         ListNode *p, *q;         p = head;         q = head;         while(q != NULL) {             p = p->next;             q = q->next;             if(q != NULL) {                 q = q->next;             }         }         p = reverseList(p);         while(p != NULL) {             if(head->val != p->val)                 return false;             else {                 head = head->next;                 p = p->next;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/234. Palindrome Linked List.cpp/Solution/isPalindrome(ListNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {         if(root==NULL || p==NULL || q==NULL)              return NULL;         if((p->val >= root->val && q->val <= root ->val) || (p->val <= root->val && q->val >= root->val)) {             return root;         }         if(p->val > root->val && q->val > root->val) {             return lowestCommonAncestor(root->right, p, q);         }         if(p->val < root->val && q->val < root->val) {             return lowestCommonAncestor(root->left, p, q);         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1330460975;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=286489130;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1893524657;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-1678191168;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=-1035814852;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=-1997169816;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=6449537;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=952075150;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=469847917;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-974318859;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right0_x=1354826619;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_0 = new ::TreeNode(p0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).val=-548828973;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_0);\n(*AKA_VECTOR_INIT_p_0).right = AKA_VECTOR_INIT_p_0_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-293602616;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=-1041288350;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=816575363;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=-863924310;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left1_x=639764463;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_1 = new ::TreeNode(q0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).val=-534058602;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_1);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=-1622370396;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=-1300183956;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right1_x=1887234994;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_1 = new ::TreeNode(q0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).val=1798583359;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right2_x=865930903;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_2 = new ::TreeNode(q0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).val=-1001593838;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_2);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->lowestCommonAncestor(root,p,q);\nAKA_fCall++;AKA_mark(\"Return from: ./32/235. Lowest Common Ancestor of a Binary Search Tree.cpp/Solution/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1330460975;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=286489130;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1893524657;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-1678191168;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=-1035814852;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=-1997169816;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=6449537;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=952075150;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=469847917;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-974318859;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right0_x=1354826619;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_0 = new ::TreeNode(p0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).val=-548828973;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_0);\n(*AKA_VECTOR_INIT_p_0).right = AKA_VECTOR_INIT_p_0_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-293602616;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=-1041288350;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=816575363;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=-863924310;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left1_x=639764463;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_1 = new ::TreeNode(q0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).val=-534058602;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_1);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=-1622370396;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=-1300183956;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right1_x=1887234994;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_1 = new ::TreeNode(q0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).val=1798583359;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right2_x=865930903;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_2 = new ::TreeNode(q0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).val=-1001593838;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_2);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1447059978;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-20343304;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1310614985;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-647064397;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1664910482;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=1741926118;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=467364815;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=880014481;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1529206574;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=1057097805;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=-1198348683;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=-477632489;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=1847314249;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=1191680557;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0).right;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_x=1344669998;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1 = new ::TreeNode(p1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1).val=407830525;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right0_x=-209790976;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_0 = new ::TreeNode(p1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).val=1629377027;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right1_x=924932728;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_1 = new ::TreeNode(p1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_1).val=284370538;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_1).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right2_x=-480504029;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_2 = new ::TreeNode(p1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_2).val=707434986;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_2).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_2);\n(*AKA_VECTOR_INIT_p_1).right = AKA_VECTOR_INIT_p_1_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_1);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nTreeNode* q;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->lowestCommonAncestor(root,p,q);\nAKA_fCall++;AKA_mark(\"Return from: ./32/235. Lowest Common Ancestor of a Binary Search Tree.cpp/Solution/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1447059978;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-20343304;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1310614985;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-647064397;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1664910482;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=1741926118;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=467364815;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=880014481;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1529206574;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=1057097805;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=-1198348683;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=-477632489;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=1847314249;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=1191680557;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0).right;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_x=1344669998;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1 = new ::TreeNode(p1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1).val=407830525;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right0_x=-209790976;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_0 = new ::TreeNode(p1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).val=1629377027;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right1_x=924932728;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_1 = new ::TreeNode(p1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_1).val=284370538;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_1).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right2_x=-480504029;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_2 = new ::TreeNode(p1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_2).val=707434986;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_2).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_2);\n(*AKA_VECTOR_INIT_p_1).right = AKA_VECTOR_INIT_p_1_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_1);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nTreeNode* q;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=357485967;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=90296166;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=976072937;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-1368027923;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=805708126;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1361932487;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=-1657353251;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=1268323007;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-443626115;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1385008377;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1625430651;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=605515015;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=2081588309;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=656590738;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1971024936;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=1506367468;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=-86747671;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=1040748915;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right2_x=671908670;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_2 = new ::TreeNode(root1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).val=1245742113;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_2);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=1834792500;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-28579920;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left0_x=1332193202;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_0 = new ::TreeNode(p0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).val=-311311069;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left1_x=-1490731519;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_1 = new ::TreeNode(p0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).val=-2084384343;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_1);\n(*AKA_VECTOR_INIT_p_0).left = AKA_VECTOR_INIT_p_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right0_x=-1410801328;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_0 = new ::TreeNode(p0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).val=571226216;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right1_x=1425199903;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_1 = new ::TreeNode(p0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).val=-153838701;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right2_x=-298797524;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_2 = new ::TreeNode(p0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_2).val=272083669;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_2).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_2);\n(*AKA_VECTOR_INIT_p_0).right = AKA_VECTOR_INIT_p_0_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_x=1893572070;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1 = new ::TreeNode(p1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1).val=-1188756991;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1).right;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_1);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_x=-1997071671;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2 = new ::TreeNode(p2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2).val=208224536;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_left0_x=1166532054;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_left_0 = new ::TreeNode(p2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).val=1089594542;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).right;\nAKA_VECTOR_INIT_p_2_DOT_left.push_back(AKA_VECTOR_INIT_p_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_left1_x=221626929;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_left_1 = new ::TreeNode(p2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).val=1315211400;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).right;\nAKA_VECTOR_INIT_p_2_DOT_left.push_back(AKA_VECTOR_INIT_p_2_DOT_left_1);\n(*AKA_VECTOR_INIT_p_2).left = AKA_VECTOR_INIT_p_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_right0_x=-933384710;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_right_0 = new ::TreeNode(p2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).val=-2134560450;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).right;\nAKA_VECTOR_INIT_p_2_DOT_right.push_back(AKA_VECTOR_INIT_p_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_right1_x=-1754878931;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_right_1 = new ::TreeNode(p2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_right_1).val=-1941774765;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_right_1).right;\nAKA_VECTOR_INIT_p_2_DOT_right.push_back(AKA_VECTOR_INIT_p_2_DOT_right_1);\n(*AKA_VECTOR_INIT_p_2).right = AKA_VECTOR_INIT_p_2_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_2);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=843236475;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=867469575;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=69544840;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=1934728221;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0).right;\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_x=1818031684;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1 = new ::TreeNode(q1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1).val=-1470976121;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right0_x=1591942855;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_0 = new ::TreeNode(q1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).val=-895619709;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_0);\n(*AKA_VECTOR_INIT_q_1).right = AKA_VECTOR_INIT_q_1_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_1);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_x=2080852871;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2 = new ::TreeNode(q2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2).val=-1817151038;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left0_x=-1260940080;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_0 = new ::TreeNode(q2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).val=-1189884547;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_0);\n(*AKA_VECTOR_INIT_q_2).left = AKA_VECTOR_INIT_q_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_right0_x=-1554460701;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_right_0 = new ::TreeNode(q2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).val=1220520208;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).right;\nAKA_VECTOR_INIT_q_2_DOT_right.push_back(AKA_VECTOR_INIT_q_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_right1_x=656037311;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_right_1 = new ::TreeNode(q2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_right_1).val=1754686671;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_right_1).right;\nAKA_VECTOR_INIT_q_2_DOT_right.push_back(AKA_VECTOR_INIT_q_2_DOT_right_1);\n(*AKA_VECTOR_INIT_q_2).right = AKA_VECTOR_INIT_q_2_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_2);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_lowestCommonAncestor_TreeNodemul_TreeNodemul_TreeNodemul_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->lowestCommonAncestor(root,p,q);\nAKA_fCall++;AKA_mark(\"Return from: ./32/235. Lowest Common Ancestor of a Binary Search Tree.cpp/Solution/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=357485967;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=90296166;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=976072937;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-1368027923;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=805708126;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1361932487;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=-1657353251;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=1268323007;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-443626115;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1385008377;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1625430651;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=605515015;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=2081588309;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=656590738;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1971024936;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=1506367468;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=-86747671;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=1040748915;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right2_x=671908670;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_2 = new ::TreeNode(root1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).val=1245742113;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_2);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=1834792500;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-28579920;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left0_x=1332193202;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_0 = new ::TreeNode(p0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).val=-311311069;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left1_x=-1490731519;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_1 = new ::TreeNode(p0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).val=-2084384343;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_1);\n(*AKA_VECTOR_INIT_p_0).left = AKA_VECTOR_INIT_p_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right0_x=-1410801328;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_0 = new ::TreeNode(p0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).val=571226216;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right1_x=1425199903;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_1 = new ::TreeNode(p0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).val=-153838701;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right2_x=-298797524;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_2 = new ::TreeNode(p0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_2).val=272083669;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_2).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_2);\n(*AKA_VECTOR_INIT_p_0).right = AKA_VECTOR_INIT_p_0_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_x=1893572070;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1 = new ::TreeNode(p1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1).val=-1188756991;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1).right;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_1);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_x=-1997071671;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2 = new ::TreeNode(p2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2).val=208224536;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_left0_x=1166532054;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_left_0 = new ::TreeNode(p2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).val=1089594542;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).right;\nAKA_VECTOR_INIT_p_2_DOT_left.push_back(AKA_VECTOR_INIT_p_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_left1_x=221626929;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_left_1 = new ::TreeNode(p2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).val=1315211400;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).right;\nAKA_VECTOR_INIT_p_2_DOT_left.push_back(AKA_VECTOR_INIT_p_2_DOT_left_1);\n(*AKA_VECTOR_INIT_p_2).left = AKA_VECTOR_INIT_p_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_right0_x=-933384710;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_right_0 = new ::TreeNode(p2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).val=-2134560450;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).right;\nAKA_VECTOR_INIT_p_2_DOT_right.push_back(AKA_VECTOR_INIT_p_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_right1_x=-1754878931;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_2/p/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_right_1 = new ::TreeNode(p2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_right_1).val=-1941774765;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_right_1).right;\nAKA_VECTOR_INIT_p_2_DOT_right.push_back(AKA_VECTOR_INIT_p_2_DOT_right_1);\n(*AKA_VECTOR_INIT_p_2).right = AKA_VECTOR_INIT_p_2_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_2);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=843236475;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=867469575;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=69544840;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=1934728221;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0).right;\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_x=1818031684;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1 = new ::TreeNode(q1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1).val=-1470976121;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right0_x=1591942855;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_0 = new ::TreeNode(q1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).val=-895619709;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_0);\n(*AKA_VECTOR_INIT_q_1).right = AKA_VECTOR_INIT_q_1_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_1);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_x=2080852871;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2 = new ::TreeNode(q2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2).val=-1817151038;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left0_x=-1260940080;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_0 = new ::TreeNode(q2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).val=-1189884547;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_0);\n(*AKA_VECTOR_INIT_q_2).left = AKA_VECTOR_INIT_q_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_right0_x=-1554460701;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_right_0 = new ::TreeNode(q2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).val=1220520208;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).right;\nAKA_VECTOR_INIT_q_2_DOT_right.push_back(AKA_VECTOR_INIT_q_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_right1_x=656037311;\nAKA_mark(\"Calling: ./32/230. Kth Smallest Element in a BST.cpp/TreeNode/TreeNode(int)|ROOT/235. Lowest Common Ancestor of a Binary Search Tree.cpp/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_right_1 = new ::TreeNode(q2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_right_1).val=1754686671;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_right_1).right;\nAKA_VECTOR_INIT_q_2_DOT_right.push_back(AKA_VECTOR_INIT_q_2_DOT_right_1);\n(*AKA_VECTOR_INIT_q_2).right = AKA_VECTOR_INIT_q_2_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_2);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {         if(root==NULL || p==NULL || q==NULL)              return NULL;         if((p->val >= root->val && q->val <= root ->val) || (p->val <= root->val && q->val >= root->val)) {             return root;         }         if(p->val > root->val && q->val > root->val) {             return lowestCommonAncestor(root->right, p, q);         }         if(p->val < root->val && q->val < root->val) {             return lowestCommonAncestor(root->left, p, q);         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/235. Lowest Common Ancestor of a Binary Search Tree.cpp/Solution/lowestCommonAncestor(TreeNode*,TreeNode*,TreeNode*)"
    },
    {
        "f": [],
        "fm": "void deleteNode(ListNode* node) {         node->val = node->next->val;         node->next = node->next->next;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_deleteNode_ListNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_deleteNode_ListNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/237. Delete Node in a Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=-1109043172;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/237. Delete Node in a Linked List.cpp/deleteNode(ListNode*)/node/AKA_VECTOR_INIT_node_0/node/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::ListNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=-225365547;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_node_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_next0_x=-1870246673;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/237. Delete Node in a Linked List.cpp/deleteNode(ListNode*)/node/AKA_VECTOR_INIT_node_0/node/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_next_0 = new ::ListNode(node0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_next_0).val=497487882;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_node_0_DOT_next_0).next;\nAKA_VECTOR_INIT_node_0_DOT_next.push_back(AKA_VECTOR_INIT_node_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_next1_x=764679499;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/237. Delete Node in a Linked List.cpp/deleteNode(ListNode*)/node/AKA_VECTOR_INIT_node_0/node/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_next_1 = new ::ListNode(node0_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_next_1).val=1953080209;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_node_0_DOT_next_1).next;\nAKA_VECTOR_INIT_node_0_DOT_next.push_back(AKA_VECTOR_INIT_node_0_DOT_next_1);\n(*AKA_VECTOR_INIT_node_0).next = AKA_VECTOR_INIT_node_0_DOT_next[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nListNode* node = AKA_VECTOR_INIT_node[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_deleteNode_ListNodemul_random_1\");AKA_INSTANCE___Solution->deleteNode(node);\nAKA_fCall++;AKA_mark(\"Return from: ./32/237. Delete Node in a Linked List.cpp/Solution/deleteNode(ListNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/237. Delete Node in a Linked List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=-1109043172;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/237. Delete Node in a Linked List.cpp/deleteNode(ListNode*)/node/AKA_VECTOR_INIT_node_0/node/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::ListNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=-225365547;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_node_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_next0_x=-1870246673;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/237. Delete Node in a Linked List.cpp/deleteNode(ListNode*)/node/AKA_VECTOR_INIT_node_0/node/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_next_0 = new ::ListNode(node0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_next_0).val=497487882;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_node_0_DOT_next_0).next;\nAKA_VECTOR_INIT_node_0_DOT_next.push_back(AKA_VECTOR_INIT_node_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_next1_x=764679499;\nAKA_mark(\"Calling: ./32/234. Palindrome Linked List.cpp/ListNode/ListNode(int)|ROOT/237. Delete Node in a Linked List.cpp/deleteNode(ListNode*)/node/AKA_VECTOR_INIT_node_0/node/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_next_1 = new ::ListNode(node0_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_next_1).val=1953080209;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_node_0_DOT_next_1).next;\nAKA_VECTOR_INIT_node_0_DOT_next.push_back(AKA_VECTOR_INIT_node_0_DOT_next_1);\n(*AKA_VECTOR_INIT_node_0).next = AKA_VECTOR_INIT_node_0_DOT_next[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nListNode* node = AKA_VECTOR_INIT_node[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void deleteNode(ListNode* node) {         node->val = node->next->val;         node->next = node->next->next;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/237. Delete Node in a Linked List.cpp/Solution/deleteNode(ListNode*)"
    },
    {
        "f": [],
        "fm": "vector<int> productExceptSelf(vector<int>& nums) {         vector<int> v(nums.size());         int right = 1;         v[0] = 1;         //左边所有数字的乘积         for(int i = 1; i < nums.size(); i++) {            v[i] = nums[i - 1] * v[i - 1];          }         for(int i = nums.size() - 2; i >= 0; i--) {             right = right * nums[i + 1];             v[i] = v[i] * right;         }         return v;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_productExceptSelf_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_productExceptSelf_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/238. Product of Array Except Self .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=345996649;\nnums.push_back(nums_element0);\nint nums_element1=-117433450;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_productExceptSelf_vector_int_random_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->productExceptSelf(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./32/238. Product of Array Except Self .cpp/Solution/productExceptSelf(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/238. Product of Array Except Self .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=345996649;\nnums.push_back(nums_element0);\nint nums_element1=-117433450;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> productExceptSelf(vector<int>& nums) {         vector<int> v(nums.size());         int right = 1;         v[0] = 1;         //左边所有数字的乘积         for(int i = 1; i < nums.size(); i++) {            v[i] = nums[i - 1] * v[i - 1];          }         for(int i = nums.size() - 2; i >= 0; i--) {             right = right * nums[i + 1];             v[i] = v[i] * right;         }         return v;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/238. Product of Array Except Self .cpp/Solution/productExceptSelf(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool searchMatrix(vector<vector<int>>& matrix, int target) {         for(int i = 0; i < matrix.size(); i++)             if (binary_search(matrix[i].begin(), matrix[i].end(), target)) return true;         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_searchMatrix_vector_vector_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_searchMatrix_vector_vector_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/240. Search a 2D Matrix II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\n\n\nint target=-1003652264;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=914087462;\nmatrix_element0.push_back(matrix_element0_element0);\nmatrix.push_back(matrix_element0);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_searchMatrix_vector_vector_int_int_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->searchMatrix(matrix,target);\nAKA_fCall++;AKA_mark(\"Return from: ./32/240. Search a 2D Matrix II.cpp/Solution/searchMatrix(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/240. Search a 2D Matrix II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\n\n\nint target=-1003652264;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=914087462;\nmatrix_element0.push_back(matrix_element0_element0);\nmatrix.push_back(matrix_element0);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool searchMatrix(vector<vector<int>>& matrix, int target) {         for(int i = 0; i < matrix.size(); i++)             if (binary_search(matrix[i].begin(), matrix[i].end(), target)) return true;         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/32/240. Search a 2D Matrix II.cpp/Solution/searchMatrix(vector<vector<int>>&,int)"
    }
]