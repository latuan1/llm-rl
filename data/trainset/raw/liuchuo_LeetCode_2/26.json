[
    {
        "f": [],
        "fm": "string toHex(int num) {         string result = \"\", s = \"0123456789abcdef\";         for(int i = 1; i <= 8; i++) {             result += s[num & 15];             num = num >> 4;         }         reverse(result.begin(), result.end());         while(result.length() > 1 && result[0] == '0')             result = result.substr(1);         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_toHex_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_toHex_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/405. Convert a Number to Hexadecimal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=-1230116;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_toHex_int_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->toHex(num);\nAKA_fCall++;AKA_mark(\"Return from: ./26/405. Convert a Number to Hexadecimal.cpp/Solution/toHex(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/405. Convert a Number to Hexadecimal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=-1230116;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string toHex(int num) {         string result = \"\", s = \"0123456789abcdef\";         for(int i = 1; i <= 8; i++) {             result += s[num & 15];             num = num >> 4;         }         reverse(result.begin(), result.end());         while(result.length() > 1 && result[0] == '0')             result = result.substr(1);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/405. Convert a Number to Hexadecimal.cpp/Solution/toHex(int)"
    },
    {
        "f": [],
        "fm": "int longestPalindrome(string s) {         int hash[256] = {0}, len = 0, flag = 0;         for(int i = 0; i < s.length(); i++)             hash[s[i]]++;         for(int i = 0; i < 256; i++) {             if(hash[i] % 2 == 0) {                 len += hash[i];             } else {                 len += (hash[i] - 1);                 flag = 1;             }         }         return len + flag;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_longestPalindrome_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_longestPalindrome_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/409. Longest Palindrome.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName541293 = new char[2];akaRandomName541293[0] = 71;akaRandomName541293[1] = '\\0';string s=akaRandomName541293;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_longestPalindrome_string_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->longestPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: ./26/409. Longest Palindrome.cpp/Solution/longestPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/409. Longest Palindrome.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName735875 = new char[2];akaRandomName735875[0] = 71;akaRandomName735875[1] = '\\0';string s=akaRandomName735875;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int longestPalindrome(string s) {         int hash[256] = {0}, len = 0, flag = 0;         for(int i = 0; i < s.length(); i++)             hash[s[i]]++;         for(int i = 0; i < 256; i++) {             if(hash[i] % 2 == 0) {                 len += hash[i];             } else {                 len += (hash[i] - 1);                 flag = 1;             }         }         return len + flag;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/409. Longest Palindrome.cpp/Solution/longestPalindrome(string)"
    },
    {
        "f": [],
        "fm": "vector<string> fizzBuzz(int n) {         vector<string> result(n);         for(int i = 0; i < n; i++) {             if((i + 1) % 15 == 0)                 result[i] = \"FizzBuzz\";             else if((i + 1) % 5 == 0)                 result[i] = \"Buzz\";             else if((i + 1) % 3 == 0)                 result[i] = \"Fizz\";             else                 result[i] = to_string(i + 1);         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_fizzBuzz_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_fizzBuzz_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/412. Fizz Buzz .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fizzBuzz_int_random_3\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fizzBuzz(n);\nAKA_fCall++;AKA_mark(\"Return from: ./26/412. Fizz Buzz .cpp/Solution/fizzBuzz(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/412. Fizz Buzz .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> fizzBuzz(int n) {         vector<string> result(n);         for(int i = 0; i < n; i++) {             if((i + 1) % 15 == 0)                 result[i] = \"FizzBuzz\";             else if((i + 1) % 5 == 0)                 result[i] = \"Buzz\";             else if((i + 1) % 3 == 0)                 result[i] = \"Fizz\";             else                 result[i] = to_string(i + 1);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/412. Fizz Buzz .cpp/Solution/fizzBuzz(int)"
    },
    {
        "f": [],
        "fm": "int numberOfArithmeticSlices(vector<int>& A) {         int cnt = 0, result = 0;         for(int i = 2; i < A.size(); i++) {             if(A[i-1] - A[i-2] == A[i] - A[i-1]) {                 cnt++;                 result += cnt;             } else {                 cnt = 0;             }         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numberOfArithmeticSlices_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_numberOfArithmeticSlices_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/413. Arithmetic Slices.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=-1471534576;\nA.push_back(A_element0);\nint A_element1=-475500834;\nA.push_back(A_element1);\nint A_element2=1288455396;\nA.push_back(A_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numberOfArithmeticSlices_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numberOfArithmeticSlices(A);\nAKA_fCall++;AKA_mark(\"Return from: ./26/413. Arithmetic Slices.cpp/Solution/numberOfArithmeticSlices(vector<int>&)\");\n\n\nvector<int> EXPECTED_A;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/413. Arithmetic Slices.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=-1471534576;\nA.push_back(A_element0);\nint A_element1=-475500834;\nA.push_back(A_element1);\nint A_element2=1288455396;\nA.push_back(A_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int numberOfArithmeticSlices(vector<int>& A) {         int cnt = 0, result = 0;         for(int i = 2; i < A.size(); i++) {             if(A[i-1] - A[i-2] == A[i] - A[i-1]) {                 cnt++;                 result += cnt;             } else {                 cnt = 0;             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/413. Arithmetic Slices.cpp/Solution/numberOfArithmeticSlices(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int thirdMax(vector<int>& nums) {         set<int> s;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() > 3)                 s.erase(s.begin());         }         return s.size() == 3 ? *s.begin() : * s.rbegin();     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_thirdMax_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_thirdMax_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/414. Third Maximum Number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1344103417;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_thirdMax_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->thirdMax(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./26/414. Third Maximum Number.cpp/Solution/thirdMax(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/414. Third Maximum Number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1344103417;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int thirdMax(vector<int>& nums) {         set<int> s;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() > 3)                 s.erase(s.begin());         }         return s.size() == 3 ? *s.begin() : * s.rbegin();     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/414. Third Maximum Number.cpp/Solution/thirdMax(vector<int>&)"
    },
    {
        "f": [],
        "fm": "string addStrings(string num1, string num2) {         int len1 = num1.length(), len2 = num2.length();         for(int i = 0; i < len1 / 2; i++)             swap(num1[i], num1[len1 - i - 1]);         for(int i = 0; i < len2 / 2; i++)             swap(num2[i], num2[len2 - i - 1]);         string result = \"\";         int sign = 0, p = 0, q = 0;         while(p < len1 && q < len2) {             int t = (num1[p] - '0') + (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;             q++;         }         while(p < len1) {             int t = (num1[p] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;         }         while(q < len2) {             int t = (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             q++;         }         if(sign == 1)             result += '1';         int len = result.length();         for(int i = 0; i < len / 2; i++) {             swap(result[i], result[len - 1 - i]);         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_addStrings_string_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_addStrings_string_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/415. Add Strings .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName902918 = new char[2];akaRandomName902918[0] = -83;akaRandomName902918[1] = '\\0';string num1=akaRandomName902918;\nchar* akaRandomName521404 = new char[2];akaRandomName521404[0] = 96;akaRandomName521404[1] = '\\0';string num2=akaRandomName521404;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode num1 */\n/* NormalStringDataNode num2 */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addStrings_string_string_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addStrings(num1,num2);\nAKA_fCall++;AKA_mark(\"Return from: ./26/415. Add Strings .cpp/Solution/addStrings(string,string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/415. Add Strings .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName251458 = new char[2];akaRandomName251458[0] = -83;akaRandomName251458[1] = '\\0';string num1=akaRandomName251458;\nchar* akaRandomName245069 = new char[2];akaRandomName245069[0] = 96;akaRandomName245069[1] = '\\0';string num2=akaRandomName245069;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode num1 */\n/* NormalStringDataNode num2 */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string addStrings(string num1, string num2) {         int len1 = num1.length(), len2 = num2.length();         for(int i = 0; i < len1 / 2; i++)             swap(num1[i], num1[len1 - i - 1]);         for(int i = 0; i < len2 / 2; i++)             swap(num2[i], num2[len2 - i - 1]);         string result = \"\";         int sign = 0, p = 0, q = 0;         while(p < len1 && q < len2) {             int t = (num1[p] - '0') + (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;             q++;         }         while(p < len1) {             int t = (num1[p] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;         }         while(q < len2) {             int t = (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             q++;         }         if(sign == 1)             result += '1';         int len = result.length();         for(int i = 0; i < len / 2; i++) {             swap(result[i], result[len - 1 - i]);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/415. Add Strings .cpp/Solution/addStrings(string,string)"
    },
    {
        "f": [],
        "fm": "int countBattleships(vector<vector<char>>& board) {         int result = 0;         if(board.size() == 0) return 0;         for(int i = 0; i < board.size(); i++) {             for(int j = 0; j < board[0].size(); j++) {                 if(board[i][j] == 'X' && (i == 0 || board[i-1][j] == '.') && (j == 0 || board[i][j-1] == '.'))                     result++;             }         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countBattleships_vector_vector_char_random_1(void) {\n{\nAKA_test_case_name=\"Solution_countBattleships_vector_vector_char_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/419. Battleships in a Board.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-43;\nboard_element0.push_back(board_element0_element0);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=20;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=-37;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countBattleships_vector_vector_char_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countBattleships(board);\nAKA_fCall++;AKA_mark(\"Return from: ./26/419. Battleships in a Board.cpp/Solution/countBattleships(vector<vector<char>>&)\");\n\n\nvector<vector<char>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/419. Battleships in a Board.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-43;\nboard_element0.push_back(board_element0_element0);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=20;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=-37;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_countBattleships_vector_vector_char_random_3(void) {\n{\nAKA_test_case_name=\"Solution_countBattleships_vector_vector_char_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/419. Battleships in a Board.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-71;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-8;\nboard_element0.push_back(board_element0_element1);\nchar board_element0_element2=27;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=-13;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=-119;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countBattleships_vector_vector_char_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countBattleships(board);\nAKA_fCall++;AKA_mark(\"Return from: ./26/419. Battleships in a Board.cpp/Solution/countBattleships(vector<vector<char>>&)\");\n\n\nvector<vector<char>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/419. Battleships in a Board.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-71;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-8;\nboard_element0.push_back(board_element0_element1);\nchar board_element0_element2=27;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=-13;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=-119;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int countBattleships(vector<vector<char>>& board) {         int result = 0;         if(board.size() == 0) return 0;         for(int i = 0; i < board.size(); i++) {             for(int j = 0; j < board[0].size(); j++) {                 if(board[i][j] == 'X' && (i == 0 || board[i-1][j] == '.') && (j == 0 || board[i][j-1] == '.'))                     result++;             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/419. Battleships in a Board.cpp/Solution/countBattleships(vector<vector<char>>&)"
    },
    {
        "f": [],
        "fm": "string originalDigits(string s) {         map<char, int> m;         int cnt[10] = {0}, temp;         for(int i = 0; i < s.length(); i++)             m[s[i]]++;         temp = m['z'];         cnt[0] = temp;         m['z'] -= temp;         m['e'] -= temp;         m['r'] -= temp;         m['o'] -= temp;         temp = m['x'];         cnt[6] = temp;         m['s'] -= temp;         m['i'] -= temp;         m['x'] -= temp;         temp = m['w'];         cnt[2] = temp;         m['t'] -= temp;         m['w'] -= temp;         m['o'] -= temp;         temp = m['g'];         cnt[8] = temp;         m['e'] -= temp;         m['i'] -= temp;         m['g'] -= temp;         m['h'] -= temp;         m['t'] -= temp;         temp = m['u'];         cnt[4] = temp;         m['f'] -= temp;         m['o'] -= temp;         m['u'] -= temp;         m['r'] -= temp;         temp = m['s'];         cnt[7] = temp;         m['s'] -= temp;         m['e'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         m['n'] -= temp;         temp = m['r'];         cnt[3] = temp;         m['t'] -= temp;         m['h'] -= temp;         m['r'] -= temp;         m['e'] -= temp;         m['e'] -= temp;         temp = m['o'];         cnt[1] = temp;         m['o'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         temp = m['f'];         cnt[5] = temp;         m['f'] -= temp;         m['i'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         temp = m['e'];         cnt[9] = temp;         m['n'] -= temp;         m['i'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         string result = \"\";         for(int i = 0; i <= 9; i++)             for(int j = 0; j < cnt[i]; j++)                 result += to_string(i);         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_originalDigits_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_originalDigits_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/423. Reconstruct Original Digits from English.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName990619 = new char[2];akaRandomName990619[0] = 2;akaRandomName990619[1] = '\\0';string s=akaRandomName990619;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_originalDigits_string_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->originalDigits(s);\nAKA_fCall++;AKA_mark(\"Return from: ./26/423. Reconstruct Original Digits from English.cpp/Solution/originalDigits(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/423. Reconstruct Original Digits from English.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName101202 = new char[2];akaRandomName101202[0] = 2;akaRandomName101202[1] = '\\0';string s=akaRandomName101202;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string originalDigits(string s) {         map<char, int> m;         int cnt[10] = {0}, temp;         for(int i = 0; i < s.length(); i++)             m[s[i]]++;         temp = m['z'];         cnt[0] = temp;         m['z'] -= temp;         m['e'] -= temp;         m['r'] -= temp;         m['o'] -= temp;         temp = m['x'];         cnt[6] = temp;         m['s'] -= temp;         m['i'] -= temp;         m['x'] -= temp;         temp = m['w'];         cnt[2] = temp;         m['t'] -= temp;         m['w'] -= temp;         m['o'] -= temp;         temp = m['g'];         cnt[8] = temp;         m['e'] -= temp;         m['i'] -= temp;         m['g'] -= temp;         m['h'] -= temp;         m['t'] -= temp;         temp = m['u'];         cnt[4] = temp;         m['f'] -= temp;         m['o'] -= temp;         m['u'] -= temp;         m['r'] -= temp;         temp = m['s'];         cnt[7] = temp;         m['s'] -= temp;         m['e'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         m['n'] -= temp;         temp = m['r'];         cnt[3] = temp;         m['t'] -= temp;         m['h'] -= temp;         m['r'] -= temp;         m['e'] -= temp;         m['e'] -= temp;         temp = m['o'];         cnt[1] = temp;         m['o'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         temp = m['f'];         cnt[5] = temp;         m['f'] -= temp;         m['i'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         temp = m['e'];         cnt[9] = temp;         m['n'] -= temp;         m['i'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         string result = \"\";         for(int i = 0; i <= 9; i++)             for(int j = 0; j < cnt[i]; j++)                 result += to_string(i);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/423. Reconstruct Original Digits from English.cpp/Solution/originalDigits(string)"
    },
    {
        "f": [],
        "fm": "int countSegments(string s) {        int cnt = 0, flag = 0;        for(int i = 0; i < s.length(); i++) {            if(s[i] != ' ' && flag == 0) {                cnt++;                flag = 1;            } else if(s[i] == ' ') {                flag = 0;            }         }         return cnt;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countSegments_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_countSegments_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/434. Number of Segments in a String.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName665320 = new char[2];akaRandomName665320[0] = -94;akaRandomName665320[1] = '\\0';string s=akaRandomName665320;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countSegments_string_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countSegments(s);\nAKA_fCall++;AKA_mark(\"Return from: ./26/434. Number of Segments in a String.cpp/Solution/countSegments(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/434. Number of Segments in a String.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName690699 = new char[2];akaRandomName690699[0] = -94;akaRandomName690699[1] = '\\0';string s=akaRandomName690699;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int countSegments(string s) {        int cnt = 0, flag = 0;        for(int i = 0; i < s.length(); i++) {            if(s[i] != ' ' && flag == 0) {                cnt++;                flag = 1;            } else if(s[i] == ' ') {                flag = 0;            }         }         return cnt;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/434. Number of Segments in a String.cpp/Solution/countSegments(string)"
    },
    {
        "f": [
            "int result = 0;"
        ],
        "fm": "int pathSum(TreeNode* root, int sum) {         if(root == NULL)             return 0;         pathSum(root->left, sum);         pathSum(root->right, sum);         dfs(root, sum);         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_pathSum_TreeNodemul_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_pathSum_TreeNodemul_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/437. Path Sum III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode result */\nAKA_INSTANCE___Solution->result=947879349;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-201463685;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1011236888;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1293952759;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=208163071;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_pathSum_TreeNodemul_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->pathSum(root,sum);\nAKA_fCall++;AKA_mark(\"Return from: ./26/437. Path Sum III.cpp/Solution/pathSum(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/437. Path Sum III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode result */\nAKA_INSTANCE___Solution->result=947879349;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-201463685;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1011236888;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1293952759;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/pathSum(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=208163071;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int result = 0;     int pathSum(TreeNode* root, int sum) {         if(root == NULL)             return 0;         pathSum(root->left, sum);         pathSum(root->right, sum);         dfs(root, sum);         return result;     }          void dfs(TreeNode* root, int sum) {         if(root == NULL) return ;         if(root->val == sum) result++;         dfs(root->left, sum - root->val);         dfs(root->right, sum - root->val);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/437. Path Sum III.cpp/Solution/pathSum(TreeNode*,int)"
    },
    {
        "f": [
            "int result = 0;"
        ],
        "fm": "void dfs(TreeNode* root, int sum) {         if(root == NULL) return ;         if(root->val == sum) result++;         dfs(root->left, sum - root->val);         dfs(root->right, sum - root->val);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_TreeNodemul_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/437. Path Sum III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode result */\nAKA_INSTANCE___Solution->result=-51187766;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-382030337;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=126018035;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1100083964;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-125443823;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-1525292807;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=1188020660;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1755961373;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-315542978;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-124600951;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1143844867;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=130290805;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-594721531;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=-1595160942;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=-593781302;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1219279294;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1892536651;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1573526328;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=1404374280;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=1086598551;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=539491633;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right1_x=1264415559;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_2/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_1 = new ::TreeNode(root2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).val=563885011;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_1);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=1109883186;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_int_random_1\");AKA_INSTANCE___Solution->dfs(root,sum);\nAKA_fCall++;AKA_mark(\"Return from: ./26/437. Path Sum III.cpp/Solution/dfs(TreeNode*,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/437. Path Sum III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode result */\nAKA_INSTANCE___Solution->result=-51187766;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-382030337;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=126018035;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1100083964;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-125443823;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-1525292807;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=1188020660;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1755961373;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-315542978;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-124600951;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1143844867;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=130290805;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-594721531;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=-1595160942;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=-593781302;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1219279294;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1892536651;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1573526328;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=1404374280;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=1086598551;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=539491633;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right1_x=1264415559;\nAKA_mark(\"Calling: ./26/437. Path Sum III.cpp/TreeNode/TreeNode(int)|ROOT/437. Path Sum III.cpp/dfs(TreeNode*,int)/root/AKA_VECTOR_INIT_root_2/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_1 = new ::TreeNode(root2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).val=563885011;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_1);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=1109883186;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int result = 0;     int pathSum(TreeNode* root, int sum) {         if(root == NULL)             return 0;         pathSum(root->left, sum);         pathSum(root->right, sum);         dfs(root, sum);         return result;     }          void dfs(TreeNode* root, int sum) {         if(root == NULL) return ;         if(root->val == sum) result++;         dfs(root->left, sum - root->val);         dfs(root->right, sum - root->val);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/437. Path Sum III.cpp/Solution/dfs(TreeNode*,int)"
    }
]