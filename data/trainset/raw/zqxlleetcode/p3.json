[
    {
        "f": [],
        "fm": "bool isSymmetric(struct TreeNode* root) {\r \tstruct TreeNode *stack_l[4096];\r \tstruct TreeNode *stack_r[4096];\r \tstruct TreeNode *l = NULL, *r = NULL;\r \tint size_l = 0;\r \tint size_r = 0;\r \tif (root == NULL || (root->left == NULL && root->right == NULL) )\r \t\treturn true;\r \telse if(root->left && root->right){\r \t\tstack_l[size_l++] = root->left;\r \t\tstack_r[size_r++] = root->right;\r \t}\r \telse {\r \t\treturn false;\r \t}\r \t\r \twhile (size_l) {\r \t\t// ջ\r \t\tsize_l--;\r \t\tl = stack_l[size_l];\r \t\tsize_r--;\r \t\tr = stack_r[size_r];\r \r \t\t// ʣԱǷͬ\r \t\tif (l->val != r->val) return false;\r \r \t\t// ѹջ\r \t\t// ѹջstack_lҺӣstack_rӣԳѹջ\r \t\tif (l->right && r->left) {\r \t\t\tstack_l[size_l++] = l->right;\r \t\t\tstack_r[size_r++] = r->left;\r \t\t}\r \t\telse if (r->left == NULL && l->right == NULL);\r \t\telse return false;\r \r \t\t// ѹջstack_lӣstack_rҺӣԳѹջ\r \t\tif (l->left && r->right) {\r \t\t\tstack_l[size_l++] = l->left;\r \t\t\tstack_r[size_r++] = r->right;\r \t\t}\r \t\telse if (l->left == NULL && r->right == NULL);\r \t\telse return false;\r \t}\r \treturn true;\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_isSymmetric_struct_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"isSymmetric_struct_TreeNodemul_random_1\";\n\n// set up\n;\n\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isSymmetric_struct_TreeNodemul_random_1\");bool AKA_ACTUAL_OUTPUT=isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_isSymmetric_struct_TreeNodemul_directed_2(void) {\n{\nAKA_test_case_name=\"isSymmetric_struct_TreeNodemul_directed_2\";\n\n// set up\n;\n\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isSymmetric_struct_TreeNodemul_directed_2\");bool AKA_ACTUAL_OUTPUT=isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_isSymmetric_struct_TreeNodemul_directed_3(void) {\n{\nAKA_test_case_name=\"isSymmetric_struct_TreeNodemul_directed_3\";\n\n// set up\n;\n\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isSymmetric_struct_TreeNodemul_directed_3\");bool AKA_ACTUAL_OUTPUT=isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_isSymmetric_struct_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"isSymmetric_struct_TreeNodemul_random_0\";\n\n// set up\n;\n\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=261246397;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1460370438;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nstruct TreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isSymmetric_struct_TreeNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=261246397;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1460370438;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nstruct TreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_isSymmetric_struct_TreeNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"isSymmetric_struct_TreeNodemul_directed_0\";\n\n// set up\n;\n\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right = nullptr;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nstruct TreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isSymmetric_struct_TreeNodemul_directed_0\");bool AKA_ACTUAL_OUTPUT=isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right = nullptr;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nstruct TreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_isSymmetric_struct_TreeNodemul_directed_1(void) {\n{\nAKA_test_case_name=\"isSymmetric_struct_TreeNodemul_directed_1\";\n\n// set up\n;\n\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isSymmetric_struct_TreeNodemul_directed_1\");bool AKA_ACTUAL_OUTPUT=isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\zqxl_leetcode\\Leetcode\\com-110\\_101 Symmetric Tree\\_101 Symmetric Tree.cpp\\isSymmetric(struct TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool issame(struct TreeNode* p, struct TreeNode* q) {\r \tif (p == NULL&&q == NULL)\r \t\treturn true;\r \telse if (p == NULL || q == NULL)\r \t\treturn false;\r \telse if (p->val == q->val)\r \t\treturn issame(p->left, q->right) && issame(p->right, q->left);\r \telse\r \t\treturn false;\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_issame_struct_TreeNodemul_struct_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"issame_struct_TreeNodemul_struct_TreeNodemul_random_0\";\n\n// set up\n;\n\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=-498791054;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_0\\\\p\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-706388326;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right0_x=-447475755;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_0\\\\p\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_0 = new ::TreeNode(p0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).val=-1157633643;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right1_x=523389669;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_0\\\\p\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_1 = new ::TreeNode(p0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).val=-865478474;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_1).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_1);\n(*AKA_VECTOR_INIT_p_0).right = AKA_VECTOR_INIT_p_0_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_x=530026365;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_1\\\\p\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1 = new ::TreeNode(p1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1).val=-1156756515;\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_left0_x=-904957154;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_1\\\\p\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_left_0 = new ::TreeNode(p1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_left_0).val=1153868719;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_left_0).right;\nAKA_VECTOR_INIT_p_1_DOT_left.push_back(AKA_VECTOR_INIT_p_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_left1_x=2010187457;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_1\\\\p\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_left_1 = new ::TreeNode(p1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_left_1).val=1349885019;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_left_1).right;\nAKA_VECTOR_INIT_p_1_DOT_left.push_back(AKA_VECTOR_INIT_p_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_left2_x=-316426812;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_1\\\\p\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_left_2 = new ::TreeNode(p1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_left_2).val=-950952615;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_left_2).right;\nAKA_VECTOR_INIT_p_1_DOT_left.push_back(AKA_VECTOR_INIT_p_1_DOT_left_2);\n(*AKA_VECTOR_INIT_p_1).left = AKA_VECTOR_INIT_p_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right0_x=501790059;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_1\\\\p\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_0 = new ::TreeNode(p1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).val=1089272351;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_0);\n(*AKA_VECTOR_INIT_p_1).right = AKA_VECTOR_INIT_p_1_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_1);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_x=732489071;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_2\\\\p\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2 = new ::TreeNode(p2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2).val=-873091073;\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_left0_x=1353382709;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_2\\\\p\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_left_0 = new ::TreeNode(p2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).val=-2026807904;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_left_0).right;\nAKA_VECTOR_INIT_p_2_DOT_left.push_back(AKA_VECTOR_INIT_p_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_left1_x=1188359549;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_2\\\\p\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_left_1 = new ::TreeNode(p2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).val=796633900;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_left_1).right;\nAKA_VECTOR_INIT_p_2_DOT_left.push_back(AKA_VECTOR_INIT_p_2_DOT_left_1);\n(*AKA_VECTOR_INIT_p_2).left = AKA_VECTOR_INIT_p_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p2_right0_x=-149126978;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_2\\\\p\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_2_DOT_right_0 = new ::TreeNode(p2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).val=-1363583422;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_2_DOT_right_0).right;\nAKA_VECTOR_INIT_p_2_DOT_right.push_back(AKA_VECTOR_INIT_p_2_DOT_right_0);\n(*AKA_VECTOR_INIT_p_2).right = AKA_VECTOR_INIT_p_2_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_2);\n\nstruct TreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=1605487751;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=-1772360205;\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=1918754164;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=847828715;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left1_x=1037041079;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_1 = new ::TreeNode(q0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).val=-663050313;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left2_x=-27577352;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_2 = new ::TreeNode(q0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_2).val=-1314070259;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_2).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_2);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=1745906653;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=257134431;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\nstruct TreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test issame_struct_TreeNodemul_struct_TreeNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=issame(p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_issame_struct_TreeNodemul_struct_TreeNodemul_directed_3(void) {\n{\nAKA_test_case_name=\"issame_struct_TreeNodemul_struct_TreeNodemul_directed_3\";\n\n// set up\n;\n\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_0\\\\p\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0).right = nullptr;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\nstruct TreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0).right = nullptr;\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\nstruct TreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test issame_struct_TreeNodemul_struct_TreeNodemul_directed_3\");bool AKA_ACTUAL_OUTPUT=issame(p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_issame_struct_TreeNodemul_struct_TreeNodemul_directed_2(void) {\n{\nAKA_test_case_name=\"issame_struct_TreeNodemul_struct_TreeNodemul_directed_2\";\n\n// set up\n;\n\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_0\\\\p\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0).right;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\nstruct TreeNode* p = AKA_VECTOR_INIT_p[0];\n\nstruct TreeNode* q = nullptr;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test issame_struct_TreeNodemul_struct_TreeNodemul_directed_2\");bool AKA_ACTUAL_OUTPUT=issame(p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_issame_struct_TreeNodemul_struct_TreeNodemul_directed_1(void) {\n{\nAKA_test_case_name=\"issame_struct_TreeNodemul_struct_TreeNodemul_directed_1\";\n\n// set up\n;\n\n\nstruct TreeNode* p = nullptr;\n\nstruct TreeNode* q = nullptr;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test issame_struct_TreeNodemul_struct_TreeNodemul_directed_1\");bool AKA_ACTUAL_OUTPUT=issame(p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=261246397;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1460370438;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nstruct TreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_issame_struct_TreeNodemul_struct_TreeNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"issame_struct_TreeNodemul_struct_TreeNodemul_directed_0\";\n\n// set up\n;\n\n\nstruct TreeNode* p = nullptr;\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0).right;\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\nstruct TreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test issame_struct_TreeNodemul_struct_TreeNodemul_directed_0\");bool AKA_ACTUAL_OUTPUT=issame(p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\issame(struct TreeNode*,struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right = nullptr;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nstruct TreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\zqxl_leetcode\\Leetcode\\com-110\\_101 Symmetric Tree\\_101 Symmetric Tree.cpp\\issame(struct TreeNode*,struct TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool isSymmetric1(struct TreeNode* root) {\r \treturn issame(root, root);\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_isSymmetric1_struct_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"isSymmetric1_struct_TreeNodemul_random_1\";\n\n// set up\n;\n\nstd::vector<struct TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1149194208;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric1(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=2061682228;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric1(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\_101 Symmetric Tree.cpp\\\\isSymmetric1(struct TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nstruct TreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isSymmetric1_struct_TreeNodemul_random_1\");bool AKA_ACTUAL_OUTPUT=isSymmetric1(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-110\\\\_101 Symmetric Tree\\\\_101 Symmetric Tree.cpp\\\\isSymmetric1(struct TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nstruct TreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\zqxl_leetcode\\Leetcode\\com-110\\_101 Symmetric Tree\\_101 Symmetric Tree.cpp\\isSymmetric1(struct TreeNode*)"
    }
]