[
    {
        "f": [],
        "fm": "vector<vector<int> > combine(int n, int k) {\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tGetCombine(n, k, 1, solution, result);\r \t\treturn result;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_combine_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_combine_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=-2111054055;\n\n\nint k=-1141375166;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_combine_int_int_random_2\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->combine(n,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\combine(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=-2111054055;\n\n\nint k=-1141375166;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tvector<vector<int> > combine(int n, int k) {\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tGetCombine(n, k, 1, solution, result);\r \t\treturn result;\r \t}\r \tvoid GetCombine(\r \t    int n,\r \t    int k,\r \t    int level,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (solution.size() == k)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i <= n; i++)\r \t\t{\r \t\t\tsolution.push_back(i);\r \t\t\tGetCombine(n, k, i + 1, solution, result);\r \t\t\tsolution.pop_back();\r \t\t}\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Combinations.cpp\\Solution\\combine(int,int)"
    },
    {
        "f": [],
        "fm": "void GetCombine(\r \t    int n,\r \t    int k,\r \t    int level,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (solution.size() == k)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i <= n; i++)\r \t\t{\r \t\t\tsolution.push_back(i);\r \t\t\tGetCombine(n, k, i + 1, solution, result);\r \t\t\tsolution.pop_back();\r \t\t}\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=6;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_7\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=6;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=7;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_8\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=7;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_3\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=4;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_4\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=4;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_5\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=9;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=8;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_6\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=8;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_0\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=0;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_1\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=3;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_directed_2\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=3;\n\n\nint k=0;\n\n\nint level=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombine_int_int_int_vector_int_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_GetCombine_int_int_int_vector_int_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=7;\n\n\nint k=-1831430424;\n\n\nint level=4;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\nint solution_element0=-454359164;\nsolution.push_back(solution_element0);\nint solution_element1=-711654584;\nsolution.push_back(solution_element1);\nint solution_element2=497019842;\nsolution.push_back(solution_element2);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=-1307088069;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-861788646;\nresult_element0.push_back(result_element0_element1);\nresult.push_back(result_element0);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombine_int_int_int_vector_int_vector_vector_int_random_1\");AKA_INSTANCE___Solution->GetCombine(n,k,level,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combinations.cpp\\\\Solution\\\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combinations.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=7;\n\n\nint k=-1831430424;\n\n\nint level=4;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode level */\n/* VectorDataNode solution */\nint solution_element0=-454359164;\nsolution.push_back(solution_element0);\nint solution_element1=-711654584;\nsolution.push_back(solution_element1);\nint solution_element2=497019842;\nsolution.push_back(solution_element2);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=-1307088069;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-861788646;\nresult_element0.push_back(result_element0_element1);\nresult.push_back(result_element0);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tvector<vector<int> > combine(int n, int k) {\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tGetCombine(n, k, 1, solution, result);\r \t\treturn result;\r \t}\r \tvoid GetCombine(\r \t    int n,\r \t    int k,\r \t    int level,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (solution.size() == k)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i <= n; i++)\r \t\t{\r \t\t\tsolution.push_back(i);\r \t\t\tGetCombine(n, k, i + 1, solution, result);\r \t\t\tsolution.pop_back();\r \t\t}\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Combinations.cpp\\Solution\\GetCombine(int,int,int,vector<int>&,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int> > combinationSum(\r \t    vector<int> &candidates, int target)\r \t{\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tint sum = 0;\r \t\tstd::sort(candidates.begin(), candidates.end());\r \t\tGetCombinations(\r \t\t    candidates, sum, 0, target, solution, result);\r \t\treturn result;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_combinationSum_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_combinationSum_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint target=693244207;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-1639316012;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-1823721503;\ncandidates.push_back(candidates_element1);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_combinationSum_vector_int_int_random_1\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->combinationSum(candidates,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\combinationSum(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_candidates;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint target=693244207;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-1639316012;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-1823721503;\ncandidates.push_back(candidates_element1);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tvector<vector<int> > combinationSum(\r \t    vector<int> &candidates, int target)\r \t{\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tint sum = 0;\r \t\tstd::sort(candidates.begin(), candidates.end());\r \t\tGetCombinations(\r \t\t    candidates, sum, 0, target, solution, result);\r \t\treturn result;\r \t}\r \tvoid GetCombinations(\r \t    vector<int>& candidates,\r \t    int& sum,\r \t    int level,\r \t    int target,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (sum > target) return;\r \t\tif (sum == target)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i < candidates.size(); i++)\r \t\t{\r \t\t\tsum += candidates[i];\r \t\t\tsolution.push_back(candidates[i]);\r \t\t\tGetCombinations(\r \t\t\t    candidates, sum, i, target, solution, result);\r \t\t\tsolution.pop_back(); // do not miss cleaning the num\r \t\t\tsum -= candidates[i];\r \t\t}\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Combination_Sum.cpp\\Solution\\combinationSum(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "void GetCombinations(\r \t    vector<int>& candidates,\r \t    int& sum,\r \t    int level,\r \t    int target,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (sum > target) return;\r \t\tif (sum == target)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i < candidates.size(); i++)\r \t\t{\r \t\t\tsum += candidates[i];\r \t\t\tsolution.push_back(candidates[i]);\r \t\t\tGetCombinations(\r \t\t\t    candidates, sum, i, target, solution, result);\r \t\t\tsolution.pop_back(); // do not miss cleaning the num\r \t\t\tsum -= candidates[i];\r \t\t}\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=1605707765;\n\n\nint level=8;\n\n\nint target=-1406179527;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-253481584;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-1200663618;\ncandidates.push_back(candidates_element1);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=-1536021454;\nsolution.push_back(solution_element0);\nint solution_element1=-1978475926;\nsolution.push_back(solution_element1);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=741744559;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-1460904373;\nresult_element0.push_back(result_element0_element1);\nint result_element0_element2=160880977;\nresult_element0.push_back(result_element0_element2);\nresult.push_back(result_element0);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_2\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=1605707765;\n\n\nint level=8;\n\n\nint target=-1406179527;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-253481584;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-1200663618;\ncandidates.push_back(candidates_element1);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=-1536021454;\nsolution.push_back(solution_element0);\nint solution_element1=-1978475926;\nsolution.push_back(solution_element1);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=741744559;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-1460904373;\nresult_element0.push_back(result_element0_element1);\nint result_element0_element2=160880977;\nresult_element0.push_back(result_element0_element2);\nresult.push_back(result_element0);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-1654516171;\n\n\nint level=6;\n\n\nint target=-395861002;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=636323194;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-340982681;\ncandidates.push_back(candidates_element1);\nint candidates_element2=1180638925;\ncandidates.push_back(candidates_element2);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=1221011273;\nsolution.push_back(solution_element0);\nint solution_element1=1413063625;\nsolution.push_back(solution_element1);\nint solution_element2=325045095;\nsolution.push_back(solution_element2);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=1857336290;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-894653417;\nresult_element0.push_back(result_element0_element1);\nint result_element0_element2=-1674744394;\nresult_element0.push_back(result_element0_element2);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=-532196111;\nresult_element1.push_back(result_element1_element0);\nresult.push_back(result_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_1\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-1654516171;\n\n\nint level=6;\n\n\nint target=-395861002;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=636323194;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-340982681;\ncandidates.push_back(candidates_element1);\nint candidates_element2=1180638925;\ncandidates.push_back(candidates_element2);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=1221011273;\nsolution.push_back(solution_element0);\nint solution_element1=1413063625;\nsolution.push_back(solution_element1);\nint solution_element2=325045095;\nsolution.push_back(solution_element2);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=1857336290;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-894653417;\nresult_element0.push_back(result_element0_element1);\nint result_element0_element2=-1674744394;\nresult_element0.push_back(result_element0_element2);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=-532196111;\nresult_element1.push_back(result_element1_element0);\nresult.push_back(result_element1);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_2\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_3\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_0\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_1\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_6\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_7\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_4\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_5\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_8\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tvector<vector<int> > combinationSum(\r \t    vector<int> &candidates, int target)\r \t{\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tint sum = 0;\r \t\tstd::sort(candidates.begin(), candidates.end());\r \t\tGetCombinations(\r \t\t    candidates, sum, 0, target, solution, result);\r \t\treturn result;\r \t}\r \tvoid GetCombinations(\r \t    vector<int>& candidates,\r \t    int& sum,\r \t    int level,\r \t    int target,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (sum > target) return;\r \t\tif (sum == target)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i < candidates.size(); i++)\r \t\t{\r \t\t\tsum += candidates[i];\r \t\t\tsolution.push_back(candidates[i]);\r \t\t\tGetCombinations(\r \t\t\t    candidates, sum, i, target, solution, result);\r \t\t\tsolution.pop_back(); // do not miss cleaning the num\r \t\t\tsum -= candidates[i];\r \t\t}\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Combination_Sum.cpp\\Solution\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int> > combinationSum2(\r \t    vector<int> &num, int target)\r \t{\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tint sum = 0;\r \t\tstd::sort(num.begin(), num.end());\r \t\tGetCombinations(num, sum, 0, target, solution, result);\r \t\treturn result;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_combinationSum2_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_combinationSum2_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=181897136;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-1001358846;\nnum.push_back(num_element0);\nint num_element1=1851935984;\nnum.push_back(num_element1);\nint num_element2=-422341560;\nnum.push_back(num_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_combinationSum2_vector_int_int_random_1\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->combinationSum2(num,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\combinationSum2(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=181897136;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-1001358846;\nnum.push_back(num_element0);\nint num_element1=1851935984;\nnum.push_back(num_element1);\nint num_element2=-422341560;\nnum.push_back(num_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tvector<vector<int> > combinationSum2(\r \t    vector<int> &num, int target)\r \t{\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tint sum = 0;\r \t\tstd::sort(num.begin(), num.end());\r \t\tGetCombinations(num, sum, 0, target, solution, result);\r \t\treturn result;\r \t}\r \r \tvoid GetCombinations(\r \t    vector<int>& candidates,\r \t    int& sum,\r \t    int level,\r \t    int target,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (sum > target) return;\r \t\tif (sum == target)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i < candidates.size(); i++)\r \t\t{\r \t\t\tsum += candidates[i];\r \t\t\tsolution.push_back(candidates[i]);\r \t\t\tGetCombinations(\r \t\t\t    candidates, sum, i + 1, target, solution, result);\r \t\t\tsolution.pop_back();\r \t\t\tsum -= candidates[i];\r \t\t\twhile ( i < candidates.size() - 1\r \t\t\t        && candidates[i] == candidates[i + 1])\r \t\t\t\ti++;\r \t\t}\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Combination_Sum_II.cpp\\Solution\\combinationSum2(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "void GetCombinations(\r \t    vector<int>& candidates,\r \t    int& sum,\r \t    int level,\r \t    int target,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (sum > target) return;\r \t\tif (sum == target)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i < candidates.size(); i++)\r \t\t{\r \t\t\tsum += candidates[i];\r \t\t\tsolution.push_back(candidates[i]);\r \t\t\tGetCombinations(\r \t\t\t    candidates, sum, i + 1, target, solution, result);\r \t\t\tsolution.pop_back();\r \t\t\tsum -= candidates[i];\r \t\t\twhile ( i < candidates.size() - 1\r \t\t\t        && candidates[i] == candidates[i + 1])\r \t\t\t\ti++;\r \t\t}\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-787722127;\n\n\nint level=4;\n\n\nint target=-1477799002;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=855417018;\ncandidates.push_back(candidates_element0);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=415014271;\nsolution.push_back(solution_element0);\nint solution_element1=1635168983;\nsolution.push_back(solution_element1);\nint solution_element2=714819262;\nsolution.push_back(solution_element2);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=208389605;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=676568816;\nresult_element0.push_back(result_element0_element1);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=-261544819;\nresult_element1.push_back(result_element1_element0);\nint result_element1_element1=1687865661;\nresult_element1.push_back(result_element1_element1);\nresult.push_back(result_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_4\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-787722127;\n\n\nint level=4;\n\n\nint target=-1477799002;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=855417018;\ncandidates.push_back(candidates_element0);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=415014271;\nsolution.push_back(solution_element0);\nint solution_element1=1635168983;\nsolution.push_back(solution_element1);\nint solution_element2=714819262;\nsolution.push_back(solution_element2);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=208389605;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=676568816;\nresult_element0.push_back(result_element0_element1);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=-261544819;\nresult_element1.push_back(result_element1_element0);\nint result_element1_element1=1687865661;\nresult_element1.push_back(result_element1_element1);\nresult.push_back(result_element1);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_16(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_16\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_16\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_15(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_15\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_15\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_17(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_17\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_17\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_10(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_10\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_10\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=0;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-1916977181;\n\n\nint level=8;\n\n\nint target=40593799;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-2138368569;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-909271969;\ncandidates.push_back(candidates_element1);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=-1073809365;\nsolution.push_back(solution_element0);\nint solution_element1=-2069185519;\nsolution.push_back(solution_element1);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=-659408186;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-2016553648;\nresult_element0.push_back(result_element0_element1);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=649599252;\nresult_element1.push_back(result_element1_element0);\nint result_element1_element1=-1352020509;\nresult_element1.push_back(result_element1_element1);\nresult.push_back(result_element1);\nvector<int> result_element2;\nint result_element2_element0=-509706981;\nresult_element2.push_back(result_element2_element0);\nresult.push_back(result_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_0\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-1916977181;\n\n\nint level=8;\n\n\nint target=40593799;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-2138368569;\ncandidates.push_back(candidates_element0);\nint candidates_element1=-909271969;\ncandidates.push_back(candidates_element1);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=-1073809365;\nsolution.push_back(solution_element0);\nint solution_element1=-2069185519;\nsolution.push_back(solution_element1);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=-659408186;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-2016553648;\nresult_element0.push_back(result_element0_element1);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=649599252;\nresult_element1.push_back(result_element1_element0);\nint result_element1_element1=-1352020509;\nresult_element1.push_back(result_element1_element1);\nresult.push_back(result_element1);\nvector<int> result_element2;\nint result_element2_element0=-509706981;\nresult_element2.push_back(result_element2_element0);\nresult.push_back(result_element2);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_12(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_12\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_12\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_11(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_11\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_14(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_14\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_9(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_9\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_13(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_13\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_directed_13\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Combination_Sum_II.cpp\\\\Solution\\\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Combination_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=0;\n\n\nint level=0;\n\n\nint target=1;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\n/* VectorDataNode result */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tvector<vector<int> > combinationSum2(\r \t    vector<int> &num, int target)\r \t{\r \t\tvector<vector<int> > result;\r \t\tvector<int> solution;\r \t\tint sum = 0;\r \t\tstd::sort(num.begin(), num.end());\r \t\tGetCombinations(num, sum, 0, target, solution, result);\r \t\treturn result;\r \t}\r \r \tvoid GetCombinations(\r \t    vector<int>& candidates,\r \t    int& sum,\r \t    int level,\r \t    int target,\r \t    vector<int>& solution,\r \t    vector<vector<int> >& result)\r \t{\r \t\tif (sum > target) return;\r \t\tif (sum == target)\r \t\t{\r \t\t\tresult.push_back(solution);\r \t\t\treturn;\r \t\t}\r \t\tfor (int i = level; i < candidates.size(); i++)\r \t\t{\r \t\t\tsum += candidates[i];\r \t\t\tsolution.push_back(candidates[i]);\r \t\t\tGetCombinations(\r \t\t\t    candidates, sum, i + 1, target, solution, result);\r \t\t\tsolution.pop_back();\r \t\t\tsum -= candidates[i];\r \t\t\twhile ( i < candidates.size() - 1\r \t\t\t        && candidates[i] == candidates[i + 1])\r \t\t\t\ti++;\r \t\t}\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Combination_Sum_II.cpp\\Solution\\GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *buildTree(\r \t    vector<int> &preorder,\r \t    vector<int> &inorder)\r \t{\r \t\treturn BuildTreePI( preorder, inorder,\r \t\t                    0, preorder.size() - 1, 0, preorder.size());\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_buildTree_vector_int_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_buildTree_vector_int_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=713710850;\npreorder.push_back(preorder_element0);\nint preorder_element1=1009960755;\npreorder.push_back(preorder_element1);\n/* VectorDataNode inorder */\nint inorder_element0=-1944457448;\ninorder.push_back(inorder_element0);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildTree_vector_int_vector_int_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buildTree(preorder,inorder);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\buildTree(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=713710850;\npreorder.push_back(preorder_element0);\nint preorder_element1=1009960755;\npreorder.push_back(preorder_element1);\n/* VectorDataNode inorder */\nint inorder_element0=-1944457448;\ninorder.push_back(inorder_element0);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tTreeNode *buildTree(\r \t    vector<int> &preorder,\r \t    vector<int> &inorder)\r \t{\r \t\treturn BuildTreePI( preorder, inorder,\r \t\t                    0, preorder.size() - 1, 0, preorder.size());\r \t}\r \tTreeNode* BuildTreePI(\r \t    vector<int> &preorder,\r \t    vector<int> &inorder,\r \t    int p_s, int p_e,\r \t    int i_s, int i_e)\r \t{\r \t\tif (p_s > p_e)\r \t\t\treturn NULL;\r \t\tint pivot = preorder[i_s];\r \t\tint i = p_s;\r \t\tfor (; i < p_e; i++)\r \t\t{\r \t\t\tif (inorder[i] == pivot)\r \t\t\t\tbreak;\r \t\t}\r \t\tTreeNode* node = new TreeNode(pivot);\r \t\tnode->left = BuildTreePI(preorder, inorder,\r \t\t                         p_s, i - 1, i_s + 1, i - p_s + i_s);\r \t\tnode->right = BuildTreePI(preorder, inorder,\r \t\t                          i + 1, p_e, i - p_s + i_s + 1, i_e);\r \t\treturn node;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode* BuildTreePI(\r \t    vector<int> &preorder,\r \t    vector<int> &inorder,\r \t    int p_s, int p_e,\r \t    int i_s, int i_e)\r \t{\r \t\tif (p_s > p_e)\r \t\t\treturn NULL;\r \t\tint pivot = preorder[i_s];\r \t\tint i = p_s;\r \t\tfor (; i < p_e; i++)\r \t\t{\r \t\t\tif (inorder[i] == pivot)\r \t\t\t\tbreak;\r \t\t}\r \t\tTreeNode* node = new TreeNode(pivot);\r \t\tnode->left = BuildTreePI(preorder, inorder,\r \t\t                         p_s, i - 1, i_s + 1, i - p_s + i_s);\r \t\tnode->right = BuildTreePI(preorder, inorder,\r \t\t                          i + 1, p_e, i - p_s + i_s + 1, i_e);\r \t\treturn node;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=9;\n\n\nint i_s=-1683561807;\n\n\nint i_e=-1477293015;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-487693215;\npreorder.push_back(preorder_element0);\nint preorder_element1=-1106859475;\npreorder.push_back(preorder_element1);\nint preorder_element2=1664299103;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=-868197453;\ninorder.push_back(inorder_element0);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=9;\n\n\nint i_s=-1683561807;\n\n\nint i_e=-1477293015;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-487693215;\npreorder.push_back(preorder_element0);\nint preorder_element1=-1106859475;\npreorder.push_back(preorder_element1);\nint preorder_element2=1664299103;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=-868197453;\ninorder.push_back(inorder_element0);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=1;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=1;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=10;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_4\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=10;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=4;\n\n\nint p_e=2;\n\n\nint i_s=-1494126025;\n\n\nint i_e=1923925910;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-545051230;\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\nint inorder_element0=1254070302;\ninorder.push_back(inorder_element0);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=4;\n\n\nint p_e=2;\n\n\nint i_s=-1494126025;\n\n\nint i_e=1923925910;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-545051230;\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\nint inorder_element0=1254070302;\ninorder.push_back(inorder_element0);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=5;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=5;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=6;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=6;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=9;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_directed_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\Solution\\\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=0;\n\n\nint p_e=9;\n\n\nint i_s=0;\n\n\nint i_e=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tTreeNode *buildTree(\r \t    vector<int> &preorder,\r \t    vector<int> &inorder)\r \t{\r \t\treturn BuildTreePI( preorder, inorder,\r \t\t                    0, preorder.size() - 1, 0, preorder.size());\r \t}\r \tTreeNode* BuildTreePI(\r \t    vector<int> &preorder,\r \t    vector<int> &inorder,\r \t    int p_s, int p_e,\r \t    int i_s, int i_e)\r \t{\r \t\tif (p_s > p_e)\r \t\t\treturn NULL;\r \t\tint pivot = preorder[i_s];\r \t\tint i = p_s;\r \t\tfor (; i < p_e; i++)\r \t\t{\r \t\t\tif (inorder[i] == pivot)\r \t\t\t\tbreak;\r \t\t}\r \t\tTreeNode* node = new TreeNode(pivot);\r \t\tnode->left = BuildTreePI(preorder, inorder,\r \t\t                         p_s, i - 1, i_s + 1, i - p_s + i_s);\r \t\tnode->right = BuildTreePI(preorder, inorder,\r \t\t                          i + 1, p_e, i - p_s + i_s + 1, i_e);\r \t\treturn node;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp\\Solution\\BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)"
    },
    {
        "f": [],
        "fm": "int maxArea(vector<int> &height) {\r \t\tint start = 0;\r \t\tint end = height.size() - 1;\r \t\tint maxV = INT_MIN;\r \t\twhile (start < end)\r \t\t{\r \t\t\tint contain = min(height[end], height[start]) * (end - start);\r \t\t\tmaxV = max(maxV, contain);\r \t\t\tif (height[start] <= height[end])\r \t\t\t{\r \t\t\t\tstart++;\r \t\t\t}\r \t\t\telse\r \t\t\t{\r \t\t\t\tend--;\r \t\t\t}\r \t\t}\r \t\treturn maxV;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxArea_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maxArea_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Container_With_Most_Water.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> height;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode height */\nint height_element0=262189561;\nheight.push_back(height_element0);\nint height_element1=53835229;\nheight.push_back(height_element1);\nint height_element2=6528382;\nheight.push_back(height_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxArea_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxArea(height);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Container_With_Most_Water.cpp\\\\Solution\\\\maxArea(vector<int>&)\");\n\n\nvector<int> EXPECTED_height;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Container_With_Most_Water.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> height;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode height */\nint height_element0=262189561;\nheight.push_back(height_element0);\nint height_element1=53835229;\nheight.push_back(height_element1);\nint height_element2=6528382;\nheight.push_back(height_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxArea_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_maxArea_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Container_With_Most_Water.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> height;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode height */\nint height_element0=-1789346117;\nheight.push_back(height_element0);\nint height_element1=437129088;\nheight.push_back(height_element1);\nint height_element2=935244211;\nheight.push_back(height_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxArea_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxArea(height);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Container_With_Most_Water.cpp\\\\Solution\\\\maxArea(vector<int>&)\");\n\n\nvector<int> EXPECTED_height;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Container_With_Most_Water.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> height;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode height */\nint height_element0=-1789346117;\nheight.push_back(height_element0);\nint height_element1=437129088;\nheight.push_back(height_element1);\nint height_element2=935244211;\nheight.push_back(height_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tint maxArea(vector<int> &height) {\r \t\tint start = 0;\r \t\tint end = height.size() - 1;\r \t\tint maxV = INT_MIN;\r \t\twhile (start < end)\r \t\t{\r \t\t\tint contain = min(height[end], height[start]) * (end - start);\r \t\t\tmaxV = max(maxV, contain);\r \t\t\tif (height[start] <= height[end])\r \t\t\t{\r \t\t\t\tstart++;\r \t\t\t}\r \t\t\telse\r \t\t\t{\r \t\t\t\tend--;\r \t\t\t}\r \t\t}\r \t\treturn maxV;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Container_With_Most_Water.cpp\\Solution\\maxArea(vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *sortedArrayToBST(vector<int> &num) {\r \t\treturn BuildTree(num, 0, num.size() - 1);\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_sortedArrayToBST_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_sortedArrayToBST_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=396007869;\nnum.push_back(num_element0);\nint num_element1=-1427265845;\nnum.push_back(num_element1);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedArrayToBST_vector_int_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedArrayToBST(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\Solution\\\\sortedArrayToBST(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=396007869;\nnum.push_back(num_element0);\nint num_element1=-1427265845;\nnum.push_back(num_element1);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tTreeNode *sortedArrayToBST(vector<int> &num) {\r \t\treturn BuildTree(num, 0, num.size() - 1);\r \t}\r \t\r \tTreeNode *BuildTree(vector<int> &num, int start, int end)\r \t{\r \t\tif (start > end) return NULL;\r \t\tif (start == end) return new TreeNode(num[start]);\r \t\tint mid = (start + end) / 2;\r \t\tTreeNode *node = new TreeNode(num[mid]);\r \t\tnode->left = BuildTree(num, start, mid - 1);\r \t\tnode->right = BuildTree(num, mid + 1, end);\r \t\treturn node;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *BuildTree(vector<int> &num, int start, int end)\r \t{\r \t\tif (start > end) return NULL;\r \t\tif (start == end) return new TreeNode(num[start]);\r \t\tint mid = (start + end) / 2;\r \t\tTreeNode *node = new TreeNode(num[mid]);\r \t\tnode->left = BuildTree(num, start, mid - 1);\r \t\tnode->right = BuildTree(num, mid + 1, end);\r \t\treturn node;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTree_vector_int_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_BuildTree_vector_int_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=894419044;\n\n\nint end=-1024897018;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=559546826;\nnum.push_back(num_element0);\nint num_element1=-1925876381;\nnum.push_back(num_element1);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTree_vector_int_int_int_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTree(num,start,end);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\Solution\\\\BuildTree(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=894419044;\n\n\nint end=-1024897018;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=559546826;\nnum.push_back(num_element0);\nint num_element1=-1925876381;\nnum.push_back(num_element1);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTree_vector_int_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_BuildTree_vector_int_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=0;\n\n\nint end=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTree_vector_int_int_int_directed_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTree(num,start,end);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\Solution\\\\BuildTree(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=0;\n\n\nint end=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildTree_vector_int_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_BuildTree_vector_int_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=-1578574882;\n\n\nint end=1509497354;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-261852390;\nnum.push_back(num_element0);\nint num_element1=207708876;\nnum.push_back(num_element1);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTree_vector_int_int_int_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTree(num,start,end);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\Solution\\\\BuildTree(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=-1578574882;\n\n\nint end=1509497354;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-261852390;\nnum.push_back(num_element0);\nint num_element1=207708876;\nnum.push_back(num_element1);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tTreeNode *sortedArrayToBST(vector<int> &num) {\r \t\treturn BuildTree(num, 0, num.size() - 1);\r \t}\r \t\r \tTreeNode *BuildTree(vector<int> &num, int start, int end)\r \t{\r \t\tif (start > end) return NULL;\r \t\tif (start == end) return new TreeNode(num[start]);\r \t\tint mid = (start + end) / 2;\r \t\tTreeNode *node = new TreeNode(num[mid]);\r \t\tnode->left = BuildTree(num, start, mid - 1);\r \t\tnode->right = BuildTree(num, mid + 1, end);\r \t\treturn node;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Convert_Sorted_Array_to_Binary_Search_Tree.cpp\\Solution\\BuildTree(vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode *sortedListToBST(ListNode *head) {\r \t\tint len = 0;\r \t\tListNode *p = head;\r \t\twhile (p)\r \t\t{\r \t\t\tlen++;\r \t\t\tp = p->next;\r \t\t}\r \t\treturn BuildBST(head, 0, len - 1);\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_sortedListToBST_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_sortedListToBST_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=861688365;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1239406977;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedListToBST_ListNodemul_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedListToBST(head);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\Solution\\\\sortedListToBST(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=861688365;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1239406977;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tTreeNode *sortedListToBST(ListNode *head) {\r \t\tint len = 0;\r \t\tListNode *p = head;\r \t\twhile (p)\r \t\t{\r \t\t\tlen++;\r \t\t\tp = p->next;\r \t\t}\r \t\treturn BuildBST(head, 0, len - 1);\r \t}\r \r \tTreeNode* BuildBST(ListNode*& list, int start, int end)\r \t{\r \t\tif (start > end) return NULL;\r \t\tint mid = (start + end) / 2;\r \t\tTreeNode *leftChild = BuildBST(list, start, mid - 1);\r \t\tTreeNode *parent = new TreeNode(list->val);\r \t\tparent->left = leftChild;\r \t\tlist = list->next;\r \t\tparent->right = BuildBST(list, mid + 1, end);\r \t\treturn parent;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\Solution\\sortedListToBST(ListNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode* BuildBST(ListNode*& list, int start, int end)\r \t{\r \t\tif (start > end) return NULL;\r \t\tint mid = (start + end) / 2;\r \t\tTreeNode *leftChild = BuildBST(list, start, mid - 1);\r \t\tTreeNode *parent = new TreeNode(list->val);\r \t\tparent->left = leftChild;\r \t\tlist = list->next;\r \t\tparent->right = BuildBST(list, mid + 1, end);\r \t\treturn parent;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_BuildBST_ListNodemul_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_BuildBST_ListNodemul_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_list;\n\n\n/* SubStructDataNode list */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list0_x=720394690;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_0\\\\list\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_0 = new ::ListNode(list0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_0).val=1642740660;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_0).next;\n\nAKA_VECTOR_INIT_list.push_back(AKA_VECTOR_INIT_list_0);\n\n\n/* SubStructDataNode list */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_x=1083038176;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1 = new ::ListNode(list1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1).val=704253561;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_list_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_next0_x=-359797065;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1_DOT_next_0 = new ::ListNode(list1_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1_DOT_next_0).val=-610116129;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_1_DOT_next_0).next;\nAKA_VECTOR_INIT_list_1_DOT_next.push_back(AKA_VECTOR_INIT_list_1_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_next1_x=-1000881388;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1_DOT_next_1 = new ::ListNode(list1_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1_DOT_next_1).val=-2054534775;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_1_DOT_next_1).next;\nAKA_VECTOR_INIT_list_1_DOT_next.push_back(AKA_VECTOR_INIT_list_1_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_next2_x=1166772642;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1_DOT_next_2 = new ::ListNode(list1_next2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1_DOT_next_2).val=1271068258;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_1_DOT_next_2).next;\nAKA_VECTOR_INIT_list_1_DOT_next.push_back(AKA_VECTOR_INIT_list_1_DOT_next_2);\n(*AKA_VECTOR_INIT_list_1).next = AKA_VECTOR_INIT_list_1_DOT_next[0];\n\nAKA_VECTOR_INIT_list.push_back(AKA_VECTOR_INIT_list_1);\n\nListNode* list = AKA_VECTOR_INIT_list[0];\n\n\nint start=931127190;\n\n\nint end=972831173;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode list */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildBST_ListNodemul_int_int_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildBST(list,start,end);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\Solution\\\\BuildBST(ListNode*&,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_list;\n\n\n/* SubStructDataNode list */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list0_x=720394690;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_0\\\\list\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_0 = new ::ListNode(list0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_0).val=1642740660;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_0).next;\n\nAKA_VECTOR_INIT_list.push_back(AKA_VECTOR_INIT_list_0);\n\n\n/* SubStructDataNode list */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_x=1083038176;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1 = new ::ListNode(list1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1).val=704253561;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_list_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_next0_x=-359797065;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1_DOT_next_0 = new ::ListNode(list1_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1_DOT_next_0).val=-610116129;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_1_DOT_next_0).next;\nAKA_VECTOR_INIT_list_1_DOT_next.push_back(AKA_VECTOR_INIT_list_1_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_next1_x=-1000881388;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1_DOT_next_1 = new ::ListNode(list1_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1_DOT_next_1).val=-2054534775;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_1_DOT_next_1).next;\nAKA_VECTOR_INIT_list_1_DOT_next.push_back(AKA_VECTOR_INIT_list_1_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint list1_next2_x=1166772642;\nAKA_mark(\"Calling: .\\\\three\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\\\BuildBST(ListNode*&,int,int)\\\\list\\\\AKA_VECTOR_INIT_list_1\\\\list\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_list_1_DOT_next_2 = new ::ListNode(list1_next2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_list_1_DOT_next_2).val=1271068258;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_list_1_DOT_next_2).next;\nAKA_VECTOR_INIT_list_1_DOT_next.push_back(AKA_VECTOR_INIT_list_1_DOT_next_2);\n(*AKA_VECTOR_INIT_list_1).next = AKA_VECTOR_INIT_list_1_DOT_next[0];\n\nAKA_VECTOR_INIT_list.push_back(AKA_VECTOR_INIT_list_1);\n\nListNode* list = AKA_VECTOR_INIT_list[0];\n\n\nint start=931127190;\n\n\nint end=972831173;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode list */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tTreeNode *sortedListToBST(ListNode *head) {\r \t\tint len = 0;\r \t\tListNode *p = head;\r \t\twhile (p)\r \t\t{\r \t\t\tlen++;\r \t\t\tp = p->next;\r \t\t}\r \t\treturn BuildBST(head, 0, len - 1);\r \t}\r \r \tTreeNode* BuildBST(ListNode*& list, int start, int end)\r \t{\r \t\tif (start > end) return NULL;\r \t\tint mid = (start + end) / 2;\r \t\tTreeNode *leftChild = BuildBST(list, start, mid - 1);\r \t\tTreeNode *parent = new TreeNode(list->val);\r \t\tparent->left = leftChild;\r \t\tlist = list->next;\r \t\tparent->right = BuildBST(list, mid + 1, end);\r \t\treturn parent;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Convert_Sorted_List_to_Binary_Search_Tree.cpp\\Solution\\BuildBST(ListNode*&,int,int)"
    },
    {
        "f": [],
        "fm": "RandomListNode *copyRandomList(RandomListNode *head) {\r \t\t//insert nodes\r \t\tRandomListNode * cur = head;\r \t\twhile (cur != NULL)\r \t\t{\r \t\t\tRandomListNode* temp = new RandomListNode(cur->label);\r \t\t\ttemp->next = cur->next;\r \t\t\tcur->next = temp;\r \t\t\tcur = temp->next;\r \t\t}\r \t\t// copy random pointer\r \t\tcur = head;\r \t\twhile (cur != NULL)\r \t\t{\r \t\t\tRandomListNode* temp = cur->next;\r \t\t\tif (cur->random != NULL)\r \t\t\t\ttemp->random = cur->random->next;\r \t\t\tcur = temp->next;\r \t\t}\r \t\t//decouple two links\r \t\tcur = head;\r \t\tRandomListNode* dup = head == NULL ? NULL : head->next;\r \t\twhile (cur != NULL)\r \t\t{\r \t\t\tRandomListNode* temp = cur->next;\r \t\t\tcur->next = temp->next;\r \t\t\tif (temp->next != NULL)\r \t\t\t\ttemp->next = temp->next->next;\r \t\t\tcur = cur->next;\r \t\t}\r \t\treturn dup;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_copyRandomList_RandomListNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_copyRandomList_RandomListNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<RandomListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode RandomListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-891618655;\nAKA_mark(\"Calling: .\\\\three\\\\Copy_List_with_Random_Pointer.cpp\\\\RandomListNode\\\\RandomListNode(int)|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\copyRandomList(RandomListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\RandomListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::RandomListNode(head0_x);\n/* NormalNumberDataNode label */\n/* label : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<RandomListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode RandomListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-1116396653;\nAKA_mark(\"Calling: .\\\\three\\\\Copy_List_with_Random_Pointer.cpp\\\\RandomListNode\\\\RandomListNode(int)|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\copyRandomList(RandomListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\RandomListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::RandomListNode(head0_next0_x);\n/* NormalNumberDataNode label */\n/* label : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).random;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_head_0).random;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode RandomListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-248987037;\nAKA_mark(\"Calling: .\\\\three\\\\Copy_List_with_Random_Pointer.cpp\\\\RandomListNode\\\\RandomListNode(int)|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\copyRandomList(RandomListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\RandomListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::RandomListNode(head1_x);\n/* NormalNumberDataNode label */\n/* label : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_head_1).random;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nRandomListNode* head = AKA_VECTOR_INIT_head[0];\nRandomListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_copyRandomList_RandomListNodemul_random_3\");RandomListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->copyRandomList(head);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Copy_List_with_Random_Pointer.cpp\\\\Solution\\\\copyRandomList(RandomListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<RandomListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode RandomListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-891618655;\nAKA_mark(\"Calling: .\\\\three\\\\Copy_List_with_Random_Pointer.cpp\\\\RandomListNode\\\\RandomListNode(int)|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\copyRandomList(RandomListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\RandomListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::RandomListNode(head0_x);\n/* NormalNumberDataNode label */\n/* label : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<RandomListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode RandomListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-1116396653;\nAKA_mark(\"Calling: .\\\\three\\\\Copy_List_with_Random_Pointer.cpp\\\\RandomListNode\\\\RandomListNode(int)|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\copyRandomList(RandomListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\RandomListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::RandomListNode(head0_next0_x);\n/* NormalNumberDataNode label */\n/* label : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).random;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_head_0).random;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode RandomListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-248987037;\nAKA_mark(\"Calling: .\\\\three\\\\Copy_List_with_Random_Pointer.cpp\\\\RandomListNode\\\\RandomListNode(int)|ROOT\\\\Copy_List_with_Random_Pointer.cpp\\\\copyRandomList(RandomListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\RandomListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::RandomListNode(head1_x);\n/* NormalNumberDataNode label */\n/* label : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n/* PointerStructureDataNode random */\n(*AKA_VECTOR_INIT_head_1).random;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nRandomListNode* head = AKA_VECTOR_INIT_head[0];\nRandomListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tRandomListNode *copyRandomList(RandomListNode *head) {\r \t\t//insert nodes\r \t\tRandomListNode * cur = head;\r \t\twhile (cur != NULL)\r \t\t{\r \t\t\tRandomListNode* temp = new RandomListNode(cur->label);\r \t\t\ttemp->next = cur->next;\r \t\t\tcur->next = temp;\r \t\t\tcur = temp->next;\r \t\t}\r \t\t// copy random pointer\r \t\tcur = head;\r \t\twhile (cur != NULL)\r \t\t{\r \t\t\tRandomListNode* temp = cur->next;\r \t\t\tif (cur->random != NULL)\r \t\t\t\ttemp->random = cur->random->next;\r \t\t\tcur = temp->next;\r \t\t}\r \t\t//decouple two links\r \t\tcur = head;\r \t\tRandomListNode* dup = head == NULL ? NULL : head->next;\r \t\twhile (cur != NULL)\r \t\t{\r \t\t\tRandomListNode* temp = cur->next;\r \t\t\tcur->next = temp->next;\r \t\t\tif (temp->next != NULL)\r \t\t\t\ttemp->next = temp->next->next;\r \t\t\tcur = cur->next;\r \t\t}\r \t\treturn dup;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Copy_List_with_Random_Pointer.cpp\\Solution\\copyRandomList(RandomListNode*)"
    },
    {
        "f": [],
        "fm": "string countAndSay(int n) {\r \t\tstring seq = \"1\";\r \t\tint it = 1;\r \t\twhile (it < n)\r \t\t{\r \t\t\tstringstream newSeq;\r \t\t\tchar last = seq[0];\r \t\t\tint count = 0;\r \t\t\tfor (int i = 0; i <= seq.size(); i++)\r \t\t\t{\r \t\t\t\tif (seq[i] == last)\r \t\t\t\t{\r \t\t\t\t\tcount ++;\r \t\t\t\t\tcontinue;\r \t\t\t\t}\r \t\t\t\telse\r \t\t\t\t{\r \t\t\t\t\tnewSeq << count << last;\r \t\t\t\t\tlast = seq[i];\r \t\t\t\t\tcount = 1;\r \t\t\t\t}\r \t\t\t}\r \t\t\tseq = newSeq.str();\r \t\t\tit++;\r \t\t}\r \t\treturn seq;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_directed_5\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_directed_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_directed_4\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_directed_1\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=7;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=7;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_directed_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_directed_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=2;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tstring countAndSay(int n) {\r \t\tstring seq = \"1\";\r \t\tint it = 1;\r \t\twhile (it < n)\r \t\t{\r \t\t\tstringstream newSeq;\r \t\t\tchar last = seq[0];\r \t\t\tint count = 0;\r \t\t\tfor (int i = 0; i <= seq.size(); i++)\r \t\t\t{\r \t\t\t\tif (seq[i] == last)\r \t\t\t\t{\r \t\t\t\t\tcount ++;\r \t\t\t\t\tcontinue;\r \t\t\t\t}\r \t\t\t\telse\r \t\t\t\t{\r \t\t\t\t\tnewSeq << count << last;\r \t\t\t\t\tlast = seq[i];\r \t\t\t\t\tcount = 1;\r \t\t\t\t}\r \t\t\t}\r \t\t\tseq = newSeq.str();\r \t\t\tit++;\r \t\t}\r \t\treturn seq;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Count_and_Say.cpp\\Solution\\countAndSay(int)"
    },
    {
        "f": [],
        "fm": "int numDecodings(string s) {\r \t\tif (s.empty() || s[0] == '0') return 0;\r \t\tif (s.size() == 1) return check(s[0]);\r \t\tint fn = 0, fn_1 = 0, fn_2 = 1;\r \t\tfn_1 = (check(s[0]) * check(s[1])) + check(s[0], s[1]);\r \t\tfor (int i = 2; i < s.size(); i++)\r \t\t{\r \t\t\tif (check(s[i])) fn += fn_1;\r \t\t\tif (check(s[i - 1], s[i])) fn += fn_2;\r \t\t\tif (fn == 0)\r \t\t\t\treturn 0;\r \t\t\tfn_2 = fn_1;\r \t\t\tfn_1 = fn;\r \t\t\tfn = 0;\r \t\t}\r \t\treturn fn_1;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName908348 = new char[2];akaRandomName908348[0] = 0;akaRandomName908348[1] = '\\0';string s=akaRandomName908348;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_5\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName430984 = new char[2];akaRandomName430984[0] = 0;akaRandomName430984[1] = '\\0';string s=akaRandomName430984;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName816247 = new char[3];akaRandomName816247[0] = 0;akaRandomName816247[1] = 0;akaRandomName816247[2] = '\\0';string s=akaRandomName816247;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName211459 = new char[3];akaRandomName211459[0] = 0;akaRandomName211459[1] = 0;akaRandomName211459[2] = '\\0';string s=akaRandomName211459;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName393993 = new char[3];akaRandomName393993[0] = 0;akaRandomName393993[1] = 0;akaRandomName393993[2] = '\\0';string s=akaRandomName393993;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_7\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName978605 = new char[3];akaRandomName978605[0] = 0;akaRandomName978605[1] = 0;akaRandomName978605[2] = '\\0';string s=akaRandomName978605;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName219695 = new char[2];akaRandomName219695[0] = -20;akaRandomName219695[1] = '\\0';string s=akaRandomName219695;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName37302 = new char[2];akaRandomName37302[0] = -20;akaRandomName37302[1] = '\\0';string s=akaRandomName37302;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName660623 = new char[2];akaRandomName660623[0] = 0;akaRandomName660623[1] = '\\0';string s=akaRandomName660623;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_6\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName541059 = new char[2];akaRandomName541059[0] = 0;akaRandomName541059[1] = '\\0';string s=akaRandomName541059;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName961643 = new char[2];akaRandomName961643[0] = 0;akaRandomName961643[1] = '\\0';string s=akaRandomName961643;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName611695 = new char[2];akaRandomName611695[0] = 0;akaRandomName611695[1] = '\\0';string s=akaRandomName611695;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName561846 = new char[2];akaRandomName561846[0] = 0;akaRandomName561846[1] = '\\0';string s=akaRandomName561846;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName542991 = new char[2];akaRandomName542991[0] = 0;akaRandomName542991[1] = '\\0';string s=akaRandomName542991;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName129791 = new char[2];akaRandomName129791[0] = 0;akaRandomName129791[1] = '\\0';string s=akaRandomName129791;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName771426 = new char[2];akaRandomName771426[0] = 0;akaRandomName771426[1] = '\\0';string s=akaRandomName771426;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName697494 = new char[3];akaRandomName697494[0] = 0;akaRandomName697494[1] = 0;akaRandomName697494[2] = '\\0';string s=akaRandomName697494;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName371632 = new char[3];akaRandomName371632[0] = 0;akaRandomName371632[1] = 0;akaRandomName371632[2] = '\\0';string s=akaRandomName371632;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_9(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName376369 = new char[2];akaRandomName376369[0] = 48;akaRandomName376369[1] = '\\0';string s=akaRandomName376369;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_9\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName424674 = new char[2];akaRandomName424674[0] = 48;akaRandomName424674[1] = '\\0';string s=akaRandomName424674;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName241690 = new char[2];akaRandomName241690[0] = 0;akaRandomName241690[1] = '\\0';string s=akaRandomName241690;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_directed_8\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName853314 = new char[2];akaRandomName853314[0] = 0;akaRandomName853314[1] = '\\0';string s=akaRandomName853314;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tint numDecodings(string s) {\r \t\tif (s.empty() || s[0] == '0') return 0;\r \t\tif (s.size() == 1) return check(s[0]);\r \t\tint fn = 0, fn_1 = 0, fn_2 = 1;\r \t\tfn_1 = (check(s[0]) * check(s[1])) + check(s[0], s[1]);\r \t\tfor (int i = 2; i < s.size(); i++)\r \t\t{\r \t\t\tif (check(s[i])) fn += fn_1;\r \t\t\tif (check(s[i - 1], s[i])) fn += fn_2;\r \t\t\tif (fn == 0)\r \t\t\t\treturn 0;\r \t\t\tfn_2 = fn_1;\r \t\t\tfn_1 = fn;\r \t\t\tfn = 0;\r \t\t}\r \t\treturn fn_1;\r \t}\r \r \tint check(char one)\r \t{\r \t\treturn (one != '0') ? 1 : 0;\r \t}\r \t\r \tint check(char one, char two)\r \t{\r \t\treturn (one == '1' || (one == '2' && two <= '6')) ? 1 : 0;\r \t}\r \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Decode_Ways.cpp\\Solution\\numDecodings(string)"
    },
    {
        "f": [],
        "fm": "int check(char one)\r \t{\r \t\treturn (one != '0') ? 1 : 0;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_check_char_random_2(void) {\n{\nAKA_test_case_name=\"Solution_check_char_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=64;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_check_char_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->check(one);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\check(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=64;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tint numDecodings(string s) {\r \t\tif (s.empty() || s[0] == '0') return 0;\r \t\tif (s.size() == 1) return check(s[0]);\r \t\tint fn = 0, fn_1 = 0, fn_2 = 1;\r \t\tfn_1 = (check(s[0]) * check(s[1])) + check(s[0], s[1]);\r \t\tfor (int i = 2; i < s.size(); i++)\r \t\t{\r \t\t\tif (check(s[i])) fn += fn_1;\r \t\t\tif (check(s[i - 1], s[i])) fn += fn_2;\r \t\t\tif (fn == 0)\r \t\t\t\treturn 0;\r \t\t\tfn_2 = fn_1;\r \t\t\tfn_1 = fn;\r \t\t\tfn = 0;\r \t\t}\r \t\treturn fn_1;\r \t}\r \r \tint check(char one)\r \t{\r \t\treturn (one != '0') ? 1 : 0;\r \t}\r \t\r \tint check(char one, char two)\r \t{\r \t\treturn (one == '1' || (one == '2' && two <= '6')) ? 1 : 0;\r \t}\r \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Decode_Ways.cpp\\Solution\\check(char)"
    },
    {
        "f": [],
        "fm": "int check(char one, char two)\r \t{\r \t\treturn (one == '1' || (one == '2' && two <= '6')) ? 1 : 0;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_check_char_char_random_1(void) {\n{\nAKA_test_case_name=\"Solution_check_char_char_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=-15;\n\nchar two=-128;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalCharacterDataNode two */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_check_char_char_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->check(one,two);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\three\\\\Decode_Ways.cpp\\\\Solution\\\\check(char,char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=-15;\n\nchar two=-128;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalCharacterDataNode two */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tint numDecodings(string s) {\r \t\tif (s.empty() || s[0] == '0') return 0;\r \t\tif (s.size() == 1) return check(s[0]);\r \t\tint fn = 0, fn_1 = 0, fn_2 = 1;\r \t\tfn_1 = (check(s[0]) * check(s[1])) + check(s[0], s[1]);\r \t\tfor (int i = 2; i < s.size(); i++)\r \t\t{\r \t\t\tif (check(s[i])) fn += fn_1;\r \t\t\tif (check(s[i - 1], s[i])) fn += fn_2;\r \t\t\tif (fn == 0)\r \t\t\t\treturn 0;\r \t\t\tfn_2 = fn_1;\r \t\t\tfn_1 = fn;\r \t\t\tfn = 0;\r \t\t}\r \t\treturn fn_1;\r \t}\r \r \tint check(char one)\r \t{\r \t\treturn (one != '0') ? 1 : 0;\r \t}\r \t\r \tint check(char one, char two)\r \t{\r \t\treturn (one == '1' || (one == '2' && two <= '6')) ? 1 : 0;\r \t}\r \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\three\\Decode_Ways.cpp\\Solution\\check(char,char)"
    }
]