[
    {
        "f": [],
        "fm": "int missingNumber(vector<int>& nums) {\r         \r         int length = nums.size();\r         for(int i =0; i< length; i++) {\r             if(nums[i] == i) {\r                 continue;\r             }\r             \r             int j=i;\r             while(nums[j]<length && j != nums[j]) {\r                 int temp = nums[j];\r                 nums[j] = nums[temp];\r                 nums[temp] = temp;\r             }\r         }\r         \r         for(int i =0; i< length; i++) {\r             if(nums[i] != i)\r                 return i;\r         }\r         return length;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_missingNumber_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_missingNumber_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Missing_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1682330136;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_missingNumber_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->missingNumber(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Missing_Number.cpp\\\\Solution\\\\missingNumber(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Missing_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1682330136;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_missingNumber_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_missingNumber_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Missing_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=29131291;\nnums.push_back(nums_element0);\nint nums_element1=-1810724631;\nnums.push_back(nums_element1);\nint nums_element2=-927383138;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_missingNumber_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->missingNumber(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Missing_Number.cpp\\\\Solution\\\\missingNumber(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Missing_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=29131291;\nnums.push_back(nums_element0);\nint nums_element1=-1810724631;\nnums.push_back(nums_element1);\nint nums_element2=-927383138;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_missingNumber_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_missingNumber_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Missing_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_missingNumber_vector_int_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->missingNumber(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Missing_Number.cpp\\\\Solution\\\\missingNumber(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Missing_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int missingNumber(vector<int>& nums) {\r         \r         int length = nums.size();\r         for(int i =0; i< length; i++) {\r             if(nums[i] == i) {\r                 continue;\r             }\r             \r             int j=i;\r             while(nums[j]<length && j != nums[j]) {\r                 int temp = nums[j];\r                 nums[j] = nums[temp];\r                 nums[temp] = temp;\r             }\r         }\r         \r         for(int i =0; i< length; i++) {\r             if(nums[i] != i)\r                 return i;\r         }\r         return length;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Missing_Number.cpp\\Solution\\missingNumber(vector<int>&)"
    },
    {
        "f": [],
        "fm": "void nextPermutation(vector<int> &num) {\r         assert(num.size() > 0);\r         int vioIndex = num.size() - 1;\r         while (vioIndex > 0)\r         {\r             if (num[vioIndex - 1] < num[vioIndex])\r                 break;\r             vioIndex --;\r         }\r         if (vioIndex > 0)\r         {\r             vioIndex--;\r             int rightIndex = num.size() - 1;\r             while (rightIndex >= 0 && num[rightIndex] <= num[vioIndex])\r             {\r                 rightIndex --;\r             }\r             int swap = num[vioIndex];\r             num[vioIndex] = num[rightIndex];\r             num[rightIndex] = swap;\r             vioIndex++;\r         }\r         int end = num.size() - 1;\r         while (end > vioIndex)\r         {\r             int swap = num[vioIndex];\r             num[vioIndex] = num[end];\r             num[end] = swap;\r             end--;\r             vioIndex++;\r         }\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_nextPermutation_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_nextPermutation_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Next_Permutation.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_nextPermutation_vector_int_directed_0\");AKA_INSTANCE___Solution->nextPermutation(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Next_Permutation.cpp\\\\Solution\\\\nextPermutation(vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Next_Permutation.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_nextPermutation_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_nextPermutation_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Next_Permutation.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-29859744;\nnum.push_back(num_element0);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_nextPermutation_vector_int_random_4\");AKA_INSTANCE___Solution->nextPermutation(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Next_Permutation.cpp\\\\Solution\\\\nextPermutation(vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Next_Permutation.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-29859744;\nnum.push_back(num_element0);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_nextPermutation_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_nextPermutation_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Next_Permutation.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-1216693319;\nnum.push_back(num_element0);\nint num_element1=-627495035;\nnum.push_back(num_element1);\nint num_element2=-1947236089;\nnum.push_back(num_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_nextPermutation_vector_int_random_0\");AKA_INSTANCE___Solution->nextPermutation(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Next_Permutation.cpp\\\\Solution\\\\nextPermutation(vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Next_Permutation.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-1216693319;\nnum.push_back(num_element0);\nint num_element1=-627495035;\nnum.push_back(num_element1);\nint num_element2=-1947236089;\nnum.push_back(num_element2);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     void nextPermutation(vector<int> &num) {\r         assert(num.size() > 0);\r         int vioIndex = num.size() - 1;\r         while (vioIndex > 0)\r         {\r             if (num[vioIndex - 1] < num[vioIndex])\r                 break;\r             vioIndex --;\r         }\r         if (vioIndex > 0)\r         {\r             vioIndex--;\r             int rightIndex = num.size() - 1;\r             while (rightIndex >= 0 && num[rightIndex] <= num[vioIndex])\r             {\r                 rightIndex --;\r             }\r             int swap = num[vioIndex];\r             num[vioIndex] = num[rightIndex];\r             num[rightIndex] = swap;\r             vioIndex++;\r         }\r         int end = num.size() - 1;\r         while (end > vioIndex)\r         {\r             int swap = num[vioIndex];\r             num[vioIndex] = num[end];\r             num[end] = swap;\r             end--;\r             vioIndex++;\r         }\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Next_Permutation.cpp\\Solution\\nextPermutation(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool isPalindrome(int x) {\r         if (x < 0) return false;\r         int div = 1;\r         while (x / div >= 10)\r             div *= 10;\r         while (x > 0)\r         {\r             int l = x / div;\r             int r = x % 10;\r             if (l != r) return false;\r             x = x % div / 10;\r             div /= 100;\r         }\r         return true;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPalindrome_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isPalindrome_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Palindrome_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint x=3;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPalindrome_int_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPalindrome(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Palindrome_Number.cpp\\\\Solution\\\\isPalindrome(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Palindrome_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint x=3;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool isPalindrome(int x) {\r         if (x < 0) return false;\r         int div = 1;\r         while (x / div >= 10)\r             div *= 10;\r         while (x > 0)\r         {\r             int l = x / div;\r             int r = x % 10;\r             if (l != r) return false;\r             x = x % div / 10;\r             div /= 100;\r         }\r         return true;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Palindrome_Number.cpp\\Solution\\isPalindrome(int)"
    },
    {
        "f": [],
        "fm": "bool hasPathSum(TreeNode *root, int sum) {\r         return hasPathSum(root, 0, sum);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_hasPathSum_TreeNodemul_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_hasPathSum_TreeNodemul_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2039271468;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=82404959;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=-847038382;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_hasPathSum_TreeNodemul_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->hasPathSum(root,sum);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum.cpp\\\\Solution\\\\hasPathSum(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2039271468;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=82404959;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=-847038382;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool hasPathSum(TreeNode *root, int sum) {\r         return hasPathSum(root, 0, sum);\r     }\r     bool hasPathSum(TreeNode *root, int sum, int target) {\r         if (root == NULL) return false;\r         sum += root->val;\r         if (root->left == NULL && root->right == NULL) //leaf\r         {\r             if (sum == target)\r                 return true;\r             else\r                 return false;\r         }\r         return hasPathSum(root->left, sum, target)\r                || hasPathSum(root->right, sum, target);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Path_Sum.cpp\\Solution\\hasPathSum(TreeNode*,int)"
    },
    {
        "f": [],
        "fm": "bool hasPathSum(TreeNode *root, int sum, int target) {\r         if (root == NULL) return false;\r         sum += root->val;\r         if (root->left == NULL && root->right == NULL) //leaf\r         {\r             if (sum == target)\r                 return true;\r             else\r                 return false;\r         }\r         return hasPathSum(root->left, sum, target)\r                || hasPathSum(root->right, sum, target);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_hasPathSum_TreeNodemul_int_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_hasPathSum_TreeNodemul_int_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=0;\n\n\nint target=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_hasPathSum_TreeNodemul_int_int_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->hasPathSum(root,sum,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum.cpp\\\\Solution\\\\hasPathSum(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=0;\n\n\nint target=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_hasPathSum_TreeNodemul_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_hasPathSum_TreeNodemul_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right = nullptr;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=0;\n\n\nint target=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_hasPathSum_TreeNodemul_int_int_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->hasPathSum(root,sum,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum.cpp\\\\Solution\\\\hasPathSum(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right = nullptr;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=0;\n\n\nint target=0;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_hasPathSum_TreeNodemul_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_hasPathSum_TreeNodemul_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1806861872;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1327569472;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1365533551;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-944319243;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-344291882;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-201674529;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-422680923;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=2055419016;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=1730672706;\n\n\nint target=-1037086973;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_hasPathSum_TreeNodemul_int_int_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->hasPathSum(root,sum,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum.cpp\\\\Solution\\\\hasPathSum(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1806861872;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1327569472;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1365533551;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-944319243;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-344291882;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-201674529;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-422680923;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\hasPathSum(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=2055419016;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=1730672706;\n\n\nint target=-1037086973;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool hasPathSum(TreeNode *root, int sum) {\r         return hasPathSum(root, 0, sum);\r     }\r     bool hasPathSum(TreeNode *root, int sum, int target) {\r         if (root == NULL) return false;\r         sum += root->val;\r         if (root->left == NULL && root->right == NULL) //leaf\r         {\r             if (sum == target)\r                 return true;\r             else\r                 return false;\r         }\r         return hasPathSum(root->left, sum, target)\r                || hasPathSum(root->right, sum, target);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Path_Sum.cpp\\Solution\\hasPathSum(TreeNode*,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_int_random_0(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-717632679;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-717632679;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Path_Sum.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_int_random_5(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_5\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-456130134;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_5\");AKA_mark(\"Calling: .\\\\nine\\\\Path_Sum_II.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-456130134;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_5\");AKA_mark(\"Calling: .\\\\nine\\\\Path_Sum_II.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Path_Sum_II.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "vector<vector<int> > pathSum(TreeNode *root, int sum) {\r         vector<vector<int> > collect;\r         vector<int> solution;\r         if (root != NULL)\r             GetPath(root, sum, 0, solution, collect);\r         return collect;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_pathSum_TreeNodemul_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_pathSum_TreeNodemul_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-913475355;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\pathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=-45793305;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_pathSum_TreeNodemul_int_random_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->pathSum(root,sum);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum_II.cpp\\\\Solution\\\\pathSum(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-913475355;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\pathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=-45793305;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_pathSum_TreeNodemul_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_pathSum_TreeNodemul_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\n\n\nint sum=972336183;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_pathSum_TreeNodemul_int_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->pathSum(root,sum);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum_II.cpp\\\\Solution\\\\pathSum(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\n\n\nint sum=972336183;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<vector<int> > pathSum(TreeNode *root, int sum) {\r         vector<vector<int> > collect;\r         vector<int> solution;\r         if (root != NULL)\r             GetPath(root, sum, 0, solution, collect);\r         return collect;\r     }\r     void GetPath(TreeNode* node, int sum, int cal, vector<int>& solution, vector<vector<int> >& collect)\r     {\r         solution.push_back(node->val);\r         cal += node->val;\r         if (cal == sum && node->left == NULL && node->right == NULL)\r         {\r             collect.push_back(solution);\r         }\r         else\r         {\r             if (node->left != NULL)\r             {\r                 GetPath(node->left, sum, cal, solution, collect);\r             }\r             if (node->right != NULL)\r             {\r                 GetPath(node->right, sum, cal, solution, collect);\r             }\r         }\r         solution.pop_back();\r \r         return;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Path_Sum_II.cpp\\Solution\\pathSum(TreeNode*,int)"
    },
    {
        "f": [],
        "fm": "void GetPath(TreeNode* node, int sum, int cal, vector<int>& solution, vector<vector<int> >& collect)\r     {\r         solution.push_back(node->val);\r         cal += node->val;\r         if (cal == sum && node->left == NULL && node->right == NULL)\r         {\r             collect.push_back(solution);\r         }\r         else\r         {\r             if (node->left != NULL)\r             {\r                 GetPath(node->left, sum, cal, solution, collect);\r             }\r             if (node->right != NULL)\r             {\r                 GetPath(node->right, sum, cal, solution, collect);\r             }\r         }\r         solution.pop_back();\r \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetPath_TreeNodemul_int_int_vector_int_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_GetPath_TreeNodemul_int_int_vector_int_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=1041952985;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=-1405030857;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left0_x=1993464131;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_0 = new ::TreeNode(node0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).val=-726061836;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left1_x=1102663911;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_1 = new ::TreeNode(node0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).val=-1263301429;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_1);\n(*AKA_VECTOR_INIT_node_0).left = AKA_VECTOR_INIT_node_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_right0_x=499846060;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_right_0 = new ::TreeNode(node0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_right_0).val=-992428955;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_right_0).right;\nAKA_VECTOR_INIT_node_0_DOT_right.push_back(AKA_VECTOR_INIT_node_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_right1_x=1354169233;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_right_1 = new ::TreeNode(node0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_right_1).val=-1413221886;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_right_1).right;\nAKA_VECTOR_INIT_node_0_DOT_right.push_back(AKA_VECTOR_INIT_node_0_DOT_right_1);\n(*AKA_VECTOR_INIT_node_0).right = AKA_VECTOR_INIT_node_0_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_x=-154466315;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1 = new ::TreeNode(node1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1).val=118575603;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_left0_x=-45243125;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_left_0 = new ::TreeNode(node1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).val=624203398;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).right;\nAKA_VECTOR_INIT_node_1_DOT_left.push_back(AKA_VECTOR_INIT_node_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_left1_x=-2076604443;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_left_1 = new ::TreeNode(node1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_left_1).val=-1150565681;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_left_1).right;\nAKA_VECTOR_INIT_node_1_DOT_left.push_back(AKA_VECTOR_INIT_node_1_DOT_left_1);\n(*AKA_VECTOR_INIT_node_1).left = AKA_VECTOR_INIT_node_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_right0_x=-1333354684;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_right_0 = new ::TreeNode(node1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_right_0).val=689859039;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_right_0).right;\nAKA_VECTOR_INIT_node_1_DOT_right.push_back(AKA_VECTOR_INIT_node_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_right1_x=-608995423;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_right_1 = new ::TreeNode(node1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_right_1).val=-1933329555;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_right_1).right;\nAKA_VECTOR_INIT_node_1_DOT_right.push_back(AKA_VECTOR_INIT_node_1_DOT_right_1);\n(*AKA_VECTOR_INIT_node_1).right = AKA_VECTOR_INIT_node_1_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_1);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_x=-2086858312;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2 = new ::TreeNode(node2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2).val=2114015450;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left0_x=-1327925589;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_0 = new ::TreeNode(node2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).val=915203515;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left1_x=1397156978;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_1 = new ::TreeNode(node2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).val=1756539017;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left2_x=131074576;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_2 = new ::TreeNode(node2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).val=-414336335;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_2);\n(*AKA_VECTOR_INIT_node_2).left = AKA_VECTOR_INIT_node_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right0_x=-932987128;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_0 = new ::TreeNode(node2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).val=95968424;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right1_x=1130926260;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_1 = new ::TreeNode(node2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).val=1900531315;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right2_x=-382077162;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_2 = new ::TreeNode(node2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).val=1303773252;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_2);\n(*AKA_VECTOR_INIT_node_2).right = AKA_VECTOR_INIT_node_2_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_2);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint sum=-1545507279;\n\n\nint cal=148782799;\nvector<int> solution;\nvector<vector<int>> collect;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode cal */\n/* VectorDataNode solution */\nint solution_element0=2091176204;\nsolution.push_back(solution_element0);\n/* VectorDataNode collect */\nvector<int> collect_element0;\nint collect_element0_element0=-1153229860;\ncollect_element0.push_back(collect_element0_element0);\nint collect_element0_element1=1106182444;\ncollect_element0.push_back(collect_element0_element1);\nint collect_element0_element2=2074122710;\ncollect_element0.push_back(collect_element0_element2);\ncollect.push_back(collect_element0);\nvector<int> collect_element1;\nint collect_element1_element0=1508527592;\ncollect_element1.push_back(collect_element1_element0);\nint collect_element1_element1=-940837227;\ncollect_element1.push_back(collect_element1_element1);\nint collect_element1_element2=-1485800205;\ncollect_element1.push_back(collect_element1_element2);\ncollect.push_back(collect_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetPath_TreeNodemul_int_int_vector_int_vector_vector_int_random_2\");AKA_INSTANCE___Solution->GetPath(node,sum,cal,solution,collect);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum_II.cpp\\\\Solution\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_collect;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=1041952985;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=-1405030857;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left0_x=1993464131;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_0 = new ::TreeNode(node0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).val=-726061836;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left1_x=1102663911;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_1 = new ::TreeNode(node0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).val=-1263301429;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_1);\n(*AKA_VECTOR_INIT_node_0).left = AKA_VECTOR_INIT_node_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_right0_x=499846060;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_right_0 = new ::TreeNode(node0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_right_0).val=-992428955;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_right_0).right;\nAKA_VECTOR_INIT_node_0_DOT_right.push_back(AKA_VECTOR_INIT_node_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_right1_x=1354169233;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_right_1 = new ::TreeNode(node0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_right_1).val=-1413221886;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_right_1).right;\nAKA_VECTOR_INIT_node_0_DOT_right.push_back(AKA_VECTOR_INIT_node_0_DOT_right_1);\n(*AKA_VECTOR_INIT_node_0).right = AKA_VECTOR_INIT_node_0_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_x=-154466315;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1 = new ::TreeNode(node1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1).val=118575603;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_left0_x=-45243125;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_left_0 = new ::TreeNode(node1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).val=624203398;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).right;\nAKA_VECTOR_INIT_node_1_DOT_left.push_back(AKA_VECTOR_INIT_node_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_left1_x=-2076604443;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_left_1 = new ::TreeNode(node1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_left_1).val=-1150565681;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_left_1).right;\nAKA_VECTOR_INIT_node_1_DOT_left.push_back(AKA_VECTOR_INIT_node_1_DOT_left_1);\n(*AKA_VECTOR_INIT_node_1).left = AKA_VECTOR_INIT_node_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_right0_x=-1333354684;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_right_0 = new ::TreeNode(node1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_right_0).val=689859039;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_right_0).right;\nAKA_VECTOR_INIT_node_1_DOT_right.push_back(AKA_VECTOR_INIT_node_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_right1_x=-608995423;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_right_1 = new ::TreeNode(node1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_right_1).val=-1933329555;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_right_1).right;\nAKA_VECTOR_INIT_node_1_DOT_right.push_back(AKA_VECTOR_INIT_node_1_DOT_right_1);\n(*AKA_VECTOR_INIT_node_1).right = AKA_VECTOR_INIT_node_1_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_1);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_x=-2086858312;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2 = new ::TreeNode(node2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2).val=2114015450;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left0_x=-1327925589;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_0 = new ::TreeNode(node2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).val=915203515;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left1_x=1397156978;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_1 = new ::TreeNode(node2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).val=1756539017;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left2_x=131074576;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_2 = new ::TreeNode(node2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).val=-414336335;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_2);\n(*AKA_VECTOR_INIT_node_2).left = AKA_VECTOR_INIT_node_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right0_x=-932987128;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_0 = new ::TreeNode(node2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).val=95968424;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right1_x=1130926260;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_1 = new ::TreeNode(node2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).val=1900531315;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right2_x=-382077162;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_2 = new ::TreeNode(node2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).val=1303773252;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_2);\n(*AKA_VECTOR_INIT_node_2).right = AKA_VECTOR_INIT_node_2_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_2);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint sum=-1545507279;\n\n\nint cal=148782799;\nvector<int> solution;\nvector<vector<int>> collect;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode cal */\n/* VectorDataNode solution */\nint solution_element0=2091176204;\nsolution.push_back(solution_element0);\n/* VectorDataNode collect */\nvector<int> collect_element0;\nint collect_element0_element0=-1153229860;\ncollect_element0.push_back(collect_element0_element0);\nint collect_element0_element1=1106182444;\ncollect_element0.push_back(collect_element0_element1);\nint collect_element0_element2=2074122710;\ncollect_element0.push_back(collect_element0_element2);\ncollect.push_back(collect_element0);\nvector<int> collect_element1;\nint collect_element1_element0=1508527592;\ncollect_element1.push_back(collect_element1_element0);\nint collect_element1_element1=-940837227;\ncollect_element1.push_back(collect_element1_element1);\nint collect_element1_element2=-1485800205;\ncollect_element1.push_back(collect_element1_element2);\ncollect.push_back(collect_element1);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetPath_TreeNodemul_int_int_vector_int_vector_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_GetPath_TreeNodemul_int_int_vector_int_vector_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint sum=0;\n\n\nint cal=0;\nvector<int> solution;\nvector<vector<int>> collect;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode cal */\n/* VectorDataNode solution */\n/* VectorDataNode collect */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetPath_TreeNodemul_int_int_vector_int_vector_vector_int_directed_0\");AKA_INSTANCE___Solution->GetPath(node,sum,cal,solution,collect);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\nine\\\\Path_Sum_II.cpp\\\\Solution\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_collect;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Path_Sum_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=0;\nAKA_mark(\"Calling: .\\\\nine\\\\Path_Sum.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Path_Sum_II.cpp\\\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint sum=0;\n\n\nint cal=0;\nvector<int> solution;\nvector<vector<int>> collect;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode cal */\n/* VectorDataNode solution */\n/* VectorDataNode collect */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<vector<int> > pathSum(TreeNode *root, int sum) {\r         vector<vector<int> > collect;\r         vector<int> solution;\r         if (root != NULL)\r             GetPath(root, sum, 0, solution, collect);\r         return collect;\r     }\r     void GetPath(TreeNode* node, int sum, int cal, vector<int>& solution, vector<vector<int> >& collect)\r     {\r         solution.push_back(node->val);\r         cal += node->val;\r         if (cal == sum && node->left == NULL && node->right == NULL)\r         {\r             collect.push_back(solution);\r         }\r         else\r         {\r             if (node->left != NULL)\r             {\r                 GetPath(node->left, sum, cal, solution, collect);\r             }\r             if (node->right != NULL)\r             {\r                 GetPath(node->right, sum, cal, solution, collect);\r             }\r         }\r         solution.pop_back();\r \r         return;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\nine\\Path_Sum_II.cpp\\Solution\\GetPath(TreeNode*,int,int,vector<int>&,vector<vector<int>>&)"
    }
]