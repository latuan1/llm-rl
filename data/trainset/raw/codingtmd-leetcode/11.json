[
    {
        "f": [],
        "fm": "vector<vector<int> > threeSum(vector<int> &num) {\r \t\tstd::sort(num.begin(), num.end());\r \t\tvector<vector<int>> result;\r \t\tfor (int i = 0 ; i < num.size() ; i++ )\r \t\t{\r \t\t\tint target = 0 - num[i];\r \t\t\tint start = i + 1, end = num.size() - 1;\r \t\t\twhile (start < end)\r \t\t\t{\r \t\t\t\tint sum = num[start] + num[end];\r \t\t\t\tif (sum == target)\r \t\t\t\t{\r \t\t\t\t\tvector<int> oneSolution;\r \t\t\t\t\toneSolution.push_back(num[i]);\r \t\t\t\t\toneSolution.push_back(num[start]);\r \t\t\t\t\toneSolution.push_back(num[end]);\r \t\t\t\t\tresult.push_back(oneSolution);\r \t\t\t\t\tstart++;\r \t\t\t\t\tend--;\r \t\t\t\t\twhile (start < num.size() && num[start] == num[start - 1]) start++;\r \t\t\t\t\twhile (end > 0 && num[end] == num[end + 1]) end--;\r \t\t\t\t}\r \r \t\t\t\tif (sum < target)\r \t\t\t\t{\r \t\t\t\t\tstart++;\r \t\t\t\t}\r \r \t\t\t\tif (sum > target)\r \t\t\t\t{\r \t\t\t\t\tend--;\r \t\t\t\t}\r \t\t\t}\r \r \t\t\twhile (i < num.size() - 1 && num[i] == num[i + 1]) i++;\r \t\t}\r \t\treturn result;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-709165345;\nnum.push_back(num_element0);\nint num_element1=-226532380;\nnum.push_back(num_element1);\nint num_element2=611214325;\nnum.push_back(num_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_random_3\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-709165345;\nnum.push_back(num_element0);\nint num_element1=-226532380;\nnum.push_back(num_element1);\nint num_element2=611214325;\nnum.push_back(num_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_2\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* element #20 : null value -> no code */\nnum.push_back(num_element20);\n/* element #21 : null value -> no code */\nnum.push_back(num_element21);\n/* element #22 : null value -> no code */\nnum.push_back(num_element22);\n/* element #23 : null value -> no code */\nnum.push_back(num_element23);\n/* element #24 : null value -> no code */\nnum.push_back(num_element24);\n/* element #25 : null value -> no code */\nnum.push_back(num_element25);\n/* element #26 : null value -> no code */\nnum.push_back(num_element26);\n/* element #27 : null value -> no code */\nnum.push_back(num_element27);\n/* element #28 : null value -> no code */\nnum.push_back(num_element28);\n/* element #29 : null value -> no code */\nnum.push_back(num_element29);\n/* element #30 : null value -> no code */\nnum.push_back(num_element30);\n/* element #31 : null value -> no code */\nnum.push_back(num_element31);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_1\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* element #20 : null value -> no code */\nnum.push_back(num_element20);\n/* element #21 : null value -> no code */\nnum.push_back(num_element21);\n/* element #22 : null value -> no code */\nnum.push_back(num_element22);\n/* element #23 : null value -> no code */\nnum.push_back(num_element23);\n/* element #24 : null value -> no code */\nnum.push_back(num_element24);\n/* element #25 : null value -> no code */\nnum.push_back(num_element25);\n/* element #26 : null value -> no code */\nnum.push_back(num_element26);\n/* element #27 : null value -> no code */\nnum.push_back(num_element27);\n/* element #28 : null value -> no code */\nnum.push_back(num_element28);\n/* element #29 : null value -> no code */\nnum.push_back(num_element29);\n/* element #30 : null value -> no code */\nnum.push_back(num_element30);\n/* element #31 : null value -> no code */\nnum.push_back(num_element31);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* element #20 : null value -> no code */\nnum.push_back(num_element20);\n/* element #21 : null value -> no code */\nnum.push_back(num_element21);\n/* element #22 : null value -> no code */\nnum.push_back(num_element22);\n/* element #23 : null value -> no code */\nnum.push_back(num_element23);\n/* element #24 : null value -> no code */\nnum.push_back(num_element24);\n/* element #25 : null value -> no code */\nnum.push_back(num_element25);\n/* element #26 : null value -> no code */\nnum.push_back(num_element26);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* element #20 : null value -> no code */\nnum.push_back(num_element20);\n/* element #21 : null value -> no code */\nnum.push_back(num_element21);\n/* element #22 : null value -> no code */\nnum.push_back(num_element22);\n/* element #23 : null value -> no code */\nnum.push_back(num_element23);\n/* element #24 : null value -> no code */\nnum.push_back(num_element24);\n/* element #25 : null value -> no code */\nnum.push_back(num_element25);\n/* element #26 : null value -> no code */\nnum.push_back(num_element26);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_6\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_5\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_3\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_9(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* element #20 : null value -> no code */\nnum.push_back(num_element20);\n/* element #21 : null value -> no code */\nnum.push_back(num_element21);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_9\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* element #14 : null value -> no code */\nnum.push_back(num_element14);\n/* element #15 : null value -> no code */\nnum.push_back(num_element15);\n/* element #16 : null value -> no code */\nnum.push_back(num_element16);\n/* element #17 : null value -> no code */\nnum.push_back(num_element17);\n/* element #18 : null value -> no code */\nnum.push_back(num_element18);\n/* element #19 : null value -> no code */\nnum.push_back(num_element19);\n/* element #20 : null value -> no code */\nnum.push_back(num_element20);\n/* element #21 : null value -> no code */\nnum.push_back(num_element21);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_8\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_directed_7\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* element #0 : null value -> no code */\nnum.push_back(num_element0);\n/* element #1 : null value -> no code */\nnum.push_back(num_element1);\n/* element #2 : null value -> no code */\nnum.push_back(num_element2);\n/* element #3 : null value -> no code */\nnum.push_back(num_element3);\n/* element #4 : null value -> no code */\nnum.push_back(num_element4);\n/* element #5 : null value -> no code */\nnum.push_back(num_element5);\n/* element #6 : null value -> no code */\nnum.push_back(num_element6);\n/* element #7 : null value -> no code */\nnum.push_back(num_element7);\n/* element #8 : null value -> no code */\nnum.push_back(num_element8);\n/* element #9 : null value -> no code */\nnum.push_back(num_element9);\n/* element #10 : null value -> no code */\nnum.push_back(num_element10);\n/* element #11 : null value -> no code */\nnum.push_back(num_element11);\n/* element #12 : null value -> no code */\nnum.push_back(num_element12);\n/* element #13 : null value -> no code */\nnum.push_back(num_element13);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 11,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSum_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-914681204;\nnum.push_back(num_element0);\nint num_element1=-237653230;\nnum.push_back(num_element1);\nint num_element2=1184531208;\nnum.push_back(num_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum.cpp\\\\Solution\\\\threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-914681204;\nnum.push_back(num_element0);\nint num_element1=-237653230;\nnum.push_back(num_element1);\nint num_element2=1184531208;\nnum.push_back(num_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tvector<vector<int> > threeSum(vector<int> &num) {\r \t\tstd::sort(num.begin(), num.end());\r \t\tvector<vector<int>> result;\r \t\tfor (int i = 0 ; i < num.size() ; i++ )\r \t\t{\r \t\t\tint target = 0 - num[i];\r \t\t\tint start = i + 1, end = num.size() - 1;\r \t\t\twhile (start < end)\r \t\t\t{\r \t\t\t\tint sum = num[start] + num[end];\r \t\t\t\tif (sum == target)\r \t\t\t\t{\r \t\t\t\t\tvector<int> oneSolution;\r \t\t\t\t\toneSolution.push_back(num[i]);\r \t\t\t\t\toneSolution.push_back(num[start]);\r \t\t\t\t\toneSolution.push_back(num[end]);\r \t\t\t\t\tresult.push_back(oneSolution);\r \t\t\t\t\tstart++;\r \t\t\t\t\tend--;\r \t\t\t\t\twhile (start < num.size() && num[start] == num[start - 1]) start++;\r \t\t\t\t\twhile (end > 0 && num[end] == num[end + 1]) end--;\r \t\t\t\t}\r \r \t\t\t\tif (sum < target)\r \t\t\t\t{\r \t\t\t\t\tstart++;\r \t\t\t\t}\r \r \t\t\t\tif (sum > target)\r \t\t\t\t{\r \t\t\t\t\tend--;\r \t\t\t\t}\r \t\t\t}\r \r \t\t\twhile (i < num.size() - 1 && num[i] == num[i + 1]) i++;\r \t\t}\r \t\treturn result;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\one\\3Sum.cpp\\Solution\\threeSum(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int threeSumClosest(vector<int> &num, int target) {\r \r     std::sort(num.begin(), num.end());\r     int len = num.size();\r     int minV = INT_MAX, record;\r     for (int i = 0; i < len; i++)\r     {\r       int start = i + 1, end = len - 1;\r       while (start < end)\r       {\r         int sum = num[i] + num[start] + num[end];\r         if (sum == target)\r         {\r           minV = 0;\r           record = sum;\r           break;\r         }\r         if (sum < target)\r         {\r           if (target - sum < minV)\r           {\r             minV = target - sum;\r             record = sum;\r           }\r           start++;\r         }\r         else\r         {\r           if (sum - target < minV)\r           {\r             minV = sum - target;\r             record = sum;\r           }\r           end--;\r         }\r       }\r       if (record == target) break;\r       while (i < len - 1 && num[i] == num[i + 1]) i++;\r     }\r     return record;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSumClosest_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_threeSumClosest_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum_Closest.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=989071954;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=1022870588;\nnum.push_back(num_element0);\nint num_element1=213758500;\nnum.push_back(num_element1);\nint num_element2=294530136;\nnum.push_back(num_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSumClosest_vector_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSumClosest(num,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum_Closest.cpp\\\\Solution\\\\threeSumClosest(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum_Closest.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=989071954;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=1022870588;\nnum.push_back(num_element0);\nint num_element1=213758500;\nnum.push_back(num_element1);\nint num_element2=294530136;\nnum.push_back(num_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_threeSumClosest_vector_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_threeSumClosest_vector_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum_Closest.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSumClosest_vector_int_int_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSumClosest(num,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\3Sum_Closest.cpp\\\\Solution\\\\threeSumClosest(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\3Sum_Closest.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   int threeSumClosest(vector<int> &num, int target) {\r \r     std::sort(num.begin(), num.end());\r     int len = num.size();\r     int minV = INT_MAX, record;\r     for (int i = 0; i < len; i++)\r     {\r       int start = i + 1, end = len - 1;\r       while (start < end)\r       {\r         int sum = num[i] + num[start] + num[end];\r         if (sum == target)\r         {\r           minV = 0;\r           record = sum;\r           break;\r         }\r         if (sum < target)\r         {\r           if (target - sum < minV)\r           {\r             minV = target - sum;\r             record = sum;\r           }\r           start++;\r         }\r         else\r         {\r           if (sum - target < minV)\r           {\r             minV = sum - target;\r             record = sum;\r           }\r           end--;\r         }\r       }\r       if (record == target) break;\r       while (i < len - 1 && num[i] == num[i + 1]) i++;\r     }\r     return record;\r   }\r \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\one\\3Sum_Closest.cpp\\Solution\\threeSumClosest(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "string addBinary(string a, string b) {\r         int carry = 0;\r         string result;\r         for (\r             int i = a.size() - 1, j = b.size() - 1;\r             i >= 0 || j >= 0;\r             --i, --j\r         )\r         {\r             int ai = i >= 0 ? a[i] - '0' : 0;\r             int bj = j >= 0 ? b[j] - '0' : 0;\r             int val = (ai + bj + carry) % 2;\r             carry = (ai + bj + carry) / 2;\r             result.insert(result.begin(), val + '0');\r         }\r \r         if (carry == 1)\r         {\r             result.insert(result.begin(), '1');\r         }\r         return result;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_addBinary_string_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_addBinary_string_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Binary.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName849041 = new char[2];akaRandomName849041[0] = 36;akaRandomName849041[1] = '\\0';string a=akaRandomName849041;\nchar* akaRandomName752021 = new char[2];akaRandomName752021[0] = 91;akaRandomName752021[1] = '\\0';string b=akaRandomName752021;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addBinary_string_string_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addBinary(a,b);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Add_Binary.cpp\\\\Solution\\\\addBinary(string,string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Binary.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName344446 = new char[2];akaRandomName344446[0] = 36;akaRandomName344446[1] = '\\0';string a=akaRandomName344446;\nchar* akaRandomName139431 = new char[2];akaRandomName139431[0] = 91;akaRandomName139431[1] = '\\0';string b=akaRandomName139431;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_addBinary_string_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_addBinary_string_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Binary.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring a=\"\";\nstring b=\"\";\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addBinary_string_string_directed_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addBinary(a,b);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Add_Binary.cpp\\\\Solution\\\\addBinary(string,string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Binary.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring a=\"\";\nstring b=\"\";\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     string addBinary(string a, string b) {\r         int carry = 0;\r         string result;\r         for (\r             int i = a.size() - 1, j = b.size() - 1;\r             i >= 0 || j >= 0;\r             --i, --j\r         )\r         {\r             int ai = i >= 0 ? a[i] - '0' : 0;\r             int bj = j >= 0 ? b[j] - '0' : 0;\r             int val = (ai + bj + carry) % 2;\r             carry = (ai + bj + carry) / 2;\r             result.insert(result.begin(), val + '0');\r         }\r \r         if (carry == 1)\r         {\r             result.insert(result.begin(), '1');\r         }\r         return result;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\one\\Add_Binary.cpp\\Solution\\addBinary(string,string)"
    },
    {
        "f": [],
        "fm": "ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {\r \t\tListNode* result = new ListNode(-1);\r \t\tListNode* pre = result;\r \t\tListNode *pa = l1, *pb = l2;\r \t\tint carry = 0;\r \t\twhile (pa != NULL || pb != NULL)\r \t\t{\r \t\t\tint av = pa == NULL ? 0 : pa->val;\r \t\t\tint bv = pb == NULL ? 0 : pb->val;\r \t\t\tListNode* node = new ListNode((av + bv + carry) % 10);\r \t\t\tcarry = (av + bv + carry) / 10;\r \t\t\tpre->next = node;\r \t\t\tpre = pre->next;\r \t\t\tpa = pa == NULL ? NULL : pa->next;\r \t\t\tpb = pb == NULL ? NULL : pb->next;\r \t\t}\r \t\tif (carry > 0)\r \t\t\tpre->next = new ListNode(1);\r \t\tpre = result->next;\r \t\tdelete result;\r \t\treturn pre;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_addTwoNumbers_ListNodemul_ListNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_addTwoNumbers_ListNodemul_ListNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Two_Numbers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=374596061;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=-761395107;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l12_x=0;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_2\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_2 = new ::ListNode(l12_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_2).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_2);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addTwoNumbers_ListNodemul_ListNodemul_random_2\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addTwoNumbers(l1,l2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Add_Two_Numbers.cpp\\\\Solution\\\\addTwoNumbers(ListNode*,ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Two_Numbers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=374596061;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=-761395107;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l12_x=0;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_2\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_2 = new ::ListNode(l12_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_2).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_2);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_addTwoNumbers_ListNodemul_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_addTwoNumbers_ListNodemul_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Two_Numbers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=-2008109704;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=-1689991223;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addTwoNumbers_ListNodemul_ListNodemul_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addTwoNumbers(l1,l2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Add_Two_Numbers.cpp\\\\Solution\\\\addTwoNumbers(ListNode*,ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Two_Numbers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=-2008109704;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=-1689991223;\nAKA_mark(\"Calling: .\\\\one\\\\Add_Two_Numbers.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Add_Two_Numbers.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_addTwoNumbers_ListNodemul_ListNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_addTwoNumbers_ListNodemul_ListNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Two_Numbers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* l1;\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addTwoNumbers_ListNodemul_ListNodemul_random_1\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addTwoNumbers(l1,l2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Add_Two_Numbers.cpp\\\\Solution\\\\addTwoNumbers(ListNode*,ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Add_Two_Numbers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* l1;\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {\r \t\tListNode* result = new ListNode(-1);\r \t\tListNode* pre = result;\r \t\tListNode *pa = l1, *pb = l2;\r \t\tint carry = 0;\r \t\twhile (pa != NULL || pb != NULL)\r \t\t{\r \t\t\tint av = pa == NULL ? 0 : pa->val;\r \t\t\tint bv = pb == NULL ? 0 : pb->val;\r \t\t\tListNode* node = new ListNode((av + bv + carry) % 10);\r \t\t\tcarry = (av + bv + carry) / 10;\r \t\t\tpre->next = node;\r \t\t\tpre = pre->next;\r \t\t\tpa = pa == NULL ? NULL : pa->next;\r \t\t\tpb = pb == NULL ? NULL : pb->next;\r \t\t}\r \t\tif (carry > 0)\r \t\t\tpre->next = new ListNode(1);\r \t\tpre = result->next;\r \t\tdelete result;\r \t\treturn pre;\r \t}\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\one\\Add_Two_Numbers.cpp\\Solution\\addTwoNumbers(ListNode*,ListNode*)"
    },
    {
        "f": [],
        "fm": "bool isBalanced(TreeNode *root) {\r \t\tif (root == NULL) return true;\r \t\tint val = GetBalance(root);\r \t\tif (val == -1) return false;\r \t\treturn true;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isBalanced_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-485821910;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-300648668;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\Solution\\\\isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-485821910;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-300648668;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isBalanced_TreeNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\Solution\\\\isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tbool isBalanced(TreeNode *root) {\r \t\tif (root == NULL) return true;\r \t\tint val = GetBalance(root);\r \t\tif (val == -1) return false;\r \t\treturn true;\r \t}\r \tint GetBalance(TreeNode* node)\r \t{\r \t\tif (node == NULL)\r \t\t\treturn 0;\r \t\tint left = GetBalance(node->left);\r \t\tif (left == -1) return -1;\r \t\tint right = GetBalance(node->right);\r \t\tif (right == -1) return -1;\r \t\tif (left - right > 1 || right - left > 1)\r \t\t\treturn -1;\r \t\treturn left > right ? left + 1 : right + 1;\r \t}\r \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\one\\Balanced_Binary_Tree.cpp\\Solution\\isBalanced(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int GetBalance(TreeNode* node)\r \t{\r \t\tif (node == NULL)\r \t\t\treturn 0;\r \t\tint left = GetBalance(node->left);\r \t\tif (left == -1) return -1;\r \t\tint right = GetBalance(node->right);\r \t\tif (right == -1) return -1;\r \t\tif (left - right > 1 || right - left > 1)\r \t\t\treturn -1;\r \t\treturn left > right ? left + 1 : right + 1;\r \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_GetBalance_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_GetBalance_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=-724209497;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GetBalance(TreeNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left0_x=-1097075264;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GetBalance(TreeNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_0 = new ::TreeNode(node0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left1_x=0;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GetBalance(TreeNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_1 = new ::TreeNode(node0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_1);\n(*AKA_VECTOR_INIT_node_0).left = AKA_VECTOR_INIT_node_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetBalance_TreeNodemul_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->GetBalance(node);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\Solution\\\\GetBalance(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=-724209497;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GetBalance(TreeNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left0_x=-1097075264;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GetBalance(TreeNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_0 = new ::TreeNode(node0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left1_x=0;\nAKA_mark(\"Calling: .\\\\one\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GetBalance(TreeNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_1 = new ::TreeNode(node0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_1).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_1);\n(*AKA_VECTOR_INIT_node_0).left = AKA_VECTOR_INIT_node_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \tbool isBalanced(TreeNode *root) {\r \t\tif (root == NULL) return true;\r \t\tint val = GetBalance(root);\r \t\tif (val == -1) return false;\r \t\treturn true;\r \t}\r \tint GetBalance(TreeNode* node)\r \t{\r \t\tif (node == NULL)\r \t\t\treturn 0;\r \t\tint left = GetBalance(node->left);\r \t\tif (left == -1) return -1;\r \t\tint right = GetBalance(node->right);\r \t\tif (right == -1) return -1;\r \t\tif (left - right > 1 || right - left > 1)\r \t\t\treturn -1;\r \t\treturn left > right ? left + 1 : right + 1;\r \t}\r \r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\codingtmd_leetcode\\src\\one\\Balanced_Binary_Tree.cpp\\Solution\\GetBalance(TreeNode*)"
    }
]