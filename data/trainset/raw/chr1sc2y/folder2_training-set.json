[
    {
        "f": [],
        "fm": "int largestSumAfterKNegations(vector<int> A, int K) {\r         sort(A.begin(), A.end());\r         int i = 0, min_val = INT_MAX;\r         while (K > 0 && A[i] < 0) {\r             A[i] *= -1;\r             ++i;\r             --K;\r         }\r         if (K % 2 == 1) {\r             int j = 0;\r             for (int i = 0; i < A.size(); ++i) {\r                 if (min_val > abs(A[i])) {\r                     min_val = min(min_val, abs(A[i]));\r                     j = i;\r                 }\r             }\r             A[j] *= -1;\r         }\r         int sum = 0;\r         for (auto &a:A)\r             sum += a;\r         return sum;\r     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int largestSumAfterKNegations(vector<int> A, int K) {\r         sort(A.begin(), A.end());\r         int i = 0, min_val = INT_MAX;\r         while (K > 0 && A[i] < 0) {\r             A[i] *= -1;\r             ++i;\r             --K;\r         }\r         if (K % 2 == 1) {\r             int j = 0;\r             for (int i = 0; i < A.size(); ++i) {\r                 if (min_val > abs(A[i])) {\r                     min_val = min(min_val, abs(A[i]));\r                     j = i;\r                 }\r             }\r             A[j] *= -1;\r         }\r         int sum = 0;\r         for (auto &a:A)\r             sum += a;\r         return sum;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_2\\1005.cpp\\Solution\\largestSumAfterKNegations(vector<int>,int)"
    },
    {
        "f": [],
        "fm": "int clumsy(int N) {\r         vector<int> nums;\r         if (N >= 4) {\r             nums.push_back(N * (N - 1) / (N - 2) + (N - 3));\r             N -= 4;\r         }\r         while (N >= 4) {\r             nums.push_back(N * (N - 1) / (N - 2) - (N - 3));\r             N -= 4;\r         }\r         int temp = 0;\r         if (N > 0) {\r             temp = N;\r             --N;\r             if (N > 0) {\r                 temp *= N;\r                 --N;\r                 if (N > 0) {\r                     temp /= N;\r                     --N;\r                 }\r             }\r         }\r         if (nums.empty())\r             return temp;\r         int res = nums[0];\r         int i = 1;\r         while (i < nums.size()) {\r             res -= nums[i];\r             ++i;\r         }\r         return res - temp;\r     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int clumsy(int N) {\r         vector<int> nums;\r         if (N >= 4) {\r             nums.push_back(N * (N - 1) / (N - 2) + (N - 3));\r             N -= 4;\r         }\r         while (N >= 4) {\r             nums.push_back(N * (N - 1) / (N - 2) - (N - 3));\r             N -= 4;\r         }\r         int temp = 0;\r         if (N > 0) {\r             temp = N;\r             --N;\r             if (N > 0) {\r                 temp *= N;\r                 --N;\r                 if (N > 0) {\r                     temp /= N;\r                     --N;\r                 }\r             }\r         }\r         if (nums.empty())\r             return temp;\r         int res = nums[0];\r         int i = 1;\r         while (i < nums.size()) {\r             res -= nums[i];\r             ++i;\r         }\r         return res - temp;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_2\\1006.cpp\\Solution\\clumsy(int)"
    },
    {
        "f": [],
        "fm": "int minDominoRotations(vector<int> &A, vector<int> &B) {\r         int n = A.size();\r         unordered_map<int, int> count;\r         int max_key = 0, max_value = 0;\r         for (int i = 0; i < n; ++i) {\r             ++count[A[i]];\r             if (B[i] != A[i])\r                 ++count[B[i]];\r             if (max_value < count[A[i]]) {\r                 max_value = count[A[i]];\r                 max_key = A[i];\r             }\r             if (max_value < count[B[i]]) {\r                 max_value = count[B[i]];\r                 max_key = B[i];\r             }\r         }\r         if (max_value < n)\r             return -1;\r         int res = 0, a = 0, b = 0;\r         for (int i = 0; i < n; ++i) {\r             if (A[i] == max_key)\r                 ++a;\r             if (B[i] == max_key)\r                 ++b;\r         }\r         return min(n - a, n - b);\r     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int minDominoRotations(vector<int> &A, vector<int> &B) {\r         int n = A.size();\r         unordered_map<int, int> count;\r         int max_key = 0, max_value = 0;\r         for (int i = 0; i < n; ++i) {\r             ++count[A[i]];\r             if (B[i] != A[i])\r                 ++count[B[i]];\r             if (max_value < count[A[i]]) {\r                 max_value = count[A[i]];\r                 max_key = A[i];\r             }\r             if (max_value < count[B[i]]) {\r                 max_value = count[B[i]];\r                 max_key = B[i];\r             }\r         }\r         if (max_value < n)\r             return -1;\r         int res = 0, a = 0, b = 0;\r         for (int i = 0; i < n; ++i) {\r             if (A[i] == max_key)\r                 ++a;\r             if (B[i] == max_key)\r                 ++b;\r         }\r         return min(n - a, n - b);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_2\\1007.cpp\\Solution\\minDominoRotations(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *bstFromPreorder(vector<int> &preorder) {\r         return Construct(preorder, 0, preorder.size());\r     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode *bstFromPreorder(vector<int> &preorder) {\r         return Construct(preorder, 0, preorder.size());\r     }\r \r     TreeNode *Construct(vector<int> &preorder, int begin, int end) {\r         if (begin >= end)\r             return nullptr;\r         auto node = new TreeNode(preorder[begin]);\r         int i = begin + 1, j = end, mid = 0;\r         while (i < j) {\r             mid = i + (j - i) / 2;\r             if (preorder[mid] < preorder[begin])\r                 i = mid + 1;\r             else\r                 j = mid;\r         }\r         j = max(i, j);\r         node->left = Construct(preorder, begin + 1, j);\r         node->right = Construct(preorder, j, end);\r         return node;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_2\\1008.cpp\\Solution\\bstFromPreorder(vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *Construct(vector<int> &preorder, int begin, int end) {\r         if (begin >= end)\r             return nullptr;\r         auto node = new TreeNode(preorder[begin]);\r         int i = begin + 1, j = end, mid = 0;\r         while (i < j) {\r             mid = i + (j - i) / 2;\r             if (preorder[mid] < preorder[begin])\r                 i = mid + 1;\r             else\r                 j = mid;\r         }\r         j = max(i, j);\r         node->left = Construct(preorder, begin + 1, j);\r         node->right = Construct(preorder, j, end);\r         return node;\r     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode *bstFromPreorder(vector<int> &preorder) {\r         return Construct(preorder, 0, preorder.size());\r     }\r \r     TreeNode *Construct(vector<int> &preorder, int begin, int end) {\r         if (begin >= end)\r             return nullptr;\r         auto node = new TreeNode(preorder[begin]);\r         int i = begin + 1, j = end, mid = 0;\r         while (i < j) {\r             mid = i + (j - i) / 2;\r             if (preorder[mid] < preorder[begin])\r                 i = mid + 1;\r             else\r                 j = mid;\r         }\r         j = max(i, j);\r         node->left = Construct(preorder, begin + 1, j);\r         node->right = Construct(preorder, j, end);\r         return node;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_2\\1008.cpp\\Solution\\Construct(vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_2\\1008.cpp\\TreeNode\\TreeNode(int)"
    }
]