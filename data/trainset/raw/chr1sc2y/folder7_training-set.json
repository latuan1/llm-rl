[
    {
        "f": [],
        "fm": "int twoCitySchedCost(vector<vector<int>> &costs) {\r         int sum = 0, n = costs.size();\r         sort(costs.begin(), costs.end(), [](const vector<int> &c1, const vector<int> &c2) {\r             return c1[0] - c1[1] < c2[0] - c2[1];\r         });\r         for (int i = 0; i < n; ++i)\r             sum += (i < n / 2 ? costs[i][0] : costs[i][1]);\r         return sum;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_twoCitySchedCost_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_twoCitySchedCost_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1029.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> costs;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode costs */\nvector<int> costs_element0;\nint costs_element0_element0=-1599651461;\ncosts_element0.push_back(costs_element0_element0);\nint costs_element0_element1=1506443863;\ncosts_element0.push_back(costs_element0_element1);\ncosts.push_back(costs_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_twoCitySchedCost_vector_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->twoCitySchedCost(costs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1029.cpp\\\\Solution\\\\twoCitySchedCost(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_costs;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1029.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> costs;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode costs */\nvector<int> costs_element0;\nint costs_element0_element0=-1599651461;\ncosts_element0.push_back(costs_element0_element0);\nint costs_element0_element1=1506443863;\ncosts_element0.push_back(costs_element0_element1);\ncosts.push_back(costs_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int twoCitySchedCost(vector<vector<int>> &costs) {\r         int sum = 0, n = costs.size();\r         sort(costs.begin(), costs.end(), [](const vector<int> &c1, const vector<int> &c2) {\r             return c1[0] - c1[1] < c2[0] - c2[1];\r         });\r         for (int i = 0; i < n; ++i)\r             sum += (i < n / 2 ? costs[i][0] : costs[i][1]);\r         return sum;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1029.cpp\\Solution\\twoCitySchedCost(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "void akaLambdaFunction353(vector<int>const& c1,vector<int>const& c2){\r             return c1[0] - c1[1] < c2[0] - c2[1];\r         }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_akaLambdaFunction353_vector_int_const_vector_int_const_random_0(void) {\n{\nAKA_test_case_name=\"Solution_akaLambdaFunction353_vector_int_const_vector_int_const_random_0\";\n\n// set up\n;\n\nvector<int>c1;\nvector<int>c2;\n\n/* RootDataNode STATIC */\n/* VectorDataNode c1 */\nint c1_element0=-326410648;\nc1.push_back(c1_element0);\nint c1_element1=1440853921;\nc1.push_back(c1_element1);\n/* VectorDataNode c2 */\nint c2_element0=1617715480;\nc2.push_back(c2_element0);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_akaLambdaFunction353_vector_int_const_vector_int_const_random_0\");[](const vector<int> &c1, const vector<int> &c2) {\r\n            return c1[0] - c1[1] < c2[0] - c2[1];\r\n        }(c1,c2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1029.cpp\\\\Solution\\\\akaLambdaFunction353(vector<int>const&,vector<int>const&)\");\n\n/* error assertion */\nvector<int>const EXPECTED_c1;\n\nvector<int>const EXPECTED_c2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nvector<int>c1;\nvector<int>c2;\n\n/* RootDataNode STATIC */\n/* VectorDataNode c1 */\nint c1_element0=-326410648;\nc1.push_back(c1_element0);\nint c1_element1=1440853921;\nc1.push_back(c1_element1);\n/* VectorDataNode c2 */\nint c2_element0=1617715480;\nc2.push_back(c2_element0);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int twoCitySchedCost(vector<vector<int>> &costs) {\r         int sum = 0, n = costs.size();\r         sort(costs.begin(), costs.end(), [](const vector<int> &c1, const vector<int> &c2) {\r             return c1[0] - c1[1] < c2[0] - c2[1];\r         });\r         for (int i = 0; i < n; ++i)\r             sum += (i < n / 2 ? costs[i][0] : costs[i][1]);\r         return sum;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1029.cpp\\Solution\\akaLambdaFunction353(vector<int>const&,vector<int>const&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> zigzagLevelOrder(TreeNode *root) {\r         if (!root)\r             return {};\r         vector<vector<int>> ret;\r         bool even = false;\r         queue<TreeNode *> que;\r         que.push(root);\r         while (!que.empty()) {\r             vector<int> supp = vector<int>();\r             int size = static_cast<int>(que.size());\r             while (size > 0) {\r                 auto curr = que.front();\r                 que.pop();\r                 if (!even)\r                     supp.push_back(curr->val);\r                 else\r                     supp.insert(supp.begin(), curr->val);\r                 if (curr->left)\r                     que.push(curr->left);\r                 if (curr->right)\r                     que.push(curr->right);\r                 --size;\r             }\r             ret.push_back(supp);\r             even = !even;\r         }\r         return ret;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_zigzagLevelOrder_TreeNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_zigzagLevelOrder_TreeNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_zigzagLevelOrder_TreeNodemul_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->zigzagLevelOrder(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\103.cpp\\\\Solution\\\\zigzagLevelOrder(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_zigzagLevelOrder_TreeNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_zigzagLevelOrder_TreeNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1592093299;\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\zigzagLevelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\zigzagLevelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_zigzagLevelOrder_TreeNodemul_random_3\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->zigzagLevelOrder(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\103.cpp\\\\Solution\\\\zigzagLevelOrder(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1592093299;\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\zigzagLevelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\zigzagLevelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<vector<int>> zigzagLevelOrder(TreeNode *root) {\r         if (!root)\r             return {};\r         vector<vector<int>> ret;\r         bool even = false;\r         queue<TreeNode *> que;\r         que.push(root);\r         while (!que.empty()) {\r             vector<int> supp = vector<int>();\r             int size = static_cast<int>(que.size());\r             while (size > 0) {\r                 auto curr = que.front();\r                 que.pop();\r                 if (!even)\r                     supp.push_back(curr->val);\r                 else\r                     supp.insert(supp.begin(), curr->val);\r                 if (curr->left)\r                     que.push(curr->left);\r                 if (curr->right)\r                     que.push(curr->right);\r                 --size;\r             }\r             ret.push_back(supp);\r             even = !even;\r         }\r         return ret;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\103.cpp\\Solution\\zigzagLevelOrder(TreeNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode() : val(0), left(nullptr), right(nullptr) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_random_0(void) {\n{\nAKA_test_case_name=\"TreeNode_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode()\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"<<PRE-CALLING>>\");AKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode()\");AKA_fCall++;auto EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nEXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nEXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode()\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\103.cpp\\TreeNode\\TreeNode()"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_int_random_0(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=1948199167;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=1948199167;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\103.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_int_TreeNodemul_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"TreeNode_int_TreeNodemul_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-952576297;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[1]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1);\nTreeNode* AKA_INSTANCE___TreeNode_left = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_right0_x=-2063383906;\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0 = new ::TreeNode(AKA_INSTANCE___TreeNode_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0);\nTreeNode* AKA_INSTANCE___TreeNode_right = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right[0];\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_TreeNodemul_TreeNodemul_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x,AKA_INSTANCE___TreeNode_left,AKA_INSTANCE___TreeNode_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\left\\\\left[1]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1);\nAKA_INSTANCE___TreeNode->left = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_right0_x=-2063383906;\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0 = new ::TreeNode(AKA_INSTANCE___TreeNode_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0);\nAKA_INSTANCE___TreeNode->right = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right[0];\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-952576297;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[1]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left_1);\nTreeNode* AKA_INSTANCE___TreeNode_left = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_right0_x=-2063383906;\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0 = new ::TreeNode(AKA_INSTANCE___TreeNode_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right_0);\nTreeNode* AKA_INSTANCE___TreeNode_right = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_right[0];\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_TreeNodemul_TreeNodemul_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x,AKA_INSTANCE___TreeNode_left,AKA_INSTANCE___TreeNode_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\left\\\\left[1]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left_1);\nAKA_INSTANCE___TreeNode->left = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_right0_x=-2063383906;\nAKA_mark(\"Calling: .\\\\folder_7\\\\103.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\103.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0 = new ::TreeNode(AKA_INSTANCE___TreeNode_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0).right;\nAKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right_0);\nAKA_INSTANCE___TreeNode->right = AKA_VECTOR_INIT_AKA_INSTANCE___TreeNode_POINT_TO_right[0];\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\103.cpp\\TreeNode\\TreeNode(int,TreeNode*,TreeNode*)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {\r         int dir[4][2] = {{0,  1}, {1,  0}, {0,  -1}, {-1, 0}};\r         vector<vector<bool>> visited(R, vector<bool>(C, false));\r         vector<vector<int>> res;\r         queue<vector<int>> q;\r         q.push(vector<int>{r0, c0});\r         visited[r0][c0] = true;\r         while (!q.empty()) {\r             vector<int> current = q.front();\r             q.pop();\r             res.push_back(current);\r             for (auto d:dir) {\r                 int x = current[0] + d[0], y = current[1] + d[1];\r                 if (x >= 0 && x < R && y >= 0 && y < C && !visited[x][y]) {\r                     visited[x][y] = true;\r                     q.push(vector<int>{x, y});\r                 }\r             }\r         }\r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_allCellsDistOrder_int_int_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_allCellsDistOrder_int_int_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1030.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint R=116437617;\n\n\nint C=84695320;\n\n\nint r0=1421950829;\n\n\nint c0=909781784;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode R */\n/* NormalNumberDataNode C */\n/* NormalNumberDataNode r0 */\n/* NormalNumberDataNode c0 */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_allCellsDistOrder_int_int_int_int_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->allCellsDistOrder(R,C,r0,c0);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1030.cpp\\\\Solution\\\\allCellsDistOrder(int,int,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1030.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint R=116437617;\n\n\nint C=84695320;\n\n\nint r0=1421950829;\n\n\nint c0=909781784;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode R */\n/* NormalNumberDataNode C */\n/* NormalNumberDataNode r0 */\n/* NormalNumberDataNode c0 */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<vector<int>> allCellsDistOrder(int R, int C, int r0, int c0) {\r         int dir[4][2] = {{0,  1}, {1,  0}, {0,  -1}, {-1, 0}};\r         vector<vector<bool>> visited(R, vector<bool>(C, false));\r         vector<vector<int>> res;\r         queue<vector<int>> q;\r         q.push(vector<int>{r0, c0});\r         visited[r0][c0] = true;\r         while (!q.empty()) {\r             vector<int> current = q.front();\r             q.pop();\r             res.push_back(current);\r             for (auto d:dir) {\r                 int x = current[0] + d[0], y = current[1] + d[1];\r                 if (x >= 0 && x < R && y >= 0 && y < C && !visited[x][y]) {\r                     visited[x][y] = true;\r                     q.push(vector<int>{x, y});\r                 }\r             }\r         }\r         return res;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1030.cpp\\Solution\\allCellsDistOrder(int,int,int,int)"
    },
    {
        "f": [],
        "fm": "int maxSumTwoNoOverlap(vector<int> &A, int L, int M) {\r         int n = A.size(), res = 0, left = 0, right = 0;\r         vector<int> prefix(n + 1);\r         for (int i = 1; i <= n; ++i)\r             prefix[i] = prefix[i - 1] + A[i - 1];\r         for (int i = L + M; i <= n; ++i) {\r             left = max(left, prefix[i - M] - prefix[i - M - L]);\r             right = prefix[i] - prefix[i - M];\r             res = max(res, left + right);\r         }\r         left = 0, right = 0;\r         for (int i = L + M; i <= n; ++i) {\r             left = max(left, prefix[i - L] - prefix[i - M - L]);\r             right = prefix[i] - prefix[i - L];\r             res = max(res, left + right);\r         }\r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxSumTwoNoOverlap_vector_int_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_maxSumTwoNoOverlap_vector_int_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1031.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nint L=4;\n\n\nint M=6;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=1572766519;\nA.push_back(A_element0);\nint A_element1=-1795496707;\nA.push_back(A_element1);\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode M */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxSumTwoNoOverlap_vector_int_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxSumTwoNoOverlap(A,L,M);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1031.cpp\\\\Solution\\\\maxSumTwoNoOverlap(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_A;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1031.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nint L=4;\n\n\nint M=6;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=1572766519;\nA.push_back(A_element0);\nint A_element1=-1795496707;\nA.push_back(A_element1);\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode M */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int maxSumTwoNoOverlap(vector<int> &A, int L, int M) {\r         int n = A.size(), res = 0, left = 0, right = 0;\r         vector<int> prefix(n + 1);\r         for (int i = 1; i <= n; ++i)\r             prefix[i] = prefix[i - 1] + A[i - 1];\r         for (int i = L + M; i <= n; ++i) {\r             left = max(left, prefix[i - M] - prefix[i - M - L]);\r             right = prefix[i] - prefix[i - M];\r             res = max(res, left + right);\r         }\r         left = 0, right = 0;\r         for (int i = L + M; i <= n; ++i) {\r             left = max(left, prefix[i - L] - prefix[i - M - L]);\r             right = prefix[i] - prefix[i - L];\r             res = max(res, left + right);\r         }\r         return res;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1031.cpp\\Solution\\maxSumTwoNoOverlap(vector<int>&,int,int)"
    },
    {
        "f": [
            "bool end;",
            "vector<TrieNode *> sub;"
        ],
        "fm": "TrieNode() : end(false), sub(26, nullptr) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TrieNode_TrieNode_random_0(void) {\n{\nAKA_test_case_name=\"TrieNode_TrieNode_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE_StreamChecker__TrieNode */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"<<PRE-CALLING>> Test TrieNode_TrieNode_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE_StreamChecker__TrieNode\\\\AKA_INSTANCE_StreamChecker__TrieNode\\\\TrieNode()\");AKA_fCall++;AKA_INSTANCE_StreamChecker__TrieNode = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\n\n\n\n\n\n\n\n/* error assertion */\n\n\n/* SubClassDataNode AKA_INSTANCE_StreamChecker__TrieNode */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"<<PRE-CALLING>>\");AKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE_StreamChecker__TrieNode\\\\AKA_INSTANCE_StreamChecker__TrieNode\\\\TrieNode()\");AKA_fCall++;auto EXPECTED_AKA_GLOBAL_AKA_INSTANCE_StreamChecker__TrieNode = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\n\n\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE_StreamChecker__TrieNode */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"<<PRE-CALLING>> Test TrieNode_TrieNode_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE_StreamChecker__TrieNode\\\\AKA_INSTANCE_StreamChecker__TrieNode\\\\TrieNode()\");AKA_fCall++;AKA_INSTANCE_StreamChecker__TrieNode = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class TrieNode {\r     public:\r         bool end;\r         vector<TrieNode *> sub;\r \r         TrieNode() : end(false), sub(26, nullptr) {};\r     };",
        "c": [
            "TrieNode() : end(false), sub(26, nullptr) {}"
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1032.cpp\\StreamChecker\\TrieNode\\TrieNode()"
    },
    {
        "f": [
            "TrieNode *trie;",
            "string cache;"
        ],
        "fm": "void Construct(string &word) {\r         auto root = this->trie;\r         for (int i = 0; i < word.size(); ++i) {\r             if (!root->sub[word[i] - 'a'])\r                 root->sub[word[i] - 'a'] = new TrieNode();\r             root = root->sub[word[i] - 'a'];\r         }\r         root->end = true;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_StreamChecker_Construct_string_random_0(void) {\n{\nAKA_test_case_name=\"StreamChecker_Construct_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName515232 = new char[2];akaRandomName515232[0] = 48;akaRandomName515232[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName515232;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName696008 = new char[2];akaRandomName696008[0] = -32;akaRandomName696008[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName696008;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nAKA_INSTANCE___StreamChecker->cache=\"\";\n\n\nchar* akaRandomName265429 = new char[2];akaRandomName265429[0] = -67;akaRandomName265429[1] = '\\0';string word=akaRandomName265429;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test StreamChecker_Construct_string_random_0\");AKA_INSTANCE___StreamChecker->Construct(word);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\Construct(string&)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName638784 = new char[2];akaRandomName638784[0] = 48;akaRandomName638784[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName638784;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName824195 = new char[2];akaRandomName824195[0] = -32;akaRandomName824195[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName824195;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nAKA_INSTANCE___StreamChecker->cache=\"\";\n\n\nchar* akaRandomName872177 = new char[2];akaRandomName872177[0] = -67;akaRandomName872177[1] = '\\0';string word=akaRandomName872177;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class StreamChecker {\r     class TrieNode {\r     public:\r         bool end;\r         vector<TrieNode *> sub;\r \r         TrieNode() : end(false), sub(26, nullptr) {};\r     };\r \r public:\r     TrieNode *trie;\r     string cache;\r \r     void Construct(string &word) {\r         auto root = this->trie;\r         for (int i = 0; i < word.size(); ++i) {\r             if (!root->sub[word[i] - 'a'])\r                 root->sub[word[i] - 'a'] = new TrieNode();\r             root = root->sub[word[i] - 'a'];\r         }\r         root->end = true;\r     }\r \r     StreamChecker(vector<string> &words) {\r         trie = new TrieNode();\r         for (auto word:words) {\r             reverse(word.begin(), word.end());\r             Construct(word);\r         }\r     }\r \r     bool query(char letter) {\r         cache += letter;\r         TrieNode *node = trie;\r         for (int i = cache.size() - 1; i >= 0; --i) {\r             if (!node->sub[cache[i] - 'a'])\r                 return false;\r             node = node->sub[cache[i] - 'a'];\r             if (node->end)\r                 return true;\r         }\r         return false;\r     }\r \r };",
        "c": [
            "StreamChecker(vector<string> &words) {\r\n        trie = new TrieNode();\r\n        for (auto word:words) {\r\n            reverse(word.begin(), word.end());\r\n            Construct(word);\r\n        }\r\n    }"
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1032.cpp\\StreamChecker\\Construct(string&)"
    },
    {
        "f": [
            "TrieNode *trie;",
            "string cache;"
        ],
        "fm": "StreamChecker(vector<string> &words) {\r         trie = new TrieNode();\r         for (auto word:words) {\r             reverse(word.begin(), word.end());\r             Construct(word);\r         }\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_StreamChecker_StreamChecker_vector_string_random_0(void) {\n{\nAKA_test_case_name=\"StreamChecker_StreamChecker_vector_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName714838 = new char[2];akaRandomName714838[0] = -74;akaRandomName714838[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName714838;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName331642 = new char[2];akaRandomName331642[0] = -19;akaRandomName331642[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName331642;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nAKA_mark(\"<<PRE-CALLING>> Test StreamChecker_StreamChecker_vector_string_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[1]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nAKA_INSTANCE___StreamChecker->cache=\"\";\n\n\n\n\n\n\n\n/* error assertion */\n\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> EXPECTED_AKA_GLOBAL_AKA_INSTANCE___StreamChecker_words;\nAKA_mark(\"<<PRE-CALLING>>\");AKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;auto EXPECTED_AKA_GLOBAL_AKA_INSTANCE___StreamChecker = new ::StreamChecker(EXPECTED_AKA_GLOBAL_AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nEXPECTED_AKA_GLOBAL_AKA_INSTANCE___StreamChecker->trie;\n/* NormalStringDataNode cache */\nEXPECTED_AKA_GLOBAL_AKA_INSTANCE___StreamChecker->cache=\"\";\n\n\n\n\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName750068 = new char[2];akaRandomName750068[0] = -74;akaRandomName750068[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName750068;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName675358 = new char[2];akaRandomName675358[0] = -19;akaRandomName675358[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName675358;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nAKA_mark(\"<<PRE-CALLING>> Test StreamChecker_StreamChecker_vector_string_random_0\");AKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[1]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nAKA_INSTANCE___StreamChecker->cache=\"\";\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class StreamChecker {\r     class TrieNode {\r     public:\r         bool end;\r         vector<TrieNode *> sub;\r \r         TrieNode() : end(false), sub(26, nullptr) {};\r     };\r \r public:\r     TrieNode *trie;\r     string cache;\r \r     void Construct(string &word) {\r         auto root = this->trie;\r         for (int i = 0; i < word.size(); ++i) {\r             if (!root->sub[word[i] - 'a'])\r                 root->sub[word[i] - 'a'] = new TrieNode();\r             root = root->sub[word[i] - 'a'];\r         }\r         root->end = true;\r     }\r \r     StreamChecker(vector<string> &words) {\r         trie = new TrieNode();\r         for (auto word:words) {\r             reverse(word.begin(), word.end());\r             Construct(word);\r         }\r     }\r \r     bool query(char letter) {\r         cache += letter;\r         TrieNode *node = trie;\r         for (int i = cache.size() - 1; i >= 0; --i) {\r             if (!node->sub[cache[i] - 'a'])\r                 return false;\r             node = node->sub[cache[i] - 'a'];\r             if (node->end)\r                 return true;\r         }\r         return false;\r     }\r \r };",
        "c": [
            "StreamChecker(vector<string> &words) {\r\n        trie = new TrieNode();\r\n        for (auto word:words) {\r\n            reverse(word.begin(), word.end());\r\n            Construct(word);\r\n        }\r\n    }"
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1032.cpp\\StreamChecker\\StreamChecker(vector<string>&)"
    },
    {
        "f": [
            "TrieNode *trie;",
            "string cache;"
        ],
        "fm": "bool query(char letter) {\r         cache += letter;\r         TrieNode *node = trie;\r         for (int i = cache.size() - 1; i >= 0; --i) {\r             if (!node->sub[cache[i] - 'a'])\r                 return false;\r             node = node->sub[cache[i] - 'a'];\r             if (node->end)\r                 return true;\r         }\r         return false;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_StreamChecker_query_char_random_4(void) {\n{\nAKA_test_case_name=\"StreamChecker_query_char_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName340982 = new char[2];akaRandomName340982[0] = -116;akaRandomName340982[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName340982;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName376762 = new char[2];akaRandomName376762[0] = 55;akaRandomName376762[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName376762;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nchar* akaRandomName864615 = new char[2];akaRandomName864615[0] = -89;akaRandomName864615[1] = '\\0';AKA_INSTANCE___StreamChecker->cache=akaRandomName864615;\n\n\n\nchar letter=103;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode letter */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test StreamChecker_query_char_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___StreamChecker->query(letter);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\query(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName744984 = new char[2];akaRandomName744984[0] = -116;akaRandomName744984[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName744984;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName141363 = new char[2];akaRandomName141363[0] = 55;akaRandomName141363[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName141363;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nchar* akaRandomName427890 = new char[2];akaRandomName427890[0] = -89;akaRandomName427890[1] = '\\0';AKA_INSTANCE___StreamChecker->cache=akaRandomName427890;\n\n\n\nchar letter=103;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode letter */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_StreamChecker_query_char_random_3(void) {\n{\nAKA_test_case_name=\"StreamChecker_query_char_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName925481 = new char[2];akaRandomName925481[0] = 78;akaRandomName925481[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName925481;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nchar* akaRandomName444652 = new char[2];akaRandomName444652[0] = -11;akaRandomName444652[1] = '\\0';AKA_INSTANCE___StreamChecker->cache=akaRandomName444652;\n\n\n\nchar letter=59;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode letter */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test StreamChecker_query_char_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___StreamChecker->query(letter);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\query(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName974724 = new char[2];akaRandomName974724[0] = 78;akaRandomName974724[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName974724;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nchar* akaRandomName770278 = new char[2];akaRandomName770278[0] = -11;akaRandomName770278[1] = '\\0';AKA_INSTANCE___StreamChecker->cache=akaRandomName770278;\n\n\n\nchar letter=59;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode letter */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_StreamChecker_query_char_random_0(void) {\n{\nAKA_test_case_name=\"StreamChecker_query_char_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName744104 = new char[2];akaRandomName744104[0] = -36;akaRandomName744104[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName744104;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName280121 = new char[2];akaRandomName280121[0] = -37;akaRandomName280121[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName280121;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nchar* akaRandomName35446 = new char[2];akaRandomName35446[0] = 78;akaRandomName35446[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element2=akaRandomName35446;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element2);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[1]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1);\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[2]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_2 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_2);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nchar* akaRandomName814061 = new char[2];akaRandomName814061[0] = -64;akaRandomName814061[1] = '\\0';AKA_INSTANCE___StreamChecker->cache=akaRandomName814061;\n\n\n\nchar letter=-125;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode letter */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test StreamChecker_query_char_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___StreamChecker->query(letter);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\query(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___StreamChecker */\n/* ConstructorDataNode StreamChecker(vector<string>&) */\n/* VectorDataNode words */\nvector<string> AKA_INSTANCE___StreamChecker_words;\nchar* akaRandomName548628 = new char[2];akaRandomName548628[0] = -36;akaRandomName548628[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element0=akaRandomName548628;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element0);\nchar* akaRandomName91101 = new char[2];akaRandomName91101[0] = -37;akaRandomName91101[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element1=akaRandomName91101;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element1);\nchar* akaRandomName307555 = new char[2];akaRandomName307555[0] = 78;akaRandomName307555[1] = '\\0';string AKA_INSTANCE___StreamChecker_words_element2=akaRandomName307555;\nAKA_INSTANCE___StreamChecker_words.push_back(AKA_INSTANCE___StreamChecker_words_element2);\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\StreamChecker(vector<string>&)|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\StreamChecker(vector<string>&)\");AKA_fCall++;AKA_INSTANCE___StreamChecker = new ::StreamChecker(AKA_INSTANCE___StreamChecker_words);\n/* PointerStructureDataNode trie */\nstd::vector<TrieNode*> AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie;\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[0]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_0);\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[1]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_1);\n/* SubClassDataNode trie */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\folder_7\\\\1032.cpp\\\\StreamChecker\\\\TrieNode\\\\TrieNode()|ROOT\\\\1032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___StreamChecker\\\\AKA_INSTANCE___StreamChecker\\\\trie\\\\trie[2]\\\\trie\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_2 = new StreamChecker::TrieNode();\n/* NormalNumberDataNode end */\n/* end : null value -> no code */\n/* VectorDataNode sub */\nAKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie.push_back(AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie_2);\nAKA_INSTANCE___StreamChecker->trie = AKA_VECTOR_INIT_AKA_INSTANCE___StreamChecker_POINT_TO_trie[0];\n/* NormalStringDataNode cache */\nchar* akaRandomName263684 = new char[2];akaRandomName263684[0] = -64;akaRandomName263684[1] = '\\0';AKA_INSTANCE___StreamChecker->cache=akaRandomName263684;\n\n\n\nchar letter=-125;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode letter */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class StreamChecker {\r     class TrieNode {\r     public:\r         bool end;\r         vector<TrieNode *> sub;\r \r         TrieNode() : end(false), sub(26, nullptr) {};\r     };\r \r public:\r     TrieNode *trie;\r     string cache;\r \r     void Construct(string &word) {\r         auto root = this->trie;\r         for (int i = 0; i < word.size(); ++i) {\r             if (!root->sub[word[i] - 'a'])\r                 root->sub[word[i] - 'a'] = new TrieNode();\r             root = root->sub[word[i] - 'a'];\r         }\r         root->end = true;\r     }\r \r     StreamChecker(vector<string> &words) {\r         trie = new TrieNode();\r         for (auto word:words) {\r             reverse(word.begin(), word.end());\r             Construct(word);\r         }\r     }\r \r     bool query(char letter) {\r         cache += letter;\r         TrieNode *node = trie;\r         for (int i = cache.size() - 1; i >= 0; --i) {\r             if (!node->sub[cache[i] - 'a'])\r                 return false;\r             node = node->sub[cache[i] - 'a'];\r             if (node->end)\r                 return true;\r         }\r         return false;\r     }\r \r };",
        "c": [
            "StreamChecker(vector<string> &words) {\r\n        trie = new TrieNode();\r\n        for (auto word:words) {\r\n            reverse(word.begin(), word.end());\r\n            Construct(word);\r\n        }\r\n    }"
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_7\\1032.cpp\\StreamChecker\\query(char)"
    }
]