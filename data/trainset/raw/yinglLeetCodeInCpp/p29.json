[
    {
        "f": [],
        "fm": "vector<int> spiralOrder(vector<vector<int> > &matrix) {\r     vector<int> result;\r     int height = matrix.size();\r     int width;\r     \r     if (0 == height) {\r       return result;\r     }\r \r     width = matrix[0].size();\r \r     int top = 0;\r     int down = height - 1;\r     int left = 0;\r     int right = width - 1;\r \r     while ((top <= down) && (left <= right)) {\r       int i;\r \r       // 上\r       for (i = left; i <= right; ++i) {\r         result.push_back(matrix[top][i]);\r       }\r \r       // 右\r       for (i = top + 1; i < down; ++i) {\r         result.push_back(matrix[i][right]);\r       }\r \r       // 下\r       if (top < down) {\r         for (i = right; i >= left; --i) {\r           result.push_back(matrix[down][i]);\r         }\r       }\r \r       // 左\r       if (left < right) {\r         for (i = down - 1; i > top; --i) {\r           result.push_back(matrix[i][left]);\r         }\r       }\r \r       ++top;\r       --down;\r       ++left;\r       --right;\r     }\r \r     return result;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_spiralOrder_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_spiralOrder_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\spiral_matrix.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=-376388683;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=149844673;\nmatrix_element0.push_back(matrix_element0_element1);\nint matrix_element0_element2=1440922016;\nmatrix_element0.push_back(matrix_element0_element2);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-1569849725;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=750017235;\nmatrix_element1.push_back(matrix_element1_element1);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=-1060375281;\nmatrix_element2.push_back(matrix_element2_element0);\nint matrix_element2_element1=-2127740576;\nmatrix_element2.push_back(matrix_element2_element1);\nint matrix_element2_element2=887258218;\nmatrix_element2.push_back(matrix_element2_element2);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_spiralOrder_vector_vector_int_random_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->spiralOrder(matrix);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-24\\\\spiral_matrix.cpp\\\\Solution\\\\spiralOrder(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\spiral_matrix.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=-376388683;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=149844673;\nmatrix_element0.push_back(matrix_element0_element1);\nint matrix_element0_element2=1440922016;\nmatrix_element0.push_back(matrix_element0_element2);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-1569849725;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=750017235;\nmatrix_element1.push_back(matrix_element1_element1);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=-1060375281;\nmatrix_element2.push_back(matrix_element2_element0);\nint matrix_element2_element1=-2127740576;\nmatrix_element2.push_back(matrix_element2_element1);\nint matrix_element2_element2=887258218;\nmatrix_element2.push_back(matrix_element2_element2);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_spiralOrder_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_spiralOrder_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\spiral_matrix.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=-343419870;\nmatrix_element0.push_back(matrix_element0_element0);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-2097715263;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=-1255828900;\nmatrix_element1.push_back(matrix_element1_element1);\nint matrix_element1_element2=649607326;\nmatrix_element1.push_back(matrix_element1_element2);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=1814778113;\nmatrix_element2.push_back(matrix_element2_element0);\nint matrix_element2_element1=-2127196322;\nmatrix_element2.push_back(matrix_element2_element1);\nint matrix_element2_element2=1285642931;\nmatrix_element2.push_back(matrix_element2_element2);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_spiralOrder_vector_vector_int_random_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->spiralOrder(matrix);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-24\\\\spiral_matrix.cpp\\\\Solution\\\\spiralOrder(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\spiral_matrix.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=-343419870;\nmatrix_element0.push_back(matrix_element0_element0);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-2097715263;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=-1255828900;\nmatrix_element1.push_back(matrix_element1_element1);\nint matrix_element1_element2=649607326;\nmatrix_element1.push_back(matrix_element1_element2);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=1814778113;\nmatrix_element2.push_back(matrix_element2_element0);\nint matrix_element2_element1=-2127196322;\nmatrix_element2.push_back(matrix_element2_element1);\nint matrix_element2_element2=1285642931;\nmatrix_element2.push_back(matrix_element2_element2);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   vector<int> spiralOrder(vector<vector<int> > &matrix) {\r     vector<int> result;\r     int height = matrix.size();\r     int width;\r     \r     if (0 == height) {\r       return result;\r     }\r \r     width = matrix[0].size();\r \r     int top = 0;\r     int down = height - 1;\r     int left = 0;\r     int right = width - 1;\r \r     while ((top <= down) && (left <= right)) {\r       int i;\r \r       // 上\r       for (i = left; i <= right; ++i) {\r         result.push_back(matrix[top][i]);\r       }\r \r       // 右\r       for (i = top + 1; i < down; ++i) {\r         result.push_back(matrix[i][right]);\r       }\r \r       // 下\r       if (top < down) {\r         for (i = right; i >= left; --i) {\r           result.push_back(matrix[down][i]);\r         }\r       }\r \r       // 左\r       if (left < right) {\r         for (i = down - 1; i > top; --i) {\r           result.push_back(matrix[i][left]);\r         }\r       }\r \r       ++top;\r       --down;\r       ++left;\r       --right;\r     }\r \r     return result;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\yingl_LeetCodeInCpp\\com-24\\spiral_matrix.cpp\\Solution\\spiralOrder(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int> > generateMatrix(int n) {\r     vector<vector<int> > result(n, vector<int>(n));\r     int i = 1;\r     int top = 0;\r     int down = n - 1;\r     int left = 0;\r     int right = n - 1;\r \r     while ((top <= down) && (left <= right)) {\r       int row;\r       int col;\r \r       // 上\r       for (col = left; col <= right; ++col) {\r         result[top][col] = i;\r         ++i;\r       }\r \r       // 右\r       for (row = top + 1; row < down; ++row) {\r         result[row][right] = i;\r         ++i;\r       }\r \r       // 下\r       if (top < down) {\r         for (col = right; col >= left; --col) {\r           result[down][col] = i;\r           ++i;\r         }\r       }\r \r       // 左\r       if (left < right) {\r         for (row = down - 1; row > top; --row) {\r           result[row][left] = i;\r           ++i;\r         }\r       }\r \r       ++top;\r       --down;\r       ++left;\r       --right;\r     }\r \r     return result;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_generateMatrix_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_generateMatrix_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\spiral_matrix_ii.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=7;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_generateMatrix_int_random_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->generateMatrix(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-24\\\\spiral_matrix_ii.cpp\\\\Solution\\\\generateMatrix(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\spiral_matrix.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=-376388683;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=149844673;\nmatrix_element0.push_back(matrix_element0_element1);\nint matrix_element0_element2=1440922016;\nmatrix_element0.push_back(matrix_element0_element2);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-1569849725;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=750017235;\nmatrix_element1.push_back(matrix_element1_element1);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=-1060375281;\nmatrix_element2.push_back(matrix_element2_element0);\nint matrix_element2_element1=-2127740576;\nmatrix_element2.push_back(matrix_element2_element1);\nint matrix_element2_element2=887258218;\nmatrix_element2.push_back(matrix_element2_element2);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   vector<vector<int> > generateMatrix(int n) {\r     vector<vector<int> > result(n, vector<int>(n));\r     int i = 1;\r     int top = 0;\r     int down = n - 1;\r     int left = 0;\r     int right = n - 1;\r \r     while ((top <= down) && (left <= right)) {\r       int row;\r       int col;\r \r       // 上\r       for (col = left; col <= right; ++col) {\r         result[top][col] = i;\r         ++i;\r       }\r \r       // 右\r       for (row = top + 1; row < down; ++row) {\r         result[row][right] = i;\r         ++i;\r       }\r \r       // 下\r       if (top < down) {\r         for (col = right; col >= left; --col) {\r           result[down][col] = i;\r           ++i;\r         }\r       }\r \r       // 左\r       if (left < right) {\r         for (row = down - 1; row > top; --row) {\r           result[row][left] = i;\r           ++i;\r         }\r       }\r \r       ++top;\r       --down;\r       ++left;\r       --right;\r     }\r \r     return result;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\yingl_LeetCodeInCpp\\com-24\\spiral_matrix_ii.cpp\\Solution\\generateMatrix(int)"
    }
]