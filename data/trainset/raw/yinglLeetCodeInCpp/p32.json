[
    {
        "f": [],
        "fm": "vector<string> fullJustify(vector<string> &words, int L) {\r     vector<string> result;\r     vector<vector<string> > lines;\r     vector<string> line;\r     int i;\r     int j;\r \r     for (i = 0; i < words.size(); ++i) {\r       int len = 0;\r \r       for (j = 0; j < line.size(); ++j) {\r         len += line[j].length() + 1;\r       }\r \r       if ((len + words[i].length()) > L) {\r         lines.push_back(line);\r         line.clear();\r       }\r \r       line.push_back(words[i]);\r     }\r \r     if (line.size() > 0) {\r       lines.push_back(line);\r     }\r \r     for (i = 0; i < lines.size(); ++i) {\r       int spaces = L;\r       int size = lines[i].size();\r       string str = lines[i][0];  // 初始化字符串\r \r       // 计算有多少个空格\r       for (j = 0; j < size; ++j) {\r         spaces -= lines[i][j].length();\r       }\r \r       for (j = 1; j < size; ++j) {\r         if (i < (lines.size() - 1)) {\r           int average_spaces = spaces / (size - j);\r           int extra_spaces = spaces % (size - j);\r \r           str.append(average_spaces, ' ');\r           spaces -= average_spaces;\r \r           if (extra_spaces > 0) {\r             str.append(\" \");\r             spaces -= 1;\r           }\r         }\r         else {\r           // 最后一行特别处理\r           if (j < size) {\r             str.append(\" \");\r             spaces -= 1;\r           }\r           else {\r             str.append(spaces, ' ');\r             spaces = 0;\r           }\r         }\r \r         str += lines[i][j];\r       }\r \r       if (spaces > 0) {\r         str.append(spaces, ' ');\r       }\r \r       result.push_back(str);\r     }\r \r     return result;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_fullJustify_vector_string_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_fullJustify_vector_string_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\text_justification.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> words;\n\n\nint L=910120151;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode words */\nchar* akaRandomName710621 = new char[2];akaRandomName710621[0] = 109;akaRandomName710621[1] = '\\0';string words_element0=akaRandomName710621;\nwords.push_back(words_element0);\nchar* akaRandomName895314 = new char[2];akaRandomName895314[0] = -37;akaRandomName895314[1] = '\\0';string words_element1=akaRandomName895314;\nwords.push_back(words_element1);\nchar* akaRandomName195618 = new char[2];akaRandomName195618[0] = -123;akaRandomName195618[1] = '\\0';string words_element2=akaRandomName195618;\nwords.push_back(words_element2);\n/* NormalNumberDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fullJustify_vector_string_int_random_1\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fullJustify(words,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-27\\\\text_justification.cpp\\\\Solution\\\\fullJustify(vector<string>&,int)\");\n\n\nvector<string> EXPECTED_words;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\text_justification.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> words;\n\n\nint L=910120151;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode words */\nchar* akaRandomName183051 = new char[2];akaRandomName183051[0] = 109;akaRandomName183051[1] = '\\0';string words_element0=akaRandomName183051;\nwords.push_back(words_element0);\nchar* akaRandomName325069 = new char[2];akaRandomName325069[0] = -37;akaRandomName325069[1] = '\\0';string words_element1=akaRandomName325069;\nwords.push_back(words_element1);\nchar* akaRandomName499794 = new char[2];akaRandomName499794[0] = -123;akaRandomName499794[1] = '\\0';string words_element2=akaRandomName499794;\nwords.push_back(words_element2);\n/* NormalNumberDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_fullJustify_vector_string_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_fullJustify_vector_string_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\text_justification.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> words;\n\n\nint L=-510086176;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode words */\nchar* akaRandomName508842 = new char[2];akaRandomName508842[0] = -106;akaRandomName508842[1] = '\\0';string words_element0=akaRandomName508842;\nwords.push_back(words_element0);\n/* NormalNumberDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fullJustify_vector_string_int_random_2\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fullJustify(words,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-27\\\\text_justification.cpp\\\\Solution\\\\fullJustify(vector<string>&,int)\");\n\n\nvector<string> EXPECTED_words;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\text_justification.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> words;\n\n\nint L=-510086176;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode words */\nchar* akaRandomName491518 = new char[2];akaRandomName491518[0] = -106;akaRandomName491518[1] = '\\0';string words_element0=akaRandomName491518;\nwords.push_back(words_element0);\n/* NormalNumberDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   vector<string> fullJustify(vector<string> &words, int L) {\r     vector<string> result;\r     vector<vector<string> > lines;\r     vector<string> line;\r     int i;\r     int j;\r \r     for (i = 0; i < words.size(); ++i) {\r       int len = 0;\r \r       for (j = 0; j < line.size(); ++j) {\r         len += line[j].length() + 1;\r       }\r \r       if ((len + words[i].length()) > L) {\r         lines.push_back(line);\r         line.clear();\r       }\r \r       line.push_back(words[i]);\r     }\r \r     if (line.size() > 0) {\r       lines.push_back(line);\r     }\r \r     for (i = 0; i < lines.size(); ++i) {\r       int spaces = L;\r       int size = lines[i].size();\r       string str = lines[i][0];  // 初始化字符串\r \r       // 计算有多少个空格\r       for (j = 0; j < size; ++j) {\r         spaces -= lines[i][j].length();\r       }\r \r       for (j = 1; j < size; ++j) {\r         if (i < (lines.size() - 1)) {\r           int average_spaces = spaces / (size - j);\r           int extra_spaces = spaces % (size - j);\r \r           str.append(average_spaces, ' ');\r           spaces -= average_spaces;\r \r           if (extra_spaces > 0) {\r             str.append(\" \");\r             spaces -= 1;\r           }\r         }\r         else {\r           // 最后一行特别处理\r           if (j < size) {\r             str.append(\" \");\r             spaces -= 1;\r           }\r           else {\r             str.append(spaces, ' ');\r             spaces = 0;\r           }\r         }\r \r         str += lines[i][j];\r       }\r \r       if (spaces > 0) {\r         str.append(spaces, ' ');\r       }\r \r       result.push_back(str);\r     }\r \r     return result;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\yingl_LeetCodeInCpp\\com-27\\text_justification.cpp\\Solution\\fullJustify(vector<string>&,int)"
    }
]