[
    {
        "f": [],
        "fm": "vector<int> spiralOrder(vector<vector<int>>& matrix) {                  if (matrix.size() == 0) return {};                  int r_beg = 0;         int r_end = matrix.size() - 1;         int c_beg = 0;         int c_end = matrix[0].size() - 1;         vector<int> result;                  while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result.push_back(matrix[r_beg][i]);             }             r_beg++;                          for (int i = r_beg; i <= r_end; i++) {                 result.push_back(matrix[i][c_end]);             }             c_end--;                          if (r_beg <= r_end) {                 for (int i = c_end; i >= c_beg; i--) {                     result.push_back(matrix[r_end][i]);                 }             }             r_end--;                          if (c_beg <= c_end) {                 for (int i = r_end; i >= r_beg; i--) {                     result.push_back(matrix[i][c_beg]);                 }             }             c_beg++;         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_spiralOrder_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_spiralOrder_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/54-spiral-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=-1358320102;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=-797430203;\nmatrix_element0.push_back(matrix_element0_element1);\nint matrix_element0_element2=-1735351713;\nmatrix_element0.push_back(matrix_element0_element2);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-975680830;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=-32070715;\nmatrix_element1.push_back(matrix_element1_element1);\nint matrix_element1_element2=-1565956520;\nmatrix_element1.push_back(matrix_element1_element2);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=1460430798;\nmatrix_element2.push_back(matrix_element2_element0);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_spiralOrder_vector_vector_int_random_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->spiralOrder(matrix);\nAKA_fCall++;AKA_mark(\"Return from: ./3/54-spiral-matrix.cpp/Solution/spiralOrder(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/54-spiral-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=-1358320102;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=-797430203;\nmatrix_element0.push_back(matrix_element0_element1);\nint matrix_element0_element2=-1735351713;\nmatrix_element0.push_back(matrix_element0_element2);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-975680830;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=-32070715;\nmatrix_element1.push_back(matrix_element1_element1);\nint matrix_element1_element2=-1565956520;\nmatrix_element1.push_back(matrix_element1_element2);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=1460430798;\nmatrix_element2.push_back(matrix_element2_element0);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> spiralOrder(vector<vector<int>>& matrix) {                  if (matrix.size() == 0) return {};                  int r_beg = 0;         int r_end = matrix.size() - 1;         int c_beg = 0;         int c_end = matrix[0].size() - 1;         vector<int> result;                  while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result.push_back(matrix[r_beg][i]);             }             r_beg++;                          for (int i = r_beg; i <= r_end; i++) {                 result.push_back(matrix[i][c_end]);             }             c_end--;                          if (r_beg <= r_end) {                 for (int i = c_end; i >= c_beg; i--) {                     result.push_back(matrix[r_end][i]);                 }             }             r_end--;                          if (c_beg <= c_end) {                 for (int i = r_end; i >= r_beg; i--) {                     result.push_back(matrix[i][c_beg]);                 }             }             c_beg++;         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/54-spiral-matrix.cpp/Solution/spiralOrder(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> merge(vector<vector<int>>& intervals) {         if (intervals.size() == 0) return {};          if (intervals.size() == 1) return {intervals[0]};         sort(intervals.begin(), intervals.end(),              [](const vector<int>& v1, const vector<int>& v2) {                return v1[0] < v2[0];              });                  vector<vector<int>> result = {intervals[0]};                  for (int i = 1; i < intervals.size(); i++) {             vector<int> toCompare = result[result.size() - 1];             if (toCompare[1] >= intervals[i][0]) {                 if (toCompare[1] <= intervals[i][1]) {                     result[result.size() - 1] = {toCompare[0], intervals[i][1]};                 }             } else {                 result.push_back(intervals[i]);             }         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_merge_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_merge_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/56-merge-intervals.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> intervals;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode intervals */\nvector<int> intervals_element0;\nint intervals_element0_element0=999610051;\nintervals_element0.push_back(intervals_element0_element0);\nint intervals_element0_element1=756663770;\nintervals_element0.push_back(intervals_element0_element1);\nintervals.push_back(intervals_element0);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_merge_vector_vector_int_random_1\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->merge(intervals);\nAKA_fCall++;AKA_mark(\"Return from: ./3/56-merge-intervals.cpp/Solution/merge(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_intervals;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/56-merge-intervals.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> intervals;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode intervals */\nvector<int> intervals_element0;\nint intervals_element0_element0=999610051;\nintervals_element0.push_back(intervals_element0_element0);\nint intervals_element0_element1=756663770;\nintervals_element0.push_back(intervals_element0_element1);\nintervals.push_back(intervals_element0);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_merge_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_merge_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/56-merge-intervals.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> intervals;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode intervals */\nvector<int> intervals_element0;\nint intervals_element0_element0=1522776150;\nintervals_element0.push_back(intervals_element0_element0);\nintervals.push_back(intervals_element0);\nvector<int> intervals_element1;\nint intervals_element1_element0=1788495408;\nintervals_element1.push_back(intervals_element1_element0);\nint intervals_element1_element1=1062547277;\nintervals_element1.push_back(intervals_element1_element1);\nint intervals_element1_element2=-184109674;\nintervals_element1.push_back(intervals_element1_element2);\nintervals.push_back(intervals_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_merge_vector_vector_int_random_2\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->merge(intervals);\nAKA_fCall++;AKA_mark(\"Return from: ./3/56-merge-intervals.cpp/Solution/merge(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_intervals;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/56-merge-intervals.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> intervals;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode intervals */\nvector<int> intervals_element0;\nint intervals_element0_element0=1522776150;\nintervals_element0.push_back(intervals_element0_element0);\nintervals.push_back(intervals_element0);\nvector<int> intervals_element1;\nint intervals_element1_element0=1788495408;\nintervals_element1.push_back(intervals_element1_element0);\nint intervals_element1_element1=1062547277;\nintervals_element1.push_back(intervals_element1_element1);\nint intervals_element1_element2=-184109674;\nintervals_element1.push_back(intervals_element1_element2);\nintervals.push_back(intervals_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_merge_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_merge_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/56-merge-intervals.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> intervals;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode intervals */\nvector<int> intervals_element0;\nint intervals_element0_element0=-1238238679;\nintervals_element0.push_back(intervals_element0_element0);\nintervals.push_back(intervals_element0);\nvector<int> intervals_element1;\nint intervals_element1_element0=-1458735223;\nintervals_element1.push_back(intervals_element1_element0);\nintervals.push_back(intervals_element1);\nvector<int> intervals_element2;\nint intervals_element2_element0=-2001071322;\nintervals_element2.push_back(intervals_element2_element0);\nintervals.push_back(intervals_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_merge_vector_vector_int_random_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->merge(intervals);\nAKA_fCall++;AKA_mark(\"Return from: ./3/56-merge-intervals.cpp/Solution/merge(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_intervals;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/56-merge-intervals.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> intervals;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode intervals */\nvector<int> intervals_element0;\nint intervals_element0_element0=-1238238679;\nintervals_element0.push_back(intervals_element0_element0);\nintervals.push_back(intervals_element0);\nvector<int> intervals_element1;\nint intervals_element1_element0=-1458735223;\nintervals_element1.push_back(intervals_element1_element0);\nintervals.push_back(intervals_element1);\nvector<int> intervals_element2;\nint intervals_element2_element0=-2001071322;\nintervals_element2.push_back(intervals_element2_element0);\nintervals.push_back(intervals_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> merge(vector<vector<int>>& intervals) {         if (intervals.size() == 0) return {};          if (intervals.size() == 1) return {intervals[0]};         sort(intervals.begin(), intervals.end(),              [](const vector<int>& v1, const vector<int>& v2) {                return v1[0] < v2[0];              });                  vector<vector<int>> result = {intervals[0]};                  for (int i = 1; i < intervals.size(); i++) {             vector<int> toCompare = result[result.size() - 1];             if (toCompare[1] >= intervals[i][0]) {                 if (toCompare[1] <= intervals[i][1]) {                     result[result.size() - 1] = {toCompare[0], intervals[i][1]};                 }             } else {                 result.push_back(intervals[i]);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/56-merge-intervals.cpp/Solution/merge(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> generateMatrix(int n) {         vector<vector<int>> result(n, vector<int>(n, 0));         int r_beg = 0;         int r_end = n - 1;         int c_beg = 0;         int c_end = n - 1;         int val = 1;         while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result[r_beg][i] = val++;             }             r_beg++;             for (int i = r_beg; i <= r_end; i++) {                 result[i][c_end] = val++;             }             c_end--;             for (int i = c_end; i >= c_beg; i--) {                 result[r_end][i] = val++;             }             r_end--;             for (int i = r_end; i >= r_beg; i--) {                 result[i][c_beg] = val++;             }             c_beg++;         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_generateMatrix_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_generateMatrix_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/59-spiral-matrix-ii.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=3;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_generateMatrix_int_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->generateMatrix(n);\nAKA_fCall++;AKA_mark(\"Return from: ./3/59-spiral-matrix-ii.cpp/Solution/generateMatrix(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/59-spiral-matrix-ii.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=3;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> generateMatrix(int n) {         vector<vector<int>> result(n, vector<int>(n, 0));         int r_beg = 0;         int r_end = n - 1;         int c_beg = 0;         int c_end = n - 1;         int val = 1;         while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result[r_beg][i] = val++;             }             r_beg++;             for (int i = r_beg; i <= r_end; i++) {                 result[i][c_end] = val++;             }             c_end--;             for (int i = c_end; i >= c_beg; i--) {                 result[r_end][i] = val++;             }             r_end--;             for (int i = r_end; i >= r_beg; i--) {                 result[i][c_beg] = val++;             }             c_beg++;         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/59-spiral-matrix-ii.cpp/Solution/generateMatrix(int)"
    },
    {
        "f": [],
        "fm": "int climbStairs(int n) {         if (n == 1) return 1;         int prevPrev = 1; // Number of ways to climb staircase of len 1         int prev = 2; // Number of ways to climb staircase of len 2         for (int i = 3; i < n + 1; i++) {             int curr = prevPrev + prev;              prevPrev = prev;             prev = curr;         }         return prev;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_climbStairs_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_climbStairs_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/70-climbing-stairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_climbStairs_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->climbStairs(n);\nAKA_fCall++;AKA_mark(\"Return from: ./3/70-climbing-stairs.cpp/Solution/climbStairs(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/70-climbing-stairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_climbStairs_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_climbStairs_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/70-climbing-stairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_climbStairs_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->climbStairs(n);\nAKA_fCall++;AKA_mark(\"Return from: ./3/70-climbing-stairs.cpp/Solution/climbStairs(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/70-climbing-stairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int climbStairs(int n) {         if (n == 1) return 1;         int prevPrev = 1; // Number of ways to climb staircase of len 1         int prev = 2; // Number of ways to climb staircase of len 2         for (int i = 3; i < n + 1; i++) {             int curr = prevPrev + prev;              prevPrev = prev;             prev = curr;         }         return prev;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/70-climbing-stairs.cpp/Solution/climbStairs(int)"
    },
    {
        "f": [],
        "fm": "bool binarySearch(vector<int>& row, int target, int start, int end) {         if (start >= end) {             return false;         }         int mid = (start + end) / 2;         if (row[mid] == target) {             return true;         } else if (row[mid] < target) {             return binarySearch(row, target, mid + 1, end);         } else {             return binarySearch(row, target, start, mid);         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_binarySearch_vector_int_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_binarySearch_vector_int_int_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/74-search-a-2d-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> row;\n\n\nint target=-1301778482;\n\n\nint start=154495560;\n\n\nint end=-1570084031;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode row */\nint row_element0=1652972260;\nrow.push_back(row_element0);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_binarySearch_vector_int_int_int_int_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->binarySearch(row,target,start,end);\nAKA_fCall++;AKA_mark(\"Return from: ./3/74-search-a-2d-matrix.cpp/Solution/binarySearch(vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_row;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/74-search-a-2d-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> row;\n\n\nint target=-1301778482;\n\n\nint start=154495560;\n\n\nint end=-1570084031;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode row */\nint row_element0=1652972260;\nrow.push_back(row_element0);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_binarySearch_vector_int_int_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_binarySearch_vector_int_int_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/74-search-a-2d-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> row;\n\n\nint target=-1467975413;\n\n\nint start=-1474624004;\n\n\nint end=741874666;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode row */\nint row_element0=-1520328110;\nrow.push_back(row_element0);\nint row_element1=1846796492;\nrow.push_back(row_element1);\nint row_element2=124825637;\nrow.push_back(row_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_binarySearch_vector_int_int_int_int_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->binarySearch(row,target,start,end);\nAKA_fCall++;AKA_mark(\"Return from: ./3/74-search-a-2d-matrix.cpp/Solution/binarySearch(vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_row;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/74-search-a-2d-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> row;\n\n\nint target=-1467975413;\n\n\nint start=-1474624004;\n\n\nint end=741874666;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode row */\nint row_element0=-1520328110;\nrow.push_back(row_element0);\nint row_element1=1846796492;\nrow.push_back(row_element1);\nint row_element2=124825637;\nrow.push_back(row_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool binarySearch(vector<int>& row, int target, int start, int end) {         if (start >= end) {             return false;         }         int mid = (start + end) / 2;         if (row[mid] == target) {             return true;         } else if (row[mid] < target) {             return binarySearch(row, target, mid + 1, end);         } else {             return binarySearch(row, target, start, mid);         }     }          bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (!rows) return false;         int cols = matrix[0].size();         if (!cols) return false;         for (int r = 0; r < rows; r++) {             if (target >= matrix[r][0] && target <= matrix[r][cols - 1]) {                 return binarySearch(matrix[r], target, 0, cols);             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/74-search-a-2d-matrix.cpp/Solution/binarySearch(vector<int>&,int,int,int)"
    },
    {
        "f": [],
        "fm": "bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (!rows) return false;         int cols = matrix[0].size();         if (!cols) return false;         for (int r = 0; r < rows; r++) {             if (target >= matrix[r][0] && target <= matrix[r][cols - 1]) {                 return binarySearch(matrix[r], target, 0, cols);             }         }         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_searchMatrix_vector_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_searchMatrix_vector_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/74-search-a-2d-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\n\n\nint target=843834487;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=1059283188;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=-1427434170;\nmatrix_element0.push_back(matrix_element0_element1);\nint matrix_element0_element2=1818898025;\nmatrix_element0.push_back(matrix_element0_element2);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-429208019;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=-898827329;\nmatrix_element1.push_back(matrix_element1_element1);\nmatrix.push_back(matrix_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_searchMatrix_vector_vector_int_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->searchMatrix(matrix,target);\nAKA_fCall++;AKA_mark(\"Return from: ./3/74-search-a-2d-matrix.cpp/Solution/searchMatrix(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/74-search-a-2d-matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\n\n\nint target=843834487;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=1059283188;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=-1427434170;\nmatrix_element0.push_back(matrix_element0_element1);\nint matrix_element0_element2=1818898025;\nmatrix_element0.push_back(matrix_element0_element2);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-429208019;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=-898827329;\nmatrix_element1.push_back(matrix_element1_element1);\nmatrix.push_back(matrix_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool binarySearch(vector<int>& row, int target, int start, int end) {         if (start >= end) {             return false;         }         int mid = (start + end) / 2;         if (row[mid] == target) {             return true;         } else if (row[mid] < target) {             return binarySearch(row, target, mid + 1, end);         } else {             return binarySearch(row, target, start, mid);         }     }          bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (!rows) return false;         int cols = matrix[0].size();         if (!cols) return false;         for (int r = 0; r < rows; r++) {             if (target >= matrix[r][0] && target <= matrix[r][cols - 1]) {                 return binarySearch(matrix[r], target, 0, cols);             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/74-search-a-2d-matrix.cpp/Solution/searchMatrix(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "bool findWord(vector<vector<char>>& board, string& word, int i, int j, int pos, int& rows, int& cols) {         if (i < 0 || i >= rows || j < 0 || j >= cols) {             return false;         }                  if (pos == word.size() - 1) return true;                  char tempChar = board[i][j];         board[i][j] = '$';                  bool found = false;         if (i + 1 < rows && board[i + 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i + 1, j, pos + 1, rows, cols);         }         if (i - 1 >= 0 && board[i - 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i - 1, j, pos + 1, rows, cols);         }         if (j + 1 < cols && board[i][j + 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j + 1, pos + 1, rows, cols);         }         if (j - 1 >= 0 && board[i][j - 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j - 1, pos + 1, rows, cols);         }                  board[i][j] = tempChar;                  return found;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findWord_vector_vector_char_string_int_int_int_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_findWord_vector_vector_char_string_int_int_int_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/79-word-search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\nchar* akaRandomName493399 = new char[2];akaRandomName493399[0] = -31;akaRandomName493399[1] = '\\0';string word=akaRandomName493399;\n\n\nint i=-2128957409;\n\n\nint j=619203491;\n\n\nint pos=1402387168;\n\n\nint rows=391602283;\n\n\nint cols=-1796491468;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=46;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-82;\nboard_element0.push_back(board_element0_element1);\nchar board_element0_element2=70;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* NormalNumberDataNode pos */\n/* NormalNumberDataNode rows */\n/* NormalNumberDataNode cols */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findWord_vector_vector_char_string_int_int_int_int_int_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findWord(board,word,i,j,pos,rows,cols);\nAKA_fCall++;AKA_mark(\"Return from: ./3/79-word-search.cpp/Solution/findWord(vector<vector<char>>&,string&,int,int,int,int&,int&)\");\n\n\nvector<vector<char>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/79-word-search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\nchar* akaRandomName623442 = new char[2];akaRandomName623442[0] = -31;akaRandomName623442[1] = '\\0';string word=akaRandomName623442;\n\n\nint i=-2128957409;\n\n\nint j=619203491;\n\n\nint pos=1402387168;\n\n\nint rows=391602283;\n\n\nint cols=-1796491468;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=46;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-82;\nboard_element0.push_back(board_element0_element1);\nchar board_element0_element2=70;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* NormalNumberDataNode pos */\n/* NormalNumberDataNode rows */\n/* NormalNumberDataNode cols */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_findWord_vector_vector_char_string_int_int_int_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_findWord_vector_vector_char_string_int_int_int_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/79-word-search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\nchar* akaRandomName930463 = new char[2];akaRandomName930463[0] = -8;akaRandomName930463[1] = '\\0';string word=akaRandomName930463;\n\n\nint i=600253108;\n\n\nint j=518186482;\n\n\nint pos=-2014768226;\n\n\nint rows=-384487942;\n\n\nint cols=-1183084865;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=69;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-17;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=-115;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=-125;\nboard_element1.push_back(board_element1_element1);\nchar board_element1_element2=29;\nboard_element1.push_back(board_element1_element2);\nboard.push_back(board_element1);\nvector<char> board_element2;\nchar board_element2_element0=-44;\nboard_element2.push_back(board_element2_element0);\nboard.push_back(board_element2);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* NormalNumberDataNode pos */\n/* NormalNumberDataNode rows */\n/* NormalNumberDataNode cols */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findWord_vector_vector_char_string_int_int_int_int_int_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findWord(board,word,i,j,pos,rows,cols);\nAKA_fCall++;AKA_mark(\"Return from: ./3/79-word-search.cpp/Solution/findWord(vector<vector<char>>&,string&,int,int,int,int&,int&)\");\n\n\nvector<vector<char>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/79-word-search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\nchar* akaRandomName34577 = new char[2];akaRandomName34577[0] = -8;akaRandomName34577[1] = '\\0';string word=akaRandomName34577;\n\n\nint i=600253108;\n\n\nint j=518186482;\n\n\nint pos=-2014768226;\n\n\nint rows=-384487942;\n\n\nint cols=-1183084865;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=69;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-17;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=-115;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=-125;\nboard_element1.push_back(board_element1_element1);\nchar board_element1_element2=29;\nboard_element1.push_back(board_element1_element2);\nboard.push_back(board_element1);\nvector<char> board_element2;\nchar board_element2_element0=-44;\nboard_element2.push_back(board_element2_element0);\nboard.push_back(board_element2);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* NormalNumberDataNode pos */\n/* NormalNumberDataNode rows */\n/* NormalNumberDataNode cols */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool findWord(vector<vector<char>>& board, string& word, int i, int j, int pos, int& rows, int& cols) {         if (i < 0 || i >= rows || j < 0 || j >= cols) {             return false;         }                  if (pos == word.size() - 1) return true;                  char tempChar = board[i][j];         board[i][j] = '$';                  bool found = false;         if (i + 1 < rows && board[i + 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i + 1, j, pos + 1, rows, cols);         }         if (i - 1 >= 0 && board[i - 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i - 1, j, pos + 1, rows, cols);         }         if (j + 1 < cols && board[i][j + 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j + 1, pos + 1, rows, cols);         }         if (j - 1 >= 0 && board[i][j - 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j - 1, pos + 1, rows, cols);         }                  board[i][j] = tempChar;                  return found;     }          bool exist(vector<vector<char>>& board, string word) {         int rows = board.size();         if (rows == 0) return false;         int cols = board[0].size();         int pos = 0;         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (board[i][j] == word[pos]) {                     if (word.size() == 1) return true;                     bool found = findWord(board, word, i, j, pos, rows, cols);                     if (found) return true;                 }             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/79-word-search.cpp/Solution/findWord(vector<vector<char>>&,string&,int,int,int,int&,int&)"
    },
    {
        "f": [],
        "fm": "bool exist(vector<vector<char>>& board, string word) {         int rows = board.size();         if (rows == 0) return false;         int cols = board[0].size();         int pos = 0;         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (board[i][j] == word[pos]) {                     if (word.size() == 1) return true;                     bool found = findWord(board, word, i, j, pos, rows, cols);                     if (found) return true;                 }             }         }         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_exist_vector_vector_char_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_exist_vector_vector_char_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/79-word-search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\nchar* akaRandomName458244 = new char[2];akaRandomName458244[0] = -40;akaRandomName458244[1] = '\\0';string word=akaRandomName458244;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=89;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=9;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=-90;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=119;\nboard_element1.push_back(board_element1_element1);\nchar board_element1_element2=31;\nboard_element1.push_back(board_element1_element2);\nboard.push_back(board_element1);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_exist_vector_vector_char_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->exist(board,word);\nAKA_fCall++;AKA_mark(\"Return from: ./3/79-word-search.cpp/Solution/exist(vector<vector<char>>&,string)\");\n\n\nvector<vector<char>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/79-word-search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\nchar* akaRandomName943393 = new char[2];akaRandomName943393[0] = -40;akaRandomName943393[1] = '\\0';string word=akaRandomName943393;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=89;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=9;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\nvector<char> board_element1;\nchar board_element1_element0=-90;\nboard_element1.push_back(board_element1_element0);\nchar board_element1_element1=119;\nboard_element1.push_back(board_element1_element1);\nchar board_element1_element2=31;\nboard_element1.push_back(board_element1_element2);\nboard.push_back(board_element1);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool findWord(vector<vector<char>>& board, string& word, int i, int j, int pos, int& rows, int& cols) {         if (i < 0 || i >= rows || j < 0 || j >= cols) {             return false;         }                  if (pos == word.size() - 1) return true;                  char tempChar = board[i][j];         board[i][j] = '$';                  bool found = false;         if (i + 1 < rows && board[i + 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i + 1, j, pos + 1, rows, cols);         }         if (i - 1 >= 0 && board[i - 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i - 1, j, pos + 1, rows, cols);         }         if (j + 1 < cols && board[i][j + 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j + 1, pos + 1, rows, cols);         }         if (j - 1 >= 0 && board[i][j - 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j - 1, pos + 1, rows, cols);         }                  board[i][j] = tempChar;                  return found;     }          bool exist(vector<vector<char>>& board, string word) {         int rows = board.size();         if (rows == 0) return false;         int cols = board[0].size();         int pos = 0;         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (board[i][j] == word[pos]) {                     if (word.size() == 1) return true;                     bool found = findWord(board, word, i, j, pos, rows, cols);                     if (found) return true;                 }             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/79-word-search.cpp/Solution/exist(vector<vector<char>>&,string)"
    },
    {
        "f": [],
        "fm": "bool search(vector<int>& nums, int target) {         int n = nums.size();         if (n == 0) return false;                  int left = 0;         int right = n - 1;         int mid, midNum, leftNum, rightNum;                  while (left <= right) {             mid = (left + right) / 2;             midNum = nums[mid];             leftNum = nums[left];             rightNum = nums[right];                          if (midNum == target) {                 return true;             } else if (leftNum < midNum) { // left array is sorted                 if (target >= leftNum && target <= midNum) {                     right = mid - 1;                 } else {                      left = mid + 1;                 }             } else if (leftNum > midNum) { // right array is sorted                 if (target >= midNum && target <= rightNum) {                     left = mid + 1;                 } else {                     right = mid - 1;                 }             } else {                 left++;             }         }         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_search_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_search_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/81-search-in-rotated-sorted-array-ii.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1664222518;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-315446390;\nnums.push_back(nums_element0);\nint nums_element1=-1957561402;\nnums.push_back(nums_element1);\nint nums_element2=967417992;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_search_vector_int_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->search(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./3/81-search-in-rotated-sorted-array-ii.cpp/Solution/search(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/81-search-in-rotated-sorted-array-ii.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1664222518;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-315446390;\nnums.push_back(nums_element0);\nint nums_element1=-1957561402;\nnums.push_back(nums_element1);\nint nums_element2=967417992;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_search_vector_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_search_vector_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/81-search-in-rotated-sorted-array-ii.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-67647126;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1849022173;\nnums.push_back(nums_element0);\nint nums_element1=-915201310;\nnums.push_back(nums_element1);\nint nums_element2=1110470600;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_search_vector_int_int_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->search(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./3/81-search-in-rotated-sorted-array-ii.cpp/Solution/search(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/81-search-in-rotated-sorted-array-ii.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-67647126;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1849022173;\nnums.push_back(nums_element0);\nint nums_element1=-915201310;\nnums.push_back(nums_element1);\nint nums_element2=1110470600;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool search(vector<int>& nums, int target) {         int n = nums.size();         if (n == 0) return false;                  int left = 0;         int right = n - 1;         int mid, midNum, leftNum, rightNum;                  while (left <= right) {             mid = (left + right) / 2;             midNum = nums[mid];             leftNum = nums[left];             rightNum = nums[right];                          if (midNum == target) {                 return true;             } else if (leftNum < midNum) { // left array is sorted                 if (target >= leftNum && target <= midNum) {                     right = mid - 1;                 } else {                      left = mid + 1;                 }             } else if (leftNum > midNum) { // right array is sorted                 if (target >= midNum && target <= rightNum) {                     left = mid + 1;                 } else {                     right = mid - 1;                 }             } else {                 left++;             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/81-search-in-rotated-sorted-array-ii.cpp/Solution/search(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {                  int p = m + n - 1;         int p1 = m - 1;         int p2 = n - 1;                  while (p1 >= 0 && p2 >= 0) {             if (nums1[p1] < nums2[p2]) {                 nums1[p] = nums2[p2];                 p2--;             } else {                 nums1[p] = nums1[p1];                 p1--;             }             p--;         }         for (int i = 0; i <= p2; i++) {             nums1[i] = nums2[i];         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_merge_vector_int_int_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_merge_vector_int_int_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/88-merge-sorted-array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=2;\nvector<int> nums2;\n\n\nint n=9;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1422247948;\nnums1.push_back(nums1_element0);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=1346315862;\nnums2.push_back(nums2_element0);\nint nums2_element1=-640113993;\nnums2.push_back(nums2_element1);\nint nums2_element2=980396510;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_merge_vector_int_int_vector_int_int_random_3\");AKA_INSTANCE___Solution->merge(nums1,m,nums2,n);\nAKA_fCall++;AKA_mark(\"Return from: ./3/88-merge-sorted-array.cpp/Solution/merge(vector<int>&,int,vector<int>&,int)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/88-merge-sorted-array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=2;\nvector<int> nums2;\n\n\nint n=9;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1422247948;\nnums1.push_back(nums1_element0);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=1346315862;\nnums2.push_back(nums2_element0);\nint nums2_element1=-640113993;\nnums2.push_back(nums2_element1);\nint nums2_element2=980396510;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode n */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_merge_vector_int_int_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_merge_vector_int_int_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/88-merge-sorted-array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=5;\nvector<int> nums2;\n\n\nint n=7;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1635486631;\nnums1.push_back(nums1_element0);\nint nums1_element1=1145553469;\nnums1.push_back(nums1_element1);\nint nums1_element2=-2104329308;\nnums1.push_back(nums1_element2);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=-2047651353;\nnums2.push_back(nums2_element0);\nint nums2_element1=1544355701;\nnums2.push_back(nums2_element1);\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_merge_vector_int_int_vector_int_int_random_0\");AKA_INSTANCE___Solution->merge(nums1,m,nums2,n);\nAKA_fCall++;AKA_mark(\"Return from: ./3/88-merge-sorted-array.cpp/Solution/merge(vector<int>&,int,vector<int>&,int)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/88-merge-sorted-array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=5;\nvector<int> nums2;\n\n\nint n=7;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1635486631;\nnums1.push_back(nums1_element0);\nint nums1_element1=1145553469;\nnums1.push_back(nums1_element1);\nint nums1_element2=-2104329308;\nnums1.push_back(nums1_element2);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=-2047651353;\nnums2.push_back(nums2_element0);\nint nums2_element1=1544355701;\nnums2.push_back(nums2_element1);\n/* NormalNumberDataNode n */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {                  int p = m + n - 1;         int p1 = m - 1;         int p2 = n - 1;                  while (p1 >= 0 && p2 >= 0) {             if (nums1[p1] < nums2[p2]) {                 nums1[p] = nums2[p2];                 p2--;             } else {                 nums1[p] = nums1[p1];                 p1--;             }             p--;         }         for (int i = 0; i <= p2; i++) {             nums1[i] = nums2[i];         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/88-merge-sorted-array.cpp/Solution/merge(vector<int>&,int,vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int numDecodings(string s) {         int n = s.size();                  if (n == 1 && s[0] == '0') {             return 0;         } else if (n == 1) {             return 1;         }                  vector<int> ways(n + 1, 0);         ways[n] = 1;                  for (int i = n - 1; i >= 0; i--) {             if (s[i] == '0') {                 ways[i] = 0;             } else if (s[i] == '1') {                 ways[i] = ways[i + 1];                 if (i != n - 1) {                     ways[i] += ways[i + 2];                 }             } else if (s[i] == '2') {                 ways[i] = ways[i + 1];                 if (i != n - 1 && s[i + 1] < '7') {                     ways[i] += ways[i + 2];                 }             } else {                 ways[i] = ways[i + 1];             }         }         return ways[0];     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/91-decode-ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName139081 = new char[2];akaRandomName139081[0] = -121;akaRandomName139081[1] = '\\0';string s=akaRandomName139081;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: ./3/91-decode-ways.cpp/Solution/numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/91-decode-ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName194065 = new char[2];akaRandomName194065[0] = -121;akaRandomName194065[1] = '\\0';string s=akaRandomName194065;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int numDecodings(string s) {         int n = s.size();                  if (n == 1 && s[0] == '0') {             return 0;         } else if (n == 1) {             return 1;         }                  vector<int> ways(n + 1, 0);         ways[n] = 1;                  for (int i = n - 1; i >= 0; i--) {             if (s[i] == '0') {                 ways[i] = 0;             } else if (s[i] == '1') {                 ways[i] = ways[i + 1];                 if (i != n - 1) {                     ways[i] += ways[i + 2];                 }             } else if (s[i] == '2') {                 ways[i] = ways[i + 1];                 if (i != n - 1 && s[i + 1] < '7') {                     ways[i] += ways[i + 2];                 }             } else {                 ways[i] = ways[i + 1];             }         }         return ways[0];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/91-decode-ways.cpp/Solution/numDecodings(string)"
    },
    {
        "f": [],
        "fm": "bool isValidBST(TreeNode* root, long minVal=LONG_MIN, long maxVal=LONG_MAX) {         if (!root) return true;         int val = root->val;         if (val > minVal && val < maxVal) {             return isValidBST(root->left, minVal, val) && isValidBST(root->right, val, maxVal);         }         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValidBST_TreeNodemul_longequal_longequal_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isValidBST_TreeNodemul_longequal_longequal_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/98-validate-binary-search-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-970398477;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-335998104;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1627545888;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1261812777;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-1187958654;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-1777053289;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-1425362027;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=542015901;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=894705836;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-117139907;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=491826760;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1367506638;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1862105464;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-1483205480;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=594344422;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=354850460;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nlong minVal=-801112945;\n\n\nlong maxVal=1700600567;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode minVal */\n/* NormalNumberDataNode maxVal */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValidBST_TreeNodemul_longequal_longequal_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValidBST(root,minVal,maxVal);\nAKA_fCall++;AKA_mark(\"Return from: ./3/98-validate-binary-search-tree.cpp/Solution/isValidBST(TreeNode*,long= ,long=)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/98-validate-binary-search-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-970398477;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-335998104;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1627545888;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1261812777;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-1187958654;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-1777053289;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-1425362027;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=542015901;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=894705836;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-117139907;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=491826760;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1367506638;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1862105464;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-1483205480;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=594344422;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=354850460;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nlong minVal=-801112945;\n\n\nlong maxVal=1700600567;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode minVal */\n/* NormalNumberDataNode maxVal */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValidBST_TreeNodemul_longequal_longequal_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isValidBST_TreeNodemul_longequal_longequal_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/98-validate-binary-search-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=82012476;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-45888991;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-2046840378;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=172587373;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=1600123139;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=615425127;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1564199658;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1060884955;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=943703833;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=731416801;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=1268510455;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=-1885039539;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right2_x=425470444;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_2 = new ::TreeNode(root1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).val=-485463149;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_2);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nlong minVal=1297024568;\n\n\nlong maxVal=-1048203390;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode minVal */\n/* NormalNumberDataNode maxVal */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValidBST_TreeNodemul_longequal_longequal_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValidBST(root,minVal,maxVal);\nAKA_fCall++;AKA_mark(\"Return from: ./3/98-validate-binary-search-tree.cpp/Solution/isValidBST(TreeNode*,long= ,long=)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/98-validate-binary-search-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=82012476;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-45888991;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-2046840378;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=172587373;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=1600123139;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=615425127;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1564199658;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1060884955;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=943703833;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=731416801;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=1268510455;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=-1885039539;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right2_x=425470444;\nAKA_mark(\"Calling: ./3/98-validate-binary-search-tree.cpp/TreeNode/TreeNode(int)|ROOT/98-validate-binary-search-tree.cpp/isValidBST(TreeNode*,long= ,long=)/root/AKA_VECTOR_INIT_root_1/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_2 = new ::TreeNode(root1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).val=-485463149;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_2);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nlong minVal=1297024568;\n\n\nlong maxVal=-1048203390;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode minVal */\n/* NormalNumberDataNode maxVal */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValidBST_TreeNodemul_longequal_longequal_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isValidBST_TreeNodemul_longequal_longequal_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/98-validate-binary-search-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\n\n\nlong minVal=-894860245;\n\n\nlong maxVal=1563402865;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode minVal */\n/* NormalNumberDataNode maxVal */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValidBST_TreeNodemul_longequal_longequal_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValidBST(root,minVal,maxVal);\nAKA_fCall++;AKA_mark(\"Return from: ./3/98-validate-binary-search-tree.cpp/Solution/isValidBST(TreeNode*,long= ,long=)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/98-validate-binary-search-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\n\n\nlong minVal=-894860245;\n\n\nlong maxVal=1563402865;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode minVal */\n/* NormalNumberDataNode maxVal */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isValidBST(TreeNode* root, long minVal=LONG_MIN, long maxVal=LONG_MAX) {         if (!root) return true;         int val = root->val;         if (val > minVal && val < maxVal) {             return isValidBST(root->left, minVal, val) && isValidBST(root->right, val, maxVal);         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/98-validate-binary-search-tree.cpp/Solution/isValidBST(TreeNode*,long= ,long=)"
    }
]