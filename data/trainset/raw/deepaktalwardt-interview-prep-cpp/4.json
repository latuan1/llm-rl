[
    {
        "f": [],
        "fm": "bool isSameTree(TreeNode* p, TreeNode* q) {         if (!p && !q) return true;         if (p && !q || !p && q) return false;         return p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSameTree_TreeNodemul_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isSameTree_TreeNodemul_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/100-same-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=448607306;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-778980718;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left0_x=-1758621789;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_0 = new ::TreeNode(p0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).val=2019165955;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left1_x=-1573586222;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_1 = new ::TreeNode(p0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).val=1611424401;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_1);\n(*AKA_VECTOR_INIT_p_0).left = AKA_VECTOR_INIT_p_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right0_x=-1700578269;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_0 = new ::TreeNode(p0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).val=-557295920;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_0);\n(*AKA_VECTOR_INIT_p_0).right = AKA_VECTOR_INIT_p_0_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_x=914927834;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1 = new ::TreeNode(p1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1).val=-509315171;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right0_x=-388124803;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_0 = new ::TreeNode(p1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).val=290469932;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_0);\n(*AKA_VECTOR_INIT_p_1).right = AKA_VECTOR_INIT_p_1_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_1);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-1928112435;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=1126415252;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=-1045506473;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=985297680;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSameTree_TreeNodemul_TreeNodemul_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSameTree(p,q);\nAKA_fCall++;AKA_mark(\"Return from: ./4/100-same-tree.cpp/Solution/isSameTree(TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/100-same-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=448607306;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-778980718;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left0_x=-1758621789;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_0 = new ::TreeNode(p0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).val=2019165955;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_0).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_left1_x=-1573586222;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_left_1 = new ::TreeNode(p0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).val=1611424401;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_left_1).right;\nAKA_VECTOR_INIT_p_0_DOT_left.push_back(AKA_VECTOR_INIT_p_0_DOT_left_1);\n(*AKA_VECTOR_INIT_p_0).left = AKA_VECTOR_INIT_p_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_right0_x=-1700578269;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_0/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0_DOT_right_0 = new ::TreeNode(p0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).val=-557295920;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0_DOT_right_0).right;\nAKA_VECTOR_INIT_p_0_DOT_right.push_back(AKA_VECTOR_INIT_p_0_DOT_right_0);\n(*AKA_VECTOR_INIT_p_0).right = AKA_VECTOR_INIT_p_0_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_x=914927834;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1 = new ::TreeNode(p1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1).val=-509315171;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p1_right0_x=-388124803;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/p/AKA_VECTOR_INIT_p_1/p/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_1_DOT_right_0 = new ::TreeNode(p1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).val=290469932;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_1_DOT_right_0).right;\nAKA_VECTOR_INIT_p_1_DOT_right.push_back(AKA_VECTOR_INIT_p_1_DOT_right_0);\n(*AKA_VECTOR_INIT_p_1).right = AKA_VECTOR_INIT_p_1_DOT_right[0];\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_1);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-1928112435;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=1126415252;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=-1045506473;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=985297680;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSameTree_TreeNodemul_TreeNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isSameTree_TreeNodemul_TreeNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/100-same-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* p;\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-900013622;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=45359701;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=1795770962;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=-1546155067;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=-1903711293;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=557412813;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right1_x=433625415;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_1 = new ::TreeNode(q0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).val=-297160507;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_1);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_x=1816054923;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1 = new ::TreeNode(q1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1).val=407557272;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left0_x=1249119422;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_0 = new ::TreeNode(q1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).val=-41661233;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left1_x=1622131866;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_1 = new ::TreeNode(q1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).val=-1039066623;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left2_x=-375289205;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_2 = new ::TreeNode(q1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_2).val=-285774346;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_2).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_2);\n(*AKA_VECTOR_INIT_q_1).left = AKA_VECTOR_INIT_q_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right0_x=1879553921;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_0 = new ::TreeNode(q1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).val=1842912929;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right1_x=-1923737219;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_1 = new ::TreeNode(q1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).val=-237299025;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right2_x=-137189114;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_2 = new ::TreeNode(q1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).val=534452419;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_2);\n(*AKA_VECTOR_INIT_q_1).right = AKA_VECTOR_INIT_q_1_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_1);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_x=678745401;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2 = new ::TreeNode(q2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2).val=1084172483;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left0_x=-978964574;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_0 = new ::TreeNode(q2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).val=1040952468;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_0);\n(*AKA_VECTOR_INIT_q_2).left = AKA_VECTOR_INIT_q_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_right0_x=-2054026020;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_right_0 = new ::TreeNode(q2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).val=-433133807;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).right;\nAKA_VECTOR_INIT_q_2_DOT_right.push_back(AKA_VECTOR_INIT_q_2_DOT_right_0);\n(*AKA_VECTOR_INIT_q_2).right = AKA_VECTOR_INIT_q_2_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_2);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSameTree_TreeNodemul_TreeNodemul_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSameTree(p,q);\nAKA_fCall++;AKA_mark(\"Return from: ./4/100-same-tree.cpp/Solution/isSameTree(TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/100-same-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* p;\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-900013622;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=45359701;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=1795770962;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=-1546155067;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=-1903711293;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=557412813;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right1_x=433625415;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_0/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_1 = new ::TreeNode(q0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).val=-297160507;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_1);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_x=1816054923;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1 = new ::TreeNode(q1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1).val=407557272;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left0_x=1249119422;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_0 = new ::TreeNode(q1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).val=-41661233;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left1_x=1622131866;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_1 = new ::TreeNode(q1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).val=-1039066623;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left2_x=-375289205;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_2 = new ::TreeNode(q1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_2).val=-285774346;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_2).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_2);\n(*AKA_VECTOR_INIT_q_1).left = AKA_VECTOR_INIT_q_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right0_x=1879553921;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_0 = new ::TreeNode(q1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).val=1842912929;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right1_x=-1923737219;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_1 = new ::TreeNode(q1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).val=-237299025;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right2_x=-137189114;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_1/q/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_2 = new ::TreeNode(q1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).val=534452419;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_2);\n(*AKA_VECTOR_INIT_q_1).right = AKA_VECTOR_INIT_q_1_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_1);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_x=678745401;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2 = new ::TreeNode(q2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2).val=1084172483;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left0_x=-978964574;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_0 = new ::TreeNode(q2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).val=1040952468;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_0);\n(*AKA_VECTOR_INIT_q_2).left = AKA_VECTOR_INIT_q_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_right0_x=-2054026020;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/100-same-tree.cpp/isSameTree(TreeNode*,TreeNode*)/q/AKA_VECTOR_INIT_q_2/q/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_right_0 = new ::TreeNode(q2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).val=-433133807;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_right_0).right;\nAKA_VECTOR_INIT_q_2_DOT_right.push_back(AKA_VECTOR_INIT_q_2_DOT_right_0);\n(*AKA_VECTOR_INIT_q_2).right = AKA_VECTOR_INIT_q_2_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_2);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isSameTree(TreeNode* p, TreeNode* q) {         if (!p && !q) return true;         if (p && !q || !p && q) return false;         return p->val == q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/100-same-tree.cpp/Solution/isSameTree(TreeNode*,TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool checkSymmetry(const TreeNode* treeL, const TreeNode* treeR) {         if (treeL == nullptr && treeR == nullptr) {             return true;         } else if (treeL != nullptr && treeR != nullptr) {             return treeL->val == treeR->val && checkSymmetry(treeL->left, treeR->right) && checkSymmetry(treeL->right, treeR->left);         }         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* treeL;\nTreeNode* treeR;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode treeL */\n/* PointerStructureDataNode treeR */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkSymmetry(treeL,treeR);\nAKA_fCall++;AKA_mark(\"Return from: ./4/101-symmetric-tree.cpp/Solution/checkSymmetry(TreeNode const*,TreeNode const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* treeL;\nTreeNode* treeR;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode treeL */\n/* PointerStructureDataNode treeR */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* treeL;\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR;\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_x=477159320;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0 = new ::TreeNode(treeR_constantPointer0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).val=-1589883858;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_left0_x=567748227;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0 = new ::TreeNode(treeR_constantPointer0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).val=-612664215;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).left = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_right0_x=263286714;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0 = new ::TreeNode(treeR_constantPointer0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).val=-460991376;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).right = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right[0];\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0);\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer1_x=234681339;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[1]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_1 = new ::TreeNode(treeR_constantPointer1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1).val=1550327216;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer1_left0_x=1147718932;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[1]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0 = new ::TreeNode(treeR_constantPointer1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0).val=1545501343;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_1).left = AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1).right;\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_1);\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_x=-1791838758;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2 = new ::TreeNode(treeR_constantPointer2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2).val=857975617;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_left0_x=422604985;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0 = new ::TreeNode(treeR_constantPointer2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0).val=-1269636084;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_left1_x=-2129619291;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1 = new ::TreeNode(treeR_constantPointer2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1).val=-2012007912;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1);\n(*AKA_VECTOR_INIT_treeR_constantPointer_2).left = AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_right0_x=273963045;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0 = new ::TreeNode(treeR_constantPointer2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0).val=342189989;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_right1_x=152221729;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1 = new ::TreeNode(treeR_constantPointer2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1).val=20046857;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_right2_x=1511736703;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2 = new ::TreeNode(treeR_constantPointer2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2).val=-809616919;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2);\n(*AKA_VECTOR_INIT_treeR_constantPointer_2).right = AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right[0];\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2);\n\nTreeNode* treeR = AKA_VECTOR_INIT_treeR[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode treeL */\n/* PointerStructureDataNode treeR */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkSymmetry(treeL,treeR);\nAKA_fCall++;AKA_mark(\"Return from: ./4/101-symmetric-tree.cpp/Solution/checkSymmetry(TreeNode const*,TreeNode const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* treeL;\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR;\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_x=477159320;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0 = new ::TreeNode(treeR_constantPointer0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).val=-1589883858;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_left0_x=567748227;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0 = new ::TreeNode(treeR_constantPointer0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).val=-612664215;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).left = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_right0_x=263286714;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0 = new ::TreeNode(treeR_constantPointer0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).val=-460991376;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).right = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right[0];\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0);\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer1_x=234681339;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[1]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_1 = new ::TreeNode(treeR_constantPointer1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1).val=1550327216;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer1_left0_x=1147718932;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[1]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0 = new ::TreeNode(treeR_constantPointer1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0).val=1545501343;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_1).left = AKA_VECTOR_INIT_treeR_constantPointer_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_1).right;\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_1);\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_x=-1791838758;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2 = new ::TreeNode(treeR_constantPointer2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2).val=857975617;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_left0_x=422604985;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0 = new ::TreeNode(treeR_constantPointer2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0).val=-1269636084;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_left1_x=-2129619291;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1 = new ::TreeNode(treeR_constantPointer2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1).val=-2012007912;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left_1);\n(*AKA_VECTOR_INIT_treeR_constantPointer_2).left = AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_right0_x=273963045;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0 = new ::TreeNode(treeR_constantPointer2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0).val=342189989;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_right1_x=152221729;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1 = new ::TreeNode(treeR_constantPointer2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1).val=20046857;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer2_right2_x=1511736703;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[2]/treeR/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2 = new ::TreeNode(treeR_constantPointer2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2).val=-809616919;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2).right;\nAKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right_2);\n(*AKA_VECTOR_INIT_treeR_constantPointer_2).right = AKA_VECTOR_INIT_treeR_constantPointer_2_DOT_right[0];\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_2);\n\nTreeNode* treeR = AKA_VECTOR_INIT_treeR[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode treeL */\n/* PointerStructureDataNode treeR */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL;\n\n\n/* SubStructDataNode treeL */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer0_x=1902928929;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[0]/treeL/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_0 = new ::TreeNode(treeL_constantPointer0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0).val=-1381649530;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer0_right0_x=1678532171;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[0]/treeL/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0 = new ::TreeNode(treeL_constantPointer0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0).val=951266511;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer0_right1_x=1806810524;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[0]/treeL/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1 = new ::TreeNode(treeL_constantPointer0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1).val=-520574736;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1);\n(*AKA_VECTOR_INIT_treeL_constantPointer_0).right = AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right[0];\n\nAKA_VECTOR_INIT_treeL.push_back(AKA_VECTOR_INIT_treeL_constantPointer_0);\n\n\n/* SubStructDataNode treeL */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_x=1042018284;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1 = new ::TreeNode(treeL_constantPointer1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1).val=-1145498094;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_left0_x=-1801792133;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0 = new ::TreeNode(treeL_constantPointer1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0).val=1737370314;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_left1_x=542295664;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1 = new ::TreeNode(treeL_constantPointer1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1).val=1478169894;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1);\n(*AKA_VECTOR_INIT_treeL_constantPointer_1).left = AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_right0_x=1087509206;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0 = new ::TreeNode(treeL_constantPointer1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0).val=-846500902;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0);\n(*AKA_VECTOR_INIT_treeL_constantPointer_1).right = AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right[0];\n\nAKA_VECTOR_INIT_treeL.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1);\n\n\n/* SubStructDataNode treeL */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_x=-1517941651;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2 = new ::TreeNode(treeL_constantPointer2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2).val=-593851244;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_left0_x=-2102400156;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0 = new ::TreeNode(treeL_constantPointer2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0).val=-1597244230;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_left1_x=1788580368;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1 = new ::TreeNode(treeL_constantPointer2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1).val=-901140286;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1);\n(*AKA_VECTOR_INIT_treeL_constantPointer_2).left = AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_right0_x=-1573452579;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0 = new ::TreeNode(treeL_constantPointer2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0).val=-1776129675;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_right1_x=1765911590;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1 = new ::TreeNode(treeL_constantPointer2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1).val=-527170645;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_right2_x=-1950413468;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2 = new ::TreeNode(treeL_constantPointer2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2).val=-700063628;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2);\n(*AKA_VECTOR_INIT_treeL_constantPointer_2).right = AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right[0];\n\nAKA_VECTOR_INIT_treeL.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2);\n\nTreeNode* treeL = AKA_VECTOR_INIT_treeL[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR;\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_x=338040917;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0 = new ::TreeNode(treeR_constantPointer0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).val=141448245;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_left0_x=1114531939;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0 = new ::TreeNode(treeR_constantPointer0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).val=-940015049;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).left = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_right0_x=-1087932943;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0 = new ::TreeNode(treeR_constantPointer0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).val=-1076044323;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).right = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right[0];\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0);\n\nTreeNode* treeR = AKA_VECTOR_INIT_treeR[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode treeL */\n/* PointerStructureDataNode treeR */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkSymmetry_TreeNode_constmul_TreeNode_constmul_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkSymmetry(treeL,treeR);\nAKA_fCall++;AKA_mark(\"Return from: ./4/101-symmetric-tree.cpp/Solution/checkSymmetry(TreeNode const*,TreeNode const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL;\n\n\n/* SubStructDataNode treeL */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer0_x=1902928929;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[0]/treeL/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_0 = new ::TreeNode(treeL_constantPointer0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0).val=-1381649530;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer0_right0_x=1678532171;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[0]/treeL/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0 = new ::TreeNode(treeL_constantPointer0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0).val=951266511;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer0_right1_x=1806810524;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[0]/treeL/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1 = new ::TreeNode(treeL_constantPointer0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1).val=-520574736;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right_1);\n(*AKA_VECTOR_INIT_treeL_constantPointer_0).right = AKA_VECTOR_INIT_treeL_constantPointer_0_DOT_right[0];\n\nAKA_VECTOR_INIT_treeL.push_back(AKA_VECTOR_INIT_treeL_constantPointer_0);\n\n\n/* SubStructDataNode treeL */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_x=1042018284;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1 = new ::TreeNode(treeL_constantPointer1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1).val=-1145498094;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_left0_x=-1801792133;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0 = new ::TreeNode(treeL_constantPointer1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0).val=1737370314;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_left1_x=542295664;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1 = new ::TreeNode(treeL_constantPointer1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1).val=1478169894;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left_1);\n(*AKA_VECTOR_INIT_treeL_constantPointer_1).left = AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer1_right0_x=1087509206;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[1]/treeL/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0 = new ::TreeNode(treeL_constantPointer1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0).val=-846500902;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right_0);\n(*AKA_VECTOR_INIT_treeL_constantPointer_1).right = AKA_VECTOR_INIT_treeL_constantPointer_1_DOT_right[0];\n\nAKA_VECTOR_INIT_treeL.push_back(AKA_VECTOR_INIT_treeL_constantPointer_1);\n\n\n/* SubStructDataNode treeL */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_x=-1517941651;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2 = new ::TreeNode(treeL_constantPointer2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2).val=-593851244;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_left0_x=-2102400156;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0 = new ::TreeNode(treeL_constantPointer2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0).val=-1597244230;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_left1_x=1788580368;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1 = new ::TreeNode(treeL_constantPointer2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1).val=-901140286;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left_1);\n(*AKA_VECTOR_INIT_treeL_constantPointer_2).left = AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_right0_x=-1573452579;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0 = new ::TreeNode(treeL_constantPointer2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0).val=-1776129675;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_right1_x=1765911590;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1 = new ::TreeNode(treeL_constantPointer2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1).val=-527170645;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeL_constantPointer2_right2_x=-1950413468;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeL/treeL[2]/treeL/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2 = new ::TreeNode(treeL_constantPointer2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2).val=-700063628;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2).right;\nAKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right_2);\n(*AKA_VECTOR_INIT_treeL_constantPointer_2).right = AKA_VECTOR_INIT_treeL_constantPointer_2_DOT_right[0];\n\nAKA_VECTOR_INIT_treeL.push_back(AKA_VECTOR_INIT_treeL_constantPointer_2);\n\nTreeNode* treeL = AKA_VECTOR_INIT_treeL[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR;\n\n\n/* SubStructDataNode treeR */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_x=338040917;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0 = new ::TreeNode(treeR_constantPointer0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).val=141448245;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_left0_x=1114531939;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0 = new ::TreeNode(treeR_constantPointer0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).val=-940015049;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).left = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint treeR_constantPointer0_right0_x=-1087932943;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/checkSymmetry(TreeNode const*,TreeNode const*)/treeR/treeR[0]/treeR/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0 = new ::TreeNode(treeR_constantPointer0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).val=-1076044323;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0).right;\nAKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right_0);\n(*AKA_VECTOR_INIT_treeR_constantPointer_0).right = AKA_VECTOR_INIT_treeR_constantPointer_0_DOT_right[0];\n\nAKA_VECTOR_INIT_treeR.push_back(AKA_VECTOR_INIT_treeR_constantPointer_0);\n\nTreeNode* treeR = AKA_VECTOR_INIT_treeR[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode treeL */\n/* PointerStructureDataNode treeR */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool checkSymmetry(const TreeNode* treeL, const TreeNode* treeR) {         if (treeL == nullptr && treeR == nullptr) {             return true;         } else if (treeL != nullptr && treeR != nullptr) {             return treeL->val == treeR->val && checkSymmetry(treeL->left, treeR->right) && checkSymmetry(treeL->right, treeR->left);         }         return false;     }          bool isSymmetric(TreeNode* root) {         return root == nullptr || checkSymmetry(root->left, root->right);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/101-symmetric-tree.cpp/Solution/checkSymmetry(TreeNode const*,TreeNode const*)"
    },
    {
        "f": [],
        "fm": "bool isSymmetric(TreeNode* root) {         return root == nullptr || checkSymmetry(root->left, root->right);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSymmetric_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isSymmetric_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=251377619;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1527862514;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=701469219;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-1557886255;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSymmetric_TreeNodemul_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: ./4/101-symmetric-tree.cpp/Solution/isSymmetric(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/101-symmetric-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=251377619;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1527862514;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=701469219;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-1557886255;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/101-symmetric-tree.cpp/isSymmetric(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool checkSymmetry(const TreeNode* treeL, const TreeNode* treeR) {         if (treeL == nullptr && treeR == nullptr) {             return true;         } else if (treeL != nullptr && treeR != nullptr) {             return treeL->val == treeR->val && checkSymmetry(treeL->left, treeR->right) && checkSymmetry(treeL->right, treeR->left);         }         return false;     }          bool isSymmetric(TreeNode* root) {         return root == nullptr || checkSymmetry(root->left, root->right);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/101-symmetric-tree.cpp/Solution/isSymmetric(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int maxDepth(TreeNode* root) {         if (root == NULL) {             return 0;         } else {             int leftDepth = maxDepth(root->left);             int rightDepth = maxDepth(root->right);                          int max = leftDepth > rightDepth ? leftDepth : rightDepth;             return max + 1;         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxDepth_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_maxDepth_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/104-maximum-depth-of-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1218979498;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1706752020;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1172073471;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-561230068;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxDepth_TreeNodemul_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxDepth(root);\nAKA_fCall++;AKA_mark(\"Return from: ./4/104-maximum-depth-of-binary-tree.cpp/Solution/maxDepth(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/104-maximum-depth-of-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1218979498;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1706752020;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1172073471;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-561230068;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/104-maximum-depth-of-binary-tree.cpp/maxDepth(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maxDepth(TreeNode* root) {         if (root == NULL) {             return 0;         } else {             int leftDepth = maxDepth(root->left);             int rightDepth = maxDepth(root->right);                          int max = leftDepth > rightDepth ? leftDepth : rightDepth;             return max + 1;         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/104-maximum-depth-of-binary-tree.cpp/Solution/maxDepth(TreeNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {         if (preorder.size() == 0) return NULL;         int rootVal = preorder[0];         if (preorder.size() == 1) {             return new TreeNode(rootVal);         }         int i = 0;         for (; i < inorder.size(); i++) {             if (rootVal == inorder[i]) break;         }         vector<int> leftPreorder = {preorder.begin() + 1, preorder.begin() + 1 + i};         vector<int> rightPreorder = {preorder.begin() + 1 + i, preorder.end()};         vector<int> leftInorder = {inorder.begin(), inorder.begin() + i};         vector<int> rightInorder = {inorder.begin() + i + 1, inorder.end()};                  TreeNode* currNode = new TreeNode(rootVal);         currNode->left = buildTree(leftPreorder, leftInorder);         currNode->right = buildTree(rightPreorder, rightInorder);         return currNode;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_buildTree_vector_int_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_buildTree_vector_int_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-434083651;\npreorder.push_back(preorder_element0);\nint preorder_element1=1793370490;\npreorder.push_back(preorder_element1);\nint preorder_element2=-799646907;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=-1848382154;\ninorder.push_back(inorder_element0);\nint inorder_element1=1567147489;\ninorder.push_back(inorder_element1);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildTree_vector_int_vector_int_random_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buildTree(preorder,inorder);\nAKA_fCall++;AKA_mark(\"Return from: ./4/105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-434083651;\npreorder.push_back(preorder_element0);\nint preorder_element1=1793370490;\npreorder.push_back(preorder_element1);\nint preorder_element2=-799646907;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=-1848382154;\ninorder.push_back(inorder_element0);\nint inorder_element1=1567147489;\ninorder.push_back(inorder_element1);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_buildTree_vector_int_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_buildTree_vector_int_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=1143458212;\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\nint inorder_element0=756726143;\ninorder.push_back(inorder_element0);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildTree_vector_int_vector_int_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buildTree(preorder,inorder);\nAKA_fCall++;AKA_mark(\"Return from: ./4/105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=1143458212;\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\nint inorder_element0=756726143;\ninorder.push_back(inorder_element0);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {         if (preorder.size() == 0) return NULL;         int rootVal = preorder[0];         if (preorder.size() == 1) {             return new TreeNode(rootVal);         }         int i = 0;         for (; i < inorder.size(); i++) {             if (rootVal == inorder[i]) break;         }         vector<int> leftPreorder = {preorder.begin() + 1, preorder.begin() + 1 + i};         vector<int> rightPreorder = {preorder.begin() + 1 + i, preorder.end()};         vector<int> leftInorder = {inorder.begin(), inorder.begin() + i};         vector<int> rightInorder = {inorder.begin() + i + 1, inorder.end()};                  TreeNode* currNode = new TreeNode(rootVal);         currNode->left = buildTree(leftPreorder, leftInorder);         currNode->right = buildTree(rightPreorder, rightInorder);         return currNode;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/105-construct-binary-tree-from-preorder-and-inorder-traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "BalanceHeight checkBalance(TreeNode* root) {         if (root == nullptr) {             return {true, -1};         }                  BalanceHeight left = checkBalance(root->left);         if (!left.balanced) {return {false, 0}; }                  BalanceHeight right = checkBalance(root->right);         if (!right.balanced) {return {false, 0}; }                  bool balanced = abs(left.height - right.height) <= 1;         int height = std::max(left.height, right.height) + 1;         return {balanced, height};     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_checkBalance_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_checkBalance_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/110-balanced-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-40363530;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-868618528;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1934712763;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-748709165;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* StructDataNode RETURN */\n/* SubStructDataNode checkBalance */\n/* ConstructorDataNode BalanceHeight() */\nAKA_mark(\"Calling: /BalanceHeight()|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/RETURN/checkBalance/BalanceHeight()\");AKA_fCall++;Solution::BalanceHeight AKA_EXPECTED_OUTPUT = Solution::BalanceHeight();\n/* NormalNumberDataNode balanced */\n/* balanced : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkBalance_TreeNodemul_random_0\");BalanceHeight AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkBalance(root);\nAKA_fCall++;AKA_mark(\"Return from: ./4/110-balanced-binary-tree.cpp/Solution/checkBalance(TreeNode*)\");\n\n\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/110-balanced-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-40363530;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-868618528;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1934712763;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-748709165;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* StructDataNode RETURN */\n/* SubStructDataNode checkBalance */\n/* ConstructorDataNode BalanceHeight() */\nAKA_mark(\"Calling: /BalanceHeight()|ROOT/110-balanced-binary-tree.cpp/checkBalance(TreeNode*)/RETURN/checkBalance/BalanceHeight()\");AKA_fCall++;Solution::BalanceHeight AKA_EXPECTED_OUTPUT = Solution::BalanceHeight();\n/* NormalNumberDataNode balanced */\n/* balanced : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     struct BalanceHeight {         bool balanced;         int height;     };          BalanceHeight checkBalance(TreeNode* root) {         if (root == nullptr) {             return {true, -1};         }                  BalanceHeight left = checkBalance(root->left);         if (!left.balanced) {return {false, 0}; }                  BalanceHeight right = checkBalance(root->right);         if (!right.balanced) {return {false, 0}; }                  bool balanced = abs(left.height - right.height) <= 1;         int height = std::max(left.height, right.height) + 1;         return {balanced, height};     }          bool isBalanced(TreeNode* root) {         return checkBalance(root).balanced;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/110-balanced-binary-tree.cpp/Solution/checkBalance(TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool isBalanced(TreeNode* root) {         return checkBalance(root).balanced;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isBalanced_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/110-balanced-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1223398237;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/isBalanced(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: ./4/110-balanced-binary-tree.cpp/Solution/isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/110-balanced-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1223398237;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/110-balanced-binary-tree.cpp/isBalanced(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     struct BalanceHeight {         bool balanced;         int height;     };          BalanceHeight checkBalance(TreeNode* root) {         if (root == nullptr) {             return {true, -1};         }                  BalanceHeight left = checkBalance(root->left);         if (!left.balanced) {return {false, 0}; }                  BalanceHeight right = checkBalance(root->right);         if (!right.balanced) {return {false, 0}; }                  bool balanced = abs(left.height - right.height) <= 1;         int height = std::max(left.height, right.height) + 1;         return {balanced, height};     }          bool isBalanced(TreeNode* root) {         return checkBalance(root).balanced;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/110-balanced-binary-tree.cpp/Solution/isBalanced(TreeNode*)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> generate(int numRows) {         if (numRows == 0) return {};         vector<vector<int>> result;         for (int i = 0; i < numRows; i++) {             if (i == 0) {                 result.push_back({1});             } else {                 vector<int> row;                 for (int j = 0; j <= i; j++) {                     if (j == 0) {                         row.push_back(1);                     } else if (j == i) {                         row.push_back(1);                     } else {                         int elem = result[i-1][j-1] + result[i-1][j];                         row.push_back(elem);                     }                 }                 result.push_back(row);             }         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_generate_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_generate_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/118-pascals-triangle.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint numRows=10;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode numRows */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_generate_int_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->generate(numRows);\nAKA_fCall++;AKA_mark(\"Return from: ./4/118-pascals-triangle.cpp/Solution/generate(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/118-pascals-triangle.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint numRows=10;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode numRows */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> generate(int numRows) {         if (numRows == 0) return {};         vector<vector<int>> result;         for (int i = 0; i < numRows; i++) {             if (i == 0) {                 result.push_back({1});             } else {                 vector<int> row;                 for (int j = 0; j <= i; j++) {                     if (j == 0) {                         row.push_back(1);                     } else if (j == i) {                         row.push_back(1);                     } else {                         int elem = result[i-1][j-1] + result[i-1][j];                         row.push_back(elem);                     }                 }                 result.push_back(row);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/118-pascals-triangle.cpp/Solution/generate(int)"
    },
    {
        "f": [],
        "fm": "int maxProfit(vector<int>& prices) {         int maxDiff = 0;         int minSoFar = INT_MAX;         for (int n : prices) {             minSoFar = min(minSoFar, n);             maxDiff = max(maxDiff, n - minSoFar);         }         return maxDiff;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/121-best-time-to-buy-and-sell-stock.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=618803259;\nprices.push_back(prices_element0);\nint prices_element1=-562945790;\nprices.push_back(prices_element1);\nint prices_element2=1296621869;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./4/121-best-time-to-buy-and-sell-stock.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/121-best-time-to-buy-and-sell-stock.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=618803259;\nprices.push_back(prices_element0);\nint prices_element1=-562945790;\nprices.push_back(prices_element1);\nint prices_element2=1296621869;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maxProfit(vector<int>& prices) {         int maxDiff = 0;         int minSoFar = INT_MAX;         for (int n : prices) {             minSoFar = min(minSoFar, n);             maxDiff = max(maxDiff, n - minSoFar);         }         return maxDiff;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/121-best-time-to-buy-and-sell-stock.cpp/Solution/maxProfit(vector<int>&)"
    },
    {
        "f": [
            "int maxSum = INT_MIN;"
        ],
        "fm": "int maxGain(TreeNode* root) {         if (!root) {             return 0;         }         int leftMax = max(maxGain(root->left), 0);         int rightMax = max(maxGain(root->right), 0);         int tempSum = leftMax + rightMax + root->val;         maxSum = maxSum < tempSum? tempSum : maxSum;         return root->val + max(leftMax, rightMax);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxGain_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maxGain_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/124-binary-tree-maximum-path-sum.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode maxSum */\nAKA_INSTANCE___Solution->maxSum=-236848737;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1014658641;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-909246558;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=958584718;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-815540927;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=735323064;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1836994381;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=-662556204;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=-1073567897;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-352359763;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-1458489506;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=1112304574;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=609406957;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1245990743;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=764442640;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=-869763417;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=2116834080;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxGain_TreeNodemul_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxGain(root);\nAKA_fCall++;AKA_mark(\"Return from: ./4/124-binary-tree-maximum-path-sum.cpp/Solution/maxGain(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/124-binary-tree-maximum-path-sum.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode maxSum */\nAKA_INSTANCE___Solution->maxSum=-236848737;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1014658641;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-909246558;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=958584718;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-815540927;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=735323064;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1836994381;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=-662556204;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=-1073567897;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-352359763;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-1458489506;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=1112304574;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=609406957;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1245990743;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=764442640;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=-869763417;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxGain(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=2116834080;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maxSum = INT_MIN;          int maxGain(TreeNode* root) {         if (!root) {             return 0;         }         int leftMax = max(maxGain(root->left), 0);         int rightMax = max(maxGain(root->right), 0);         int tempSum = leftMax + rightMax + root->val;         maxSum = maxSum < tempSum? tempSum : maxSum;         return root->val + max(leftMax, rightMax);     }          int maxPathSum(TreeNode* root) {         maxGain(root);         return maxSum;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/124-binary-tree-maximum-path-sum.cpp/Solution/maxGain(TreeNode*)"
    },
    {
        "f": [
            "int maxSum = INT_MIN;"
        ],
        "fm": "int maxPathSum(TreeNode* root) {         maxGain(root);         return maxSum;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxPathSum_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_maxPathSum_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/124-binary-tree-maximum-path-sum.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode maxSum */\nAKA_INSTANCE___Solution->maxSum=-1503494283;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-615427748;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxPathSum(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1355527293;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxPathSum(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxPathSum(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxPathSum_TreeNodemul_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxPathSum(root);\nAKA_fCall++;AKA_mark(\"Return from: ./4/124-binary-tree-maximum-path-sum.cpp/Solution/maxPathSum(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/124-binary-tree-maximum-path-sum.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode maxSum */\nAKA_INSTANCE___Solution->maxSum=-1503494283;\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-615427748;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxPathSum(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1355527293;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxPathSum(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: ./4/100-same-tree.cpp/TreeNode/TreeNode(int)|ROOT/124-binary-tree-maximum-path-sum.cpp/maxPathSum(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maxSum = INT_MIN;          int maxGain(TreeNode* root) {         if (!root) {             return 0;         }         int leftMax = max(maxGain(root->left), 0);         int rightMax = max(maxGain(root->right), 0);         int tempSum = leftMax + rightMax + root->val;         maxSum = maxSum < tempSum? tempSum : maxSum;         return root->val + max(leftMax, rightMax);     }          int maxPathSum(TreeNode* root) {         maxGain(root);         return maxSum;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/124-binary-tree-maximum-path-sum.cpp/Solution/maxPathSum(TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool isPalindrome(string str) {         int n = str.size();         int i = 0, j = n - 1;         while (i < j) {             if (str[i] != str[j]) {                 return false;             } else {                 i++;                 j--;             }         }         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPalindrome_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isPalindrome_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/132-palindrome-partitioning.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName225166 = new char[2];akaRandomName225166[0] = -5;akaRandomName225166[1] = '\\0';string str=akaRandomName225166;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode str */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPalindrome_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPalindrome(str);\nAKA_fCall++;AKA_mark(\"Return from: ./4/132-palindrome-partitioning.cpp/Solution/isPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/132-palindrome-partitioning.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName156353 = new char[2];akaRandomName156353[0] = -5;akaRandomName156353[1] = '\\0';string str=akaRandomName156353;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode str */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isPalindrome(string str) {         int n = str.size();         int i = 0, j = n - 1;         while (i < j) {             if (str[i] != str[j]) {                 return false;             } else {                 i++;                 j--;             }         }         return true;     }          int minCut(string s) {         int n = s.size();         if (n <= 1) return 0;                  vector<int> minCuts(n, INT_MAX);         minCuts[0] = 0;                  for (int i = 0; i < n; i++) {             if (isPalindrome(s.substr(0, i + 1))) {                 minCuts[i] = 0;             } else {                 minCuts[i] = minCuts[i - 1] + 1;                 for (int j = 1; j < i; j++) {                     if (isPalindrome(s.substr(j, i - j + 1)) && minCuts[i] > minCuts[j - 1] + 1) {                         minCuts[i] = minCuts[j - 1] + 1;                     }                 }             }         }         return minCuts[n - 1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/132-palindrome-partitioning.cpp/Solution/isPalindrome(string)"
    },
    {
        "f": [],
        "fm": "int minCut(string s) {         int n = s.size();         if (n <= 1) return 0;                  vector<int> minCuts(n, INT_MAX);         minCuts[0] = 0;                  for (int i = 0; i < n; i++) {             if (isPalindrome(s.substr(0, i + 1))) {                 minCuts[i] = 0;             } else {                 minCuts[i] = minCuts[i - 1] + 1;                 for (int j = 1; j < i; j++) {                     if (isPalindrome(s.substr(j, i - j + 1)) && minCuts[i] > minCuts[j - 1] + 1) {                         minCuts[i] = minCuts[j - 1] + 1;                     }                 }             }         }         return minCuts[n - 1];     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_minCut_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_minCut_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/132-palindrome-partitioning.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName856623 = new char[2];akaRandomName856623[0] = 99;akaRandomName856623[1] = '\\0';string s=akaRandomName856623;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minCut_string_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minCut(s);\nAKA_fCall++;AKA_mark(\"Return from: ./4/132-palindrome-partitioning.cpp/Solution/minCut(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/132-palindrome-partitioning.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName752023 = new char[2];akaRandomName752023[0] = 99;akaRandomName752023[1] = '\\0';string s=akaRandomName752023;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isPalindrome(string str) {         int n = str.size();         int i = 0, j = n - 1;         while (i < j) {             if (str[i] != str[j]) {                 return false;             } else {                 i++;                 j--;             }         }         return true;     }          int minCut(string s) {         int n = s.size();         if (n <= 1) return 0;                  vector<int> minCuts(n, INT_MAX);         minCuts[0] = 0;                  for (int i = 0; i < n; i++) {             if (isPalindrome(s.substr(0, i + 1))) {                 minCuts[i] = 0;             } else {                 minCuts[i] = minCuts[i - 1] + 1;                 for (int j = 1; j < i; j++) {                     if (isPalindrome(s.substr(j, i - j + 1)) && minCuts[i] > minCuts[j - 1] + 1) {                         minCuts[i] = minCuts[j - 1] + 1;                     }                 }             }         }         return minCuts[n - 1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/132-palindrome-partitioning.cpp/Solution/minCut(string)"
    },
    {
        "f": [],
        "fm": "int singleNumber(vector<int>& nums) {         unordered_set<int> s;         int actualSum = 0;         int doubleSum = 0;         for (int i = 0; i < nums.size(); i++)         {             int curr = nums[i];             actualSum += curr;                          if (s.find(curr) == s.end())             {                 s.insert(curr);                 doubleSum += curr + curr;             }         }         return doubleSum - actualSum;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_singleNumber_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_singleNumber_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/136-single-number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-2051783242;\nnums.push_back(nums_element0);\nint nums_element1=687394279;\nnums.push_back(nums_element1);\nint nums_element2=67067367;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_singleNumber_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->singleNumber(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./4/136-single-number.cpp/Solution/singleNumber(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/136-single-number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-2051783242;\nnums.push_back(nums_element0);\nint nums_element1=687394279;\nnums.push_back(nums_element1);\nint nums_element2=67067367;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int singleNumber(vector<int>& nums) {         unordered_set<int> s;         int actualSum = 0;         int doubleSum = 0;         for (int i = 0; i < nums.size(); i++)         {             int curr = nums[i];             actualSum += curr;                          if (s.find(curr) == s.end())             {                 s.insert(curr);                 doubleSum += curr + curr;             }         }         return doubleSum - actualSum;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/4/136-single-number.cpp/Solution/singleNumber(vector<int>&)"
    }
]