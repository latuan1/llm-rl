[
    {
        "f": [],
        "fm": "int missingNumber(vector<int>& nums) {         int size = nums.size();         int expectedSum = size * (size + 1) / 2;                  int actualSum = 0;         for (int n : nums) {             actualSum += n;         }         return expectedSum - actualSum;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_missingNumber_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_missingNumber_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/268-missing-number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1843035030;\nnums.push_back(nums_element0);\nint nums_element1=1087196829;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_missingNumber_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->missingNumber(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./7/268-missing-number.cpp/Solution/missingNumber(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/268-missing-number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1843035030;\nnums.push_back(nums_element0);\nint nums_element1=1087196829;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int missingNumber(vector<int>& nums) {         int size = nums.size();         int expectedSum = size * (size + 1) / 2;                  int actualSum = 0;         for (int n : nums) {             actualSum += n;         }         return expectedSum - actualSum;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/268-missing-number.cpp/Solution/missingNumber(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int findCelebrity(int n) {         int candidate = 0;         for (int i = 1; i < n; i++) {             if (knows(candidate, i)) {                 candidate = i;             }         }         for (int i = 0; i < n; i++) {             if (i == candidate) continue;             if (!knows(i, candidate) || knows(candidate, i)) {                 return -1;             }         }         return candidate;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findCelebrity_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_findCelebrity_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/277-find-the-celebrity.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findCelebrity_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findCelebrity(n);\nAKA_fCall++;AKA_mark(\"Return from: ./7/277-find-the-celebrity.cpp/Solution/findCelebrity(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/277-find-the-celebrity.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findCelebrity(int n) {         int candidate = 0;         for (int i = 1; i < n; i++) {             if (knows(candidate, i)) {                 candidate = i;             }         }         for (int i = 0; i < n; i++) {             if (i == candidate) continue;             if (!knows(i, candidate) || knows(candidate, i)) {                 return -1;             }         }         return candidate;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/277-find-the-celebrity.cpp/Solution/findCelebrity(int)"
    },
    {
        "f": [
            "bool nextIsV1;",
            "int idx;",
            "vector<int> &v1;",
            "vector<int> &v2;"
        ],
        "fm": "int next() {         int toReturn = nextIsV1 ?  v1[idx] : v2[idx];         if (nextIsV1) {             if (idx < v2.size()) {                 nextIsV1 = false;             } else {                 idx++;             }         } else {             if (++idx < v1.size()) {                 nextIsV1 = true;             }         }         return toReturn;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_ZigzagIterator_next_random_0(void) {\n{\nAKA_test_case_name=\"ZigzagIterator_next_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___ZigzagIterator */\n/* ConstructorDataNode ZigzagIterator(vector<int>&,vector<int>&) */\n/* VectorDataNode v1 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v1;\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1052152459;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=409644983;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\nint AKA_INSTANCE___ZigzagIterator_v1_element2=-1148621131;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element2);\n/* VectorDataNode v2 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v2;\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-378649968;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-1474486512;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\nAKA_mark(\"Calling: ./7/281-zigzag-iterator.cpp/ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)|ROOT/281-zigzag-iterator.cpp/GLOBAL/AKA_INSTANCE___ZigzagIterator/AKA_INSTANCE___ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)\");AKA_fCall++;AKA_INSTANCE___ZigzagIterator = new ::ZigzagIterator(AKA_INSTANCE___ZigzagIterator_v1,AKA_INSTANCE___ZigzagIterator_v2);\n/* NormalNumberDataNode nextIsV1 */\n/* nextIsV1 : null value -> no code */\n/* NormalNumberDataNode idx */\n/* idx : null value -> no code */\n/* VectorDataNode v1 */\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1052152459;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=409644983;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\nint AKA_INSTANCE___ZigzagIterator_v1_element2=-1148621131;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element2);\n/* VectorDataNode v2 */\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-378649968;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-1474486512;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test ZigzagIterator_next_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___ZigzagIterator->next();\nAKA_fCall++;AKA_mark(\"Return from: ./7/281-zigzag-iterator.cpp/ZigzagIterator/next()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___ZigzagIterator */\n/* ConstructorDataNode ZigzagIterator(vector<int>&,vector<int>&) */\n/* VectorDataNode v1 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v1;\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1052152459;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=409644983;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\nint AKA_INSTANCE___ZigzagIterator_v1_element2=-1148621131;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element2);\n/* VectorDataNode v2 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v2;\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-378649968;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-1474486512;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\nAKA_mark(\"Calling: ./7/281-zigzag-iterator.cpp/ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)|ROOT/281-zigzag-iterator.cpp/GLOBAL/AKA_INSTANCE___ZigzagIterator/AKA_INSTANCE___ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)\");AKA_fCall++;AKA_INSTANCE___ZigzagIterator = new ::ZigzagIterator(AKA_INSTANCE___ZigzagIterator_v1,AKA_INSTANCE___ZigzagIterator_v2);\n/* NormalNumberDataNode nextIsV1 */\n/* nextIsV1 : null value -> no code */\n/* NormalNumberDataNode idx */\n/* idx : null value -> no code */\n/* VectorDataNode v1 */\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1052152459;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=409644983;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\nint AKA_INSTANCE___ZigzagIterator_v1_element2=-1148621131;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element2);\n/* VectorDataNode v2 */\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-378649968;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-1474486512;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class ZigzagIterator { public:     ZigzagIterator(vector<int>& v1, vector<int>& v2) : v1(v1), v2(v2) {         if (v1.size() != 0) {             nextIsV1 = true;         } else {             nextIsV1 = false;         }         idx = 0;     }      int next() {         int toReturn = nextIsV1 ?  v1[idx] : v2[idx];         if (nextIsV1) {             if (idx < v2.size()) {                 nextIsV1 = false;             } else {                 idx++;             }         } else {             if (++idx < v1.size()) {                 nextIsV1 = true;             }         }         return toReturn;     }      bool hasNext() {         if (nextIsV1 && idx < v1.size()) {             return true;         } else if (!nextIsV1 && idx < v2.size()) {             return true;         }         return false;     } private:     bool nextIsV1;     int idx;     vector<int> &v1, &v2; };",
        "c": [
            "ZigzagIterator(vector<int>& v1, vector<int>& v2) : v1(v1), v2(v2) {\n        if (v1.size() != 0) {\n            nextIsV1 = true;\n        } else {\n            nextIsV1 = false;\n        }\n        idx = 0;\n    }"
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/281-zigzag-iterator.cpp/ZigzagIterator/next()"
    },
    {
        "f": [
            "bool nextIsV1;",
            "int idx;",
            "vector<int> &v1;",
            "vector<int> &v2;"
        ],
        "fm": "bool hasNext() {         if (nextIsV1 && idx < v1.size()) {             return true;         } else if (!nextIsV1 && idx < v2.size()) {             return true;         }         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_ZigzagIterator_hasNext_random_0(void) {\n{\nAKA_test_case_name=\"ZigzagIterator_hasNext_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___ZigzagIterator */\n/* ConstructorDataNode ZigzagIterator(vector<int>&,vector<int>&) */\n/* VectorDataNode v1 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v1;\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1626083231;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=-889035292;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\n/* VectorDataNode v2 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v2;\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-1290203418;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-2135590590;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\nint AKA_INSTANCE___ZigzagIterator_v2_element2=714705158;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element2);\nAKA_mark(\"Calling: ./7/281-zigzag-iterator.cpp/ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)|ROOT/281-zigzag-iterator.cpp/GLOBAL/AKA_INSTANCE___ZigzagIterator/AKA_INSTANCE___ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)\");AKA_fCall++;AKA_INSTANCE___ZigzagIterator = new ::ZigzagIterator(AKA_INSTANCE___ZigzagIterator_v1,AKA_INSTANCE___ZigzagIterator_v2);\n/* NormalNumberDataNode nextIsV1 */\n/* nextIsV1 : null value -> no code */\n/* NormalNumberDataNode idx */\n/* idx : null value -> no code */\n/* VectorDataNode v1 */\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1626083231;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=-889035292;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\n/* VectorDataNode v2 */\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-1290203418;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-2135590590;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\nint AKA_INSTANCE___ZigzagIterator_v2_element2=714705158;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element2);\n\n\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test ZigzagIterator_hasNext_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___ZigzagIterator->hasNext();\nAKA_fCall++;AKA_mark(\"Return from: ./7/281-zigzag-iterator.cpp/ZigzagIterator/hasNext()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___ZigzagIterator */\n/* ConstructorDataNode ZigzagIterator(vector<int>&,vector<int>&) */\n/* VectorDataNode v1 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v1;\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1626083231;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=-889035292;\nAKA_INSTANCE___ZigzagIterator_v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\n/* VectorDataNode v2 */\nvector<int> AKA_INSTANCE___ZigzagIterator_v2;\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-1290203418;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-2135590590;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\nint AKA_INSTANCE___ZigzagIterator_v2_element2=714705158;\nAKA_INSTANCE___ZigzagIterator_v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element2);\nAKA_mark(\"Calling: ./7/281-zigzag-iterator.cpp/ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)|ROOT/281-zigzag-iterator.cpp/GLOBAL/AKA_INSTANCE___ZigzagIterator/AKA_INSTANCE___ZigzagIterator/ZigzagIterator(vector<int>&,vector<int>&)\");AKA_fCall++;AKA_INSTANCE___ZigzagIterator = new ::ZigzagIterator(AKA_INSTANCE___ZigzagIterator_v1,AKA_INSTANCE___ZigzagIterator_v2);\n/* NormalNumberDataNode nextIsV1 */\n/* nextIsV1 : null value -> no code */\n/* NormalNumberDataNode idx */\n/* idx : null value -> no code */\n/* VectorDataNode v1 */\nint AKA_INSTANCE___ZigzagIterator_v1_element0=1626083231;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element0);\nint AKA_INSTANCE___ZigzagIterator_v1_element1=-889035292;\nAKA_INSTANCE___ZigzagIterator->v1.push_back(AKA_INSTANCE___ZigzagIterator_v1_element1);\n/* VectorDataNode v2 */\nint AKA_INSTANCE___ZigzagIterator_v2_element0=-1290203418;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element0);\nint AKA_INSTANCE___ZigzagIterator_v2_element1=-2135590590;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element1);\nint AKA_INSTANCE___ZigzagIterator_v2_element2=714705158;\nAKA_INSTANCE___ZigzagIterator->v2.push_back(AKA_INSTANCE___ZigzagIterator_v2_element2);\n\n\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class ZigzagIterator { public:     ZigzagIterator(vector<int>& v1, vector<int>& v2) : v1(v1), v2(v2) {         if (v1.size() != 0) {             nextIsV1 = true;         } else {             nextIsV1 = false;         }         idx = 0;     }      int next() {         int toReturn = nextIsV1 ?  v1[idx] : v2[idx];         if (nextIsV1) {             if (idx < v2.size()) {                 nextIsV1 = false;             } else {                 idx++;             }         } else {             if (++idx < v1.size()) {                 nextIsV1 = true;             }         }         return toReturn;     }      bool hasNext() {         if (nextIsV1 && idx < v1.size()) {             return true;         } else if (!nextIsV1 && idx < v2.size()) {             return true;         }         return false;     } private:     bool nextIsV1;     int idx;     vector<int> &v1, &v2; };",
        "c": [
            "ZigzagIterator(vector<int>& v1, vector<int>& v2) : v1(v1), v2(v2) {\n        if (v1.size() != 0) {\n            nextIsV1 = true;\n        } else {\n            nextIsV1 = false;\n        }\n        idx = 0;\n    }"
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/281-zigzag-iterator.cpp/ZigzagIterator/hasNext()"
    },
    {
        "f": [],
        "fm": "void moveZeroes(vector<int>& nums) {         int slow = 0;         for (int fast = 0; fast < nums.size(); fast++) {             if (nums[fast] != 0) {                 nums[slow] = nums[fast];                 slow++;             }         }         while (slow < nums.size()) {             nums[slow] = 0;             slow++;         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_moveZeroes_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_moveZeroes_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/283-move-zeroes.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=840757989;\nnums.push_back(nums_element0);\nint nums_element1=-679719151;\nnums.push_back(nums_element1);\nint nums_element2=-1649984142;\nnums.push_back(nums_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_moveZeroes_vector_int_random_1\");AKA_INSTANCE___Solution->moveZeroes(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./7/283-move-zeroes.cpp/Solution/moveZeroes(vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/283-move-zeroes.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=840757989;\nnums.push_back(nums_element0);\nint nums_element1=-679719151;\nnums.push_back(nums_element1);\nint nums_element2=-1649984142;\nnums.push_back(nums_element2);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void moveZeroes(vector<int>& nums) {         int slow = 0;         for (int fast = 0; fast < nums.size(); fast++) {             if (nums[fast] != 0) {                 nums[slow] = nums[fast];                 slow++;             }         }         while (slow < nums.size()) {             nums[slow] = 0;             slow++;         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/283-move-zeroes.cpp/Solution/moveZeroes(vector<int>&)"
    },
    {
        "f": [],
        "fm": "void wallsAndGates(vector<vector<int>>& rooms) {         int m = rooms.size();         if (m == 0) return;         int n = rooms[0].size();                  vector<vector<int>> diff = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};         queue<pair<int, int>> q;                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 if (rooms[i][j] == 0) {                     q.emplace(i, j);                 }             }         }         int steps = 0;         while (!q.empty()) {             int layerSize = q.size();             while (layerSize--) {                 pair<int, int> curr = q.front();                 q.pop();                 int i = curr.first;                 int j = curr.second;                 rooms[i][j] = steps;                 for (auto& d : diff) {                     int newi = i + d[0];                     int newj = j + d[1];                     if (newi >= 0 && newi < m && newj >= 0 && newj < n && rooms[newi][newj] == INT_MAX) {                         rooms[newi][newj] = min(rooms[newi][newj], steps);                         q.emplace(newi, newj);                     }                 }             }             steps++;         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_wallsAndGates_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_wallsAndGates_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/286-walls-and-gates.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> rooms;\n\n/* RootDataNode STATIC */\n/* VectorDataNode rooms */\nvector<int> rooms_element0;\nint rooms_element0_element0=-177655128;\nrooms_element0.push_back(rooms_element0_element0);\nint rooms_element0_element1=227012039;\nrooms_element0.push_back(rooms_element0_element1);\nint rooms_element0_element2=1720445329;\nrooms_element0.push_back(rooms_element0_element2);\nrooms.push_back(rooms_element0);\nvector<int> rooms_element1;\nint rooms_element1_element0=-295695609;\nrooms_element1.push_back(rooms_element1_element0);\nint rooms_element1_element1=881281659;\nrooms_element1.push_back(rooms_element1_element1);\nrooms.push_back(rooms_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_wallsAndGates_vector_vector_int_random_2\");AKA_INSTANCE___Solution->wallsAndGates(rooms);\nAKA_fCall++;AKA_mark(\"Return from: ./7/286-walls-and-gates.cpp/Solution/wallsAndGates(vector<vector<int>>&)\");\n\n/* error assertion */\nvector<vector<int>> EXPECTED_rooms;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/286-walls-and-gates.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> rooms;\n\n/* RootDataNode STATIC */\n/* VectorDataNode rooms */\nvector<int> rooms_element0;\nint rooms_element0_element0=-177655128;\nrooms_element0.push_back(rooms_element0_element0);\nint rooms_element0_element1=227012039;\nrooms_element0.push_back(rooms_element0_element1);\nint rooms_element0_element2=1720445329;\nrooms_element0.push_back(rooms_element0_element2);\nrooms.push_back(rooms_element0);\nvector<int> rooms_element1;\nint rooms_element1_element0=-295695609;\nrooms_element1.push_back(rooms_element1_element0);\nint rooms_element1_element1=881281659;\nrooms_element1.push_back(rooms_element1_element1);\nrooms.push_back(rooms_element1);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void wallsAndGates(vector<vector<int>>& rooms) {         int m = rooms.size();         if (m == 0) return;         int n = rooms[0].size();                  vector<vector<int>> diff = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};         queue<pair<int, int>> q;                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 if (rooms[i][j] == 0) {                     q.emplace(i, j);                 }             }         }         int steps = 0;         while (!q.empty()) {             int layerSize = q.size();             while (layerSize--) {                 pair<int, int> curr = q.front();                 q.pop();                 int i = curr.first;                 int j = curr.second;                 rooms[i][j] = steps;                 for (auto& d : diff) {                     int newi = i + d[0];                     int newj = j + d[1];                     if (newi >= 0 && newi < m && newj >= 0 && newj < n && rooms[newi][newj] == INT_MAX) {                         rooms[newi][newj] = min(rooms[newi][newj], steps);                         q.emplace(newi, newj);                     }                 }             }             steps++;         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/286-walls-and-gates.cpp/Solution/wallsAndGates(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "void process(vector<vector<int>>& board, int m, int n, int i, int j, vector<vector<int>>& neighbors) {         int aliveNeighbors = 0;         for (vector<int>& N : neighbors) {             int newI = i + N[0];             int newJ = j + N[1];             if (newI >= 0 && newI < m && newJ >= 0 && newJ < n && (board[newI][newJ] == 1 || board[newI][newJ] == -2)) {                 aliveNeighbors++;             }         }         if (board[i][j] == 0) {             if (aliveNeighbors == 3) {                 board[i][j] = -1;             }         } else {             if (aliveNeighbors < 2 || aliveNeighbors > 3) {                 board[i][j] = -2;             }         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n\nint m=658487183;\n\n\nint n=-1910939502;\n\n\nint i=-501220508;\n\n\nint j=438199410;\nvector<vector<int>> neighbors;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=2025874430;\nboard_element0.push_back(board_element0_element0);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=-777494616;\nboard_element1.push_back(board_element1_element0);\nint board_element1_element1=-245150100;\nboard_element1.push_back(board_element1_element1);\nint board_element1_element2=-756293513;\nboard_element1.push_back(board_element1_element2);\nboard.push_back(board_element1);\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* VectorDataNode neighbors */\nvector<int> neighbors_element0;\nint neighbors_element0_element0=329881062;\nneighbors_element0.push_back(neighbors_element0_element0);\nneighbors.push_back(neighbors_element0);\nvector<int> neighbors_element1;\nint neighbors_element1_element0=531825587;\nneighbors_element1.push_back(neighbors_element1_element0);\nint neighbors_element1_element1=-1828810126;\nneighbors_element1.push_back(neighbors_element1_element1);\nneighbors.push_back(neighbors_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_0\");AKA_INSTANCE___Solution->process(board,m,n,i,j,neighbors);\nAKA_fCall++;AKA_mark(\"Return from: ./7/289-game-of-life.cpp/Solution/process(vector<vector<int>>&,int,int,int,int,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<vector<int>> EXPECTED_board;\n\nvector<vector<int>> EXPECTED_neighbors;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n\nint m=658487183;\n\n\nint n=-1910939502;\n\n\nint i=-501220508;\n\n\nint j=438199410;\nvector<vector<int>> neighbors;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=2025874430;\nboard_element0.push_back(board_element0_element0);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=-777494616;\nboard_element1.push_back(board_element1_element0);\nint board_element1_element1=-245150100;\nboard_element1.push_back(board_element1_element1);\nint board_element1_element2=-756293513;\nboard_element1.push_back(board_element1_element2);\nboard.push_back(board_element1);\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* VectorDataNode neighbors */\nvector<int> neighbors_element0;\nint neighbors_element0_element0=329881062;\nneighbors_element0.push_back(neighbors_element0_element0);\nneighbors.push_back(neighbors_element0);\nvector<int> neighbors_element1;\nint neighbors_element1_element0=531825587;\nneighbors_element1.push_back(neighbors_element1_element0);\nint neighbors_element1_element1=-1828810126;\nneighbors_element1.push_back(neighbors_element1_element1);\nneighbors.push_back(neighbors_element1);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n\nint m=2040151530;\n\n\nint n=-1938990582;\n\n\nint i=500141440;\n\n\nint j=1856594090;\nvector<vector<int>> neighbors;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=875085848;\nboard_element0.push_back(board_element0_element0);\nint board_element0_element1=-318596915;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=-786469724;\nboard_element1.push_back(board_element1_element0);\nboard.push_back(board_element1);\nvector<int> board_element2;\nint board_element2_element0=1115705549;\nboard_element2.push_back(board_element2_element0);\nint board_element2_element1=2099879923;\nboard_element2.push_back(board_element2_element1);\nboard.push_back(board_element2);\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* VectorDataNode neighbors */\nvector<int> neighbors_element0;\nint neighbors_element0_element0=-670774331;\nneighbors_element0.push_back(neighbors_element0_element0);\nneighbors.push_back(neighbors_element0);\nvector<int> neighbors_element1;\nint neighbors_element1_element0=1056807777;\nneighbors_element1.push_back(neighbors_element1_element0);\nint neighbors_element1_element1=-261066130;\nneighbors_element1.push_back(neighbors_element1_element1);\nneighbors.push_back(neighbors_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_1\");AKA_INSTANCE___Solution->process(board,m,n,i,j,neighbors);\nAKA_fCall++;AKA_mark(\"Return from: ./7/289-game-of-life.cpp/Solution/process(vector<vector<int>>&,int,int,int,int,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<vector<int>> EXPECTED_board;\n\nvector<vector<int>> EXPECTED_neighbors;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n\nint m=2040151530;\n\n\nint n=-1938990582;\n\n\nint i=500141440;\n\n\nint j=1856594090;\nvector<vector<int>> neighbors;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=875085848;\nboard_element0.push_back(board_element0_element0);\nint board_element0_element1=-318596915;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=-786469724;\nboard_element1.push_back(board_element1_element0);\nboard.push_back(board_element1);\nvector<int> board_element2;\nint board_element2_element0=1115705549;\nboard_element2.push_back(board_element2_element0);\nint board_element2_element1=2099879923;\nboard_element2.push_back(board_element2_element1);\nboard.push_back(board_element2);\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* VectorDataNode neighbors */\nvector<int> neighbors_element0;\nint neighbors_element0_element0=-670774331;\nneighbors_element0.push_back(neighbors_element0_element0);\nneighbors.push_back(neighbors_element0);\nvector<int> neighbors_element1;\nint neighbors_element1_element0=1056807777;\nneighbors_element1.push_back(neighbors_element1_element0);\nint neighbors_element1_element1=-261066130;\nneighbors_element1.push_back(neighbors_element1_element1);\nneighbors.push_back(neighbors_element1);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n\nint m=66098337;\n\n\nint n=-2117102785;\n\n\nint i=1381598092;\n\n\nint j=1422396422;\nvector<vector<int>> neighbors;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=-390720402;\nboard_element0.push_back(board_element0_element0);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=-1905768830;\nboard_element1.push_back(board_element1_element0);\nint board_element1_element1=1708603448;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\nvector<int> board_element2;\nint board_element2_element0=-887961772;\nboard_element2.push_back(board_element2_element0);\nint board_element2_element1=-1215150910;\nboard_element2.push_back(board_element2_element1);\nboard.push_back(board_element2);\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* VectorDataNode neighbors */\nvector<int> neighbors_element0;\nint neighbors_element0_element0=-2025584930;\nneighbors_element0.push_back(neighbors_element0_element0);\nneighbors.push_back(neighbors_element0);\nvector<int> neighbors_element1;\nint neighbors_element1_element0=183286098;\nneighbors_element1.push_back(neighbors_element1_element0);\nint neighbors_element1_element1=-2050168426;\nneighbors_element1.push_back(neighbors_element1_element1);\nneighbors.push_back(neighbors_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_process_vector_vector_int_int_int_int_int_vector_vector_int_random_2\");AKA_INSTANCE___Solution->process(board,m,n,i,j,neighbors);\nAKA_fCall++;AKA_mark(\"Return from: ./7/289-game-of-life.cpp/Solution/process(vector<vector<int>>&,int,int,int,int,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<vector<int>> EXPECTED_board;\n\nvector<vector<int>> EXPECTED_neighbors;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n\nint m=66098337;\n\n\nint n=-2117102785;\n\n\nint i=1381598092;\n\n\nint j=1422396422;\nvector<vector<int>> neighbors;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=-390720402;\nboard_element0.push_back(board_element0_element0);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=-1905768830;\nboard_element1.push_back(board_element1_element0);\nint board_element1_element1=1708603448;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\nvector<int> board_element2;\nint board_element2_element0=-887961772;\nboard_element2.push_back(board_element2_element0);\nint board_element2_element1=-1215150910;\nboard_element2.push_back(board_element2_element1);\nboard.push_back(board_element2);\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* VectorDataNode neighbors */\nvector<int> neighbors_element0;\nint neighbors_element0_element0=-2025584930;\nneighbors_element0.push_back(neighbors_element0_element0);\nneighbors.push_back(neighbors_element0);\nvector<int> neighbors_element1;\nint neighbors_element1_element0=183286098;\nneighbors_element1.push_back(neighbors_element1_element0);\nint neighbors_element1_element1=-2050168426;\nneighbors_element1.push_back(neighbors_element1_element1);\nneighbors.push_back(neighbors_element1);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void process(vector<vector<int>>& board, int m, int n, int i, int j, vector<vector<int>>& neighbors) {         int aliveNeighbors = 0;         for (vector<int>& N : neighbors) {             int newI = i + N[0];             int newJ = j + N[1];             if (newI >= 0 && newI < m && newJ >= 0 && newJ < n && (board[newI][newJ] == 1 || board[newI][newJ] == -2)) {                 aliveNeighbors++;             }         }         if (board[i][j] == 0) {             if (aliveNeighbors == 3) {                 board[i][j] = -1;             }         } else {             if (aliveNeighbors < 2 || aliveNeighbors > 3) {                 board[i][j] = -2;             }         }     }      void gameOfLife(vector<vector<int>>& board) {         // 0, 1 remain unchancged         // 0 -> 1 encode with -1         // 1 -> 0 encode with -2         int m = board.size();         int n = board[0].size();         vector<vector<int>> neighbors = {{-1, 0}, {-1, -1}, {-1, 1}, {0, -1}, {0, 1}, {1, 0}, {1, -1}, {1, 1}};                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 process(board, m, n, i, j, neighbors);             }         }                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 if (board[i][j] == -1) {                     board[i][j] = 1;                 } else if (board[i][j] == -2) {                     board[i][j] = 0;                 }             }         }              } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/289-game-of-life.cpp/Solution/process(vector<vector<int>>&,int,int,int,int,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "void gameOfLife(vector<vector<int>>& board) {         // 0, 1 remain unchancged         // 0 -> 1 encode with -1         // 1 -> 0 encode with -2         int m = board.size();         int n = board[0].size();         vector<vector<int>> neighbors = {{-1, 0}, {-1, -1}, {-1, 1}, {0, -1}, {0, 1}, {1, 0}, {1, -1}, {1, 1}};                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 process(board, m, n, i, j, neighbors);             }         }                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 if (board[i][j] == -1) {                     board[i][j] = 1;                 } else if (board[i][j] == -2) {                     board[i][j] = 0;                 }             }         }              }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_gameOfLife_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_gameOfLife_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=277194133;\nboard_element0.push_back(board_element0_element0);\nint board_element0_element1=-694700127;\nboard_element0.push_back(board_element0_element1);\nint board_element0_element2=1361197477;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=1728059648;\nboard_element1.push_back(board_element1_element0);\nint board_element1_element1=1298834504;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\nvector<int> board_element2;\nint board_element2_element0=-508225085;\nboard_element2.push_back(board_element2_element0);\nboard.push_back(board_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_gameOfLife_vector_vector_int_random_1\");AKA_INSTANCE___Solution->gameOfLife(board);\nAKA_fCall++;AKA_mark(\"Return from: ./7/289-game-of-life.cpp/Solution/gameOfLife(vector<vector<int>>&)\");\n\n/* error assertion */\nvector<vector<int>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/289-game-of-life.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> board;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<int> board_element0;\nint board_element0_element0=277194133;\nboard_element0.push_back(board_element0_element0);\nint board_element0_element1=-694700127;\nboard_element0.push_back(board_element0_element1);\nint board_element0_element2=1361197477;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\nvector<int> board_element1;\nint board_element1_element0=1728059648;\nboard_element1.push_back(board_element1_element0);\nint board_element1_element1=1298834504;\nboard_element1.push_back(board_element1_element1);\nboard.push_back(board_element1);\nvector<int> board_element2;\nint board_element2_element0=-508225085;\nboard_element2.push_back(board_element2_element0);\nboard.push_back(board_element2);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void process(vector<vector<int>>& board, int m, int n, int i, int j, vector<vector<int>>& neighbors) {         int aliveNeighbors = 0;         for (vector<int>& N : neighbors) {             int newI = i + N[0];             int newJ = j + N[1];             if (newI >= 0 && newI < m && newJ >= 0 && newJ < n && (board[newI][newJ] == 1 || board[newI][newJ] == -2)) {                 aliveNeighbors++;             }         }         if (board[i][j] == 0) {             if (aliveNeighbors == 3) {                 board[i][j] = -1;             }         } else {             if (aliveNeighbors < 2 || aliveNeighbors > 3) {                 board[i][j] = -2;             }         }     }      void gameOfLife(vector<vector<int>>& board) {         // 0, 1 remain unchancged         // 0 -> 1 encode with -1         // 1 -> 0 encode with -2         int m = board.size();         int n = board[0].size();         vector<vector<int>> neighbors = {{-1, 0}, {-1, -1}, {-1, 1}, {0, -1}, {0, 1}, {1, 0}, {1, -1}, {1, 1}};                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 process(board, m, n, i, j, neighbors);             }         }                  for (int i = 0; i < m; i++) {             for (int j = 0; j < n; j++) {                 if (board[i][j] == -1) {                     board[i][j] = 1;                 } else if (board[i][j] == -2) {                     board[i][j] = 0;                 }             }         }              } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/289-game-of-life.cpp/Solution/gameOfLife(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "void preOrder(TreeNode* root, string& s) {         if (!root) {             s += \"x,\";             return;         }         s += to_string(root->val);         s += ',';         preOrder(root->left, s);         preOrder(root->right, s);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Codec_preOrder_TreeNodemul_string_random_1(void) {\n{\nAKA_test_case_name=\"Codec_preOrder_TreeNodemul_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2092812617;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-2070685813;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=383803438;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-1995698421;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=1425093911;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=314184013;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=688746358;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=10611103;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1819104632;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-1365562395;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-711092513;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-1633021321;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=1999946352;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=-129117815;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left2_x=-184005526;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_2 = new ::TreeNode(root1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).val=640002301;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_2);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nchar* akaRandomName674868 = new char[2];akaRandomName674868[0] = 59;akaRandomName674868[1] = '\\0';string s=akaRandomName674868;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalStringDataNode s */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Codec_preOrder_TreeNodemul_string_random_1\");AKA_INSTANCE___Codec->preOrder(root,s);\nAKA_fCall++;AKA_mark(\"Return from: ./7/297-serialize-and-deserialize-binary-tree.cpp/Codec/preOrder(TreeNode*,string&)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2092812617;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-2070685813;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=383803438;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-1995698421;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=1425093911;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=314184013;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=688746358;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=10611103;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1819104632;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-1365562395;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-711092513;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-1633021321;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=1999946352;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=-129117815;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left2_x=-184005526;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/preOrder(TreeNode*,string&)/root/AKA_VECTOR_INIT_root_1/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_2 = new ::TreeNode(root1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).val=640002301;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_2);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nchar* akaRandomName113747 = new char[2];akaRandomName113747[0] = 59;akaRandomName113747[1] = '\\0';string s=akaRandomName113747;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalStringDataNode s */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Codec { public:          void preOrder(TreeNode* root, string& s) {         if (!root) {             s += \"x,\";             return;         }         s += to_string(root->val);         s += ',';         preOrder(root->left, s);         preOrder(root->right, s);     }      // Encodes a tree to a single string.     string serialize(TreeNode* root) {         if (!root) return \"\";         string toReturn = \"\";         preOrder(root, toReturn);         return toReturn;     }      // Decodes your encoded data to tree.     TreeNode* deserialize(string data) {         int n = data.size();         if (n == 0) return NULL;         vector<int> dVec;         int i = 0;         int j = 0;         while (i < n) {             if (data[j] == 'x') {                 dVec.push_back(INT_MIN);                 j += 2;                 i = j;                 continue;             }             if (data[j] == ',') {                 dVec.push_back(stoi(data.substr(i, j - i)));                 i = ++j;             } else {                 j++;             }         }         stack<pair<TreeNode*, int>> s;         TreeNode* root = new TreeNode(dVec[0]);         s.emplace(root, 0);         for (int i = 1; i < dVec.size(); i++) {              TreeNode* p = nullptr;             if (dVec[i] != INT_MIN) {                 p = new TreeNode(dVec[i]);             }             if (s.top().second == 0) {                 s.top().first->left = p;                 s.top().second = 1;             } else if (s.top().second == 1) {                 s.top().first->right = p;                 s.pop();             }              if (p) {                 s.emplace(p, 0);             }         }         return root;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/297-serialize-and-deserialize-binary-tree.cpp/Codec/preOrder(TreeNode*,string&)"
    },
    {
        "f": [],
        "fm": "string serialize(TreeNode* root) {         if (!root) return \"\";         string toReturn = \"\";         preOrder(root, toReturn);         return toReturn;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Codec_serialize_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Codec_serialize_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-78607628;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/serialize(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-214382881;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/serialize(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/serialize(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Codec_serialize_TreeNodemul_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Codec->serialize(root);\nAKA_fCall++;AKA_mark(\"Return from: ./7/297-serialize-and-deserialize-binary-tree.cpp/Codec/serialize(TreeNode*)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-78607628;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/serialize(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-214382881;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/serialize(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: ./7/297-serialize-and-deserialize-binary-tree.cpp/TreeNode/TreeNode(int)|ROOT/297-serialize-and-deserialize-binary-tree.cpp/serialize(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Codec { public:          void preOrder(TreeNode* root, string& s) {         if (!root) {             s += \"x,\";             return;         }         s += to_string(root->val);         s += ',';         preOrder(root->left, s);         preOrder(root->right, s);     }      // Encodes a tree to a single string.     string serialize(TreeNode* root) {         if (!root) return \"\";         string toReturn = \"\";         preOrder(root, toReturn);         return toReturn;     }      // Decodes your encoded data to tree.     TreeNode* deserialize(string data) {         int n = data.size();         if (n == 0) return NULL;         vector<int> dVec;         int i = 0;         int j = 0;         while (i < n) {             if (data[j] == 'x') {                 dVec.push_back(INT_MIN);                 j += 2;                 i = j;                 continue;             }             if (data[j] == ',') {                 dVec.push_back(stoi(data.substr(i, j - i)));                 i = ++j;             } else {                 j++;             }         }         stack<pair<TreeNode*, int>> s;         TreeNode* root = new TreeNode(dVec[0]);         s.emplace(root, 0);         for (int i = 1; i < dVec.size(); i++) {              TreeNode* p = nullptr;             if (dVec[i] != INT_MIN) {                 p = new TreeNode(dVec[i]);             }             if (s.top().second == 0) {                 s.top().first->left = p;                 s.top().second = 1;             } else if (s.top().second == 1) {                 s.top().first->right = p;                 s.pop();             }              if (p) {                 s.emplace(p, 0);             }         }         return root;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/297-serialize-and-deserialize-binary-tree.cpp/Codec/serialize(TreeNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode* deserialize(string data) {         int n = data.size();         if (n == 0) return NULL;         vector<int> dVec;         int i = 0;         int j = 0;         while (i < n) {             if (data[j] == 'x') {                 dVec.push_back(INT_MIN);                 j += 2;                 i = j;                 continue;             }             if (data[j] == ',') {                 dVec.push_back(stoi(data.substr(i, j - i)));                 i = ++j;             } else {                 j++;             }         }         stack<pair<TreeNode*, int>> s;         TreeNode* root = new TreeNode(dVec[0]);         s.emplace(root, 0);         for (int i = 1; i < dVec.size(); i++) {              TreeNode* p = nullptr;             if (dVec[i] != INT_MIN) {                 p = new TreeNode(dVec[i]);             }             if (s.top().second == 0) {                 s.top().first->left = p;                 s.top().second = 1;             } else if (s.top().second == 1) {                 s.top().first->right = p;                 s.pop();             }              if (p) {                 s.emplace(p, 0);             }         }         return root;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Codec_deserialize_string_random_2(void) {\n{\nAKA_test_case_name=\"Codec_deserialize_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nchar* akaRandomName112061 = new char[2];akaRandomName112061[0] = 112;akaRandomName112061[1] = '\\0';string data=akaRandomName112061;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode data */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Codec_deserialize_string_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Codec->deserialize(data);\nAKA_fCall++;AKA_mark(\"Return from: ./7/297-serialize-and-deserialize-binary-tree.cpp/Codec/deserialize(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nchar* akaRandomName769353 = new char[2];akaRandomName769353[0] = 112;akaRandomName769353[1] = '\\0';string data=akaRandomName769353;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode data */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Codec_deserialize_string_random_1(void) {\n{\nAKA_test_case_name=\"Codec_deserialize_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nchar* akaRandomName776693 = new char[2];akaRandomName776693[0] = 12;akaRandomName776693[1] = '\\0';string data=akaRandomName776693;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode data */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Codec_deserialize_string_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Codec->deserialize(data);\nAKA_fCall++;AKA_mark(\"Return from: ./7/297-serialize-and-deserialize-binary-tree.cpp/Codec/deserialize(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Codec */\n/* ConstructorDataNode Codec() */\nAKA_mark(\"Calling: /Codec()|ROOT/297-serialize-and-deserialize-binary-tree.cpp/GLOBAL/AKA_INSTANCE___Codec/AKA_INSTANCE___Codec/Codec()\");AKA_fCall++;AKA_INSTANCE___Codec = new ::Codec();\n\n\nchar* akaRandomName548702 = new char[2];akaRandomName548702[0] = 12;akaRandomName548702[1] = '\\0';string data=akaRandomName548702;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode data */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Codec { public:          void preOrder(TreeNode* root, string& s) {         if (!root) {             s += \"x,\";             return;         }         s += to_string(root->val);         s += ',';         preOrder(root->left, s);         preOrder(root->right, s);     }      // Encodes a tree to a single string.     string serialize(TreeNode* root) {         if (!root) return \"\";         string toReturn = \"\";         preOrder(root, toReturn);         return toReturn;     }      // Decodes your encoded data to tree.     TreeNode* deserialize(string data) {         int n = data.size();         if (n == 0) return NULL;         vector<int> dVec;         int i = 0;         int j = 0;         while (i < n) {             if (data[j] == 'x') {                 dVec.push_back(INT_MIN);                 j += 2;                 i = j;                 continue;             }             if (data[j] == ',') {                 dVec.push_back(stoi(data.substr(i, j - i)));                 i = ++j;             } else {                 j++;             }         }         stack<pair<TreeNode*, int>> s;         TreeNode* root = new TreeNode(dVec[0]);         s.emplace(root, 0);         for (int i = 1; i < dVec.size(); i++) {              TreeNode* p = nullptr;             if (dVec[i] != INT_MIN) {                 p = new TreeNode(dVec[i]);             }             if (s.top().second == 0) {                 s.top().first->left = p;                 s.top().second = 1;             } else if (s.top().second == 1) {                 s.top().first->right = p;                 s.pop();             }              if (p) {                 s.emplace(p, 0);             }         }         return root;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/297-serialize-and-deserialize-binary-tree.cpp/Codec/deserialize(string)"
    },
    {
        "f": [],
        "fm": "string getHint(string secret, string guess) {         int bulls = 0;         int cows = 0;         for (int i = 0; i < secret.size(); i++) {             if (secret[i] == guess[i]) {                 secret[i] = '$';                 guess[i] = '$';                 bulls++;             }         }         for (int k = 0; k < secret.size(); k++) {             if (secret[k] == '$') continue;             int idx = guess.find_first_of(secret[k], 0);             if (idx != string::npos) {                 cows++;                 guess[idx] = '!';             }         }         return to_string(bulls) + \"A\" + to_string(cows) + \"B\";     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_getHint_string_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_getHint_string_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/299-bulls-and-cows.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName326485 = new char[2];akaRandomName326485[0] = -20;akaRandomName326485[1] = '\\0';string secret=akaRandomName326485;\nchar* akaRandomName861302 = new char[2];akaRandomName861302[0] = 2;akaRandomName861302[1] = '\\0';string guess=akaRandomName861302;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode secret */\n/* NormalStringDataNode guess */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_getHint_string_string_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getHint(secret,guess);\nAKA_fCall++;AKA_mark(\"Return from: ./7/299-bulls-and-cows.cpp/Solution/getHint(string,string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/299-bulls-and-cows.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName777984 = new char[2];akaRandomName777984[0] = -20;akaRandomName777984[1] = '\\0';string secret=akaRandomName777984;\nchar* akaRandomName808104 = new char[2];akaRandomName808104[0] = 2;akaRandomName808104[1] = '\\0';string guess=akaRandomName808104;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode secret */\n/* NormalStringDataNode guess */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string getHint(string secret, string guess) {         int bulls = 0;         int cows = 0;         for (int i = 0; i < secret.size(); i++) {             if (secret[i] == guess[i]) {                 secret[i] = '$';                 guess[i] = '$';                 bulls++;             }         }         for (int k = 0; k < secret.size(); k++) {             if (secret[k] == '$') continue;             int idx = guess.find_first_of(secret[k], 0);             if (idx != string::npos) {                 cows++;                 guess[idx] = '!';             }         }         return to_string(bulls) + \"A\" + to_string(cows) + \"B\";     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/299-bulls-and-cows.cpp/Solution/getHint(string,string)"
    },
    {
        "f": [
            "vector<vector<int>> & matrix;",
            "int rows;",
            "int cols;"
        ],
        "fm": "void update(int row, int col, int val) {         matrix[row][col] = val;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_NumMatrix_update_int_int_int_random_0(void) {\n{\nAKA_test_case_name=\"NumMatrix_update_int_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___NumMatrix */\n/* ConstructorDataNode NumMatrix(vector<vector<int>>&) */\n/* VectorDataNode matrix */\nvector<vector<int>> AKA_INSTANCE___NumMatrix_matrix;\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element0;\nint AKA_INSTANCE___NumMatrix_matrix_element0_element0=-1854805465;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element0_element1=-1649941263;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element1);\nAKA_INSTANCE___NumMatrix_matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element0);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element1;\nint AKA_INSTANCE___NumMatrix_matrix_element1_element0=189713625;\nAKA_INSTANCE___NumMatrix_matrix_element1.push_back(AKA_INSTANCE___NumMatrix_matrix_element1_element0);\nAKA_INSTANCE___NumMatrix_matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element1);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element2;\nint AKA_INSTANCE___NumMatrix_matrix_element2_element0=-643587357;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element2_element1=-1839709791;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element1);\nAKA_INSTANCE___NumMatrix_matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element2);\nAKA_mark(\"Calling: ./7/308-range-sum-query-2d-mutable.cpp/NumMatrix/NumMatrix(vector<vector<int>>&)|ROOT/308-range-sum-query-2d-mutable.cpp/GLOBAL/AKA_INSTANCE___NumMatrix/AKA_INSTANCE___NumMatrix/NumMatrix(vector<vector<int>>&)\");AKA_fCall++;AKA_INSTANCE___NumMatrix = new ::NumMatrix(AKA_INSTANCE___NumMatrix_matrix);\n/* VectorDataNode matrix */\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element0;\nint AKA_INSTANCE___NumMatrix_matrix_element0_element0=-1854805465;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element0_element1=-1649941263;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element1);\nAKA_INSTANCE___NumMatrix->matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element0);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element1;\nint AKA_INSTANCE___NumMatrix_matrix_element1_element0=189713625;\nAKA_INSTANCE___NumMatrix_matrix_element1.push_back(AKA_INSTANCE___NumMatrix_matrix_element1_element0);\nAKA_INSTANCE___NumMatrix->matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element1);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element2;\nint AKA_INSTANCE___NumMatrix_matrix_element2_element0=-643587357;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element2_element1=-1839709791;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element1);\nAKA_INSTANCE___NumMatrix->matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element2);\n/* NormalNumberDataNode rows */\n/* rows : null value -> no code */\n/* NormalNumberDataNode cols */\n/* cols : null value -> no code */\n\n\n\n\nint row=1944938662;\n\n\nint col=458601351;\n\n\nint val=-1987413964;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode row */\n/* NormalNumberDataNode col */\n/* NormalNumberDataNode val */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test NumMatrix_update_int_int_int_random_0\");AKA_INSTANCE___NumMatrix->update(row,col,val);\nAKA_fCall++;AKA_mark(\"Return from: ./7/308-range-sum-query-2d-mutable.cpp/NumMatrix/update(int,int,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___NumMatrix */\n/* ConstructorDataNode NumMatrix(vector<vector<int>>&) */\n/* VectorDataNode matrix */\nvector<vector<int>> AKA_INSTANCE___NumMatrix_matrix;\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element0;\nint AKA_INSTANCE___NumMatrix_matrix_element0_element0=-1854805465;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element0_element1=-1649941263;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element1);\nAKA_INSTANCE___NumMatrix_matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element0);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element1;\nint AKA_INSTANCE___NumMatrix_matrix_element1_element0=189713625;\nAKA_INSTANCE___NumMatrix_matrix_element1.push_back(AKA_INSTANCE___NumMatrix_matrix_element1_element0);\nAKA_INSTANCE___NumMatrix_matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element1);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element2;\nint AKA_INSTANCE___NumMatrix_matrix_element2_element0=-643587357;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element2_element1=-1839709791;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element1);\nAKA_INSTANCE___NumMatrix_matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element2);\nAKA_mark(\"Calling: ./7/308-range-sum-query-2d-mutable.cpp/NumMatrix/NumMatrix(vector<vector<int>>&)|ROOT/308-range-sum-query-2d-mutable.cpp/GLOBAL/AKA_INSTANCE___NumMatrix/AKA_INSTANCE___NumMatrix/NumMatrix(vector<vector<int>>&)\");AKA_fCall++;AKA_INSTANCE___NumMatrix = new ::NumMatrix(AKA_INSTANCE___NumMatrix_matrix);\n/* VectorDataNode matrix */\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element0;\nint AKA_INSTANCE___NumMatrix_matrix_element0_element0=-1854805465;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element0_element1=-1649941263;\nAKA_INSTANCE___NumMatrix_matrix_element0.push_back(AKA_INSTANCE___NumMatrix_matrix_element0_element1);\nAKA_INSTANCE___NumMatrix->matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element0);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element1;\nint AKA_INSTANCE___NumMatrix_matrix_element1_element0=189713625;\nAKA_INSTANCE___NumMatrix_matrix_element1.push_back(AKA_INSTANCE___NumMatrix_matrix_element1_element0);\nAKA_INSTANCE___NumMatrix->matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element1);\nvector<int> AKA_INSTANCE___NumMatrix_matrix_element2;\nint AKA_INSTANCE___NumMatrix_matrix_element2_element0=-643587357;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element0);\nint AKA_INSTANCE___NumMatrix_matrix_element2_element1=-1839709791;\nAKA_INSTANCE___NumMatrix_matrix_element2.push_back(AKA_INSTANCE___NumMatrix_matrix_element2_element1);\nAKA_INSTANCE___NumMatrix->matrix.push_back(AKA_INSTANCE___NumMatrix_matrix_element2);\n/* NormalNumberDataNode rows */\n/* rows : null value -> no code */\n/* NormalNumberDataNode cols */\n/* cols : null value -> no code */\n\n\n\n\nint row=1944938662;\n\n\nint col=458601351;\n\n\nint val=-1987413964;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode row */\n/* NormalNumberDataNode col */\n/* NormalNumberDataNode val */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class NumMatrix { public:     NumMatrix(vector<vector<int>>& matrix) : matrix(matrix) {         this->rows = matrix.size();         if (this->rows != 0) this->cols = matrix[0].size();     }          void update(int row, int col, int val) {         matrix[row][col] = val;     }          int sumRegion(int row1, int col1, int row2, int col2) {         int sum = 0;         for (int i = row1; i <= row2; i++) {             for (int j = col1; j <= col2; j++) {                 sum += matrix[i][j];             }         }         return sum;     }      private:     vector<vector<int>>& matrix;     int rows;     int cols; };",
        "c": [
            "NumMatrix(vector<vector<int>>& matrix) : matrix(matrix) {\n        this->rows = matrix.size();\n        if (this->rows != 0) this->cols = matrix[0].size();\n    }"
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/308-range-sum-query-2d-mutable.cpp/NumMatrix/update(int,int,int)"
    },
    {
        "f": [],
        "fm": "int coinChange(vector<int>& coins, int amount) {         vector<int> minWays(amount + 1, 1000); // 1000 is arbitrary high number, so that 1 + minWays[amt - denom] doesn't overflow. INT_MAX will overflow.         minWays[0] = 0;         for (int& denom : coins) {             for (int amt = 0; amt < minWays.size(); amt++) {                 if (denom <= amt) {                     minWays[amt]= min(minWays[amt], 1 + minWays[amt - denom]);                 }             }         }         return minWays[minWays.size() - 1] != 1000 ? minWays[minWays.size() - 1] : -1;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_coinChange_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_coinChange_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=-1982345423;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=-413598875;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_coinChange_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->coinChange(coins,amount);\nAKA_fCall++;AKA_mark(\"Return from: ./7/322-coin-change.cpp/Solution/coinChange(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_coins;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=-1982345423;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=-413598875;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_coinChange_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_coinChange_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=-1576177124;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=273665657;\ncoins.push_back(coins_element0);\nint coins_element1=934104477;\ncoins.push_back(coins_element1);\nint coins_element2=-1535121080;\ncoins.push_back(coins_element2);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_coinChange_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->coinChange(coins,amount);\nAKA_fCall++;AKA_mark(\"Return from: ./7/322-coin-change.cpp/Solution/coinChange(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_coins;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=-1576177124;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=273665657;\ncoins.push_back(coins_element0);\nint coins_element1=934104477;\ncoins.push_back(coins_element1);\nint coins_element2=-1535121080;\ncoins.push_back(coins_element2);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_coinChange_vector_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_coinChange_vector_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=2049385526;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=470363165;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_coinChange_vector_int_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->coinChange(coins,amount);\nAKA_fCall++;AKA_mark(\"Return from: ./7/322-coin-change.cpp/Solution/coinChange(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_coins;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=2049385526;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=470363165;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_coinChange_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_coinChange_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=-1255483494;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=-1895513547;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_coinChange_vector_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->coinChange(coins,amount);\nAKA_fCall++;AKA_mark(\"Return from: ./7/322-coin-change.cpp/Solution/coinChange(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_coins;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=-1255483494;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=-1895513547;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_coinChange_vector_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_coinChange_vector_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=995709912;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=1584433706;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_coinChange_vector_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->coinChange(coins,amount);\nAKA_fCall++;AKA_mark(\"Return from: ./7/322-coin-change.cpp/Solution/coinChange(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_coins;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/322-coin-change.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint amount=995709912;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=1584433706;\ncoins.push_back(coins_element0);\n/* NormalNumberDataNode amount */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int coinChange(vector<int>& coins, int amount) {         vector<int> minWays(amount + 1, 1000); // 1000 is arbitrary high number, so that 1 + minWays[amt - denom] doesn't overflow. INT_MAX will overflow.         minWays[0] = 0;         for (int& denom : coins) {             for (int amt = 0; amt < minWays.size(); amt++) {                 if (denom <= amt) {                     minWays[amt]= min(minWays[amt], 1 + minWays[amt - denom]);                 }             }         }         return minWays[minWays.size() - 1] != 1000 ? minWays[minWays.size() - 1] : -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/7/322-coin-change.cpp/Solution/coinChange(vector<int>&,int)"
    }
]