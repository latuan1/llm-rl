[
    {
        "f": [],
        "fm": "int removeDuplicates(vector<int>& nums) {\r     int n = nums.size();\r     int k = 0, i = 0;\r     if (n == 0) return 0;\r     nums[k] = nums[0];\r     k = k + 1;\r     for (i = 1; i < n; i++) {\r       if (nums[i] != nums[i - 1]) {\r         nums[k] = nums[i];\r         k++;\r       }\r     }\r     return k;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeDuplicates_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_removeDuplicates_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\26.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-676653023;\nnums.push_back(nums_element0);\nint nums_element1=-586701735;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeDuplicates_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeDuplicates(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p3\\\\26.cpp\\\\Solution\\\\removeDuplicates(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   int removeDuplicates(vector<int>& nums) {\r     int n = nums.size();\r     int k = 0, i = 0;\r     if (n == 0) return 0;\r     nums[k] = nums[0];\r     k = k + 1;\r     for (i = 1; i < n; i++) {\r       if (nums[i] != nums[i - 1]) {\r         nums[k] = nums[i];\r         k++;\r       }\r     }\r     return k;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p3\\26.cpp\\Solution\\removeDuplicates(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int removeElement(vector<int>& nums, int val) {\r     int k = nums.size();\r     int beg = 0;\r     for (int i = 0; i < k; i++) {\r       if (nums[i] != val) {\r         nums[beg] = nums[i];\r         beg++;\r       }\r     }\r     return beg;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeElement_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_removeElement_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\27.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint val=694366722;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1673102131;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode val */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeElement_vector_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeElement(nums,val);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p3\\\\27.cpp\\\\Solution\\\\removeElement(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   int removeElement(vector<int>& nums, int val) {\r     int k = nums.size();\r     int beg = 0;\r     for (int i = 0; i < k; i++) {\r       if (nums[i] != val) {\r         nums[beg] = nums[i];\r         beg++;\r       }\r     }\r     return beg;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p3\\27.cpp\\Solution\\removeElement(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int divide(int dividend, int divisor) {\r     if (dividend == INT_MIN && divisor == -1) return INT_MAX;\r     return dividend / divisor;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_divide_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_divide_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\29.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=-479686228;\n\n\nint divisor=-2137641165;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_divide_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->divide(dividend,divisor);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p3\\\\29.cpp\\\\Solution\\\\divide(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   int divide(int dividend, int divisor) {\r     if (dividend == INT_MIN && divisor == -1) return INT_MAX;\r     return dividend / divisor;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p3\\29.cpp\\Solution\\divide(int,int)"
    }
]