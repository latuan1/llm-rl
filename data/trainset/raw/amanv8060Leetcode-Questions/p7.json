[
    {
        "f": [],
        "fm": "vector<string> buildArray(vector<int>& target, int n) {\r     vector<string> stack;\r     int counter = 0;\r \r     for (int i = 1; i <= n; i++) {\r       if (target.size() == 0 || counter >= target.size()) {\r         return stack;\r       }\r       stack.push_back(\"Push\");\r       if (i != target[counter]) {\r         stack.push_back(\"Pop\");\r       } else {\r         counter++;\r       }\r     }\r     return stack;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_buildArray_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_buildArray_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1441.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> target;\n\n\nint n=2;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode target */\nint target_element0=-279039841;\ntarget.push_back(target_element0);\nint target_element1=717879037;\ntarget.push_back(target_element1);\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildArray_vector_int_int_random_1\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buildArray(target,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p7\\\\1441.cpp\\\\Solution\\\\buildArray(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_target;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   vector<string> buildArray(vector<int>& target, int n) {\r     vector<string> stack;\r     int counter = 0;\r \r     for (int i = 1; i <= n; i++) {\r       if (target.size() == 0 || counter >= target.size()) {\r         return stack;\r       }\r       stack.push_back(\"Push\");\r       if (i != target[counter]) {\r         stack.push_back(\"Pop\");\r       } else {\r         counter++;\r       }\r     }\r     return stack;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p7\\1441.cpp\\Solution\\buildArray(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int minOperations(vector<string>& logs) {\r     int result = 0;\r     for (int i = 0; i < logs.size(); i++) {\r       if (logs[i] == \"../\") {\r         if (result != 0) {\r           result--;\r         }\r       } else if (logs[i] != \"./\") {\r         result++;\r       }\r     }\r     return result;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_minOperations_vector_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_minOperations_vector_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1598.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> logs;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode logs */\nchar* akaRandomName643085 = new char[2];akaRandomName643085[0] = 21;akaRandomName643085[1] = '\\0';string logs_element0=akaRandomName643085;\nlogs.push_back(logs_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minOperations_vector_string_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minOperations(logs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p7\\\\1598.cpp\\\\Solution\\\\minOperations(vector<string>&)\");\n\n\nvector<string> EXPECTED_logs;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   int minOperations(vector<string>& logs) {\r     int result = 0;\r     for (int i = 0; i < logs.size(); i++) {\r       if (logs[i] == \"../\") {\r         if (result != 0) {\r           result--;\r         }\r       } else if (logs[i] != \"./\") {\r         result++;\r       }\r     }\r     return result;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p7\\1598.cpp\\Solution\\minOperations(vector<string>&)"
    },
    {
        "f": [],
        "fm": "bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {\r     int n1 = word1.size();\r     int n2 = word2.size();\r     string str1;\r     string str2;\r \r     for (int i = 0; i < n1; i++) {\r       str1 = str1 + word1[i];\r     }\r     for (int i = 0; i < n2; i++) {\r       str2 = str2 + word2[i];\r     }\r     if (str1 == str2) {\r       return true;\r     }\r     return false;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_arrayStringsAreEqual_vector_string_vector_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_arrayStringsAreEqual_vector_string_vector_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1662.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> word1;\nvector<string> word2;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode word1 */\nchar* akaRandomName240073 = new char[2];akaRandomName240073[0] = -77;akaRandomName240073[1] = '\\0';string word1_element0=akaRandomName240073;\nword1.push_back(word1_element0);\nchar* akaRandomName717434 = new char[2];akaRandomName717434[0] = 118;akaRandomName717434[1] = '\\0';string word1_element1=akaRandomName717434;\nword1.push_back(word1_element1);\nchar* akaRandomName948585 = new char[2];akaRandomName948585[0] = 51;akaRandomName948585[1] = '\\0';string word1_element2=akaRandomName948585;\nword1.push_back(word1_element2);\n/* VectorDataNode word2 */\nchar* akaRandomName910710 = new char[2];akaRandomName910710[0] = -67;akaRandomName910710[1] = '\\0';string word2_element0=akaRandomName910710;\nword2.push_back(word2_element0);\nchar* akaRandomName19252 = new char[2];akaRandomName19252[0] = 62;akaRandomName19252[1] = '\\0';string word2_element1=akaRandomName19252;\nword2.push_back(word2_element1);\nchar* akaRandomName579412 = new char[2];akaRandomName579412[0] = -38;akaRandomName579412[1] = '\\0';string word2_element2=akaRandomName579412;\nword2.push_back(word2_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_arrayStringsAreEqual_vector_string_vector_string_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->arrayStringsAreEqual(word1,word2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p7\\\\1662.cpp\\\\Solution\\\\arrayStringsAreEqual(vector<string>&,vector<string>&)\");\n\n\nvector<string> EXPECTED_word1;\n\nvector<string> EXPECTED_word2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {\r     int n1 = word1.size();\r     int n2 = word2.size();\r     string str1;\r     string str2;\r \r     for (int i = 0; i < n1; i++) {\r       str1 = str1 + word1[i];\r     }\r     for (int i = 0; i < n2; i++) {\r       str2 = str2 + word2[i];\r     }\r     if (str1 == str2) {\r       return true;\r     }\r     return false;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p7\\1662.cpp\\Solution\\arrayStringsAreEqual(vector<string>&,vector<string>&)"
    },
    {
        "f": [],
        "fm": "int minOperations(string s) {\r     int count = 0;\r     int n = s.length();\r     if (s[0] == '0') {\r       for (int i = 1; i <= n; i++) {\r         if (i % 2 == 0 && s[i - 1] == '1') {\r           count++;\r         } else if (i % 2 == 1 && s[i - 1] == '0') {\r           count++;\r         }\r       }\r     } else {\r       for (int i = 1; i <= n; i++) {\r         if (i % 2 == 0 && s[i - 1] == '0') {\r           count++;\r         }\r         if (i % 2 == 1 && s[i - 1] == '1') {\r           count++;\r         }\r       }\r     }\r \r     return min(count, n - count);\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_minOperations_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_minOperations_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1758.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName544563 = new char[2];akaRandomName544563[0] = -30;akaRandomName544563[1] = '\\0';string s=akaRandomName544563;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minOperations_string_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minOperations(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p7\\\\1758.cpp\\\\Solution\\\\minOperations(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   int minOperations(string s) {\r     int count = 0;\r     int n = s.length();\r     if (s[0] == '0') {\r       for (int i = 1; i <= n; i++) {\r         if (i % 2 == 0 && s[i - 1] == '1') {\r           count++;\r         } else if (i % 2 == 1 && s[i - 1] == '0') {\r           count++;\r         }\r       }\r     } else {\r       for (int i = 1; i <= n; i++) {\r         if (i % 2 == 0 && s[i - 1] == '0') {\r           count++;\r         }\r         if (i % 2 == 1 && s[i - 1] == '1') {\r           count++;\r         }\r       }\r     }\r \r     return min(count, n - count);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p7\\1758.cpp\\Solution\\minOperations(string)"
    },
    {
        "f": [
            "set<pair<int, int>> mini;",
            "set<pair<int, int>> midi;",
            "set<pair<int, int>> maxi;",
            "queue<pair<int, int>> q;",
            "int id;",
            "int k;",
            "int n;",
            "int m;",
            "int lim;",
            "int sum;"
        ],
        "fm": "void addElement(int num) {\r     q.push({num, ++id});\r \r     if (q.size() == lim) {\r       auto p = q.front();\r       q.pop();\r \r       if (mini.count(p))\r         mini.erase(p);  // delete old\r       else if (maxi.count(p))\r         maxi.erase(p);\r       else\r         midi.erase(p), sum -= p.first;\r \r       if (mini.size() != k) {  // replace\r         mini.insert(*midi.begin()), sum -= midi.begin()->first;\r         midi.erase(*midi.begin());\r       } else if (maxi.size() != k) {\r         maxi.insert(*midi.rbegin()), sum -= midi.rbegin()->first;\r         midi.erase(*midi.rbegin());\r       }\r \r       if (num >= mini.rbegin()->first && num <= maxi.begin()->first)\r         midi.insert({num, id}), sum += num;  // insert new\r       else if (num < mini.rbegin()->first) {\r         sum += mini.rbegin()->first;\r         midi.insert(*mini.rbegin());\r         mini.erase(*mini.rbegin());\r         mini.insert({num, id});\r       } else {\r         sum += maxi.begin()->first;\r         midi.insert(*maxi.begin());\r         maxi.erase(*maxi.begin());\r         maxi.insert({num, id});\r       }\r     } else if (q.size() == m) {\r       vector<pair<int, int>> v(m);\r \r       for (int i = 0; i != m; i++) {\r         q.push(v[i] = q.front());\r         q.pop();\r       }\r \r       sort(v.begin(), v.end());\r       int i = 0;\r       while (i != k) mini.insert(v[i++]);\r       for (int l = k + n; i != l; i++) midi.insert(v[i]), sum += v[i].first;\r       while (i != m) maxi.insert(v[i++]);\r     }\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_MKAverage_addElement_int_random_0(void) {\n{\nAKA_test_case_name=\"MKAverage_addElement_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___MKAverage */\n/* ConstructorDataNode MKAverage(int,int) */\n/* NormalNumberDataNode m */\nint AKA_INSTANCE___MKAverage_m=686572774;\n/* NormalNumberDataNode k */\nint AKA_INSTANCE___MKAverage_k=856252569;\nAKA_mark(\"Calling: .\\\\p7\\\\1825.cpp\\\\MKAverage\\\\MKAverage(int,int)|ROOT\\\\1825.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MKAverage\\\\AKA_INSTANCE___MKAverage\\\\MKAverage(int,int)\");AKA_fCall++;AKA_INSTANCE___MKAverage = new ::MKAverage(AKA_INSTANCE___MKAverage_m,AKA_INSTANCE___MKAverage_k);\n/* SetDataNode mini */\npair<int,int> AKA_INSTANCE___MKAverage_mini_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->mini.insert(AKA_INSTANCE___MKAverage_mini_element0);\n/* SetDataNode midi */\npair<int,int> AKA_INSTANCE___MKAverage_midi_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->midi.insert(AKA_INSTANCE___MKAverage_midi_element0);\npair<int,int> AKA_INSTANCE___MKAverage_midi_element1;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->midi.insert(AKA_INSTANCE___MKAverage_midi_element1);\n/* SetDataNode maxi */\npair<int,int> AKA_INSTANCE___MKAverage_maxi_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->maxi.insert(AKA_INSTANCE___MKAverage_maxi_element0);\npair<int,int> AKA_INSTANCE___MKAverage_maxi_element1;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->maxi.insert(AKA_INSTANCE___MKAverage_maxi_element1);\n/* QueueDataNode q */\npair<int,int> AKA_INSTANCE___MKAverage_q_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->q.push(AKA_INSTANCE___MKAverage_q_element0);\npair<int,int> AKA_INSTANCE___MKAverage_q_element1;\n/* NormalNumberDataNode first */\nAKA_INSTANCE___MKAverage_q_element1->first=-889351106;\n/* NormalNumberDataNode second */\nAKA_INSTANCE___MKAverage_q_element1->second=-244108808;\nAKA_INSTANCE___MKAverage->q.push(AKA_INSTANCE___MKAverage_q_element1);\n/* NormalNumberDataNode id */\nAKA_INSTANCE___MKAverage->id=1406746060;\n/* NormalNumberDataNode k */\nAKA_INSTANCE___MKAverage->k=856252569;\n/* NormalNumberDataNode n */\nAKA_INSTANCE___MKAverage->n=1895803905;\n/* NormalNumberDataNode m */\nAKA_INSTANCE___MKAverage->m=686572774;\n/* NormalNumberDataNode lim */\nAKA_INSTANCE___MKAverage->lim=-2017531247;\n/* NormalNumberDataNode sum */\nAKA_INSTANCE___MKAverage->sum=-1976841957;\n\n\n\n\nint num=-232672448;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test MKAverage_addElement_int_random_0\");AKA_INSTANCE___MKAverage->addElement(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p7\\\\1825.cpp\\\\MKAverage\\\\addElement(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class MKAverage {\r  public:\r   set<pair<int, int>> mini, midi, maxi;\r   queue<pair<int, int>> q;\r   int id, k, n, m, lim, sum;\r \r   MKAverage(int m, int k) {\r     sum = id = 0, this->k = k, this->m = m, n = m - k - k, lim = m + 1;\r   }\r \r   void addElement(int num) {\r     q.push({num, ++id});\r \r     if (q.size() == lim) {\r       auto p = q.front();\r       q.pop();\r \r       if (mini.count(p))\r         mini.erase(p);  // delete old\r       else if (maxi.count(p))\r         maxi.erase(p);\r       else\r         midi.erase(p), sum -= p.first;\r \r       if (mini.size() != k) {  // replace\r         mini.insert(*midi.begin()), sum -= midi.begin()->first;\r         midi.erase(*midi.begin());\r       } else if (maxi.size() != k) {\r         maxi.insert(*midi.rbegin()), sum -= midi.rbegin()->first;\r         midi.erase(*midi.rbegin());\r       }\r \r       if (num >= mini.rbegin()->first && num <= maxi.begin()->first)\r         midi.insert({num, id}), sum += num;  // insert new\r       else if (num < mini.rbegin()->first) {\r         sum += mini.rbegin()->first;\r         midi.insert(*mini.rbegin());\r         mini.erase(*mini.rbegin());\r         mini.insert({num, id});\r       } else {\r         sum += maxi.begin()->first;\r         midi.insert(*maxi.begin());\r         maxi.erase(*maxi.begin());\r         maxi.insert({num, id});\r       }\r     } else if (q.size() == m) {\r       vector<pair<int, int>> v(m);\r \r       for (int i = 0; i != m; i++) {\r         q.push(v[i] = q.front());\r         q.pop();\r       }\r \r       sort(v.begin(), v.end());\r       int i = 0;\r       while (i != k) mini.insert(v[i++]);\r       for (int l = k + n; i != l; i++) midi.insert(v[i]), sum += v[i].first;\r       while (i != m) maxi.insert(v[i++]);\r     }\r   }\r \r   int calculateMKAverage() { return q.size() == m ? sum / n : -1; }\r };",
        "c": [
            "MKAverage(int m, int k) {\r\n    sum = id = 0, this->k = k, this->m = m, n = m - k - k, lim = m + 1;\r\n  }"
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p7\\1825.cpp\\MKAverage\\addElement(int)"
    },
    {
        "f": [
            "set<pair<int, int>> mini;",
            "set<pair<int, int>> midi;",
            "set<pair<int, int>> maxi;",
            "queue<pair<int, int>> q;",
            "int id;",
            "int k;",
            "int n;",
            "int m;",
            "int lim;",
            "int sum;"
        ],
        "fm": "int calculateMKAverage() { return q.size() == m ? sum / n : -1; }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_MKAverage_calculateMKAverage_random_0(void) {\n{\nAKA_test_case_name=\"MKAverage_calculateMKAverage_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___MKAverage */\n/* ConstructorDataNode MKAverage(int,int) */\n/* NormalNumberDataNode m */\nint AKA_INSTANCE___MKAverage_m=1808145052;\n/* NormalNumberDataNode k */\nint AKA_INSTANCE___MKAverage_k=174052631;\nAKA_mark(\"Calling: .\\\\p7\\\\1825.cpp\\\\MKAverage\\\\MKAverage(int,int)|ROOT\\\\1825.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MKAverage\\\\AKA_INSTANCE___MKAverage\\\\MKAverage(int,int)\");AKA_fCall++;AKA_INSTANCE___MKAverage = new ::MKAverage(AKA_INSTANCE___MKAverage_m,AKA_INSTANCE___MKAverage_k);\n/* SetDataNode mini */\npair<int,int> AKA_INSTANCE___MKAverage_mini_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->mini.insert(AKA_INSTANCE___MKAverage_mini_element0);\n/* SetDataNode midi */\npair<int,int> AKA_INSTANCE___MKAverage_midi_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->midi.insert(AKA_INSTANCE___MKAverage_midi_element0);\npair<int,int> AKA_INSTANCE___MKAverage_midi_element1;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->midi.insert(AKA_INSTANCE___MKAverage_midi_element1);\n/* SetDataNode maxi */\npair<int,int> AKA_INSTANCE___MKAverage_maxi_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->maxi.insert(AKA_INSTANCE___MKAverage_maxi_element0);\npair<int,int> AKA_INSTANCE___MKAverage_maxi_element1;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->maxi.insert(AKA_INSTANCE___MKAverage_maxi_element1);\n/* QueueDataNode q */\npair<int,int> AKA_INSTANCE___MKAverage_q_element0;\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\nAKA_INSTANCE___MKAverage->q.push(AKA_INSTANCE___MKAverage_q_element0);\npair<int,int> AKA_INSTANCE___MKAverage_q_element1;\n/* NormalNumberDataNode first */\nAKA_INSTANCE___MKAverage_q_element1->first=-1966609734;\n/* NormalNumberDataNode second */\nAKA_INSTANCE___MKAverage_q_element1->second=393985913;\nAKA_INSTANCE___MKAverage->q.push(AKA_INSTANCE___MKAverage_q_element1);\npair<int,int> AKA_INSTANCE___MKAverage_q_element2;\n/* NormalNumberDataNode first */\nAKA_INSTANCE___MKAverage_q_element2->first=811937125;\n/* NormalNumberDataNode second */\nAKA_INSTANCE___MKAverage_q_element2->second=-1704795133;\nAKA_INSTANCE___MKAverage->q.push(AKA_INSTANCE___MKAverage_q_element2);\n/* NormalNumberDataNode id */\n/* id : null value -> no code */\n/* NormalNumberDataNode k */\nAKA_INSTANCE___MKAverage->k=174052631;\n/* NormalNumberDataNode n */\nAKA_INSTANCE___MKAverage->n=275041176;\n/* NormalNumberDataNode m */\nAKA_INSTANCE___MKAverage->m=1808145052;\n/* NormalNumberDataNode lim */\n/* lim : null value -> no code */\n/* NormalNumberDataNode sum */\nAKA_INSTANCE___MKAverage->sum=-841068423;\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test MKAverage_calculateMKAverage_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___MKAverage->calculateMKAverage();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p7\\\\1825.cpp\\\\MKAverage\\\\calculateMKAverage()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class MKAverage {\r  public:\r   set<pair<int, int>> mini, midi, maxi;\r   queue<pair<int, int>> q;\r   int id, k, n, m, lim, sum;\r \r   MKAverage(int m, int k) {\r     sum = id = 0, this->k = k, this->m = m, n = m - k - k, lim = m + 1;\r   }\r \r   void addElement(int num) {\r     q.push({num, ++id});\r \r     if (q.size() == lim) {\r       auto p = q.front();\r       q.pop();\r \r       if (mini.count(p))\r         mini.erase(p);  // delete old\r       else if (maxi.count(p))\r         maxi.erase(p);\r       else\r         midi.erase(p), sum -= p.first;\r \r       if (mini.size() != k) {  // replace\r         mini.insert(*midi.begin()), sum -= midi.begin()->first;\r         midi.erase(*midi.begin());\r       } else if (maxi.size() != k) {\r         maxi.insert(*midi.rbegin()), sum -= midi.rbegin()->first;\r         midi.erase(*midi.rbegin());\r       }\r \r       if (num >= mini.rbegin()->first && num <= maxi.begin()->first)\r         midi.insert({num, id}), sum += num;  // insert new\r       else if (num < mini.rbegin()->first) {\r         sum += mini.rbegin()->first;\r         midi.insert(*mini.rbegin());\r         mini.erase(*mini.rbegin());\r         mini.insert({num, id});\r       } else {\r         sum += maxi.begin()->first;\r         midi.insert(*maxi.begin());\r         maxi.erase(*maxi.begin());\r         maxi.insert({num, id});\r       }\r     } else if (q.size() == m) {\r       vector<pair<int, int>> v(m);\r \r       for (int i = 0; i != m; i++) {\r         q.push(v[i] = q.front());\r         q.pop();\r       }\r \r       sort(v.begin(), v.end());\r       int i = 0;\r       while (i != k) mini.insert(v[i++]);\r       for (int l = k + n; i != l; i++) midi.insert(v[i]), sum += v[i].first;\r       while (i != m) maxi.insert(v[i++]);\r     }\r   }\r \r   int calculateMKAverage() { return q.size() == m ? sum / n : -1; }\r };",
        "c": [
            "MKAverage(int m, int k) {\r\n    sum = id = 0, this->k = k, this->m = m, n = m - k - k, lim = m + 1;\r\n  }"
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p7\\1825.cpp\\MKAverage\\calculateMKAverage()"
    }
]