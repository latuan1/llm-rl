[
    {
        "f": [],
        "fm": "TreeNode* constructTree(vector<int>& nums, int start, int end) {\r     if (start > end) {\r       return NULL;\r     }\r     int mid = (start + end) / 2;\r     TreeNode* root = new TreeNode(nums[mid]);\r     root->left = constructTree(nums, start, mid - 1);\r     root->right = constructTree(nums, mid + 1, end);\r     return root;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_constructTree_vector_int_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_constructTree_vector_int_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\108.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint start=-1219445636;\n\n\nint end=319183259;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1409286986;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_constructTree_vector_int_int_int_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->constructTree(nums,start,end);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p4\\\\108.cpp\\\\Solution\\\\constructTree(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_constructTree_vector_int_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_constructTree_vector_int_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\108.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint start=2011562388;\n\n\nint end=-1537181288;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1753757422;\nnums.push_back(nums_element0);\nint nums_element1=-1196273993;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_constructTree_vector_int_int_int_random_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->constructTree(nums,start,end);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p4\\\\108.cpp\\\\Solution\\\\constructTree(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=641482278;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=-712205251;\narr.push_back(arr_element0);\nint arr_element1=1818276528;\narr.push_back(arr_element1);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   TreeNode* constructTree(vector<int>& nums, int start, int end) {\r     if (start > end) {\r       return NULL;\r     }\r     int mid = (start + end) / 2;\r     TreeNode* root = new TreeNode(nums[mid]);\r     root->left = constructTree(nums, start, mid - 1);\r     root->right = constructTree(nums, mid + 1, end);\r     return root;\r   }\r \r   TreeNode* sortedArrayToBST(vector<int>& nums) {\r     return constructTree(nums, 0, nums.size() - 1);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p4\\108.cpp\\Solution\\constructTree(vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode* sortedArrayToBST(vector<int>& nums) {\r     return constructTree(nums, 0, nums.size() - 1);\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_sortedArrayToBST_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_sortedArrayToBST_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\108.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1181563724;\nnums.push_back(nums_element0);\nint nums_element1=-96836648;\nnums.push_back(nums_element1);\nint nums_element2=1689655262;\nnums.push_back(nums_element2);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedArrayToBST_vector_int_random_4\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedArrayToBST(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p4\\\\108.cpp\\\\Solution\\\\sortedArrayToBST(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   TreeNode* constructTree(vector<int>& nums, int start, int end) {\r     if (start > end) {\r       return NULL;\r     }\r     int mid = (start + end) / 2;\r     TreeNode* root = new TreeNode(nums[mid]);\r     root->left = constructTree(nums, start, mid - 1);\r     root->right = constructTree(nums, mid + 1, end);\r     return root;\r   }\r \r   TreeNode* sortedArrayToBST(vector<int>& nums) {\r     return constructTree(nums, 0, nums.size() - 1);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p4\\108.cpp\\Solution\\sortedArrayToBST(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool hasPathSum(TreeNode* root, int targetSum) {\r     if (root == NULL) {\r       return false;\r     }\r     if (root->val == targetSum && root->right == NULL && root->left == NULL) {\r       return true;\r     }\r     return hasPathSum(root->left, targetSum - root->val) ||\r            hasPathSum(root->right, targetSum - root->val);\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_hasPathSum_TreeNodemul_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_hasPathSum_TreeNodemul_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\112.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-548903887;\nAKA_mark(\"Calling: .\\\\p4\\\\112.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=244426904;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1587225176;\nAKA_mark(\"Calling: .\\\\p4\\\\112.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=407457029;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-172748372;\nAKA_mark(\"Calling: .\\\\p4\\\\112.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-580479885;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=573886402;\nAKA_mark(\"Calling: .\\\\p4\\\\112.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-2136503595;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=1262230305;\nAKA_mark(\"Calling: .\\\\p4\\\\112.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=388223594;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=-726418124;\nAKA_mark(\"Calling: .\\\\p4\\\\112.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=-1041892232;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint targetSum=-177158783;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode targetSum */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_hasPathSum_TreeNodemul_int_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->hasPathSum(root,targetSum);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p4\\\\112.cpp\\\\Solution\\\\hasPathSum(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   bool hasPathSum(TreeNode* root, int targetSum) {\r     if (root == NULL) {\r       return false;\r     }\r     if (root->val == targetSum && root->right == NULL && root->left == NULL) {\r       return true;\r     }\r     return hasPathSum(root->left, targetSum - root->val) ||\r            hasPathSum(root->right, targetSum - root->val);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p4\\112.cpp\\Solution\\hasPathSum(TreeNode*,int)"
    },
    {
        "f": [],
        "fm": "int maxProfit(vector<int>& prices) {\r     int profit = 0, price = INT_MAX;\r     for (int i = 0; i < prices.size(); i++) {\r       price = min(price, prices[i]);\r       int present_profit = prices[i] - price;\r       profit = max(present_profit, profit);\r     }\r     return profit;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\121.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-1269373000;\nprices.push_back(prices_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p4\\\\121.cpp\\\\Solution\\\\maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   int maxProfit(vector<int>& prices) {\r     int profit = 0, price = INT_MAX;\r     for (int i = 0; i < prices.size(); i++) {\r       price = min(price, prices[i]);\r       int present_profit = prices[i] - price;\r       profit = max(present_profit, profit);\r     }\r     return profit;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p4\\121.cpp\\Solution\\maxProfit(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool isMatch(string str, string pattern) {\r     int m = pattern.size();\r     int n = str.size();\r \r     bool dp[n + 1][m + 1];\r     for (int i = 0; i < n + 1; i++) {\r       for (int j = 0; j < m + 1; j++) {\r         dp[i][j] = false;\r       }\r     }\r     dp[0][0] = true;\r \r     for (int i = 1; i <= m; i++) {\r       if (pattern[i - 1] == '*') dp[0][i] = dp[0][i - 1];\r     }\r     for (int i = 1; i < n + 1; i++) {\r       for (int j = 1; j < m + 1; j++) {\r         if (str[i - 1] == pattern[j - 1] || pattern[j - 1] == '?')\r           dp[i][j] = dp[i - 1][j - 1];\r         else if (pattern[j - 1] == '*')\r           dp[i][j] = dp[i - 1][j] || dp[i][j - 1];\r       }\r     }\r     return dp[n][m];\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isMatch_string_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_isMatch_string_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\44.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName183460 = new char[2];akaRandomName183460[0] = 28;akaRandomName183460[1] = '\\0';string str=akaRandomName183460;\nchar* akaRandomName613253 = new char[2];akaRandomName613253[0] = 46;akaRandomName613253[1] = '\\0';string pattern=akaRandomName613253;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode str */\n/* NormalStringDataNode pattern */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isMatch_string_string_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isMatch(str,pattern);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p4\\\\44.cpp\\\\Solution\\\\isMatch(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   bool isMatch(string str, string pattern) {\r     int m = pattern.size();\r     int n = str.size();\r \r     bool dp[n + 1][m + 1];\r     for (int i = 0; i < n + 1; i++) {\r       for (int j = 0; j < m + 1; j++) {\r         dp[i][j] = false;\r       }\r     }\r     dp[0][0] = true;\r \r     for (int i = 1; i <= m; i++) {\r       if (pattern[i - 1] == '*') dp[0][i] = dp[0][i - 1];\r     }\r     for (int i = 1; i < n + 1; i++) {\r       for (int j = 1; j < m + 1; j++) {\r         if (str[i - 1] == pattern[j - 1] || pattern[j - 1] == '?')\r           dp[i][j] = dp[i - 1][j - 1];\r         else if (pattern[j - 1] == '*')\r           dp[i][j] = dp[i - 1][j] || dp[i][j - 1];\r       }\r     }\r     return dp[n][m];\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p4\\44.cpp\\Solution\\isMatch(string,string)"
    },
    {
        "f": [],
        "fm": "int maxSubArray(vector<int>& nums) {\r     int cur = 0, mx = INT_MIN, n = nums.size();\r \r     for (int i = 0; i < n; i++) {\r       cur += nums[i];\r       mx = max(mx, cur);\r       if (cur < 0) {\r         cur = 0;\r       }\r     }\r     return mx;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxSubArray_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_maxSubArray_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\53.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-660282293;\nnums.push_back(nums_element0);\nint nums_element1=150563652;\nnums.push_back(nums_element1);\nint nums_element2=99745348;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxSubArray_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxSubArray(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p4\\\\53.cpp\\\\Solution\\\\maxSubArray(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint target=-1962261778;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=1510033079;\narr.push_back(arr_element0);\nint arr_element1=-910313955;\narr.push_back(arr_element1);\nint arr_element2=-644911661;\narr.push_back(arr_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r  public:\r   int maxSubArray(vector<int>& nums) {\r     int cur = 0, mx = INT_MIN, n = nums.size();\r \r     for (int i = 0; i < n; i++) {\r       cur += nums[i];\r       mx = max(mx, cur);\r       if (cur < 0) {\r         cur = 0;\r       }\r     }\r     return mx;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\Projects\\AKAUT\\prj-data\\amanv8060_Leetcode-Questions\\solutions\\p4\\53.cpp\\Solution\\maxSubArray(vector<int>&)"
    }
]