[
    {
        "f": [],
        "fm": "ListNode* swapPairs(ListNode* head) {         if(head == NULL || head->next == NULL) {             return head;         }         ListNode *p, *q, *h, *t;         p = head;         q = head->next;         h = q;         while(p != NULL && q != NULL) {             p->next = q->next;             q->next = p;             t = p;             if(p->next != NULL) {                 p = p->next;             } else {                 return h;             }             if(p->next != NULL) {                 q = p->next;                 t->next = q;             } else {                 return h;             }         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_swapPairs_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_swapPairs_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/024. Swap Nodes in Pairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1768391674;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-935647394;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1803023470;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=880254788;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_swapPairs_ListNodemul_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->swapPairs(head);\nAKA_fCall++;AKA_mark(\"Return from: ./13/024. Swap Nodes in Pairs.cpp/Solution/swapPairs(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/024. Swap Nodes in Pairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1768391674;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-935647394;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1803023470;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=880254788;\nAKA_mark(\"Calling: ./13/024. Swap Nodes in Pairs.cpp/ListNode/ListNode(int)|ROOT/024. Swap Nodes in Pairs.cpp/swapPairs(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_swapPairs_ListNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_swapPairs_ListNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/024. Swap Nodes in Pairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_swapPairs_ListNodemul_random_3\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->swapPairs(head);\nAKA_fCall++;AKA_mark(\"Return from: ./13/024. Swap Nodes in Pairs.cpp/Solution/swapPairs(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/024. Swap Nodes in Pairs.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* swapPairs(ListNode* head) {         if(head == NULL || head->next == NULL) {             return head;         }         ListNode *p, *q, *h, *t;         p = head;         q = head->next;         h = q;         while(p != NULL && q != NULL) {             p->next = q->next;             q->next = p;             t = p;             if(p->next != NULL) {                 p = p->next;             } else {                 return h;             }             if(p->next != NULL) {                 q = p->next;                 t->next = q;             } else {                 return h;             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/024. Swap Nodes in Pairs.cpp/Solution/swapPairs(ListNode*)"
    },
    {
        "f": [],
        "fm": "int removeDuplicates(vector<int>& nums) {         if(nums.size() == 0) {             return 0;         }         int len = 1;         for(int i = 1; i < nums.size(); i++) {             if(nums[i] != nums[i - 1]) {                 nums[len++] = nums[i];             }         }         return len;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeDuplicates_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_removeDuplicates_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/026. Remove Duplicates from Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1367371573;\nnums.push_back(nums_element0);\nint nums_element1=-986235056;\nnums.push_back(nums_element1);\nint nums_element2=-1214137431;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeDuplicates_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeDuplicates(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./13/026. Remove Duplicates from Sorted Array.cpp/Solution/removeDuplicates(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/026. Remove Duplicates from Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1367371573;\nnums.push_back(nums_element0);\nint nums_element1=-986235056;\nnums.push_back(nums_element1);\nint nums_element2=-1214137431;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeDuplicates_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_removeDuplicates_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/026. Remove Duplicates from Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=996307433;\nnums.push_back(nums_element0);\nint nums_element1=453684291;\nnums.push_back(nums_element1);\nint nums_element2=-1590784669;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeDuplicates_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeDuplicates(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./13/026. Remove Duplicates from Sorted Array.cpp/Solution/removeDuplicates(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/026. Remove Duplicates from Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=996307433;\nnums.push_back(nums_element0);\nint nums_element1=453684291;\nnums.push_back(nums_element1);\nint nums_element2=-1590784669;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int removeDuplicates(vector<int>& nums) {         if(nums.size() == 0) {             return 0;         }         int len = 1;         for(int i = 1; i < nums.size(); i++) {             if(nums[i] != nums[i - 1]) {                 nums[len++] = nums[i];             }         }         return len;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/026. Remove Duplicates from Sorted Array.cpp/Solution/removeDuplicates(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int removeElement(vector<int>& nums, int val) {         int len = 0;         for(int i = 0; i < nums.size(); i++) {             if(nums[i] != val) {                 nums[len++] = nums[i];             }         }         return len;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeElement_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_removeElement_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/027. Remove Element.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint val=1125688312;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1488170127;\nnums.push_back(nums_element0);\nint nums_element1=-1952786201;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode val */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeElement_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeElement(nums,val);\nAKA_fCall++;AKA_mark(\"Return from: ./13/027. Remove Element.cpp/Solution/removeElement(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/027. Remove Element.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint val=1125688312;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1488170127;\nnums.push_back(nums_element0);\nint nums_element1=-1952786201;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode val */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int removeElement(vector<int>& nums, int val) {         int len = 0;         for(int i = 0; i < nums.size(); i++) {             if(nums[i] != val) {                 nums[len++] = nums[i];             }         }         return len;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/027. Remove Element.cpp/Solution/removeElement(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int strStr(string haystack, string needle) {         int len1 = haystack.length();         int len2 = needle.length();         if(len2 == 0)             return 0;         for(int i = 0; i <= len1 - len2; i++) {             for(int j = 0; j < len2 && needle[j] == haystack[i + j]; j++) {                 if(j == len2 - 1)                     return i;             }         }         return -1;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_strStr_string_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_strStr_string_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/028. Implement strStr().cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName268531 = new char[2];akaRandomName268531[0] = 22;akaRandomName268531[1] = '\\0';string haystack=akaRandomName268531;\nchar* akaRandomName525936 = new char[2];akaRandomName525936[0] = 49;akaRandomName525936[1] = '\\0';string needle=akaRandomName525936;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode haystack */\n/* NormalStringDataNode needle */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_strStr_string_string_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->strStr(haystack,needle);\nAKA_fCall++;AKA_mark(\"Return from: ./13/028. Implement strStr().cpp/Solution/strStr(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/028. Implement strStr().cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName430001 = new char[2];akaRandomName430001[0] = 22;akaRandomName430001[1] = '\\0';string haystack=akaRandomName430001;\nchar* akaRandomName344979 = new char[2];akaRandomName344979[0] = 49;akaRandomName344979[1] = '\\0';string needle=akaRandomName344979;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode haystack */\n/* NormalStringDataNode needle */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int strStr(string haystack, string needle) {         int len1 = haystack.length();         int len2 = needle.length();         if(len2 == 0)             return 0;         for(int i = 0; i <= len1 - len2; i++) {             for(int j = 0; j < len2 && needle[j] == haystack[i + j]; j++) {                 if(j == len2 - 1)                     return i;             }         }         return -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/028. Implement strStr().cpp/Solution/strStr(string,string)"
    },
    {
        "f": [],
        "fm": "int divide(int dividend, int divisor) {         if(divisor == 0 || dividend == INT_MIN && divisor == -1) return INT_MAX;         int sign = ((dividend >> 31) ^ (divisor >> 31)) == 0 ? 1 : -1;         long a = abs((long)dividend);         long b = abs((long)divisor);         double c = exp(log(a) - log(b)) + 0.0000000001;         return (int)(sign * c);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_divide_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_divide_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/029. Divide Two Integers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=-615142047;\n\n\nint divisor=1872232681;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_divide_int_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->divide(dividend,divisor);\nAKA_fCall++;AKA_mark(\"Return from: ./13/029. Divide Two Integers.cpp/Solution/divide(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/029. Divide Two Integers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=-615142047;\n\n\nint divisor=1872232681;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int divide(int dividend, int divisor) {         if(divisor == 0 || dividend == INT_MIN && divisor == -1) return INT_MAX;         int sign = ((dividend >> 31) ^ (divisor >> 31)) == 0 ? 1 : -1;         long a = abs((long)dividend);         long b = abs((long)divisor);         double c = exp(log(a) - log(b)) + 0.0000000001;         return (int)(sign * c);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/029. Divide Two Integers.cpp/Solution/divide(int,int)"
    },
    {
        "f": [],
        "fm": "void nextPermutation(vector<int>& nums) {         next_permutation(nums.begin(), nums.end());     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_nextPermutation_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_nextPermutation_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/031. Next Permutation.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=775567335;\nnums.push_back(nums_element0);\nint nums_element1=-851810468;\nnums.push_back(nums_element1);\nint nums_element2=1643598266;\nnums.push_back(nums_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_nextPermutation_vector_int_random_4\");AKA_INSTANCE___Solution->nextPermutation(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./13/031. Next Permutation.cpp/Solution/nextPermutation(vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/031. Next Permutation.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=775567335;\nnums.push_back(nums_element0);\nint nums_element1=-851810468;\nnums.push_back(nums_element1);\nint nums_element2=1643598266;\nnums.push_back(nums_element2);\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void nextPermutation(vector<int>& nums) {         next_permutation(nums.begin(), nums.end());     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/031. Next Permutation.cpp/Solution/nextPermutation(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> searchRange(vector<int>& nums, int target) {         int low = 0, high = nums.size() - 1;         while(low <= high && nums[low] != target && nums[high] != target) {             int mid = (high - low) / 2 + low;             if(nums[mid] < target) {                 low = mid + 1;             } else if(nums[mid] > target){                 high = mid - 1;             } else {                 break;             }         }         vector<int> v(2);         if(low > high) {             v[0] = -1;             v[1] = -1;             return v;         }         while(nums[low] != target) {             low++;         }         while(nums[high] != target) {             high--;         }         v[0] = low;         v[1] = high;         return v;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_searchRange_vector_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_searchRange_vector_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/034. Search for a Range.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=5;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-303773273;\nnums.push_back(nums_element0);\nint nums_element1=-550089472;\nnums.push_back(nums_element1);\nint nums_element2=1290559717;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_searchRange_vector_int_int_random_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->searchRange(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./13/034. Search for a Range.cpp/Solution/searchRange(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/034. Search for a Range.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=5;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-303773273;\nnums.push_back(nums_element0);\nint nums_element1=-550089472;\nnums.push_back(nums_element1);\nint nums_element2=1290559717;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> searchRange(vector<int>& nums, int target) {         int low = 0, high = nums.size() - 1;         while(low <= high && nums[low] != target && nums[high] != target) {             int mid = (high - low) / 2 + low;             if(nums[mid] < target) {                 low = mid + 1;             } else if(nums[mid] > target){                 high = mid - 1;             } else {                 break;             }         }         vector<int> v(2);         if(low > high) {             v[0] = -1;             v[1] = -1;             return v;         }         while(nums[low] != target) {             low++;         }         while(nums[high] != target) {             high--;         }         v[0] = low;         v[1] = high;         return v;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/034. Search for a Range.cpp/Solution/searchRange(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int searchInsert(vector<int>& nums, int target) {         for(int i = 0; i < nums.size(); i++) {             if(nums[i] >= target) {                 return i;             }             if(i == nums.size() - 1) {                 return nums.size();             }         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_searchInsert_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_searchInsert_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/035. Search Insert Position.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1687030628;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1162006268;\nnums.push_back(nums_element0);\nint nums_element1=-2102179222;\nnums.push_back(nums_element1);\nint nums_element2=-1058011381;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_searchInsert_vector_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->searchInsert(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./13/035. Search Insert Position.cpp/Solution/searchInsert(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/035. Search Insert Position.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1687030628;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1162006268;\nnums.push_back(nums_element0);\nint nums_element1=-2102179222;\nnums.push_back(nums_element1);\nint nums_element2=-1058011381;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_searchInsert_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_searchInsert_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/035. Search Insert Position.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1398916332;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=452436161;\nnums.push_back(nums_element0);\nint nums_element1=-206659596;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_searchInsert_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->searchInsert(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./13/035. Search Insert Position.cpp/Solution/searchInsert(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/035. Search Insert Position.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1398916332;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=452436161;\nnums.push_back(nums_element0);\nint nums_element1=-206659596;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int searchInsert(vector<int>& nums, int target) {         for(int i = 0; i < nums.size(); i++) {             if(nums[i] >= target) {                 return i;             }             if(i == nums.size() - 1) {                 return nums.size();             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/035. Search Insert Position.cpp/Solution/searchInsert(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "bool isValidSudoku(vector<vector<char>>& board) {         int book[10];         memset(book, 0, sizeof(int)*10);         //每一列         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[i][j] == '.') continue;                 if(book[board[i][j] - '0'] == 0)                     book[board[i][j] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每一行         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[j][i] == '.') continue;                 if(book[board[j][i] - '0'] == 0)                     book[board[j][i] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每个小九宫格         for(int m = 0; m <= 6; m = m + 3) {             for(int i = 0; i <= 8; i++) {                 if(i % 3 == 0)                      memset(book, 0, sizeof(int) * 10);                 for(int j = 0; j <= 2; j++) {                     if(board[i][j + m] == '.') continue;                     if(book[board[i][j + m] - '0'] == 0)                         book[board[i][j + m] - '0'] = 1;                     else                         return false;                 }             }         }         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValidSudoku_vector_vector_char_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isValidSudoku_vector_vector_char_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/036. Valid Sudoku.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-75;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-40;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValidSudoku_vector_vector_char_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValidSudoku(board);\nAKA_fCall++;AKA_mark(\"Return from: ./13/036. Valid Sudoku.cpp/Solution/isValidSudoku(vector<vector<char>>&)\");\n\n\nvector<vector<char>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/036. Valid Sudoku.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<char>> board;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-75;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=-40;\nboard_element0.push_back(board_element0_element1);\nboard.push_back(board_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isValidSudoku(vector<vector<char>>& board) {         int book[10];         memset(book, 0, sizeof(int)*10);         //每一列         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[i][j] == '.') continue;                 if(book[board[i][j] - '0'] == 0)                     book[board[i][j] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每一行         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[j][i] == '.') continue;                 if(book[board[j][i] - '0'] == 0)                     book[board[j][i] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每个小九宫格         for(int m = 0; m <= 6; m = m + 3) {             for(int i = 0; i <= 8; i++) {                 if(i % 3 == 0)                      memset(book, 0, sizeof(int) * 10);                 for(int j = 0; j <= 2; j++) {                     if(board[i][j + m] == '.') continue;                     if(book[board[i][j + m] - '0'] == 0)                         book[board[i][j + m] - '0'] = 1;                     else                         return false;                 }             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/036. Valid Sudoku.cpp/Solution/isValidSudoku(vector<vector<char>>&)"
    },
    {
        "f": [],
        "fm": "int search(vector<int>& nums, int target) {         int l = 0, r = nums.size() - 1;         while (l <= r) {             int mid = (l + r) / 2;             if (nums[mid] == target) return mid;             if (nums[mid] < nums[l]) {                 if (target > nums[mid] && target <= nums[r])                     l = mid + 1;                 else                     r = mid - 1;             } else if (nums[mid] > nums[r]) {                 if (target >= nums[l] && target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             } else {                 if (target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             }         }         return -1;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_search_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_search_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/33. Search in Rotated Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=701343317;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1888133066;\nnums.push_back(nums_element0);\nint nums_element1=2064357377;\nnums.push_back(nums_element1);\nint nums_element2=-1816860584;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_search_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->search(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./13/33. Search in Rotated Sorted Array.cpp/Solution/search(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/33. Search in Rotated Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=701343317;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1888133066;\nnums.push_back(nums_element0);\nint nums_element1=2064357377;\nnums.push_back(nums_element1);\nint nums_element2=-1816860584;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_search_vector_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_search_vector_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/33. Search in Rotated Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-717924675;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-560612532;\nnums.push_back(nums_element0);\nint nums_element1=-1084071899;\nnums.push_back(nums_element1);\nint nums_element2=-350538462;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_search_vector_int_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->search(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./13/33. Search in Rotated Sorted Array.cpp/Solution/search(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/33. Search in Rotated Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-717924675;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-560612532;\nnums.push_back(nums_element0);\nint nums_element1=-1084071899;\nnums.push_back(nums_element1);\nint nums_element2=-350538462;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_search_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_search_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/33. Search in Rotated Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1020913437;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=882137671;\nnums.push_back(nums_element0);\nint nums_element1=-246308447;\nnums.push_back(nums_element1);\nint nums_element2=963219034;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_search_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->search(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: ./13/33. Search in Rotated Sorted Array.cpp/Solution/search(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/33. Search in Rotated Sorted Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1020913437;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=882137671;\nnums.push_back(nums_element0);\nint nums_element1=-246308447;\nnums.push_back(nums_element1);\nint nums_element2=963219034;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int search(vector<int>& nums, int target) {         int l = 0, r = nums.size() - 1;         while (l <= r) {             int mid = (l + r) / 2;             if (nums[mid] == target) return mid;             if (nums[mid] < nums[l]) {                 if (target > nums[mid] && target <= nums[r])                     l = mid + 1;                 else                     r = mid - 1;             } else if (nums[mid] > nums[r]) {                 if (target >= nums[l] && target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             } else {                 if (target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             }         }         return -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/33. Search in Rotated Sorted Array.cpp/Solution/search(vector<int>&,int)"
    }
]