[
    {
        "f": [],
        "fm": "string reverseWords(string s) {         string result = \"\";         stack<char> word;         int flag = 0;         for (int i = 0; i < s.length(); i++) {             if (s[i] != ' ')                  word.push(s[i]);             if (s[i] == ' ' || i == s.length() - 1) {                 if (flag == 1) result += \" \";                 while (!word.empty()) {                     result += word.top();                     word.pop();                     flag = 1;                 }             }         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseWords_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_reverseWords_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/557. Reverse Words in a String III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName513441 = new char[2];akaRandomName513441[0] = 15;akaRandomName513441[1] = '\\0';string s=akaRandomName513441;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseWords_string_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseWords(s);\nAKA_fCall++;AKA_mark(\"Return from: ./20/557. Reverse Words in a String III.cpp/Solution/reverseWords(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/557. Reverse Words in a String III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName930366 = new char[2];akaRandomName930366[0] = 15;akaRandomName930366[1] = '\\0';string s=akaRandomName930366;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string reverseWords(string s) {         string result = \"\";         stack<char> word;         int flag = 0;         for (int i = 0; i < s.length(); i++) {             if (s[i] != ' ')                  word.push(s[i]);             if (s[i] == ' ' || i == s.length() - 1) {                 if (flag == 1) result += \" \";                 while (!word.empty()) {                     result += word.top();                     word.pop();                     flag = 1;                 }             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/557. Reverse Words in a String III.cpp/Solution/reverseWords(string)"
    },
    {
        "f": [],
        "fm": "int arrayPairSum(vector<int>& nums) {         sort(nums.begin(), nums.end());         int ans = 0;         for (int i = 0; i < nums.size(); i+=2)             ans += nums[i];         return ans;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_arrayPairSum_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_arrayPairSum_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/561. Array Partition I.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1212491992;\nnums.push_back(nums_element0);\nint nums_element1=-1267849716;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_arrayPairSum_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->arrayPairSum(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/561. Array Partition I.cpp/Solution/arrayPairSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/561. Array Partition I.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1212491992;\nnums.push_back(nums_element0);\nint nums_element1=-1267849716;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int arrayPairSum(vector<int>& nums) {         sort(nums.begin(), nums.end());         int ans = 0;         for (int i = 0; i < nums.size(); i+=2)             ans += nums[i];         return ans;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/561. Array Partition I.cpp/Solution/arrayPairSum(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {         int n = nums.size(), m = nums[0].size();         if (n * m != r * c) return nums;         vector<vector<int>> ans(r, vector<int>(c));         for (int i = 0; i < r * c; i++) ans[i/c][i%c] = nums[i/m][i%m];         return ans;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_matrixReshape_vector_vector_int_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_matrixReshape_vector_vector_int_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/566. Reshape the Matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> nums;\n\n\nint r=9;\n\n\nint c=8;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nvector<int> nums_element0;\nint nums_element0_element0=1310295499;\nnums_element0.push_back(nums_element0_element0);\nint nums_element0_element1=-93721215;\nnums_element0.push_back(nums_element0_element1);\nint nums_element0_element2=1863556189;\nnums_element0.push_back(nums_element0_element2);\nnums.push_back(nums_element0);\nvector<int> nums_element1;\nint nums_element1_element0=-1181740945;\nnums_element1.push_back(nums_element1_element0);\nnums.push_back(nums_element1);\nvector<int> nums_element2;\nint nums_element2_element0=447119723;\nnums_element2.push_back(nums_element2_element0);\nnums.push_back(nums_element2);\n/* NormalNumberDataNode r */\n/* NormalNumberDataNode c */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_matrixReshape_vector_vector_int_int_int_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->matrixReshape(nums,r,c);\nAKA_fCall++;AKA_mark(\"Return from: ./20/566. Reshape the Matrix.cpp/Solution/matrixReshape(vector<vector<int>>&,int,int)\");\n\n\nvector<vector<int>> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/566. Reshape the Matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> nums;\n\n\nint r=9;\n\n\nint c=8;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nvector<int> nums_element0;\nint nums_element0_element0=1310295499;\nnums_element0.push_back(nums_element0_element0);\nint nums_element0_element1=-93721215;\nnums_element0.push_back(nums_element0_element1);\nint nums_element0_element2=1863556189;\nnums_element0.push_back(nums_element0_element2);\nnums.push_back(nums_element0);\nvector<int> nums_element1;\nint nums_element1_element0=-1181740945;\nnums_element1.push_back(nums_element1_element0);\nnums.push_back(nums_element1);\nvector<int> nums_element2;\nint nums_element2_element0=447119723;\nnums_element2.push_back(nums_element2_element0);\nnums.push_back(nums_element2);\n/* NormalNumberDataNode r */\n/* NormalNumberDataNode c */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_matrixReshape_vector_vector_int_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_matrixReshape_vector_vector_int_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/566. Reshape the Matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> nums;\n\n\nint r=3;\n\n\nint c=2;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nvector<int> nums_element0;\nint nums_element0_element0=1271096881;\nnums_element0.push_back(nums_element0_element0);\nint nums_element0_element1=1196464084;\nnums_element0.push_back(nums_element0_element1);\nnums.push_back(nums_element0);\nvector<int> nums_element1;\nint nums_element1_element0=494804501;\nnums_element1.push_back(nums_element1_element0);\nint nums_element1_element1=-742825624;\nnums_element1.push_back(nums_element1_element1);\nnums.push_back(nums_element1);\nvector<int> nums_element2;\nint nums_element2_element0=1124048552;\nnums_element2.push_back(nums_element2_element0);\nint nums_element2_element1=1974990664;\nnums_element2.push_back(nums_element2_element1);\nint nums_element2_element2=-1305340513;\nnums_element2.push_back(nums_element2_element2);\nnums.push_back(nums_element2);\n/* NormalNumberDataNode r */\n/* NormalNumberDataNode c */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_matrixReshape_vector_vector_int_int_int_random_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->matrixReshape(nums,r,c);\nAKA_fCall++;AKA_mark(\"Return from: ./20/566. Reshape the Matrix.cpp/Solution/matrixReshape(vector<vector<int>>&,int,int)\");\n\n\nvector<vector<int>> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/566. Reshape the Matrix.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> nums;\n\n\nint r=3;\n\n\nint c=2;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nvector<int> nums_element0;\nint nums_element0_element0=1271096881;\nnums_element0.push_back(nums_element0_element0);\nint nums_element0_element1=1196464084;\nnums_element0.push_back(nums_element0_element1);\nnums.push_back(nums_element0);\nvector<int> nums_element1;\nint nums_element1_element0=494804501;\nnums_element1.push_back(nums_element1_element0);\nint nums_element1_element1=-742825624;\nnums_element1.push_back(nums_element1_element1);\nnums.push_back(nums_element1);\nvector<int> nums_element2;\nint nums_element2_element0=1124048552;\nnums_element2.push_back(nums_element2_element0);\nint nums_element2_element1=1974990664;\nnums_element2.push_back(nums_element2_element1);\nint nums_element2_element2=-1305340513;\nnums_element2.push_back(nums_element2_element2);\nnums.push_back(nums_element2);\n/* NormalNumberDataNode r */\n/* NormalNumberDataNode c */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> matrixReshape(vector<vector<int>>& nums, int r, int c) {         int n = nums.size(), m = nums[0].size();         if (n * m != r * c) return nums;         vector<vector<int>> ans(r, vector<int>(c));         for (int i = 0; i < r * c; i++) ans[i/c][i%c] = nums[i/m][i%m];         return ans;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/566. Reshape the Matrix.cpp/Solution/matrixReshape(vector<vector<int>>&,int,int)"
    },
    {
        "f": [],
        "fm": "bool isSubtree(TreeNode* s, TreeNode* t) {         if (s == NULL && t == NULL) return true;         if (s == NULL || t == NULL) return false;         if (s->val == t->val && isSame(s, t)) return true;         return isSubtree(s->left, t) || isSubtree(s->right, t);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSubtree_TreeNodemul_TreeNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isSubtree_TreeNodemul_TreeNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/572. Subtree of Another Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_s;\n\n\n/* SubStructDataNode s */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_x=-500905934;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0 = new ::TreeNode(s0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0).val=133553190;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_s_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_left0_x=-152456666;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_left_0 = new ::TreeNode(s0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_left_0).val=-74670015;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_left_0).right;\nAKA_VECTOR_INIT_s_0_DOT_left.push_back(AKA_VECTOR_INIT_s_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_left1_x=1443798441;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_left_1 = new ::TreeNode(s0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_left_1).val=-310129306;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_left_1).right;\nAKA_VECTOR_INIT_s_0_DOT_left.push_back(AKA_VECTOR_INIT_s_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_left2_x=-1635968778;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_left_2 = new ::TreeNode(s0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_left_2).val=-1811050985;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_left_2).right;\nAKA_VECTOR_INIT_s_0_DOT_left.push_back(AKA_VECTOR_INIT_s_0_DOT_left_2);\n(*AKA_VECTOR_INIT_s_0).left = AKA_VECTOR_INIT_s_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_s_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_right0_x=-110799745;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_right_0 = new ::TreeNode(s0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_right_0).val=-571273973;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_right_0).right;\nAKA_VECTOR_INIT_s_0_DOT_right.push_back(AKA_VECTOR_INIT_s_0_DOT_right_0);\n(*AKA_VECTOR_INIT_s_0).right = AKA_VECTOR_INIT_s_0_DOT_right[0];\n\nAKA_VECTOR_INIT_s.push_back(AKA_VECTOR_INIT_s_0);\n\nTreeNode* s = AKA_VECTOR_INIT_s[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t;\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_x=-96856127;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0 = new ::TreeNode(t0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0).val=452106434;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left0_x=1397898718;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_0 = new ::TreeNode(t0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).val=-600186485;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left1_x=265606715;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_1 = new ::TreeNode(t0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).val=-71756070;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_1);\n(*AKA_VECTOR_INIT_t_0).left = AKA_VECTOR_INIT_t_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_right0_x=1833987855;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_right_0 = new ::TreeNode(t0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_right_0).val=-1104071048;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_right_0).right;\nAKA_VECTOR_INIT_t_0_DOT_right.push_back(AKA_VECTOR_INIT_t_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_right1_x=-1774401018;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_right_1 = new ::TreeNode(t0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_right_1).val=1669408617;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_right_1).right;\nAKA_VECTOR_INIT_t_0_DOT_right.push_back(AKA_VECTOR_INIT_t_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_right2_x=-1765325551;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_right_2 = new ::TreeNode(t0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_right_2).val=184034590;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_right_2).right;\nAKA_VECTOR_INIT_t_0_DOT_right.push_back(AKA_VECTOR_INIT_t_0_DOT_right_2);\n(*AKA_VECTOR_INIT_t_0).right = AKA_VECTOR_INIT_t_0_DOT_right[0];\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_0);\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t1_x=-182294984;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_1/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_1 = new ::TreeNode(t1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_1).val=-2091433013;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t1_right0_x=-1794669652;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_1/t/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_1_DOT_right_0 = new ::TreeNode(t1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_1_DOT_right_0).val=-1609750545;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_1_DOT_right_0).right;\nAKA_VECTOR_INIT_t_1_DOT_right.push_back(AKA_VECTOR_INIT_t_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t1_right1_x=1382254817;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_1/t/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_1_DOT_right_1 = new ::TreeNode(t1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_1_DOT_right_1).val=37233906;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_1_DOT_right_1).right;\nAKA_VECTOR_INIT_t_1_DOT_right.push_back(AKA_VECTOR_INIT_t_1_DOT_right_1);\n(*AKA_VECTOR_INIT_t_1).right = AKA_VECTOR_INIT_t_1_DOT_right[0];\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_1);\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t2_x=-1826323938;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_2/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_2 = new ::TreeNode(t2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_2).val=1720426855;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_2).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t2_right0_x=-258578624;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_2/t/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_2_DOT_right_0 = new ::TreeNode(t2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_2_DOT_right_0).val=1852424020;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_2_DOT_right_0).right;\nAKA_VECTOR_INIT_t_2_DOT_right.push_back(AKA_VECTOR_INIT_t_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t2_right1_x=1404014803;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_2/t/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_2_DOT_right_1 = new ::TreeNode(t2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_2_DOT_right_1).val=1440726062;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_2_DOT_right_1).right;\nAKA_VECTOR_INIT_t_2_DOT_right.push_back(AKA_VECTOR_INIT_t_2_DOT_right_1);\n(*AKA_VECTOR_INIT_t_2).right = AKA_VECTOR_INIT_t_2_DOT_right[0];\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_2);\n\nTreeNode* t = AKA_VECTOR_INIT_t[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode s */\n/* PointerStructureDataNode t */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSubtree_TreeNodemul_TreeNodemul_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSubtree(s,t);\nAKA_fCall++;AKA_mark(\"Return from: ./20/572. Subtree of Another Tree.cpp/Solution/isSubtree(TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/572. Subtree of Another Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_s;\n\n\n/* SubStructDataNode s */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_x=-500905934;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0 = new ::TreeNode(s0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0).val=133553190;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_s_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_left0_x=-152456666;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_left_0 = new ::TreeNode(s0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_left_0).val=-74670015;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_left_0).right;\nAKA_VECTOR_INIT_s_0_DOT_left.push_back(AKA_VECTOR_INIT_s_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_left1_x=1443798441;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_left_1 = new ::TreeNode(s0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_left_1).val=-310129306;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_left_1).right;\nAKA_VECTOR_INIT_s_0_DOT_left.push_back(AKA_VECTOR_INIT_s_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_left2_x=-1635968778;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_left_2 = new ::TreeNode(s0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_left_2).val=-1811050985;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_left_2).right;\nAKA_VECTOR_INIT_s_0_DOT_left.push_back(AKA_VECTOR_INIT_s_0_DOT_left_2);\n(*AKA_VECTOR_INIT_s_0).left = AKA_VECTOR_INIT_s_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_s_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint s0_right0_x=-110799745;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/s/AKA_VECTOR_INIT_s_0/s/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_s_0_DOT_right_0 = new ::TreeNode(s0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_s_0_DOT_right_0).val=-571273973;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_s_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_s_0_DOT_right_0).right;\nAKA_VECTOR_INIT_s_0_DOT_right.push_back(AKA_VECTOR_INIT_s_0_DOT_right_0);\n(*AKA_VECTOR_INIT_s_0).right = AKA_VECTOR_INIT_s_0_DOT_right[0];\n\nAKA_VECTOR_INIT_s.push_back(AKA_VECTOR_INIT_s_0);\n\nTreeNode* s = AKA_VECTOR_INIT_s[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t;\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_x=-96856127;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0 = new ::TreeNode(t0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0).val=452106434;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left0_x=1397898718;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_0 = new ::TreeNode(t0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).val=-600186485;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left1_x=265606715;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_1 = new ::TreeNode(t0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).val=-71756070;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_1);\n(*AKA_VECTOR_INIT_t_0).left = AKA_VECTOR_INIT_t_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_right0_x=1833987855;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_right_0 = new ::TreeNode(t0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_right_0).val=-1104071048;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_right_0).right;\nAKA_VECTOR_INIT_t_0_DOT_right.push_back(AKA_VECTOR_INIT_t_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_right1_x=-1774401018;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_right_1 = new ::TreeNode(t0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_right_1).val=1669408617;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_right_1).right;\nAKA_VECTOR_INIT_t_0_DOT_right.push_back(AKA_VECTOR_INIT_t_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_right2_x=-1765325551;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_right_2 = new ::TreeNode(t0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_right_2).val=184034590;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_right_2).right;\nAKA_VECTOR_INIT_t_0_DOT_right.push_back(AKA_VECTOR_INIT_t_0_DOT_right_2);\n(*AKA_VECTOR_INIT_t_0).right = AKA_VECTOR_INIT_t_0_DOT_right[0];\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_0);\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t1_x=-182294984;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_1/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_1 = new ::TreeNode(t1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_1).val=-2091433013;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t1_right0_x=-1794669652;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_1/t/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_1_DOT_right_0 = new ::TreeNode(t1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_1_DOT_right_0).val=-1609750545;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_1_DOT_right_0).right;\nAKA_VECTOR_INIT_t_1_DOT_right.push_back(AKA_VECTOR_INIT_t_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t1_right1_x=1382254817;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_1/t/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_1_DOT_right_1 = new ::TreeNode(t1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_1_DOT_right_1).val=37233906;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_1_DOT_right_1).right;\nAKA_VECTOR_INIT_t_1_DOT_right.push_back(AKA_VECTOR_INIT_t_1_DOT_right_1);\n(*AKA_VECTOR_INIT_t_1).right = AKA_VECTOR_INIT_t_1_DOT_right[0];\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_1);\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t2_x=-1826323938;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_2/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_2 = new ::TreeNode(t2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_2).val=1720426855;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_2).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t2_right0_x=-258578624;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_2/t/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_2_DOT_right_0 = new ::TreeNode(t2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_2_DOT_right_0).val=1852424020;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_2_DOT_right_0).right;\nAKA_VECTOR_INIT_t_2_DOT_right.push_back(AKA_VECTOR_INIT_t_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t2_right1_x=1404014803;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSubtree(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_2/t/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_2_DOT_right_1 = new ::TreeNode(t2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_2_DOT_right_1).val=1440726062;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_2_DOT_right_1).right;\nAKA_VECTOR_INIT_t_2_DOT_right.push_back(AKA_VECTOR_INIT_t_2_DOT_right_1);\n(*AKA_VECTOR_INIT_t_2).right = AKA_VECTOR_INIT_t_2_DOT_right[0];\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_2);\n\nTreeNode* t = AKA_VECTOR_INIT_t[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode s */\n/* PointerStructureDataNode t */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isSubtree(TreeNode* s, TreeNode* t) {         if (s == NULL && t == NULL) return true;         if (s == NULL || t == NULL) return false;         if (s->val == t->val && isSame(s, t)) return true;         return isSubtree(s->left, t) || isSubtree(s->right, t);     } private:     bool isSame(TreeNode* r, TreeNode* t) {         if (r == NULL && t == NULL) return true;         if (r == NULL || t == NULL || r->val != t->val) return false;         return (isSame(r->left, t->left) && isSame(r->right, t->right));     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/572. Subtree of Another Tree.cpp/Solution/isSubtree(TreeNode*,TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool isSame(TreeNode* r, TreeNode* t) {         if (r == NULL && t == NULL) return true;         if (r == NULL || t == NULL || r->val != t->val) return false;         return (isSame(r->left, t->left) && isSame(r->right, t->right));     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSame_TreeNodemul_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isSame_TreeNodemul_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/572. Subtree of Another Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* r;\nTreeNode* t;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode r */\n/* PointerStructureDataNode t */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSame_TreeNodemul_TreeNodemul_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSame(r,t);\nAKA_fCall++;AKA_mark(\"Return from: ./20/572. Subtree of Another Tree.cpp/Solution/isSame(TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/572. Subtree of Another Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* r;\nTreeNode* t;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode r */\n/* PointerStructureDataNode t */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSame_TreeNodemul_TreeNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_isSame_TreeNodemul_TreeNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/572. Subtree of Another Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r;\n\n\n/* SubStructDataNode r */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_x=-111364565;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0 = new ::TreeNode(r0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0).val=1771669488;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_right0_x=220601076;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0_DOT_right_0 = new ::TreeNode(r0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0_DOT_right_0).val=-135788519;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_0_DOT_right_0).right;\nAKA_VECTOR_INIT_r_0_DOT_right.push_back(AKA_VECTOR_INIT_r_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_right1_x=565569218;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0_DOT_right_1 = new ::TreeNode(r0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0_DOT_right_1).val=190606751;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_0_DOT_right_1).right;\nAKA_VECTOR_INIT_r_0_DOT_right.push_back(AKA_VECTOR_INIT_r_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_right2_x=-1482045112;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0_DOT_right_2 = new ::TreeNode(r0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0_DOT_right_2).val=-1588703957;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_0_DOT_right_2).right;\nAKA_VECTOR_INIT_r_0_DOT_right.push_back(AKA_VECTOR_INIT_r_0_DOT_right_2);\n(*AKA_VECTOR_INIT_r_0).right = AKA_VECTOR_INIT_r_0_DOT_right[0];\n\nAKA_VECTOR_INIT_r.push_back(AKA_VECTOR_INIT_r_0);\n\n\n/* SubStructDataNode r */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r1_x=91564733;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_1/r/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_1 = new ::TreeNode(r1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_1).val=357012071;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r1_left0_x=-1519563631;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_1/r/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_1_DOT_left_0 = new ::TreeNode(r1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_1_DOT_left_0).val=-145965274;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_1_DOT_left_0).right;\nAKA_VECTOR_INIT_r_1_DOT_left.push_back(AKA_VECTOR_INIT_r_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r1_left1_x=-864353331;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_1/r/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_1_DOT_left_1 = new ::TreeNode(r1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_1_DOT_left_1).val=100676819;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_1_DOT_left_1).right;\nAKA_VECTOR_INIT_r_1_DOT_left.push_back(AKA_VECTOR_INIT_r_1_DOT_left_1);\n(*AKA_VECTOR_INIT_r_1).left = AKA_VECTOR_INIT_r_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_1).right;\n\nAKA_VECTOR_INIT_r.push_back(AKA_VECTOR_INIT_r_1);\n\n\n/* SubStructDataNode r */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_x=-903914217;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2 = new ::TreeNode(r2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2).val=-1440876940;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_left0_x=-329829439;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2_DOT_left_0 = new ::TreeNode(r2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2_DOT_left_0).val=-344545741;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2_DOT_left_0).right;\nAKA_VECTOR_INIT_r_2_DOT_left.push_back(AKA_VECTOR_INIT_r_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_left1_x=-927165750;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2_DOT_left_1 = new ::TreeNode(r2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2_DOT_left_1).val=1604648672;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2_DOT_left_1).right;\nAKA_VECTOR_INIT_r_2_DOT_left.push_back(AKA_VECTOR_INIT_r_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_left2_x=1529801953;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2_DOT_left_2 = new ::TreeNode(r2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2_DOT_left_2).val=-1269342115;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2_DOT_left_2).right;\nAKA_VECTOR_INIT_r_2_DOT_left.push_back(AKA_VECTOR_INIT_r_2_DOT_left_2);\n(*AKA_VECTOR_INIT_r_2).left = AKA_VECTOR_INIT_r_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2).right;\n\nAKA_VECTOR_INIT_r.push_back(AKA_VECTOR_INIT_r_2);\n\nTreeNode* r = AKA_VECTOR_INIT_r[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t;\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_x=-1944888247;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0 = new ::TreeNode(t0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0).val=1281968525;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left0_x=1583186818;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_0 = new ::TreeNode(t0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).val=1618247323;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left1_x=-1874512745;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_1 = new ::TreeNode(t0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).val=991583323;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_1);\n(*AKA_VECTOR_INIT_t_0).left = AKA_VECTOR_INIT_t_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0).right;\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_0);\n\nTreeNode* t = AKA_VECTOR_INIT_t[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode r */\n/* PointerStructureDataNode t */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSame_TreeNodemul_TreeNodemul_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSame(r,t);\nAKA_fCall++;AKA_mark(\"Return from: ./20/572. Subtree of Another Tree.cpp/Solution/isSame(TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/572. Subtree of Another Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r;\n\n\n/* SubStructDataNode r */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_x=-111364565;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0 = new ::TreeNode(r0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0).val=1771669488;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_right0_x=220601076;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0_DOT_right_0 = new ::TreeNode(r0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0_DOT_right_0).val=-135788519;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_0_DOT_right_0).right;\nAKA_VECTOR_INIT_r_0_DOT_right.push_back(AKA_VECTOR_INIT_r_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_right1_x=565569218;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0_DOT_right_1 = new ::TreeNode(r0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0_DOT_right_1).val=190606751;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_0_DOT_right_1).right;\nAKA_VECTOR_INIT_r_0_DOT_right.push_back(AKA_VECTOR_INIT_r_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r0_right2_x=-1482045112;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_0/r/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_0_DOT_right_2 = new ::TreeNode(r0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_0_DOT_right_2).val=-1588703957;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_0_DOT_right_2).right;\nAKA_VECTOR_INIT_r_0_DOT_right.push_back(AKA_VECTOR_INIT_r_0_DOT_right_2);\n(*AKA_VECTOR_INIT_r_0).right = AKA_VECTOR_INIT_r_0_DOT_right[0];\n\nAKA_VECTOR_INIT_r.push_back(AKA_VECTOR_INIT_r_0);\n\n\n/* SubStructDataNode r */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r1_x=91564733;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_1/r/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_1 = new ::TreeNode(r1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_1).val=357012071;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r1_left0_x=-1519563631;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_1/r/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_1_DOT_left_0 = new ::TreeNode(r1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_1_DOT_left_0).val=-145965274;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_1_DOT_left_0).right;\nAKA_VECTOR_INIT_r_1_DOT_left.push_back(AKA_VECTOR_INIT_r_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r1_left1_x=-864353331;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_1/r/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_1_DOT_left_1 = new ::TreeNode(r1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_1_DOT_left_1).val=100676819;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_1_DOT_left_1).right;\nAKA_VECTOR_INIT_r_1_DOT_left.push_back(AKA_VECTOR_INIT_r_1_DOT_left_1);\n(*AKA_VECTOR_INIT_r_1).left = AKA_VECTOR_INIT_r_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_1).right;\n\nAKA_VECTOR_INIT_r.push_back(AKA_VECTOR_INIT_r_1);\n\n\n/* SubStructDataNode r */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_x=-903914217;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2 = new ::TreeNode(r2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2).val=-1440876940;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_r_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_left0_x=-329829439;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2_DOT_left_0 = new ::TreeNode(r2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2_DOT_left_0).val=-344545741;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2_DOT_left_0).right;\nAKA_VECTOR_INIT_r_2_DOT_left.push_back(AKA_VECTOR_INIT_r_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_left1_x=-927165750;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2_DOT_left_1 = new ::TreeNode(r2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2_DOT_left_1).val=1604648672;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2_DOT_left_1).right;\nAKA_VECTOR_INIT_r_2_DOT_left.push_back(AKA_VECTOR_INIT_r_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint r2_left2_x=1529801953;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/r/AKA_VECTOR_INIT_r_2/r/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r_2_DOT_left_2 = new ::TreeNode(r2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_r_2_DOT_left_2).val=-1269342115;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_r_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2_DOT_left_2).right;\nAKA_VECTOR_INIT_r_2_DOT_left.push_back(AKA_VECTOR_INIT_r_2_DOT_left_2);\n(*AKA_VECTOR_INIT_r_2).left = AKA_VECTOR_INIT_r_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_r_2).right;\n\nAKA_VECTOR_INIT_r.push_back(AKA_VECTOR_INIT_r_2);\n\nTreeNode* r = AKA_VECTOR_INIT_r[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t;\n\n\n/* SubStructDataNode t */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_x=-1944888247;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0 = new ::TreeNode(t0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0).val=1281968525;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_t_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left0_x=1583186818;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_0 = new ::TreeNode(t0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).val=1618247323;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_0).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint t0_left1_x=-1874512745;\nAKA_mark(\"Calling: ./20/572. Subtree of Another Tree.cpp/TreeNode/TreeNode(int)|ROOT/572. Subtree of Another Tree.cpp/isSame(TreeNode*,TreeNode*)/t/AKA_VECTOR_INIT_t_0/t/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_t_0_DOT_left_1 = new ::TreeNode(t0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).val=991583323;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0_DOT_left_1).right;\nAKA_VECTOR_INIT_t_0_DOT_left.push_back(AKA_VECTOR_INIT_t_0_DOT_left_1);\n(*AKA_VECTOR_INIT_t_0).left = AKA_VECTOR_INIT_t_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_t_0).right;\n\nAKA_VECTOR_INIT_t.push_back(AKA_VECTOR_INIT_t_0);\n\nTreeNode* t = AKA_VECTOR_INIT_t[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode r */\n/* PointerStructureDataNode t */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isSubtree(TreeNode* s, TreeNode* t) {         if (s == NULL && t == NULL) return true;         if (s == NULL || t == NULL) return false;         if (s->val == t->val && isSame(s, t)) return true;         return isSubtree(s->left, t) || isSubtree(s->right, t);     } private:     bool isSame(TreeNode* r, TreeNode* t) {         if (r == NULL && t == NULL) return true;         if (r == NULL || t == NULL || r->val != t->val) return false;         return (isSame(r->left, t->left) && isSame(r->right, t->right));     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/572. Subtree of Another Tree.cpp/Solution/isSame(TreeNode*,TreeNode*)"
    },
    {
        "f": [],
        "fm": "int distributeCandies(vector<int>& candies) {         unordered_set<int> s;         for (int i = 0; i < candies.size(); i++) s.insert(candies[i]);         return min(s.size(), candies.size() / 2);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_distributeCandies_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_distributeCandies_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/575. Distribute Candies.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candies;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candies */\nint candies_element0=-1935072408;\ncandies.push_back(candies_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_distributeCandies_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->distributeCandies(candies);\nAKA_fCall++;AKA_mark(\"Return from: ./20/575. Distribute Candies.cpp/Solution/distributeCandies(vector<int>&)\");\n\n\nvector<int> EXPECTED_candies;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/575. Distribute Candies.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candies;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candies */\nint candies_element0=-1935072408;\ncandies.push_back(candies_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int distributeCandies(vector<int>& candies) {         unordered_set<int> s;         for (int i = 0; i < candies.size(); i++) s.insert(candies[i]);         return min(s.size(), candies.size() / 2);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/575. Distribute Candies.cpp/Solution/distributeCandies(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int findUnsortedSubarray(vector<int>& nums) {         vector<int> v(nums);         sort(v.begin(), v.end());         int i = 0, j = nums.size() - 1;         while (i < nums.size() && nums[i] == v[i]) i++;         while (j >= 0 && nums[j] == v[j]) j--;         return i <= j ? j - i + 1 : 0;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findUnsortedSubarray_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_findUnsortedSubarray_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/581. Shortest Unsorted Continuous Subarray.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-638832251;\nnums.push_back(nums_element0);\nint nums_element1=698658978;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findUnsortedSubarray_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findUnsortedSubarray(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/581. Shortest Unsorted Continuous Subarray.cpp/Solution/findUnsortedSubarray(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/581. Shortest Unsorted Continuous Subarray.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-638832251;\nnums.push_back(nums_element0);\nint nums_element1=698658978;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_findUnsortedSubarray_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_findUnsortedSubarray_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/581. Shortest Unsorted Continuous Subarray.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=68223323;\nnums.push_back(nums_element0);\nint nums_element1=-318044039;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findUnsortedSubarray_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findUnsortedSubarray(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/581. Shortest Unsorted Continuous Subarray.cpp/Solution/findUnsortedSubarray(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/581. Shortest Unsorted Continuous Subarray.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=68223323;\nnums.push_back(nums_element0);\nint nums_element1=-318044039;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findUnsortedSubarray(vector<int>& nums) {         vector<int> v(nums);         sort(v.begin(), v.end());         int i = 0, j = nums.size() - 1;         while (i < nums.size() && nums[i] == v[i]) i++;         while (j >= 0 && nums[j] == v[j]) j--;         return i <= j ? j - i + 1 : 0;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/581. Shortest Unsorted Continuous Subarray.cpp/Solution/findUnsortedSubarray(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {         vector<string> ans;         int minSum = 2000;         for (int i = 0; i < list1.size(); i++) {             for (int j = 0; j < list2.size(); j++) {                 if (list1[i] == list2[j] && minSum > i + j) {                     ans.clear();                     ans.push_back(list1[i]);                     minSum = i + j;                 } else if (list1[i] == list2[j] && minSum == i + j) {                     ans.push_back(list1[i]);                 }             }         }         return ans;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findRestaurant_vector_string_vector_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_findRestaurant_vector_string_vector_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/599. Minimum Index Sum of Two Lists.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> list1;\nvector<string> list2;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode list1 */\nchar* akaRandomName394305 = new char[2];akaRandomName394305[0] = 43;akaRandomName394305[1] = '\\0';string list1_element0=akaRandomName394305;\nlist1.push_back(list1_element0);\nchar* akaRandomName688100 = new char[2];akaRandomName688100[0] = -70;akaRandomName688100[1] = '\\0';string list1_element1=akaRandomName688100;\nlist1.push_back(list1_element1);\nchar* akaRandomName315828 = new char[2];akaRandomName315828[0] = -116;akaRandomName315828[1] = '\\0';string list1_element2=akaRandomName315828;\nlist1.push_back(list1_element2);\n/* VectorDataNode list2 */\nchar* akaRandomName664932 = new char[2];akaRandomName664932[0] = 57;akaRandomName664932[1] = '\\0';string list2_element0=akaRandomName664932;\nlist2.push_back(list2_element0);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findRestaurant_vector_string_vector_string_random_3\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findRestaurant(list1,list2);\nAKA_fCall++;AKA_mark(\"Return from: ./20/599. Minimum Index Sum of Two Lists.cpp/Solution/findRestaurant(vector<string>&,vector<string>&)\");\n\n\nvector<string> EXPECTED_list1;\n\nvector<string> EXPECTED_list2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/599. Minimum Index Sum of Two Lists.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> list1;\nvector<string> list2;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode list1 */\nchar* akaRandomName59731 = new char[2];akaRandomName59731[0] = 43;akaRandomName59731[1] = '\\0';string list1_element0=akaRandomName59731;\nlist1.push_back(list1_element0);\nchar* akaRandomName477159 = new char[2];akaRandomName477159[0] = -70;akaRandomName477159[1] = '\\0';string list1_element1=akaRandomName477159;\nlist1.push_back(list1_element1);\nchar* akaRandomName182991 = new char[2];akaRandomName182991[0] = -116;akaRandomName182991[1] = '\\0';string list1_element2=akaRandomName182991;\nlist1.push_back(list1_element2);\n/* VectorDataNode list2 */\nchar* akaRandomName210969 = new char[2];akaRandomName210969[0] = 57;akaRandomName210969[1] = '\\0';string list2_element0=akaRandomName210969;\nlist2.push_back(list2_element0);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {         vector<string> ans;         int minSum = 2000;         for (int i = 0; i < list1.size(); i++) {             for (int j = 0; j < list2.size(); j++) {                 if (list1[i] == list2[j] && minSum > i + j) {                     ans.clear();                     ans.push_back(list1[i]);                     minSum = i + j;                 } else if (list1[i] == list2[j] && minSum == i + j) {                     ans.push_back(list1[i]);                 }             }         }         return ans;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/599. Minimum Index Sum of Two Lists.cpp/Solution/findRestaurant(vector<string>&,vector<string>&)"
    },
    {
        "f": [],
        "fm": "int maximumProduct(vector<int>& nums) {         sort(nums.begin(), nums.end());         int n = nums.size();         return max(nums[0] * nums[1] * nums[n-1], nums[n-3] * nums[n-2] * nums[n-1]);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maximumProduct_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maximumProduct_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/628. Maximum Product of Three Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1696998157;\nnums.push_back(nums_element0);\nint nums_element1=2081629205;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumProduct_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumProduct(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/628. Maximum Product of Three Numbers.cpp/Solution/maximumProduct(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/628. Maximum Product of Three Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1696998157;\nnums.push_back(nums_element0);\nint nums_element1=2081629205;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maximumProduct(vector<int>& nums) {         sort(nums.begin(), nums.end());         int n = nums.size();         return max(nums[0] * nums[1] * nums[n-1], nums[n-3] * nums[n-2] * nums[n-1]);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/628. Maximum Product of Three Numbers.cpp/Solution/maximumProduct(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool judgeSquareSum(int c) {         int t = sqrt(c);         for (int i = t; i >= 0; i--) {             for (int j = t; j >= 0; j--) {                 if (i * i + j * j == c) return true;                 if (i * i + j * j < c) break;             }         }         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_judgeSquareSum_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_judgeSquareSum_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/633. Sum of Square Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint c=-1269833534;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode c */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_judgeSquareSum_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->judgeSquareSum(c);\nAKA_fCall++;AKA_mark(\"Return from: ./20/633. Sum of Square Numbers.cpp/Solution/judgeSquareSum(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/633. Sum of Square Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint c=-1269833534;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode c */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_judgeSquareSum_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_judgeSquareSum_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/633. Sum of Square Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint c=-1344700739;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode c */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_judgeSquareSum_int_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->judgeSquareSum(c);\nAKA_fCall++;AKA_mark(\"Return from: ./20/633. Sum of Square Numbers.cpp/Solution/judgeSquareSum(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/633. Sum of Square Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint c=-1344700739;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode c */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool judgeSquareSum(int c) {         int t = sqrt(c);         for (int i = t; i >= 0; i--) {             for (int j = t; j >= 0; j--) {                 if (i * i + j * j == c) return true;                 if (i * i + j * j < c) break;             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/20/633. Sum of Square Numbers.cpp/Solution/judgeSquareSum(int)"
    }
]