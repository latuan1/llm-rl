[
    {
        "f": [
            "bool flag = false;",
            "vector<vector<bool>> visit;",
            "vector<vector<char>> board;",
            "string word = \"\";",
            "int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};",
            "int m;",
            "int n;"
        ],
        "fm": "bool exist(vector<vector<char>>& board, string word) {         if (board.size() == 0) return word == \"\";         m = board.size(), n = board[0].size();         this->word = word;         this->board = board;         visit.resize(m, vector<bool>(n));         for (int j = 0; j < m; j++) {             for (int k = 0; k < n; k++) {                 if (board[j][k] == word[0]) {                     visit[j][k] = true;                     dfs(j, k, 0);                     visit[j][k] = false;                 }             }         }         return flag;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_exist_vector_vector_char_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_exist_vector_vector_char_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/079. Word Search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode flag */\n/* flag : null value -> no code */\n/* VectorDataNode visit */\n/* VectorDataNode board */\n/* NormalStringDataNode word */\nAKA_INSTANCE___Solution->word=\"\";\n/* MultipleDimensionNumberDataNode dir */\n/* NormalNumberDataNode dir[0][0] */\n/* dir[0][0] : null value -> no code */\n/* NormalNumberDataNode dir[0][1] */\n/* dir[0][1] : null value -> no code */\n/* NormalNumberDataNode dir[1][0] */\n/* dir[1][0] : null value -> no code */\n/* NormalNumberDataNode dir[1][1] */\n/* dir[1][1] : null value -> no code */\n/* NormalNumberDataNode dir[2][0] */\n/* dir[2][0] : null value -> no code */\n/* NormalNumberDataNode dir[2][1] */\n/* dir[2][1] : null value -> no code */\n/* NormalNumberDataNode dir[3][0] */\n/* dir[3][0] : null value -> no code */\n/* NormalNumberDataNode dir[3][1] */\n/* dir[3][1] : null value -> no code */\n/* NormalNumberDataNode m */\n/* m : null value -> no code */\n/* NormalNumberDataNode n */\n/* n : null value -> no code */\n\n\nvector<vector<char>> board;\nchar* akaRandomName906748 = new char[2];akaRandomName906748[0] = 77;akaRandomName906748[1] = '\\0';string word=akaRandomName906748;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-11;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=48;\nboard_element0.push_back(board_element0_element1);\nchar board_element0_element2=51;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_exist_vector_vector_char_string_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->exist(board,word);\nAKA_fCall++;AKA_mark(\"Return from: ./17/079. Word Search.cpp/Solution/exist(vector<vector<char>>&,string)\");\n\n\nvector<vector<char>> EXPECTED_board;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/079. Word Search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode flag */\n/* flag : null value -> no code */\n/* VectorDataNode visit */\n/* VectorDataNode board */\n/* NormalStringDataNode word */\nAKA_INSTANCE___Solution->word=\"\";\n/* MultipleDimensionNumberDataNode dir */\n/* NormalNumberDataNode dir[0][0] */\n/* dir[0][0] : null value -> no code */\n/* NormalNumberDataNode dir[0][1] */\n/* dir[0][1] : null value -> no code */\n/* NormalNumberDataNode dir[1][0] */\n/* dir[1][0] : null value -> no code */\n/* NormalNumberDataNode dir[1][1] */\n/* dir[1][1] : null value -> no code */\n/* NormalNumberDataNode dir[2][0] */\n/* dir[2][0] : null value -> no code */\n/* NormalNumberDataNode dir[2][1] */\n/* dir[2][1] : null value -> no code */\n/* NormalNumberDataNode dir[3][0] */\n/* dir[3][0] : null value -> no code */\n/* NormalNumberDataNode dir[3][1] */\n/* dir[3][1] : null value -> no code */\n/* NormalNumberDataNode m */\n/* m : null value -> no code */\n/* NormalNumberDataNode n */\n/* n : null value -> no code */\n\n\nvector<vector<char>> board;\nchar* akaRandomName653045 = new char[2];akaRandomName653045[0] = 77;akaRandomName653045[1] = '\\0';string word=akaRandomName653045;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode board */\nvector<char> board_element0;\nchar board_element0_element0=-11;\nboard_element0.push_back(board_element0_element0);\nchar board_element0_element1=48;\nboard_element0.push_back(board_element0_element1);\nchar board_element0_element2=51;\nboard_element0.push_back(board_element0_element2);\nboard.push_back(board_element0);\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     bool flag = false;     vector<vector<bool>> visit;     vector<vector<char>> board;     string word = \"\";     int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};     int m, n; public:     bool exist(vector<vector<char>>& board, string word) {         if (board.size() == 0) return word == \"\";         m = board.size(), n = board[0].size();         this->word = word;         this->board = board;         visit.resize(m, vector<bool>(n));         for (int j = 0; j < m; j++) {             for (int k = 0; k < n; k++) {                 if (board[j][k] == word[0]) {                     visit[j][k] = true;                     dfs(j, k, 0);                     visit[j][k] = false;                 }             }         }         return flag;     }          void dfs(int x, int y, int index) {         if (flag == true) return ;         if (index == word.length() - 1) {             flag = true;             return ;         }         for (int i = 0; i < 4; i++) {             int tx = x + dir[i][0], ty = y + dir[i][1];             if (tx >= 0 && tx < m && ty >= 0 && ty < n && board[tx][ty] == word[index + 1] && visit[tx][ty] == false) {                 visit[tx][ty] = true;                 dfs(tx, ty, index + 1);                 visit[tx][ty] = false;             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/079. Word Search.cpp/Solution/exist(vector<vector<char>>&,string)"
    },
    {
        "f": [
            "bool flag = false;",
            "vector<vector<bool>> visit;",
            "vector<vector<char>> board;",
            "string word = \"\";",
            "int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};",
            "int m;",
            "int n;"
        ],
        "fm": "void dfs(int x, int y, int index) {         if (flag == true) return ;         if (index == word.length() - 1) {             flag = true;             return ;         }         for (int i = 0; i < 4; i++) {             int tx = x + dir[i][0], ty = y + dir[i][1];             if (tx >= 0 && tx < m && ty >= 0 && ty < n && board[tx][ty] == word[index + 1] && visit[tx][ty] == false) {                 visit[tx][ty] = true;                 dfs(tx, ty, index + 1);                 visit[tx][ty] = false;             }         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_int_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_dfs_int_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/079. Word Search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode flag */\n/* flag : null value -> no code */\n/* VectorDataNode visit */\n/* VectorDataNode board */\n/* NormalStringDataNode word */\nAKA_INSTANCE___Solution->word=\"\";\n/* MultipleDimensionNumberDataNode dir */\n/* NormalNumberDataNode dir[0][0] */\n/* dir[0][0] : null value -> no code */\n/* NormalNumberDataNode dir[0][1] */\n/* dir[0][1] : null value -> no code */\n/* NormalNumberDataNode dir[1][0] */\n/* dir[1][0] : null value -> no code */\n/* NormalNumberDataNode dir[1][1] */\n/* dir[1][1] : null value -> no code */\n/* NormalNumberDataNode dir[2][0] */\n/* dir[2][0] : null value -> no code */\n/* NormalNumberDataNode dir[2][1] */\n/* dir[2][1] : null value -> no code */\n/* NormalNumberDataNode dir[3][0] */\n/* dir[3][0] : null value -> no code */\n/* NormalNumberDataNode dir[3][1] */\n/* dir[3][1] : null value -> no code */\n/* NormalNumberDataNode m */\n/* m : null value -> no code */\n/* NormalNumberDataNode n */\n/* n : null value -> no code */\n\n\n\n\nint x=-1639286313;\n\n\nint y=875292322;\n\n\nint index=1563811926;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode y */\n/* NormalNumberDataNode index */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_int_int_int_random_4\");AKA_INSTANCE___Solution->dfs(x,y,index);\nAKA_fCall++;AKA_mark(\"Return from: ./17/079. Word Search.cpp/Solution/dfs(int,int,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/079. Word Search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode flag */\n/* flag : null value -> no code */\n/* VectorDataNode visit */\n/* VectorDataNode board */\n/* NormalStringDataNode word */\nAKA_INSTANCE___Solution->word=\"\";\n/* MultipleDimensionNumberDataNode dir */\n/* NormalNumberDataNode dir[0][0] */\n/* dir[0][0] : null value -> no code */\n/* NormalNumberDataNode dir[0][1] */\n/* dir[0][1] : null value -> no code */\n/* NormalNumberDataNode dir[1][0] */\n/* dir[1][0] : null value -> no code */\n/* NormalNumberDataNode dir[1][1] */\n/* dir[1][1] : null value -> no code */\n/* NormalNumberDataNode dir[2][0] */\n/* dir[2][0] : null value -> no code */\n/* NormalNumberDataNode dir[2][1] */\n/* dir[2][1] : null value -> no code */\n/* NormalNumberDataNode dir[3][0] */\n/* dir[3][0] : null value -> no code */\n/* NormalNumberDataNode dir[3][1] */\n/* dir[3][1] : null value -> no code */\n/* NormalNumberDataNode m */\n/* m : null value -> no code */\n/* NormalNumberDataNode n */\n/* n : null value -> no code */\n\n\n\n\nint x=-1639286313;\n\n\nint y=875292322;\n\n\nint index=1563811926;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode y */\n/* NormalNumberDataNode index */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_int_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_dfs_int_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/079. Word Search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode flag */\n/* flag : null value -> no code */\n/* VectorDataNode visit */\n/* VectorDataNode board */\n/* NormalStringDataNode word */\nAKA_INSTANCE___Solution->word=\"\";\n/* MultipleDimensionNumberDataNode dir */\n/* NormalNumberDataNode dir[0][0] */\n/* dir[0][0] : null value -> no code */\n/* NormalNumberDataNode dir[0][1] */\n/* dir[0][1] : null value -> no code */\n/* NormalNumberDataNode dir[1][0] */\n/* dir[1][0] : null value -> no code */\n/* NormalNumberDataNode dir[1][1] */\n/* dir[1][1] : null value -> no code */\n/* NormalNumberDataNode dir[2][0] */\n/* dir[2][0] : null value -> no code */\n/* NormalNumberDataNode dir[2][1] */\n/* dir[2][1] : null value -> no code */\n/* NormalNumberDataNode dir[3][0] */\n/* dir[3][0] : null value -> no code */\n/* NormalNumberDataNode dir[3][1] */\n/* dir[3][1] : null value -> no code */\n/* NormalNumberDataNode m */\n/* m : null value -> no code */\n/* NormalNumberDataNode n */\n/* n : null value -> no code */\n\n\n\n\nint x=761315265;\n\n\nint y=2029654229;\n\n\nint index=-1329941981;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode y */\n/* NormalNumberDataNode index */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_int_int_int_random_2\");AKA_INSTANCE___Solution->dfs(x,y,index);\nAKA_fCall++;AKA_mark(\"Return from: ./17/079. Word Search.cpp/Solution/dfs(int,int,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/079. Word Search.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode flag */\n/* flag : null value -> no code */\n/* VectorDataNode visit */\n/* VectorDataNode board */\n/* NormalStringDataNode word */\nAKA_INSTANCE___Solution->word=\"\";\n/* MultipleDimensionNumberDataNode dir */\n/* NormalNumberDataNode dir[0][0] */\n/* dir[0][0] : null value -> no code */\n/* NormalNumberDataNode dir[0][1] */\n/* dir[0][1] : null value -> no code */\n/* NormalNumberDataNode dir[1][0] */\n/* dir[1][0] : null value -> no code */\n/* NormalNumberDataNode dir[1][1] */\n/* dir[1][1] : null value -> no code */\n/* NormalNumberDataNode dir[2][0] */\n/* dir[2][0] : null value -> no code */\n/* NormalNumberDataNode dir[2][1] */\n/* dir[2][1] : null value -> no code */\n/* NormalNumberDataNode dir[3][0] */\n/* dir[3][0] : null value -> no code */\n/* NormalNumberDataNode dir[3][1] */\n/* dir[3][1] : null value -> no code */\n/* NormalNumberDataNode m */\n/* m : null value -> no code */\n/* NormalNumberDataNode n */\n/* n : null value -> no code */\n\n\n\n\nint x=761315265;\n\n\nint y=2029654229;\n\n\nint index=-1329941981;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode y */\n/* NormalNumberDataNode index */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     bool flag = false;     vector<vector<bool>> visit;     vector<vector<char>> board;     string word = \"\";     int dir[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};     int m, n; public:     bool exist(vector<vector<char>>& board, string word) {         if (board.size() == 0) return word == \"\";         m = board.size(), n = board[0].size();         this->word = word;         this->board = board;         visit.resize(m, vector<bool>(n));         for (int j = 0; j < m; j++) {             for (int k = 0; k < n; k++) {                 if (board[j][k] == word[0]) {                     visit[j][k] = true;                     dfs(j, k, 0);                     visit[j][k] = false;                 }             }         }         return flag;     }          void dfs(int x, int y, int index) {         if (flag == true) return ;         if (index == word.length() - 1) {             flag = true;             return ;         }         for (int i = 0; i < 4; i++) {             int tx = x + dir[i][0], ty = y + dir[i][1];             if (tx >= 0 && tx < m && ty >= 0 && ty < n && board[tx][ty] == word[index + 1] && visit[tx][ty] == false) {                 visit[tx][ty] = true;                 dfs(tx, ty, index + 1);                 visit[tx][ty] = false;             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/079. Word Search.cpp/Solution/dfs(int,int,int)"
    },
    {
        "f": [],
        "fm": "int removeDuplicates(vector<int>& nums) {         if(nums.empty())             return 0;         int len = 1;         vector<int> v(nums.size());         int cnt = 1;         v[0] = nums[0];         for(int i = 1; i < nums.size(); i++) {             if(nums[i] == nums[i - 1]) {                 cnt++;             } else {                 cnt = 1;             }             if(cnt <= 2) {                 v[len++] = nums[i];             }         }         for(int i = 0; i < len; i++) {             nums[i] = v[i];         }         return len;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeDuplicates_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_removeDuplicates_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/080. Remove Duplicates from Sorted Array II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-489490536;\nnums.push_back(nums_element0);\nint nums_element1=-2144312662;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeDuplicates_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeDuplicates(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./17/080. Remove Duplicates from Sorted Array II.cpp/Solution/removeDuplicates(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/080. Remove Duplicates from Sorted Array II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-489490536;\nnums.push_back(nums_element0);\nint nums_element1=-2144312662;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int removeDuplicates(vector<int>& nums) {         if(nums.empty())             return 0;         int len = 1;         vector<int> v(nums.size());         int cnt = 1;         v[0] = nums[0];         for(int i = 1; i < nums.size(); i++) {             if(nums[i] == nums[i - 1]) {                 cnt++;             } else {                 cnt = 1;             }             if(cnt <= 2) {                 v[len++] = nums[i];             }         }         for(int i = 0; i < len; i++) {             nums[i] = v[i];         }         return len;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/080. Remove Duplicates from Sorted Array II.cpp/Solution/removeDuplicates(vector<int>&)"
    },
    {
        "f": [],
        "fm": "ListNode* deleteDuplicates(ListNode* head) {         if (head == NULL || head->next == NULL) return head;         ListNode* p = head->next;         if (p->val != head->val) {             head->next = deleteDuplicates(p);             return head;         } else {             while (p != NULL && p->val == head->val) p = p->next;             return deleteDuplicates(p);         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_deleteDuplicates_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_deleteDuplicates_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/082. Remove Duplicates from Sorted List II .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_deleteDuplicates_ListNodemul_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->deleteDuplicates(head);\nAKA_fCall++;AKA_mark(\"Return from: ./17/082. Remove Duplicates from Sorted List II .cpp/Solution/deleteDuplicates(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/082. Remove Duplicates from Sorted List II .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_deleteDuplicates_ListNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_deleteDuplicates_ListNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/082. Remove Duplicates from Sorted List II .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=480806838;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/082. Remove Duplicates from Sorted List II .cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=-203283636;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=1372643433;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/082. Remove Duplicates from Sorted List II .cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).val=740054681;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_deleteDuplicates_ListNodemul_random_4\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->deleteDuplicates(head);\nAKA_fCall++;AKA_mark(\"Return from: ./17/082. Remove Duplicates from Sorted List II .cpp/Solution/deleteDuplicates(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/082. Remove Duplicates from Sorted List II .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=480806838;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/082. Remove Duplicates from Sorted List II .cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=-203283636;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=1372643433;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/082. Remove Duplicates from Sorted List II .cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).val=740054681;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* deleteDuplicates(ListNode* head) {         if (head == NULL || head->next == NULL) return head;         ListNode* p = head->next;         if (p->val != head->val) {             head->next = deleteDuplicates(p);             return head;         } else {             while (p != NULL && p->val == head->val) p = p->next;             return deleteDuplicates(p);         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/082. Remove Duplicates from Sorted List II .cpp/Solution/deleteDuplicates(ListNode*)"
    },
    {
        "f": [],
        "fm": "ListNode* deleteDuplicates(ListNode* head) {         if(head == NULL || head->next == NULL) {             return head;         }         ListNode *p = head;         while(p != NULL &&  p->next != NULL) {             while (p->next != NULL && p->next->val == p->val) {                     p->next = p->next->next;             }             p = p->next;         }         return head;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_deleteDuplicates_ListNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_deleteDuplicates_ListNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/083. Remove Duplicates from Sorted List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_deleteDuplicates_ListNodemul_random_3\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->deleteDuplicates(head);\nAKA_fCall++;AKA_mark(\"Return from: ./17/083. Remove Duplicates from Sorted List.cpp/Solution/deleteDuplicates(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/083. Remove Duplicates from Sorted List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_deleteDuplicates_ListNodemul_random_5(void) {\n{\nAKA_test_case_name=\"Solution_deleteDuplicates_ListNodemul_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/083. Remove Duplicates from Sorted List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=1740757526;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=1918285365;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next2_x=0;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[2]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_2 = new ::ListNode(head0_next2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_2).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_2);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_deleteDuplicates_ListNodemul_random_5\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->deleteDuplicates(head);\nAKA_fCall++;AKA_mark(\"Return from: ./17/083. Remove Duplicates from Sorted List.cpp/Solution/deleteDuplicates(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/083. Remove Duplicates from Sorted List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=1740757526;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=1918285365;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[0]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[1]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next2_x=0;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/next/next[2]/next/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_2 = new ::ListNode(head0_next2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_2).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_2);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_deleteDuplicates_ListNodemul_random_6(void) {\n{\nAKA_test_case_name=\"Solution_deleteDuplicates_ListNodemul_random_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/083. Remove Duplicates from Sorted List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1650555141;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1169640566;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=-589168250;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_deleteDuplicates_ListNodemul_random_6\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->deleteDuplicates(head);\nAKA_fCall++;AKA_mark(\"Return from: ./17/083. Remove Duplicates from Sorted List.cpp/Solution/deleteDuplicates(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/083. Remove Duplicates from Sorted List.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1650555141;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1169640566;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=-589168250;\nAKA_mark(\"Calling: ./17/082. Remove Duplicates from Sorted List II .cpp/ListNode/ListNode(int)|ROOT/083. Remove Duplicates from Sorted List.cpp/deleteDuplicates(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* deleteDuplicates(ListNode* head) {         if(head == NULL || head->next == NULL) {             return head;         }         ListNode *p = head;         while(p != NULL &&  p->next != NULL) {             while (p->next != NULL && p->next->val == p->val) {                     p->next = p->next->next;             }             p = p->next;         }         return head;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/083. Remove Duplicates from Sorted List.cpp/Solution/deleteDuplicates(ListNode*)"
    },
    {
        "f": [],
        "fm": "void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {         int index = m + n - 1;         int aindex = m - 1;         int bindex = n - 1;         while(aindex >= 0 && bindex >= 0) {             if(nums1[aindex] > nums2[bindex]) {                 nums1[index--] = nums1[aindex--];             } else {                 nums1[index--] = nums2[bindex--];             }         }         while(bindex >= 0) {             nums1[index--] = nums2[bindex--];         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_merge_vector_int_int_vector_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_merge_vector_int_int_vector_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/088. Merge Sorted Array .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=5;\nvector<int> nums2;\n\n\nint n=5;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=-553408110;\nnums1.push_back(nums1_element0);\nint nums1_element1=-361609695;\nnums1.push_back(nums1_element1);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=481695609;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_merge_vector_int_int_vector_int_int_random_4\");AKA_INSTANCE___Solution->merge(nums1,m,nums2,n);\nAKA_fCall++;AKA_mark(\"Return from: ./17/088. Merge Sorted Array .cpp/Solution/merge(vector<int>&,int,vector<int>&,int)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/088. Merge Sorted Array .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=5;\nvector<int> nums2;\n\n\nint n=5;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=-553408110;\nnums1.push_back(nums1_element0);\nint nums1_element1=-361609695;\nnums1.push_back(nums1_element1);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=481695609;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode n */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_merge_vector_int_int_vector_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_merge_vector_int_int_vector_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/088. Merge Sorted Array .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=4;\nvector<int> nums2;\n\n\nint n=7;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=-1211867866;\nnums1.push_back(nums1_element0);\nint nums1_element1=1040124525;\nnums1.push_back(nums1_element1);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=1457767441;\nnums2.push_back(nums2_element0);\nint nums2_element1=470976683;\nnums2.push_back(nums2_element1);\nint nums2_element2=-1928557823;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_merge_vector_int_int_vector_int_int_random_2\");AKA_INSTANCE___Solution->merge(nums1,m,nums2,n);\nAKA_fCall++;AKA_mark(\"Return from: ./17/088. Merge Sorted Array .cpp/Solution/merge(vector<int>&,int,vector<int>&,int)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/088. Merge Sorted Array .cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\n\n\nint m=4;\nvector<int> nums2;\n\n\nint n=7;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=-1211867866;\nnums1.push_back(nums1_element0);\nint nums1_element1=1040124525;\nnums1.push_back(nums1_element1);\n/* NormalNumberDataNode m */\n/* VectorDataNode nums2 */\nint nums2_element0=1457767441;\nnums2.push_back(nums2_element0);\nint nums2_element1=470976683;\nnums2.push_back(nums2_element1);\nint nums2_element2=-1928557823;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode n */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {         int index = m + n - 1;         int aindex = m - 1;         int bindex = n - 1;         while(aindex >= 0 && bindex >= 0) {             if(nums1[aindex] > nums2[bindex]) {                 nums1[index--] = nums1[aindex--];             } else {                 nums1[index--] = nums2[bindex--];             }         }         while(bindex >= 0) {             nums1[index--] = nums2[bindex--];         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/088. Merge Sorted Array .cpp/Solution/merge(vector<int>&,int,vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> subsetsWithDup(vector<int>& nums) {         sort(nums.begin(), nums.end());         int len = nums.size();         int maxn = pow(2, len);         vector<vector<int>> result(maxn);         for (int i = 0; i < len; i++) {             for (int j = 0; j < maxn; j++) {                 if ((j >> i) & 1)                     result[j].push_back(nums[i]);             }         }         set<vector<int>> s;         for (int i = 0; i < result.size(); i++)             s.insert(result[i]);         result.resize(0);         for (auto it = s.begin(); it != s.end(); it++)             result.push_back(*it);         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_subsetsWithDup_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_subsetsWithDup_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/090. Subsets II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1031094047;\nnums.push_back(nums_element0);\nint nums_element1=1716959142;\nnums.push_back(nums_element1);\nint nums_element2=1563117517;\nnums.push_back(nums_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_subsetsWithDup_vector_int_random_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->subsetsWithDup(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./17/090. Subsets II.cpp/Solution/subsetsWithDup(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/090. Subsets II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1031094047;\nnums.push_back(nums_element0);\nint nums_element1=1716959142;\nnums.push_back(nums_element1);\nint nums_element2=1563117517;\nnums.push_back(nums_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> subsetsWithDup(vector<int>& nums) {         sort(nums.begin(), nums.end());         int len = nums.size();         int maxn = pow(2, len);         vector<vector<int>> result(maxn);         for (int i = 0; i < len; i++) {             for (int j = 0; j < maxn; j++) {                 if ((j >> i) & 1)                     result[j].push_back(nums[i]);             }         }         set<vector<int>> s;         for (int i = 0; i < result.size(); i++)             s.insert(result[i]);         result.resize(0);         for (auto it = s.begin(); it != s.end(); it++)             result.push_back(*it);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/090. Subsets II.cpp/Solution/subsetsWithDup(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int check(char a) {         return a != '0';     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_check_char_random_0(void) {\n{\nAKA_test_case_name=\"Solution_check_char_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/091. Decode Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar a=94;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_check_char_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->check(a);\nAKA_fCall++;AKA_mark(\"Return from: ./17/091. Decode Ways.cpp/Solution/check(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/091. Decode Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar a=94;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int check(char a) {         return a != '0';     }     int func(char a, char b) {         return a == '1' || a == '2' && b <= '6';     }     int numDecodings(string s) {         int len = s.length();         vector<int> dp(len, 0);         if(len == 0 || s[0] == '0')              return 0;         if(len == 1)             return check(s[0]);         dp[0] = 1;         dp[1] = check(s[1]) + func(s[0], s[1]);         for(int i = 2; i < len; i++) {             if(check(s[i]))                  dp[i] = dp[i-1];             if(func(s[i-1], s[i]))                  dp[i] += dp[i-2];         }         return dp[len-1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/091. Decode Ways.cpp/Solution/check(char)"
    },
    {
        "f": [],
        "fm": "int func(char a, char b) {         return a == '1' || a == '2' && b <= '6';     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_func_char_char_random_0(void) {\n{\nAKA_test_case_name=\"Solution_func_char_char_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/091. Decode Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar a=49;\n\nchar b=118;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_func_char_char_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->func(a,b);\nAKA_fCall++;AKA_mark(\"Return from: ./17/091. Decode Ways.cpp/Solution/func(char,char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/091. Decode Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar a=49;\n\nchar b=118;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int check(char a) {         return a != '0';     }     int func(char a, char b) {         return a == '1' || a == '2' && b <= '6';     }     int numDecodings(string s) {         int len = s.length();         vector<int> dp(len, 0);         if(len == 0 || s[0] == '0')              return 0;         if(len == 1)             return check(s[0]);         dp[0] = 1;         dp[1] = check(s[1]) + func(s[0], s[1]);         for(int i = 2; i < len; i++) {             if(check(s[i]))                  dp[i] = dp[i-1];             if(func(s[i-1], s[i]))                  dp[i] += dp[i-2];         }         return dp[len-1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/091. Decode Ways.cpp/Solution/func(char,char)"
    },
    {
        "f": [],
        "fm": "vector<string> restoreIpAddresses(string s) {         vector<string> result;         int len = s.length();         for (int i = 1; i <= 3 && i <= len - 3; i++) {             for (int j = 1; j <= 3 && j <= len - i - 2; j++) {                 for (int k = 1; k <= 3 && k <= len - i - j - 1; k++) {                     string s1 = s.substr(0, i), s2 = s.substr(i, j), s3 = s.substr(i + j, k), s4 = s.substr(i + j + k, len);                     if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4))                          result.push_back(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4);                 }             }         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_restoreIpAddresses_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_restoreIpAddresses_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/093. Restore IP Addresses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName135136 = new char[2];akaRandomName135136[0] = -114;akaRandomName135136[1] = '\\0';string s=akaRandomName135136;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_restoreIpAddresses_string_random_4\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->restoreIpAddresses(s);\nAKA_fCall++;AKA_mark(\"Return from: ./17/093. Restore IP Addresses.cpp/Solution/restoreIpAddresses(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/093. Restore IP Addresses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName500919 = new char[2];akaRandomName500919[0] = -114;akaRandomName500919[1] = '\\0';string s=akaRandomName500919;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> restoreIpAddresses(string s) {         vector<string> result;         int len = s.length();         for (int i = 1; i <= 3 && i <= len - 3; i++) {             for (int j = 1; j <= 3 && j <= len - i - 2; j++) {                 for (int k = 1; k <= 3 && k <= len - i - j - 1; k++) {                     string s1 = s.substr(0, i), s2 = s.substr(i, j), s3 = s.substr(i + j, k), s4 = s.substr(i + j + k, len);                     if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4))                          result.push_back(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4);                 }             }         }         return result;     }     bool isValid(string s) {         return (s.length() >= 1 && s.length() <= 3 && (s[0] != '0' || s.length() == 1) && stoi(s) <= 255);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/093. Restore IP Addresses.cpp/Solution/restoreIpAddresses(string)"
    },
    {
        "f": [],
        "fm": "bool isValid(string s) {         return (s.length() >= 1 && s.length() <= 3 && (s[0] != '0' || s.length() == 1) && stoi(s) <= 255);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/093. Restore IP Addresses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName543576 = new char[2];akaRandomName543576[0] = 52;akaRandomName543576[1] = '\\0';string s=akaRandomName543576;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: ./17/093. Restore IP Addresses.cpp/Solution/isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/093. Restore IP Addresses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName238571 = new char[2];akaRandomName238571[0] = 52;akaRandomName238571[1] = '\\0';string s=akaRandomName238571;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> restoreIpAddresses(string s) {         vector<string> result;         int len = s.length();         for (int i = 1; i <= 3 && i <= len - 3; i++) {             for (int j = 1; j <= 3 && j <= len - i - 2; j++) {                 for (int k = 1; k <= 3 && k <= len - i - j - 1; k++) {                     string s1 = s.substr(0, i), s2 = s.substr(i, j), s3 = s.substr(i + j, k), s4 = s.substr(i + j + k, len);                     if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4))                          result.push_back(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4);                 }             }         }         return result;     }     bool isValid(string s) {         return (s.length() >= 1 && s.length() <= 3 && (s[0] != '0' || s.length() == 1) && stoi(s) <= 255);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/093. Restore IP Addresses.cpp/Solution/isValid(string)"
    },
    {
        "f": [
            "vector<int> result;"
        ],
        "fm": "vector<int> inorderTraversal(TreeNode* root) {         dfs(root);         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_inorderTraversal_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_inorderTraversal_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/094. Binary Tree Inorder Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode result */\nint AKA_INSTANCE___Solution_result_element0=1310650990;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element0);\nint AKA_INSTANCE___Solution_result_element1=-1559764780;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element1);\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1736075854;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/inorderTraversal(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_inorderTraversal_TreeNodemul_random_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->inorderTraversal(root);\nAKA_fCall++;AKA_mark(\"Return from: ./17/094. Binary Tree Inorder Traversal.cpp/Solution/inorderTraversal(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/094. Binary Tree Inorder Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode result */\nint AKA_INSTANCE___Solution_result_element0=1310650990;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element0);\nint AKA_INSTANCE___Solution_result_element1=-1559764780;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element1);\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1736075854;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/inorderTraversal(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> result;     vector<int> inorderTraversal(TreeNode* root) {         dfs(root);         return result;     }     void dfs(TreeNode* root) {         if(root == NULL) return ;         dfs(root->left);         result.push_back(root->val);         dfs(root->right);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/094. Binary Tree Inorder Traversal.cpp/Solution/inorderTraversal(TreeNode*)"
    },
    {
        "f": [
            "vector<int> result;"
        ],
        "fm": "void dfs(TreeNode* root) {         if(root == NULL) return ;         dfs(root->left);         result.push_back(root->val);         dfs(root->right);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/094. Binary Tree Inorder Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode result */\nint AKA_INSTANCE___Solution_result_element0=1453994563;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element0);\nint AKA_INSTANCE___Solution_result_element1=-14763771;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element1);\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1480550467;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=2074957754;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-281469269;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1844226333;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=955231070;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=1863367272;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-2126860472;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=1139096259;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=57699579;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=241105871;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=1434676716;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=-717661713;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-170986161;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-212768723;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=610814752;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-294829128;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=-1348125664;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=1363263645;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left2_x=138202141;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_2 = new ::TreeNode(root1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).val=311862635;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_2);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=468518079;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1886477132;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=389851584;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=-1439258503;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=153833050;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=-298837375;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left1_x=1548804404;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_1 = new ::TreeNode(root2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).val=-427176864;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left2_x=-434636631;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_2 = new ::TreeNode(root2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).val=1451424479;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_2);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_random_0\");AKA_INSTANCE___Solution->dfs(root);\nAKA_fCall++;AKA_mark(\"Return from: ./17/094. Binary Tree Inorder Traversal.cpp/Solution/dfs(TreeNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/094. Binary Tree Inorder Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode result */\nint AKA_INSTANCE___Solution_result_element0=1453994563;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element0);\nint AKA_INSTANCE___Solution_result_element1=-14763771;\nAKA_INSTANCE___Solution->result.push_back(AKA_INSTANCE___Solution_result_element1);\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1480550467;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=2074957754;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-281469269;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1844226333;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=955231070;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=1863367272;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-2126860472;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=1139096259;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=57699579;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=241105871;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=1434676716;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=-717661713;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-170986161;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-212768723;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=610814752;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-294829128;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=-1348125664;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=1363263645;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left2_x=138202141;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_2 = new ::TreeNode(root1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).val=311862635;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_2);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=468518079;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1886477132;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=389851584;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=-1439258503;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=153833050;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=-298837375;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left1_x=1548804404;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_1 = new ::TreeNode(root2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).val=-427176864;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left2_x=-434636631;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/094. Binary Tree Inorder Traversal.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_2 = new ::TreeNode(root2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).val=1451424479;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_2);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> result;     vector<int> inorderTraversal(TreeNode* root) {         dfs(root);         return result;     }     void dfs(TreeNode* root) {         if(root == NULL) return ;         dfs(root->left);         result.push_back(root->val);         dfs(root->right);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/094. Binary Tree Inorder Traversal.cpp/Solution/dfs(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int numTrees(int n) {         vector<int> v(n+1);         v[0] = 1;         for(int i = 1; i <= n; i++) {             v[i] = 0;             if(i <= 2) {                 v[i] = i;             } else {                 for(int j = 1; j <= i; j++) {                     v[i] += v[j-1] * v[i-j];                 }             }         }         return v[n];     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numTrees_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_numTrees_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/096. Unique Binary Search Trees.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=3;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numTrees_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numTrees(n);\nAKA_fCall++;AKA_mark(\"Return from: ./17/096. Unique Binary Search Trees.cpp/Solution/numTrees(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/096. Unique Binary Search Trees.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=3;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int numTrees(int n) {         vector<int> v(n+1);         v[0] = 1;         for(int i = 1; i <= n; i++) {             v[i] = 0;             if(i <= 2) {                 v[i] = i;             } else {                 for(int j = 1; j <= i; j++) {                     v[i] += v[j-1] * v[i-j];                 }             }         }         return v[n];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/096. Unique Binary Search Trees.cpp/Solution/numTrees(int)"
    },
    {
        "f": [
            "vector<int> v;"
        ],
        "fm": "bool isValidBST(TreeNode* root) {         if(root == NULL ||(root->left == NULL && root->right == NULL)) return true;         inorder(root);         for(int i = 1; i < v.size(); i++)             if(v[i] <= v[i-1]) return false;         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValidBST_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isValidBST_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/098. Validate Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode v */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-444243920;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1412102122;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-52772582;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-506415417;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-85092039;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=166034936;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-589858448;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=487610596;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1239625094;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=330681240;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1138500519;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=1312987765;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=1248381276;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=358631695;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left2_x=-1737602001;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_2 = new ::TreeNode(root1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).val=-1571295945;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_2);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=430429200;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1778202490;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1355711356;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=-1610189255;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=-2053912374;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=1169483846;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=465905786;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=572601914;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValidBST_TreeNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValidBST(root);\nAKA_fCall++;AKA_mark(\"Return from: ./17/098. Validate Binary Search Tree.cpp/Solution/isValidBST(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/098. Validate Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode v */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-444243920;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1412102122;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-52772582;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-506415417;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-85092039;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=166034936;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-589858448;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=487610596;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1239625094;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=330681240;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1138500519;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=1312987765;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left1_x=1248381276;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_1 = new ::TreeNode(root1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).val=358631695;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_1).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left2_x=-1737602001;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_2 = new ::TreeNode(root1_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).val=-1571295945;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_2).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_2);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=430429200;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1778202490;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1355711356;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=-1610189255;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=-2053912374;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=1169483846;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=465905786;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=572601914;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValidBST_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isValidBST_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/098. Validate Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode v */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1430439678;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=404153648;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1277177766;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=318856086;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-355652250;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=1312252812;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=7790706;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=2107697846;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=293966411;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1748042776;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=628844666;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=706016875;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1698428064;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-590625940;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValidBST_TreeNodemul_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValidBST(root);\nAKA_fCall++;AKA_mark(\"Return from: ./17/098. Validate Binary Search Tree.cpp/Solution/isValidBST(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/098. Validate Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode v */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1430439678;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=404153648;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1277177766;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=318856086;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-355652250;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=1312252812;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=7790706;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=2107697846;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=293966411;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1748042776;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=628844666;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=706016875;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1698428064;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/isValidBST(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-590625940;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     vector<int> v; public:     bool isValidBST(TreeNode* root) {         if(root == NULL ||(root->left == NULL && root->right == NULL)) return true;         inorder(root);         for(int i = 1; i < v.size(); i++)             if(v[i] <= v[i-1]) return false;         return true;     }     void inorder(TreeNode* root) {         if(root == NULL) return;         inorder(root->left);         v.push_back(root->val);         inorder(root->right);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/098. Validate Binary Search Tree.cpp/Solution/isValidBST(TreeNode*)"
    },
    {
        "f": [
            "vector<int> v;"
        ],
        "fm": "void inorder(TreeNode* root) {         if(root == NULL) return;         inorder(root->left);         v.push_back(root->val);         inorder(root->right);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_inorder_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_inorder_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/098. Validate Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode v */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1989635614;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1923163145;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=2018496141;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=244599660;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-35611651;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=115934164;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-1178065063;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=-969085804;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=157442686;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1787778583;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1261667617;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1115489827;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=129301159;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=-1427186597;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right2_x=-1954365795;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_2 = new ::TreeNode(root1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).val=-1737677473;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_2);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=11780729;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=-2089097676;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=1804565287;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=-1097864221;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left1_x=2060057801;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_1 = new ::TreeNode(root2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).val=-1462136437;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_1);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=-888206990;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=150020749;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right1_x=-605766009;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_1 = new ::TreeNode(root2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).val=-1142300676;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right2_x=-1290520976;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_2 = new ::TreeNode(root2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).val=-405432209;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_2);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_inorder_TreeNodemul_random_1\");AKA_INSTANCE___Solution->inorder(root);\nAKA_fCall++;AKA_mark(\"Return from: ./17/098. Validate Binary Search Tree.cpp/Solution/inorder(TreeNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/098. Validate Binary Search Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode v */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1989635614;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1923163145;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=2018496141;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=244599660;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=-35611651;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=115934164;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-1178065063;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=-969085804;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=157442686;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1787778583;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=-1261667617;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-1115489827;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right1_x=129301159;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode(root1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=-1427186597;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right2_x=-1954365795;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_2 = new ::TreeNode(root1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).val=-1737677473;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_2);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=11780729;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=-2089097676;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=1804565287;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=-1097864221;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left1_x=2060057801;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_1 = new ::TreeNode(root2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).val=-1462136437;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_1);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=-888206990;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=150020749;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right1_x=-605766009;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_1 = new ::TreeNode(root2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).val=-1142300676;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right2_x=-1290520976;\nAKA_mark(\"Calling: ./17/094. Binary Tree Inorder Traversal.cpp/TreeNode/TreeNode(int)|ROOT/098. Validate Binary Search Tree.cpp/inorder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_2 = new ::TreeNode(root2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).val=-405432209;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_2);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     vector<int> v; public:     bool isValidBST(TreeNode* root) {         if(root == NULL ||(root->left == NULL && root->right == NULL)) return true;         inorder(root);         for(int i = 1; i < v.size(); i++)             if(v[i] <= v[i-1]) return false;         return true;     }     void inorder(TreeNode* root) {         if(root == NULL) return;         inorder(root->left);         v.push_back(root->val);         inorder(root->right);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/17/098. Validate Binary Search Tree.cpp/Solution/inorder(TreeNode*)"
    }
]