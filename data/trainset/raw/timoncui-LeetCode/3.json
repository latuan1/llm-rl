[
    {
        "f": [],
        "fm": "bool isBalanced(TreeNode *root) {\r     int depth;\r     return isBalancedWithDepth(root, depth);\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isBalanced_TreeNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1649749234;\nAKA_mark(\"Calling: .\\\\five\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Balanced_Binary_Tree.cpp\\\\Solution\\\\isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Balanced_Binary_Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1649749234;\nAKA_mark(\"Calling: .\\\\five\\\\Balanced_Binary_Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\Balanced_Binary_Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   bool isBalanced(TreeNode *root) {\r     int depth;\r     return isBalancedWithDepth(root, depth);\r   }\r private:\r   bool isBalancedWithDepth(TreeNode *root, int& depth) {\r     if (!root) {\r       depth = 0;\r       return true;\r     }\r     int depth_l, depth_r;\r     bool res = isBalancedWithDepth(root->left, depth_l);\r     if (!res) return false; \r     res &= isBalancedWithDepth(root->right, depth_r);\r     depth = max(depth_l, depth_r) + 1;\r     return res && (abs(depth_l - depth_r) <= 1);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\five\\Balanced_Binary_Tree.cpp\\Solution\\isBalanced(TreeNode*)"
    },
    {
        "f": [],
        "fm": "ListNode *reverseBetween(ListNode *head, int m, int n) {\r     ListNode dummy(0);\r     dummy.next = head;\r     reverseBetweenNotContainingHead(&dummy, m + 1, n + 1);\r     return dummy.next;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseBetween_ListNodemul_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_reverseBetween_ListNodemul_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1267665954;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-266667445;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1339483342;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=2004799079;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_2\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=-1632420252;\n\n\nint n=-1666511584;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseBetween_ListNodemul_int_int_random_4\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseBetween(head,m,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\Solution\\\\reverseBetween(ListNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1267665954;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-266667445;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=1339483342;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=2004799079;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_2\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=-1632420252;\n\n\nint n=-1666511584;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseBetween_ListNodemul_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_reverseBetween_ListNodemul_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=856706235;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=447472332;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next2_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_2 = new ::ListNode(head0_next2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_2).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_2);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-846744848;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=1477003339;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_2\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=1853255949;\n\n\nint n=264321769;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseBetween_ListNodemul_int_int_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseBetween(head,m,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\Solution\\\\reverseBetween(ListNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=856706235;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=447472332;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next2_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_2 = new ::ListNode(head0_next2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_2).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_2);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-846744848;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=1477003339;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetween(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_2\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=1853255949;\n\n\nint n=264321769;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   // Prepend a dummy node so the reversed range won't contain head node of the new list\r   ListNode *reverseBetween(ListNode *head, int m, int n) {\r     ListNode dummy(0);\r     dummy.next = head;\r     reverseBetweenNotContainingHead(&dummy, m + 1, n + 1);\r     return dummy.next;\r   }\r   void reverseBetweenNotContainingHead(ListNode *head, int m, int n) {\r     n -= m; // n now contains length of region - 1\r     while (m -- > 2) head = head->next;\r     ListNode *start = head->next, *pre = head->next, *cur = pre->next;\r     while (n --) {\r       ListNode *cur_next = cur->next;\r       cur->next = pre;\r       pre = cur;\r       cur = cur_next;\r     }\r     head->next = pre; // Append to the part of list before the reversed ange\r     start->next = cur; // Connect to rest of the list\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\five\\Reverse_Linked_List_II.cpp\\Solution\\reverseBetween(ListNode*,int,int)"
    },
    {
        "f": [],
        "fm": "void reverseBetweenNotContainingHead(ListNode *head, int m, int n) {\r     n -= m; // n now contains length of region - 1\r     while (m -- > 2) head = head->next;\r     ListNode *start = head->next, *pre = head->next, *cur = pre->next;\r     while (n --) {\r       ListNode *cur_next = cur->next;\r       cur->next = pre;\r       pre = cur;\r       cur = cur_next;\r     }\r     head->next = pre; // Append to the part of list before the reversed ange\r     start->next = cur; // Connect to rest of the list\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next = nullptr;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=0;\n\n\nint n=0;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_directed_0\");AKA_INSTANCE___Solution->reverseBetweenNotContainingHead(head,m,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\Solution\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next = nullptr;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=0;\n\n\nint n=0;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=1139546239;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-378946424;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=9;\n\n\nint n=-1077812565;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_random_0\");AKA_INSTANCE___Solution->reverseBetweenNotContainingHead(head,m,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\Solution\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=1139546239;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-378946424;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=9;\n\n\nint n=-1077812565;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1910130782;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-6027516;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next2_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_2 = new ::ListNode(head0_next2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_2).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_2);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-1899490683;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=0;\n\n\nint n=-905281919;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseBetweenNotContainingHead_ListNodemul_int_int_random_4\");AKA_INSTANCE___Solution->reverseBetweenNotContainingHead(head,m,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\Solution\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Linked_List_II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1910130782;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-6027516;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next1_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_1 = new ::ListNode(head0_next1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_1).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next2_x=0;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_2 = new ::ListNode(head0_next2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_2).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_2);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-1899490683;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Linked_List_II.cpp\\\\reverseBetweenNotContainingHead(ListNode*,int,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint m=0;\n\n\nint n=-905281919;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode m */\n/* NormalNumberDataNode n */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   // Prepend a dummy node so the reversed range won't contain head node of the new list\r   ListNode *reverseBetween(ListNode *head, int m, int n) {\r     ListNode dummy(0);\r     dummy.next = head;\r     reverseBetweenNotContainingHead(&dummy, m + 1, n + 1);\r     return dummy.next;\r   }\r   void reverseBetweenNotContainingHead(ListNode *head, int m, int n) {\r     n -= m; // n now contains length of region - 1\r     while (m -- > 2) head = head->next;\r     ListNode *start = head->next, *pre = head->next, *cur = pre->next;\r     while (n --) {\r       ListNode *cur_next = cur->next;\r       cur->next = pre;\r       pre = cur;\r       cur = cur_next;\r     }\r     head->next = pre; // Append to the part of list before the reversed ange\r     start->next = cur; // Connect to rest of the list\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\five\\Reverse_Linked_List_II.cpp\\Solution\\reverseBetweenNotContainingHead(ListNode*,int,int)"
    },
    {
        "f": [],
        "fm": "ListNode *reverseKGroup(ListNode *head, int k) {\r     ListNode dummy(0);\r     ListNode *tail = &dummy, *cur = head;\r     while (cur) {\r       int n = k - 1;\r       ListNode *test = cur;\r       while (n -- && test) test = test->next; // Make sure at least k left\r       if (test) {\r \tListNode *sub_tail = cur, *pre = NULL;\r \tfor (int i = 0; i < k; ++i) {\r \t  ListNode *next = cur->next;\r \t  if (pre) cur->next = pre;\r \t  pre = cur;\r \t  cur = next;\r \t}\r \ttail->next = pre;\r \ttail = sub_tail;\r \ttail->next = NULL;\r       } else {\r \ttail->next = cur; // Append the rest\r \tcur = NULL;\r       }\r     }\r     return dummy.next;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseKGroup_ListNodemul_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_reverseKGroup_ListNodemul_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Nodes_in_k-Group.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nListNode* head = nullptr;\n\n\nint k=3;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseKGroup_ListNodemul_int_directed_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseKGroup(head,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Reverse_Nodes_in_k-Group.cpp\\\\Solution\\\\reverseKGroup(ListNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Nodes_in_k-Group.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nListNode* head = nullptr;\n\n\nint k=3;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_reverseKGroup_ListNodemul_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_reverseKGroup_ListNodemul_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Nodes_in_k-Group.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-15598611;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Nodes_in_k-Group.cpp\\\\reverseKGroup(ListNode*,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint k=3;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseKGroup_ListNodemul_int_random_1\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseKGroup(head,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Reverse_Nodes_in_k-Group.cpp\\\\Solution\\\\reverseKGroup(ListNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Reverse_Nodes_in_k-Group.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-15598611;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Reverse_Nodes_in_k-Group.cpp\\\\reverseKGroup(ListNode*,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint k=3;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   ListNode *reverseKGroup(ListNode *head, int k) {\r     ListNode dummy(0);\r     ListNode *tail = &dummy, *cur = head;\r     while (cur) {\r       int n = k - 1;\r       ListNode *test = cur;\r       while (n -- && test) test = test->next; // Make sure at least k left\r       if (test) {\r \tListNode *sub_tail = cur, *pre = NULL;\r \tfor (int i = 0; i < k; ++i) {\r \t  ListNode *next = cur->next;\r \t  if (pre) cur->next = pre;\r \t  pre = cur;\r \t  cur = next;\r \t}\r \ttail->next = pre;\r \ttail = sub_tail;\r \ttail->next = NULL;\r       } else {\r \ttail->next = cur; // Append the rest\r \tcur = NULL;\r       }\r     }\r     return dummy.next;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\five\\Reverse_Nodes_in_k-Group.cpp\\Solution\\reverseKGroup(ListNode*,int)"
    },
    {
        "f": [],
        "fm": "ListNode *rotateRight(ListNode *head, int k) {\r         if (head == NULL) return NULL;\r         if (k == 0) return head;\r         \r         // Let tail walk k steps\r         ListNode *tail = head;\r         int L = 0;\r         while (tail->next && L < k) {\r             tail = tail->next; \r             L ++;\r         }\r         \r         // If reaches the end before k steps, the list has length L + 1\r         if (L < k) return rotateRight(head, k % (L + 1));        \r         \r         // Keep walking parent and tail together till the end\r         ListNode *parent = head;\r         while (tail->next) {\r             tail = tail->next;\r             parent = parent->next;\r         }\r         tail->next = head;\r         head = parent->next;\r         parent->next = NULL;\r         return head;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_rotateRight_ListNodemul_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_rotateRight_ListNodemul_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Rotate_List.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-344705983;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Rotate_List.cpp\\\\rotateRight(ListNode*,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-404690175;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Rotate_List.cpp\\\\rotateRight(ListNode*,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint k=1;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_rotateRight_ListNodemul_int_random_1\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->rotateRight(head,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Rotate_List.cpp\\\\Solution\\\\rotateRight(ListNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Rotate_List.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-344705983;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Rotate_List.cpp\\\\rotateRight(ListNode*,int)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-404690175;\nAKA_mark(\"Calling: .\\\\five\\\\Reverse_Linked_List_II.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\Rotate_List.cpp\\\\rotateRight(ListNode*,int)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\n\n\nint k=1;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_rotateRight_ListNodemul_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_rotateRight_ListNodemul_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Rotate_List.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\n\n\nint k=8;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_rotateRight_ListNodemul_int_random_4\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->rotateRight(head,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Rotate_List.cpp\\\\Solution\\\\rotateRight(ListNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Rotate_List.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nListNode* head;\n\n\nint k=8;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode k */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     ListNode *rotateRight(ListNode *head, int k) {\r         if (head == NULL) return NULL;\r         if (k == 0) return head;\r         \r         // Let tail walk k steps\r         ListNode *tail = head;\r         int L = 0;\r         while (tail->next && L < k) {\r             tail = tail->next; \r             L ++;\r         }\r         \r         // If reaches the end before k steps, the list has length L + 1\r         if (L < k) return rotateRight(head, k % (L + 1));        \r         \r         // Keep walking parent and tail together till the end\r         ListNode *parent = head;\r         while (tail->next) {\r             tail = tail->next;\r             parent = parent->next;\r         }\r         tail->next = head;\r         head = parent->next;\r         parent->next = NULL;\r         return head;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\five\\Rotate_List.cpp\\Solution\\rotateRight(ListNode*,int)"
    },
    {
        "f": [],
        "fm": "bool isScramble(string s1, string s2) {\r     if (!isAnagram(s1, s2)) return false;\r     if (s1.length() <= 3) return true;\r     for (int left = 1; left < s1.size(); ++left) {\r       if (isScramble(s1.substr(0, left), s2.substr(0, left)) &&\r \t  isScramble(s1.substr(left, s1.length()), s2.substr(left, s2.length()))) \r \treturn true;\r       if (isScramble(s1.substr(0, left), s2.substr(s2.length() - left, left)) && \r \t  isScramble(s1.substr(left, s1.length()), s2.substr(0, s2.length() - left)))\r \treturn true;\r     }\r     return false;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isScramble_string_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isScramble_string_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isScramble_string_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isScramble(s1,s2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Scramble_String.cpp\\\\Solution\\\\isScramble(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isScramble_string_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isScramble_string_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName40354 = new char[2];akaRandomName40354[0] = 64;akaRandomName40354[1] = '\\0';string s1=akaRandomName40354;\nchar* akaRandomName197959 = new char[2];akaRandomName197959[0] = -17;akaRandomName197959[1] = '\\0';string s2=akaRandomName197959;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isScramble_string_string_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isScramble(s1,s2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Scramble_String.cpp\\\\Solution\\\\isScramble(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName845090 = new char[2];akaRandomName845090[0] = 64;akaRandomName845090[1] = '\\0';string s1=akaRandomName845090;\nchar* akaRandomName873302 = new char[2];akaRandomName873302[0] = -17;akaRandomName873302[1] = '\\0';string s2=akaRandomName873302;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isScramble_string_string_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_isScramble_string_string_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isScramble_string_string_directed_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isScramble(s1,s2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Scramble_String.cpp\\\\Solution\\\\isScramble(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_isScramble_string_string_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_isScramble_string_string_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isScramble_string_string_directed_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isScramble(s1,s2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Scramble_String.cpp\\\\Solution\\\\isScramble(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_isScramble_string_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_isScramble_string_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isScramble_string_string_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isScramble(s1,s2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Scramble_String.cpp\\\\Solution\\\\isScramble(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_isScramble_string_string_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_isScramble_string_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isScramble_string_string_directed_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isScramble(s1,s2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\five\\\\Scramble_String.cpp\\\\Solution\\\\isScramble(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Scramble_String.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s1=\"\";\nstring s2=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s1 */\n/* NormalStringDataNode s2 */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   bool isScramble(string s1, string s2) {\r     if (!isAnagram(s1, s2)) return false;\r     if (s1.length() <= 3) return true;\r     for (int left = 1; left < s1.size(); ++left) {\r       if (isScramble(s1.substr(0, left), s2.substr(0, left)) &&\r \t  isScramble(s1.substr(left, s1.length()), s2.substr(left, s2.length()))) \r \treturn true;\r       if (isScramble(s1.substr(0, left), s2.substr(s2.length() - left, left)) && \r \t  isScramble(s1.substr(left, s1.length()), s2.substr(0, s2.length() - left)))\r \treturn true;\r     }\r     return false;\r   }\r private:\r   bool isAnagram(const string& s1, const string& s2) {\r     if (s1.size() != s2.size()) return false;\r     vector<int> N(26, 0);\r     for (int i = 0; i < s1.size(); ++i) N[s1[i] - 'a'] ++;\r     for (int i = 0; i < s2.size(); ++i) {\r       if (N[s2[i] - 'a'] -- == 0) return false;\r     }\r     return true;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\five\\Scramble_String.cpp\\Solution\\isScramble(string,string)"
    }
]