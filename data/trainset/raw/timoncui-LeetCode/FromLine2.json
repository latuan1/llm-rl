[
    {
        "f": [],
        "fm": "int main() {\r   int N = 0;\r   cin >> N;\r   for (int i = 0; i < N; ++i) {\r     string x;\r     cin >> x;\r     cout << shortestReduction(x) << endl;\r   }\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_main_random_0(void) {\n{\nAKA_test_case_name=\"main_random_0\";\n\n// set up\n;\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test main_random_0\");int AKA_ACTUAL_OUTPUT=AKA_MAIN();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\main()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\String_Reduction.cpp\\main()"
    },
    {
        "f": [],
        "fm": "pair<int, char> merge(char a, int na, char b, int nb) {\r   if (a == b) return make_pair(na + nb, a);\r   if (na % 2 == 1 && nb % 2 == 1) return make_pair(1, 'a' + 'b' + 'c' - a - b);\r   if (na % 2 == 1) return make_pair(1, a);\r   if (nb % 2 == 1) return make_pair(1, b);\r   if (na < nb) return make_pair(na, a);\r   return make_pair(nb, b);\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_merge_char_int_char_int_directed_0(void) {\n{\nAKA_test_case_name=\"merge_char_int_char_int_directed_0\";\n\n// set up\n;\n\n\nchar a=-1;\n\n\nint na=1;\n\nchar b=0;\n\n\nint nb=0;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test merge_char_int_char_int_directed_0\");pair<int,char> AKA_ACTUAL_OUTPUT=merge(a,na,b,nb);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\merge(char,int,char,int)\");\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\nchar a=-1;\n\n\nint na=1;\n\nchar b=0;\n\n\nint nb=0;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_merge_char_int_char_int_directed_1(void) {\n{\nAKA_test_case_name=\"merge_char_int_char_int_directed_1\";\n\n// set up\n;\n\n\nchar a=0;\n\n\nint na=0;\n\nchar b=0;\n\n\nint nb=0;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test merge_char_int_char_int_directed_1\");pair<int,char> AKA_ACTUAL_OUTPUT=merge(a,na,b,nb);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\merge(char,int,char,int)\");\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\nchar a=0;\n\n\nint na=0;\n\nchar b=0;\n\n\nint nb=0;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_merge_char_int_char_int_random_0(void) {\n{\nAKA_test_case_name=\"merge_char_int_char_int_random_0\";\n\n// set up\n;\n\n\nchar a=-16;\n\n\nint na=1589750876;\n\nchar b=-97;\n\n\nint nb=-956455470;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test merge_char_int_char_int_random_0\");pair<int,char> AKA_ACTUAL_OUTPUT=merge(a,na,b,nb);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\merge(char,int,char,int)\");\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\nchar a=-16;\n\n\nint na=1589750876;\n\nchar b=-97;\n\n\nint nb=-956455470;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_merge_char_int_char_int_random_3(void) {\n{\nAKA_test_case_name=\"merge_char_int_char_int_random_3\";\n\n// set up\n;\n\n\nchar a=-82;\n\n\nint na=-1153756165;\n\nchar b=40;\n\n\nint nb=-733615914;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test merge_char_int_char_int_random_3\");pair<int,char> AKA_ACTUAL_OUTPUT=merge(a,na,b,nb);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\merge(char,int,char,int)\");\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\nchar a=-82;\n\n\nint na=-1153756165;\n\nchar b=40;\n\n\nint nb=-733615914;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_merge_char_int_char_int_random_2(void) {\n{\nAKA_test_case_name=\"merge_char_int_char_int_random_2\";\n\n// set up\n;\n\n\nchar a=36;\n\n\nint na=-1958946439;\n\nchar b=-36;\n\n\nint nb=538419429;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test merge_char_int_char_int_random_2\");pair<int,char> AKA_ACTUAL_OUTPUT=merge(a,na,b,nb);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\merge(char,int,char,int)\");\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\nchar a=36;\n\n\nint na=-1958946439;\n\nchar b=-36;\n\n\nint nb=538419429;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_merge_char_int_char_int_random_1(void) {\n{\nAKA_test_case_name=\"merge_char_int_char_int_random_1\";\n\n// set up\n;\n\n\nchar a=95;\n\n\nint na=664045015;\n\nchar b=-1;\n\n\nint nb=1543017305;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test merge_char_int_char_int_random_1\");pair<int,char> AKA_ACTUAL_OUTPUT=merge(a,na,b,nb);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\merge(char,int,char,int)\");\n\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\nchar a=95;\n\n\nint na=664045015;\n\nchar b=-1;\n\n\nint nb=1543017305;\npair<int, char> AKA_EXPECTED_OUTPUT;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode na */\n/* NormalCharacterDataNode b */\n/* NormalNumberDataNode nb */\n/* PairDataNode RETURN */\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalCharacterDataNode second */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\String_Reduction.cpp\\merge(char,int,char,int)"
    },
    {
        "f": [],
        "fm": "int shortestReduction(const string& x) {\r   int L = x.size();\r   vector<vector<pair<int, char> > > N(L, vector<pair<int, char> >(L, make_pair(INT_MAX, 'd')));\r   for (int i = 0; i < L; ++i) {\r     N[i][i] = make_pair(1, x[i]);\r   }\r   for (int diff = 1; diff < L; ++diff) {\r     for (int i = 0; i < L - diff; ++i) {\r       int j = i + diff;\r       for (int k = i; k < j; ++k) {\r \t// Merge [i, k] and [k + 1, j]\r \tpair<int, char> res = merge(N[i][k].second, N[i][k].first, N[k + 1][j].second, N[k + 1][j].first);\r \tif (res.first < N[i][j].first) N[i][j] = res;\r       }\r     }\r   }\r   return N[0][L - 1].first;\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_shortestReduction_string_const_random_4(void) {\n{\nAKA_test_case_name=\"shortestReduction_string_const_random_4\";\n\n// set up\n;\n\nchar* akaRandomName741064 = new char[2];akaRandomName741064[0] = 78;akaRandomName741064[1] = '\\0';string x=akaRandomName741064;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test shortestReduction_string_const_random_4\");int AKA_ACTUAL_OUTPUT=shortestReduction(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\String_Reduction.cpp\\\\shortestReduction(string const&)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\nchar* akaRandomName793349 = new char[2];akaRandomName793349[0] = 78;akaRandomName793349[1] = '\\0';string x=akaRandomName793349;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode x */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\String_Reduction.cpp\\shortestReduction(string const&)"
    },
    {
        "f": [],
        "fm": "vector<int> findSubstring(string S, vector<string> &L) {\r     vector<int> result;\r     int N = L[0].size();\r     if (N * L.size() > S.size()) return result;        \r     map<string, int> need;\r     for (int i = 0; i < L.size(); ++i) need[L[i]] ++;\r         \r     for (int i = 0; i < N; ++i) {\r       map<string, int> found;\r       // Try to find a valid region\r       int begin = i, pos = i, valid_elements = 0;\r       while (pos < S.size()) {\r \tstring s = S.substr(pos, N);\r \tif (need.count(s) == 0) {\r \t  pos += N;\r \t  begin = pos;\r \t  valid_elements = 0;\r \t  found.clear();\r \t} else {\r \t  found[s] ++;\r \t  if (found[s] <= need[s]) valid_elements ++;\r \t  if (valid_elements == L.size()) break;\r \t  pos += N;\r \t}\r       }\r       if (valid_elements < L.size()) continue;\r       while (pos < S.size()) {\r \t// Try move begin to the right as much as possible\r \tstring s = S.substr(begin, N);\r \twhile (need[s] < found[s]) {\r \t  found[s] --;\r \t  begin += N;\r \t  s = S.substr(begin, N);\r \t}\r \tif (pos - begin == N * (L.size() - 1)) result.push_back(begin);\r \t// Next valid\t\r \tstring t = \"\";\r \tdo {\r \t  pos += N;\r \t  if (pos < S.size()) t = S.substr(pos, N);\r \t  found[t] ++;\r \t} while (t != s && pos < S.size());\r       }\r     }\r     return result;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName800689 = new char[2];akaRandomName800689[0] = -102;akaRandomName800689[1] = '\\0';string S=akaRandomName800689;\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\nchar* akaRandomName692727 = new char[2];akaRandomName692727[0] = -108;akaRandomName692727[1] = '\\0';string L_element0=akaRandomName692727;\nL.push_back(L_element0);\nchar* akaRandomName23872 = new char[2];akaRandomName23872[0] = -82;akaRandomName23872[1] = '\\0';string L_element1=akaRandomName23872;\nL.push_back(L_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_random_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName684504 = new char[2];akaRandomName684504[0] = -102;akaRandomName684504[1] = '\\0';string S=akaRandomName684504;\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\nchar* akaRandomName820007 = new char[2];akaRandomName820007[0] = -108;akaRandomName820007[1] = '\\0';string L_element0=akaRandomName820007;\nL.push_back(L_element0);\nchar* akaRandomName71386 = new char[2];akaRandomName71386[0] = -82;akaRandomName71386[1] = '\\0';string L_element1=akaRandomName71386;\nL.push_back(L_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_directed_6\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_directed_5\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_directed_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_directed_3\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_directed_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_directed_1\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_findSubstring_string_vector_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_findSubstring_string_vector_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findSubstring_string_vector_string_directed_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\Solution\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   vector<int> findSubstring(string S, vector<string> &L) {\r     vector<int> result;\r     int N = L[0].size();\r     if (N * L.size() > S.size()) return result;        \r     map<string, int> need;\r     for (int i = 0; i < L.size(); ++i) need[L[i]] ++;\r         \r     for (int i = 0; i < N; ++i) {\r       map<string, int> found;\r       // Try to find a valid region\r       int begin = i, pos = i, valid_elements = 0;\r       while (pos < S.size()) {\r \tstring s = S.substr(pos, N);\r \tif (need.count(s) == 0) {\r \t  pos += N;\r \t  begin = pos;\r \t  valid_elements = 0;\r \t  found.clear();\r \t} else {\r \t  found[s] ++;\r \t  if (found[s] <= need[s]) valid_elements ++;\r \t  if (valid_elements == L.size()) break;\r \t  pos += N;\r \t}\r       }\r       if (valid_elements < L.size()) continue;\r       while (pos < S.size()) {\r \t// Try move begin to the right as much as possible\r \tstring s = S.substr(begin, N);\r \twhile (need[s] < found[s]) {\r \t  found[s] --;\r \t  begin += N;\r \t  s = S.substr(begin, N);\r \t}\r \tif (pos - begin == N * (L.size() - 1)) result.push_back(begin);\r \t// Next valid\t\r \tstring t = \"\";\r \tdo {\r \t  pos += N;\r \t  if (pos < S.size()) t = S.substr(pos, N);\r \t  found[t] ++;\r \t} while (t != s && pos < S.size());\r       }\r     }\r     return result;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\Substring_with_Concatenation_of_All_Words.cpp\\Solution\\findSubstring(string,vector<string>&)"
    },
    {
        "f": [],
        "fm": "vector<int> findSubstring(string S, vector<string> &L) {\r     vector<int> result;\r     int N = L[0].size();\r     if (N * L.size() > S.size()) return result;\r     map<string, int> need;\r     for (int i = 0; i < L.size(); ++i) need[L[i]] ++;\r     for (int i = 0; i <= S.size() - N * L.size(); ++i) {\r       map<string, int> found;\r       int j = 0;\r       for (; j < L.size(); ++j) {\r \tstring s = S.substr(i + j * N, N);\r \tif (need.count(s) == 0 || ++found[s] > need[s]) break;\r       }\r       if (j == L.size()) result.push_back(i);\r     }\r     return result;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_random_2(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nchar* akaRandomName763272 = new char[2];akaRandomName763272[0] = -10;akaRandomName763272[1] = '\\0';string S=akaRandomName763272;\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\nchar* akaRandomName669228 = new char[2];akaRandomName669228[0] = 95;akaRandomName669228[1] = '\\0';string L_element0=akaRandomName669228;\nL.push_back(L_element0);\nchar* akaRandomName905436 = new char[2];akaRandomName905436[0] = -31;akaRandomName905436[1] = '\\0';string L_element1=akaRandomName905436;\nL.push_back(L_element1);\nchar* akaRandomName665358 = new char[2];akaRandomName665358[0] = -3;akaRandomName665358[1] = '\\0';string L_element2=akaRandomName665358;\nL.push_back(L_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_random_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nchar* akaRandomName561751 = new char[2];akaRandomName561751[0] = -10;akaRandomName561751[1] = '\\0';string S=akaRandomName561751;\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\nchar* akaRandomName631352 = new char[2];akaRandomName631352[0] = 95;akaRandomName631352[1] = '\\0';string L_element0=akaRandomName631352;\nL.push_back(L_element0);\nchar* akaRandomName281958 = new char[2];akaRandomName281958[0] = -31;akaRandomName281958[1] = '\\0';string L_element1=akaRandomName281958;\nL.push_back(L_element1);\nchar* akaRandomName322094 = new char[2];akaRandomName322094[0] = -3;akaRandomName322094[1] = '\\0';string L_element2=akaRandomName322094;\nL.push_back(L_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_0(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_random_0(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nchar* akaRandomName602988 = new char[2];akaRandomName602988[0] = -28;akaRandomName602988[1] = '\\0';string S=akaRandomName602988;\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\nchar* akaRandomName739707 = new char[2];akaRandomName739707[0] = -91;akaRandomName739707[1] = '\\0';string L_element0=akaRandomName739707;\nL.push_back(L_element0);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_random_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nchar* akaRandomName939974 = new char[2];akaRandomName939974[0] = -28;akaRandomName939974[1] = '\\0';string S=akaRandomName939974;\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\nchar* akaRandomName479779 = new char[2];akaRandomName479779[0] = -91;akaRandomName479779[1] = '\\0';string L_element0=akaRandomName479779;\nL.push_back(L_element0);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_2(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_1(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_1\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_4(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_3(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_3\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_6(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_6\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_5(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_5\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_SolutionBruteForce_findSubstring_string_vector_string_directed_7(void) {\n{\nAKA_test_case_name=\"SolutionBruteForce_findSubstring_string_vector_string_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test SolutionBruteForce_findSubstring_string_vector_string_directed_7\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___SolutionBruteForce->findSubstring(S,L);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\SolutionBruteForce\\\\findSubstring(string,vector<string>&)\");\n\n\nvector<string> EXPECTED_L;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___SolutionBruteForce */\n/* ConstructorDataNode SolutionBruteForce() */\nAKA_mark(\"Calling: \\\\SolutionBruteForce()|ROOT\\\\Substring_with_Concatenation_of_All_Words.cpp\\\\GLOBAL\\\\AKA_INSTANCE___SolutionBruteForce\\\\AKA_INSTANCE___SolutionBruteForce\\\\SolutionBruteForce()\");AKA_fCall++;AKA_INSTANCE___SolutionBruteForce = new ::SolutionBruteForce();\n\n\nstring S=\"\";\nvector<string> L;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* VectorDataNode L */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class SolutionBruteForce {\r public:\r   vector<int> findSubstring(string S, vector<string> &L) {\r     vector<int> result;\r     int N = L[0].size();\r     if (N * L.size() > S.size()) return result;\r     map<string, int> need;\r     for (int i = 0; i < L.size(); ++i) need[L[i]] ++;\r     for (int i = 0; i <= S.size() - N * L.size(); ++i) {\r       map<string, int> found;\r       int j = 0;\r       for (; j < L.size(); ++j) {\r \tstring s = S.substr(i + j * N, N);\r \tif (need.count(s) == 0 || ++found[s] > need[s]) break;\r       }\r       if (j == L.size()) result.push_back(i);\r     }\r     return result;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\Substring_with_Concatenation_of_All_Words.cpp\\SolutionBruteForce\\findSubstring(string,vector<string>&)"
    },
    {
        "f": [],
        "fm": "bool isNumber(const char *cs) {\r     string s(cs);\r     if (s.length() == 0) return false;\r \r     // Strip leading and trailing spaces\r     int from = 0, to = s.length() - 1;\r     while (from < s.length() && s[from] == ' ') from ++;\r     while (to >= 0 && s[to] == ' ') to --;\r     s = s.substr(from, max(0, to - from + 1));\r \r     int p = s.find('e');\r     string e = \"\";\r     if (p != string::npos) {\r       e = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r       if (e == \"\") return false;\r     }\r \r     bool res = true;\r     if (e.length()) res &= isInt(e);\r     res &= isNumberNoE(s);\r     return res;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_9(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_9\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_14(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_14\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_8\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_13(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_13\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_13\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_12(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_12\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_12\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_11(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_11\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 11,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_10(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_10\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_10\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 12,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 13,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_7\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 14,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_6\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 15,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=-52;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=-80;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=-52;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=-80;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 16,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_16(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_16\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_16\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 17,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_char_constmul_directed_15(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_char_constmul_directed_15\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_char_constmul_directed_15\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(cs);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumber(char const*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar AKA_ARRAY_INIT_cs[2];\n\nchar AKA_ARRAY_INIT_cs_constantPointer_0=48;\nAKA_ARRAY_INIT_cs[0] = AKA_ARRAY_INIT_cs_constantPointer_0;\n\nchar AKA_ARRAY_INIT_cs_constantPointer_1=0;\nAKA_ARRAY_INIT_cs[1] = AKA_ARRAY_INIT_cs_constantPointer_1;\n\nchar const* cs = AKA_ARRAY_INIT_cs;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode cs */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   bool isNumber(const char *cs) {\r     string s(cs);\r     if (s.length() == 0) return false;\r \r     // Strip leading and trailing spaces\r     int from = 0, to = s.length() - 1;\r     while (from < s.length() && s[from] == ' ') from ++;\r     while (to >= 0 && s[to] == ' ') to --;\r     s = s.substr(from, max(0, to - from + 1));\r \r     int p = s.find('e');\r     string e = \"\";\r     if (p != string::npos) {\r       e = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r       if (e == \"\") return false;\r     }\r \r     bool res = true;\r     if (e.length()) res &= isInt(e);\r     res &= isNumberNoE(s);\r     return res;\r   }\r   bool isNumberNoE(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     int p = s.find('.');\r     string dec = \"\";\r     if (p != string::npos) {\r       dec = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r     }\r     bool res = s.length() || dec.length();\r     if (s.length()) res &= isIntNoSign(s);\r     if (dec.length()) res &= isIntNoSign(dec);\r     return res;\r   }\r   bool isIntNoSign(string s) {\r     if (s.length() == 0) return false;\r     for (int i = 0; i < s.length(); ++i) {\r       if (s[i] > '9' || s[i] < '0') return false;\r     }\r     return true;\r   }\r   bool isInt(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     return isIntNoSign(s);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\Valid_Number.cpp\\Solution\\isNumber(char const*)"
    },
    {
        "f": [],
        "fm": "bool isNumberNoE(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     int p = s.find('.');\r     string dec = \"\";\r     if (p != string::npos) {\r       dec = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r     }\r     bool res = s.length() || dec.length();\r     if (s.length()) res &= isIntNoSign(s);\r     if (dec.length()) res &= isIntNoSign(dec);\r     return res;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName7609 = new char[2];akaRandomName7609[0] = 43;akaRandomName7609[1] = '\\0';string s=akaRandomName7609;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName311098 = new char[2];akaRandomName311098[0] = 43;akaRandomName311098[1] = '\\0';string s=akaRandomName311098;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName2426 = new char[2];akaRandomName2426[0] = 43;akaRandomName2426[1] = '\\0';string s=akaRandomName2426;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_directed_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName923294 = new char[2];akaRandomName923294[0] = 43;akaRandomName923294[1] = '\\0';string s=akaRandomName923294;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName663623 = new char[2];akaRandomName663623[0] = 45;akaRandomName663623[1] = '\\0';string s=akaRandomName663623;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName288514 = new char[2];akaRandomName288514[0] = 45;akaRandomName288514[1] = '\\0';string s=akaRandomName288514;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName695706 = new char[2];akaRandomName695706[0] = 43;akaRandomName695706[1] = '\\0';string s=akaRandomName695706;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName533417 = new char[2];akaRandomName533417[0] = 43;akaRandomName533417[1] = '\\0';string s=akaRandomName533417;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_random_5(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName65671 = new char[2];akaRandomName65671[0] = 49;akaRandomName65671[1] = '\\0';string s=akaRandomName65671;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_random_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName679878 = new char[2];akaRandomName679878[0] = 49;akaRandomName679878[1] = '\\0';string s=akaRandomName679878;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName128126 = new char[2];akaRandomName128126[0] = -5;akaRandomName128126[1] = '\\0';string s=akaRandomName128126;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName567156 = new char[2];akaRandomName567156[0] = -5;akaRandomName567156[1] = '\\0';string s=akaRandomName567156;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName259216 = new char[2];akaRandomName259216[0] = 45;akaRandomName259216[1] = '\\0';string s=akaRandomName259216;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName589145 = new char[2];akaRandomName589145[0] = 45;akaRandomName589145[1] = '\\0';string s=akaRandomName589145;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName319049 = new char[2];akaRandomName319049[0] = 109;akaRandomName319049[1] = '\\0';string s=akaRandomName319049;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName516647 = new char[2];akaRandomName516647[0] = 109;akaRandomName516647[1] = '\\0';string s=akaRandomName516647;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumberNoE_string_random_7(void) {\n{\nAKA_test_case_name=\"Solution_isNumberNoE_string_random_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName831330 = new char[2];akaRandomName831330[0] = -75;akaRandomName831330[1] = '\\0';string s=akaRandomName831330;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumberNoE_string_random_7\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumberNoE(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isNumberNoE(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName719499 = new char[2];akaRandomName719499[0] = -75;akaRandomName719499[1] = '\\0';string s=akaRandomName719499;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   bool isNumber(const char *cs) {\r     string s(cs);\r     if (s.length() == 0) return false;\r \r     // Strip leading and trailing spaces\r     int from = 0, to = s.length() - 1;\r     while (from < s.length() && s[from] == ' ') from ++;\r     while (to >= 0 && s[to] == ' ') to --;\r     s = s.substr(from, max(0, to - from + 1));\r \r     int p = s.find('e');\r     string e = \"\";\r     if (p != string::npos) {\r       e = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r       if (e == \"\") return false;\r     }\r \r     bool res = true;\r     if (e.length()) res &= isInt(e);\r     res &= isNumberNoE(s);\r     return res;\r   }\r   bool isNumberNoE(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     int p = s.find('.');\r     string dec = \"\";\r     if (p != string::npos) {\r       dec = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r     }\r     bool res = s.length() || dec.length();\r     if (s.length()) res &= isIntNoSign(s);\r     if (dec.length()) res &= isIntNoSign(dec);\r     return res;\r   }\r   bool isIntNoSign(string s) {\r     if (s.length() == 0) return false;\r     for (int i = 0; i < s.length(); ++i) {\r       if (s[i] > '9' || s[i] < '0') return false;\r     }\r     return true;\r   }\r   bool isInt(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     return isIntNoSign(s);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\Valid_Number.cpp\\Solution\\isNumberNoE(string)"
    },
    {
        "f": [],
        "fm": "bool isIntNoSign(string s) {\r     if (s.length() == 0) return false;\r     for (int i = 0; i < s.length(); ++i) {\r       if (s[i] > '9' || s[i] < '0') return false;\r     }\r     return true;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_random_6(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_random_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName545077 = new char[2];akaRandomName545077[0] = -25;akaRandomName545077[1] = '\\0';string s=akaRandomName545077;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_random_6\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName807349 = new char[2];akaRandomName807349[0] = -25;akaRandomName807349[1] = '\\0';string s=akaRandomName807349;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName596795 = new char[2];akaRandomName596795[0] = 55;akaRandomName596795[1] = '\\0';string s=akaRandomName596795;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName843243 = new char[2];akaRandomName843243[0] = 55;akaRandomName843243[1] = '\\0';string s=akaRandomName843243;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName7251 = new char[2];akaRandomName7251[0] = 107;akaRandomName7251[1] = '\\0';string s=akaRandomName7251;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName447844 = new char[2];akaRandomName447844[0] = 107;akaRandomName447844[1] = '\\0';string s=akaRandomName447844;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName801599 = new char[2];akaRandomName801599[0] = -4;akaRandomName801599[1] = '\\0';string s=akaRandomName801599;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName631152 = new char[2];akaRandomName631152[0] = -4;akaRandomName631152[1] = '\\0';string s=akaRandomName631152;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName921717 = new char[2];akaRandomName921717[0] = 110;akaRandomName921717[1] = '\\0';string s=akaRandomName921717;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName50343 = new char[2];akaRandomName50343[0] = 110;akaRandomName50343[1] = '\\0';string s=akaRandomName50343;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_10(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_10\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName633623 = new char[2];akaRandomName633623[0] = 48;akaRandomName633623[1] = '\\0';string s=akaRandomName633623;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_10\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName474173 = new char[2];akaRandomName474173[0] = 48;akaRandomName474173[1] = '\\0';string s=akaRandomName474173;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_11(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName694493 = new char[2];akaRandomName694493[0] = 48;akaRandomName694493[1] = '\\0';string s=akaRandomName694493;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_11\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName590201 = new char[2];akaRandomName590201[0] = 48;akaRandomName590201[1] = '\\0';string s=akaRandomName590201;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_12(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_12\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName397340 = new char[2];akaRandomName397340[0] = 48;akaRandomName397340[1] = '\\0';string s=akaRandomName397340;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_12\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName869507 = new char[2];akaRandomName869507[0] = 48;akaRandomName869507[1] = '\\0';string s=akaRandomName869507;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_13(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_13\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName89728 = new char[2];akaRandomName89728[0] = 48;akaRandomName89728[1] = '\\0';string s=akaRandomName89728;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_13\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName870480 = new char[2];akaRandomName870480[0] = 48;akaRandomName870480[1] = '\\0';string s=akaRandomName870480;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_14(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName980608 = new char[2];akaRandomName980608[0] = 48;akaRandomName980608[1] = '\\0';string s=akaRandomName980608;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_14\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName439768 = new char[2];akaRandomName439768[0] = 48;akaRandomName439768[1] = '\\0';string s=akaRandomName439768;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_15(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_15\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName966751 = new char[3];akaRandomName966751[0] = 48;akaRandomName966751[1] = 48;akaRandomName966751[2] = '\\0';string s=akaRandomName966751;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_15\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName314143 = new char[3];akaRandomName314143[0] = 48;akaRandomName314143[1] = 48;akaRandomName314143[2] = '\\0';string s=akaRandomName314143;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 11,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName529678 = new char[3];akaRandomName529678[0] = 48;akaRandomName529678[1] = 48;akaRandomName529678[2] = '\\0';string s=akaRandomName529678;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_8\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName779528 = new char[3];akaRandomName779528[0] = 48;akaRandomName779528[1] = 48;akaRandomName779528[2] = '\\0';string s=akaRandomName779528;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 12,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName800465 = new char[2];akaRandomName800465[0] = 48;akaRandomName800465[1] = '\\0';string s=akaRandomName800465;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_7\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName193077 = new char[2];akaRandomName193077[0] = 48;akaRandomName193077[1] = '\\0';string s=akaRandomName193077;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 13,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_9(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName953378 = new char[2];akaRandomName953378[0] = 48;akaRandomName953378[1] = '\\0';string s=akaRandomName953378;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_9\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName351884 = new char[2];akaRandomName351884[0] = 48;akaRandomName351884[1] = '\\0';string s=akaRandomName351884;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 14,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName781330 = new char[2];akaRandomName781330[0] = 48;akaRandomName781330[1] = '\\0';string s=akaRandomName781330;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName916300 = new char[2];akaRandomName916300[0] = 48;akaRandomName916300[1] = '\\0';string s=akaRandomName916300;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 15,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName599312 = new char[2];akaRandomName599312[0] = 48;akaRandomName599312[1] = '\\0';string s=akaRandomName599312;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName785894 = new char[2];akaRandomName785894[0] = 48;akaRandomName785894[1] = '\\0';string s=akaRandomName785894;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 16,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName821589 = new char[2];akaRandomName821589[0] = 48;akaRandomName821589[1] = '\\0';string s=akaRandomName821589;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_6\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName492630 = new char[2];akaRandomName492630[0] = 48;akaRandomName492630[1] = '\\0';string s=akaRandomName492630;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 17,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName523047 = new char[2];akaRandomName523047[0] = 48;akaRandomName523047[1] = '\\0';string s=akaRandomName523047;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName498675 = new char[2];akaRandomName498675[0] = 48;akaRandomName498675[1] = '\\0';string s=akaRandomName498675;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 18,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName771779 = new char[2];akaRandomName771779[0] = 48;akaRandomName771779[1] = '\\0';string s=akaRandomName771779;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName867179 = new char[2];akaRandomName867179[0] = 48;akaRandomName867179[1] = '\\0';string s=akaRandomName867179;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 19,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName926933 = new char[2];akaRandomName926933[0] = 48;akaRandomName926933[1] = '\\0';string s=akaRandomName926933;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName616086 = new char[2];akaRandomName616086[0] = 48;akaRandomName616086[1] = '\\0';string s=akaRandomName616086;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 20,
                "dt": {},
                "td": "void AKA_TEST_Solution_isIntNoSign_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_isIntNoSign_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isIntNoSign_string_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isIntNoSign(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isIntNoSign(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   bool isNumber(const char *cs) {\r     string s(cs);\r     if (s.length() == 0) return false;\r \r     // Strip leading and trailing spaces\r     int from = 0, to = s.length() - 1;\r     while (from < s.length() && s[from] == ' ') from ++;\r     while (to >= 0 && s[to] == ' ') to --;\r     s = s.substr(from, max(0, to - from + 1));\r \r     int p = s.find('e');\r     string e = \"\";\r     if (p != string::npos) {\r       e = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r       if (e == \"\") return false;\r     }\r \r     bool res = true;\r     if (e.length()) res &= isInt(e);\r     res &= isNumberNoE(s);\r     return res;\r   }\r   bool isNumberNoE(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     int p = s.find('.');\r     string dec = \"\";\r     if (p != string::npos) {\r       dec = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r     }\r     bool res = s.length() || dec.length();\r     if (s.length()) res &= isIntNoSign(s);\r     if (dec.length()) res &= isIntNoSign(dec);\r     return res;\r   }\r   bool isIntNoSign(string s) {\r     if (s.length() == 0) return false;\r     for (int i = 0; i < s.length(); ++i) {\r       if (s[i] > '9' || s[i] < '0') return false;\r     }\r     return true;\r   }\r   bool isInt(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     return isIntNoSign(s);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\Valid_Number.cpp\\Solution\\isIntNoSign(string)"
    },
    {
        "f": [],
        "fm": "bool isInt(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     return isIntNoSign(s);\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isInt_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_isInt_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName565060 = new char[2];akaRandomName565060[0] = 45;akaRandomName565060[1] = '\\0';string s=akaRandomName565060;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isInt_string_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isInt(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isInt(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName638487 = new char[2];akaRandomName638487[0] = 45;akaRandomName638487[1] = '\\0';string s=akaRandomName638487;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isInt_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isInt_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName794840 = new char[2];akaRandomName794840[0] = 35;akaRandomName794840[1] = '\\0';string s=akaRandomName794840;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isInt_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isInt(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isInt(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName821795 = new char[2];akaRandomName821795[0] = 35;akaRandomName821795[1] = '\\0';string s=akaRandomName821795;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isInt_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isInt_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName632977 = new char[2];akaRandomName632977[0] = -91;akaRandomName632977[1] = '\\0';string s=akaRandomName632977;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isInt_string_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isInt(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isInt(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName294916 = new char[2];akaRandomName294916[0] = -91;akaRandomName294916[1] = '\\0';string s=akaRandomName294916;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_isInt_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_isInt_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName775030 = new char[2];akaRandomName775030[0] = 98;akaRandomName775030[1] = '\\0';string s=akaRandomName775030;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isInt_string_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isInt(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isInt(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName538103 = new char[2];akaRandomName538103[0] = 98;akaRandomName538103[1] = '\\0';string s=akaRandomName538103;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_isInt_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isInt_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName215827 = new char[2];akaRandomName215827[0] = 45;akaRandomName215827[1] = '\\0';string s=akaRandomName215827;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isInt_string_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isInt(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isInt(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName469943 = new char[2];akaRandomName469943[0] = 45;akaRandomName469943[1] = '\\0';string s=akaRandomName469943;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_isInt_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isInt_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName916316 = new char[2];akaRandomName916316[0] = 43;akaRandomName916316[1] = '\\0';string s=akaRandomName916316;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isInt_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isInt(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Number.cpp\\\\Solution\\\\isInt(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName607292 = new char[2];akaRandomName607292[0] = 43;akaRandomName607292[1] = '\\0';string s=akaRandomName607292;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   bool isNumber(const char *cs) {\r     string s(cs);\r     if (s.length() == 0) return false;\r \r     // Strip leading and trailing spaces\r     int from = 0, to = s.length() - 1;\r     while (from < s.length() && s[from] == ' ') from ++;\r     while (to >= 0 && s[to] == ' ') to --;\r     s = s.substr(from, max(0, to - from + 1));\r \r     int p = s.find('e');\r     string e = \"\";\r     if (p != string::npos) {\r       e = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r       if (e == \"\") return false;\r     }\r \r     bool res = true;\r     if (e.length()) res &= isInt(e);\r     res &= isNumberNoE(s);\r     return res;\r   }\r   bool isNumberNoE(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     int p = s.find('.');\r     string dec = \"\";\r     if (p != string::npos) {\r       dec = s.substr(p + 1, s.length());\r       s = s.substr(0, p);\r     }\r     bool res = s.length() || dec.length();\r     if (s.length()) res &= isIntNoSign(s);\r     if (dec.length()) res &= isIntNoSign(dec);\r     return res;\r   }\r   bool isIntNoSign(string s) {\r     if (s.length() == 0) return false;\r     for (int i = 0; i < s.length(); ++i) {\r       if (s[i] > '9' || s[i] < '0') return false;\r     }\r     return true;\r   }\r   bool isInt(string s) {\r     if (s == \"\") return false;\r     if (s[0] == '+' || s[0] == '-') s.erase(0, 1);\r     return isIntNoSign(s);\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\Valid_Number.cpp\\Solution\\isInt(string)"
    },
    {
        "f": [],
        "fm": "bool isValid(string s) {\r     string L = \"{[(\", R = \"}])\";\r     stack<char> S;\r     for (int i = 0; i < s.length(); ++i) {\r       if (L.find(s[i]) != string::npos) S.push(s[i]);\r       else if (S.empty() || L.find(S.top()) != R.find(s[i])) return false;\r       else S.pop();\r     }\r     return S.empty();\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName472463 = new char[2];akaRandomName472463[0] = -114;akaRandomName472463[1] = '\\0';string s=akaRandomName472463;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName777370 = new char[2];akaRandomName777370[0] = -114;akaRandomName777370[1] = '\\0';string s=akaRandomName777370;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName916889 = new char[3];akaRandomName916889[0] = 0;akaRandomName916889[1] = 0;akaRandomName916889[2] = '\\0';string s=akaRandomName916889;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_8\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName604485 = new char[3];akaRandomName604485[0] = 0;akaRandomName604485[1] = 0;akaRandomName604485[2] = '\\0';string s=akaRandomName604485;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_9(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName990765 = new char[2];akaRandomName990765[0] = 0;akaRandomName990765[1] = '\\0';string s=akaRandomName990765;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_9\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName738571 = new char[2];akaRandomName738571[0] = 0;akaRandomName738571[1] = '\\0';string s=akaRandomName738571;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_10(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_10\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName939005 = new char[3];akaRandomName939005[0] = 0;akaRandomName939005[1] = 0;akaRandomName939005[2] = '\\0';string s=akaRandomName939005;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_10\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName248689 = new char[3];akaRandomName248689[0] = 0;akaRandomName248689[1] = 0;akaRandomName248689[2] = '\\0';string s=akaRandomName248689;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName237276 = new char[2];akaRandomName237276[0] = 0;akaRandomName237276[1] = '\\0';string s=akaRandomName237276;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_6\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName426527 = new char[2];akaRandomName426527[0] = 0;akaRandomName426527[1] = '\\0';string s=akaRandomName426527;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_11(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName543073 = new char[2];akaRandomName543073[0] = 0;akaRandomName543073[1] = '\\0';string s=akaRandomName543073;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_11\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName270140 = new char[2];akaRandomName270140[0] = 0;akaRandomName270140[1] = '\\0';string s=akaRandomName270140;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName691819 = new char[2];akaRandomName691819[0] = 0;akaRandomName691819[1] = '\\0';string s=akaRandomName691819;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_7\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName300694 = new char[2];akaRandomName300694[0] = 0;akaRandomName300694[1] = '\\0';string s=akaRandomName300694;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_12(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_12\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName477147 = new char[2];akaRandomName477147[0] = 0;akaRandomName477147[1] = '\\0';string s=akaRandomName477147;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_12\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName388283 = new char[2];akaRandomName388283[0] = 0;akaRandomName388283[1] = '\\0';string s=akaRandomName388283;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName5944 = new char[2];akaRandomName5944[0] = 0;akaRandomName5944[1] = '\\0';string s=akaRandomName5944;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName528222 = new char[2];akaRandomName528222[0] = 0;akaRandomName528222[1] = '\\0';string s=akaRandomName528222;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_13(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_13\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName305735 = new char[2];akaRandomName305735[0] = 0;akaRandomName305735[1] = '\\0';string s=akaRandomName305735;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_13\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName859680 = new char[2];akaRandomName859680[0] = 0;akaRandomName859680[1] = '\\0';string s=akaRandomName859680;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName78451 = new char[2];akaRandomName78451[0] = 0;akaRandomName78451[1] = '\\0';string s=akaRandomName78451;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName26823 = new char[2];akaRandomName26823[0] = 0;akaRandomName26823[1] = '\\0';string s=akaRandomName26823;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 11,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_14(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName869399 = new char[2];akaRandomName869399[0] = 0;akaRandomName869399[1] = '\\0';string s=akaRandomName869399;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_14\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName278123 = new char[2];akaRandomName278123[0] = 0;akaRandomName278123[1] = '\\0';string s=akaRandomName278123;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 12,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName319757 = new char[3];akaRandomName319757[0] = 0;akaRandomName319757[1] = 0;akaRandomName319757[2] = '\\0';string s=akaRandomName319757;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName331221 = new char[3];akaRandomName331221[0] = 0;akaRandomName331221[1] = 0;akaRandomName331221[2] = '\\0';string s=akaRandomName331221;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 13,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName732074 = new char[2];akaRandomName732074[0] = 0;akaRandomName732074[1] = '\\0';string s=akaRandomName732074;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName972757 = new char[2];akaRandomName972757[0] = 0;akaRandomName972757[1] = '\\0';string s=akaRandomName972757;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 14,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName295794 = new char[2];akaRandomName295794[0] = 0;akaRandomName295794[1] = '\\0';string s=akaRandomName295794;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName525080 = new char[2];akaRandomName525080[0] = 0;akaRandomName525080[1] = '\\0';string s=akaRandomName525080;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 15,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName216986 = new char[2];akaRandomName216986[0] = 0;akaRandomName216986[1] = '\\0';string s=akaRandomName216986;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName659280 = new char[2];akaRandomName659280[0] = 0;akaRandomName659280[1] = '\\0';string s=akaRandomName659280;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 16,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_15(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_15\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName94815 = new char[2];akaRandomName94815[0] = 0;akaRandomName94815[1] = '\\0';string s=akaRandomName94815;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_15\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName581969 = new char[2];akaRandomName581969[0] = 0;akaRandomName581969[1] = '\\0';string s=akaRandomName581969;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 17,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_16(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_16\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName537668 = new char[2];akaRandomName537668[0] = 0;akaRandomName537668[1] = '\\0';string s=akaRandomName537668;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_16\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName352785 = new char[2];akaRandomName352785[0] = 0;akaRandomName352785[1] = '\\0';string s=akaRandomName352785;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 18,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_17(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_17\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName96515 = new char[2];akaRandomName96515[0] = 0;akaRandomName96515[1] = '\\0';string s=akaRandomName96515;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_17\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName224251 = new char[2];akaRandomName224251[0] = 0;akaRandomName224251[1] = '\\0';string s=akaRandomName224251;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 19,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_18(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_18\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName765529 = new char[3];akaRandomName765529[0] = 0;akaRandomName765529[1] = 0;akaRandomName765529[2] = '\\0';string s=akaRandomName765529;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_18\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName722544 = new char[3];akaRandomName722544[0] = 0;akaRandomName722544[1] = 0;akaRandomName722544[2] = '\\0';string s=akaRandomName722544;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 20,
                "dt": {},
                "td": "void AKA_TEST_Solution_isValid_string_directed_19(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_19\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName852284 = new char[2];akaRandomName852284[0] = 0;akaRandomName852284[1] = '\\0';string s=akaRandomName852284;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_19\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\two\\\\Valid_Parentheses.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Valid_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName776047 = new char[2];akaRandomName776047[0] = 0;akaRandomName776047[1] = '\\0';string s=akaRandomName776047;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   bool isValid(string s) {\r     string L = \"{[(\", R = \"}])\";\r     stack<char> S;\r     for (int i = 0; i < s.length(); ++i) {\r       if (L.find(s[i]) != string::npos) S.push(s[i]);\r       else if (S.empty() || L.find(S.top()) != R.find(s[i])) return false;\r       else S.pop();\r     }\r     return S.empty();\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\two\\Valid_Parentheses.cpp\\Solution\\isValid(string)"
    }
]