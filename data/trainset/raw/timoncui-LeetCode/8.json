[
    {
        "f": [],
        "fm": "string countAndSay(int n) {\r     string s = \"1\";\r     while (n -- > 1) s = countAndSay(s);\r     return s;        \r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   string countAndSay(int n) {\r     string s = \"1\";\r     while (n -- > 1) s = countAndSay(s);\r     return s;        \r   }\r private:\r   string countAndSay(const string& s) {\r     if (s.size() == 0) return \"\";\r     stringstream ss;\r     int c = 1;\r     while (c < s.size() && s[c] == s[0]) c ++;\r     ss << c << s[0];\r     return ss.str() + countAndSay(s.substr(c, s.size()));\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\eleven\\Count_and_Say.cpp\\Solution\\countAndSay(int)"
    },
    {
        "f": [],
        "fm": "string countAndSay(const string& s) {\r     if (s.size() == 0) return \"\";\r     stringstream ss;\r     int c = 1;\r     while (c < s.size() && s[c] == s[0]) c ++;\r     ss << c << s[0];\r     return ss.str() + countAndSay(s.substr(c, s.size()));\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countAndSay_string_const_random_0(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_string_const_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName971042 = new char[2];akaRandomName971042[0] = -83;akaRandomName971042[1] = '\\0';string s=akaRandomName971042;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_string_const_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Count_and_Say.cpp\\\\Solution\\\\countAndSay(string const&)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Count_and_Say.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName479660 = new char[2];akaRandomName479660[0] = -83;akaRandomName479660[1] = '\\0';string s=akaRandomName479660;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   string countAndSay(int n) {\r     string s = \"1\";\r     while (n -- > 1) s = countAndSay(s);\r     return s;        \r   }\r private:\r   string countAndSay(const string& s) {\r     if (s.size() == 0) return \"\";\r     stringstream ss;\r     int c = 1;\r     while (c < s.size() && s[c] == s[0]) c ++;\r     ss << c << s[0];\r     return ss.str() + countAndSay(s.substr(c, s.size()));\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\eleven\\Count_and_Say.cpp\\Solution\\countAndSay(string const&)"
    },
    {
        "f": [],
        "fm": "int numDecodings(string s) {\r     if (s.size() == 0) return 0;\r     int n1 = 1, n2 = 1;\r     int i = s.size() - 1;\r     while (i >= 0) {\r       int n = 0;\r       if (s[i] <= '9' && s[i] >= '1') n += n1;\r       if (i < s.size() - 1) {\r \tint v = (s[i] - '0') * 10 + s[i + 1] - '0';\r \tif (10 <= v && v <= 26) n += n2;\r       }\r       n2 = n1;\r       n1 = n;\r       i --;\r     }\r     return n1;        \r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName165375 = new char[2];akaRandomName165375[0] = 85;akaRandomName165375[1] = '\\0';string s=akaRandomName165375;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName157582 = new char[2];akaRandomName157582[0] = 85;akaRandomName157582[1] = '\\0';string s=akaRandomName157582;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_numDecodings_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_numDecodings_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName901390 = new char[2];akaRandomName901390[0] = 2;akaRandomName901390[1] = '\\0';string s=akaRandomName901390;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numDecodings_string_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numDecodings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Decode_Ways.cpp\\\\Solution\\\\numDecodings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Decode_Ways.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName978774 = new char[2];akaRandomName978774[0] = 2;akaRandomName978774[1] = '\\0';string s=akaRandomName978774;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   int numDecodings(string s) {\r     if (s.size() == 0) return 0;\r     int n1 = 1, n2 = 1;\r     int i = s.size() - 1;\r     while (i >= 0) {\r       int n = 0;\r       if (s[i] <= '9' && s[i] >= '1') n += n1;\r       if (i < s.size() - 1) {\r \tint v = (s[i] - '0') * 10 + s[i + 1] - '0';\r \tif (10 <= v && v <= 26) n += n2;\r       }\r       n2 = n1;\r       n1 = n;\r       i --;\r     }\r     return n1;        \r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\eleven\\Decode_Ways.cpp\\Solution\\numDecodings(string)"
    },
    {
        "f": [],
        "fm": "int minDistance(string& word1, string& word2) {\r         int N = word1.size(), M = word2.size();\r         int H[N + 1][M + 1];        \r         for (int i = 0; i <= N; ++i) H[i][0] = i;\r         for (int i = 0; i <= M; ++i) H[0][i] = i;\r         for (int i = 1; i <= N; ++i) {\r             for (int j = 1; j <= M; ++j) {\r                 if (word1[i - 1] == word2[j - 1]) H[i][j] = H[i - 1][j - 1];\r                 else H[i][j] = 1 + min(min(H[i - 1][j - 1], H[i - 1][j]), H[i][j - 1]);\r             }\r         }\r         return H[N][M];\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_minDistance_string_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_minDistance_string_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Edit_Distance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName890080 = new char[2];akaRandomName890080[0] = -43;akaRandomName890080[1] = '\\0';string word1=akaRandomName890080;\nchar* akaRandomName666973 = new char[2];akaRandomName666973[0] = 99;akaRandomName666973[1] = '\\0';string word2=akaRandomName666973;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word1 */\n/* NormalStringDataNode word2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minDistance_string_string_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minDistance(word1,word2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Edit_Distance.cpp\\\\Solution\\\\minDistance(string&,string&)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Edit_Distance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName565281 = new char[2];akaRandomName565281[0] = -43;akaRandomName565281[1] = '\\0';string word1=akaRandomName565281;\nchar* akaRandomName156289 = new char[2];akaRandomName156289[0] = 99;akaRandomName156289[1] = '\\0';string word2=akaRandomName156289;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word1 */\n/* NormalStringDataNode word2 */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int minDistance(string& word1, string& word2) {\r         int N = word1.size(), M = word2.size();\r         int H[N + 1][M + 1];        \r         for (int i = 0; i <= N; ++i) H[i][0] = i;\r         for (int i = 0; i <= M; ++i) H[0][i] = i;\r         for (int i = 1; i <= N; ++i) {\r             for (int j = 1; j <= M; ++j) {\r                 if (word1[i - 1] == word2[j - 1]) H[i][j] = H[i - 1][j - 1];\r                 else H[i][j] = 1 + min(min(H[i - 1][j - 1], H[i - 1][j]), H[i][j - 1]);\r             }\r         }\r         return H[N][M];\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\eleven\\Edit_Distance.cpp\\Solution\\minDistance(string&,string&)"
    },
    {
        "f": [
            "map<int, vector<string> > Cache;"
        ],
        "fm": "vector<string> generateParenthesis(int n) {\r     if (n == 0) return vector<string>(1, \"\");\r     if (n == 1) return vector<string>(1, \"()\");\r     if (Cache.count(n)) return Cache[n];\r     vector<string> result;\r     for (int i = 0; i < n; ++i) {\r       vector<string> a = generateParenthesis(i), b = generateParenthesis(n - 1 - i);\r       for (int j = 0; j < a.size(); ++j) {\r \tfor (int k = 0; k < b.size(); ++k) {\r \t  result.push_back(\"(\" + a[j] + \")\" + b[k]);\r \t}\r       }\r     }\r     Cache[n] = result;\r     return result;        \r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_generateParenthesis_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_generateParenthesis_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Generate_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=8;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_generateParenthesis_int_random_2\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->generateParenthesis(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Generate_Parentheses.cpp\\\\Solution\\\\generateParenthesis(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Generate_Parentheses.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=8;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   vector<string> generateParenthesis(int n) {\r     if (n == 0) return vector<string>(1, \"\");\r     if (n == 1) return vector<string>(1, \"()\");\r     if (Cache.count(n)) return Cache[n];\r     vector<string> result;\r     for (int i = 0; i < n; ++i) {\r       vector<string> a = generateParenthesis(i), b = generateParenthesis(n - 1 - i);\r       for (int j = 0; j < a.size(); ++j) {\r \tfor (int k = 0; k < b.size(); ++k) {\r \t  result.push_back(\"(\" + a[j] + \")\" + b[k]);\r \t}\r       }\r     }\r     Cache[n] = result;\r     return result;        \r   }\r private:\r   map<int, vector<string> > Cache;\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\eleven\\Generate_Parentheses.cpp\\Solution\\generateParenthesis(int)"
    },
    {
        "f": [],
        "fm": "string intToRoman(int num) {\r     string c[] = {\"IVX\", \"XLC\", \"CDM\", \"MYZ\"};\r     int index[10][4] = {{-1}, {0, -1},\r                         {0, 0, -1},\r                         {0, 0, 0, -1},\r                         {0, 1, -1},\r                         {1, -1},\r                         {1, 0, -1},\r                         {1, 0, 0, -1},\r                         {1, 0, 0, 0},\r                         {0, 2, -1}};\r     string s = \"\";\r     int base = 1000, p = 3;\r     while (p >= 0) {\r       int digit = num / base;\r       num %= base;\r       base /= 10;\r       for (int i = 0; i < 4; ++i) {\r \tif (index[digit][i] < 0) break;\r \ts += c[p][index[digit][i]];\r       }\r       p --;\r     }\r     return s;\r   }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_intToRoman_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_intToRoman_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Integer_to_Roman.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=1238380658;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_intToRoman_int_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->intToRoman(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Integer_to_Roman.cpp\\\\Solution\\\\intToRoman(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Integer_to_Roman.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=1238380658;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r   string intToRoman(int num) {\r     string c[] = {\"IVX\", \"XLC\", \"CDM\", \"MYZ\"};\r     int index[10][4] = {{-1}, {0, -1},\r                         {0, 0, -1},\r                         {0, 0, 0, -1},\r                         {0, 1, -1},\r                         {1, -1},\r                         {1, 0, -1},\r                         {1, 0, 0, -1},\r                         {1, 0, 0, 0},\r                         {0, 2, -1}};\r     string s = \"\";\r     int base = 1000, p = 3;\r     while (p >= 0) {\r       int digit = num / base;\r       num %= base;\r       base /= 10;\r       for (int i = 0; i < 4; ++i) {\r \tif (index[digit][i] < 0) break;\r \ts += c[p][index[digit][i]];\r       }\r       p --;\r     }\r     return s;\r   }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\eleven\\Integer_to_Roman.cpp\\Solution\\intToRoman(int)"
    },
    {
        "f": [],
        "fm": "int main() {\r   Solution s;\r   int x[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\r              11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 42, 92,\r              109, 388, 593, 999, 1020, 2012, 3999};\r   for (int i = 0; i < 32; ++i) {\r     cout << \"case \" << i << \": \" << x[i] << \" = \"\r          << s.intToRoman(x[i]) << endl;\r   }\r }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_main_random_0(void) {\n{\nAKA_test_case_name=\"main_random_0\";\n\n// set up\n;\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test main_random_0\");int AKA_ACTUAL_OUTPUT=AKA_MAIN();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\eleven\\\\Integer_to_Roman.cpp\\\\main()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\timoncui_LeetCode\\eleven\\Integer_to_Roman.cpp\\main()"
    }
]