[
    {
        "f": [],
        "fm": "vector<int> findAnagrams(string s, string p) {         vector<int> result, hash(26, 0);         int lenp = p.length(), lens = s.length();         for(int i = 0; i < lenp; i++) {             hash[p[i] - 'a']++;         }         for(int i = 0; i <= lens - lenp; i++) {             vector<int> temphash(26, 0);             for(int j = i; j < i + lenp; j++)                 temphash[s[j] - 'a']++;             if(temphash == hash)                 result.push_back(i);         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> findAnagrams(string s, string p) {         vector<int> result, hash(26, 0);         int lenp = p.length(), lens = s.length();         for(int i = 0; i < lenp; i++) {             hash[p[i] - 'a']++;         }         for(int i = 0; i <= lens - lenp; i++) {             vector<int> temphash(26, 0);             for(int j = i; j < i + lenp; j++)                 temphash[s[j] - 'a']++;             if(temphash == hash)                 result.push_back(i);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/25/438. Find All Anagrams in a String .cpp/Solution/findAnagrams(string,string)"
    },
    {
        "f": [],
        "fm": "int arrangeCoins(int n) {         return (int)((sqrt(8 * (long)n + 1) - 1)/ 2);     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int arrangeCoins(int n) {         return (int)((sqrt(8 * (long)n + 1) - 1)/ 2);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/25/441. Arranging Coins .cpp/Solution/arrangeCoins(int)"
    },
    {
        "f": [],
        "fm": "ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {         stack<int> s1, s2, s;         while(l1 != NULL) {             s1.push(l1->val);             l1 = l1->next;         }         while(l2 != NULL) {             s2.push(l2->val);             l2 = l2->next;         }         int carry = 0;         while(!s1.empty() || !s2.empty()) {             int tempsum = carry;             if(!s1.empty()) {                 tempsum += s1.top();                 s1.pop();             }             if(!s2.empty()) {                 tempsum += s2.top();                 s2.pop();             }             carry = 0;             if(tempsum >= 10) {                 carry = 1;                 tempsum = tempsum - 10;             }             s.push(tempsum);         }         if(carry == 1)             s.push(1);         ListNode* result = new ListNode(0);         ListNode* cur = result;         while(!s.empty()) {             int top = s.top();             s.pop();             ListNode* node = new ListNode(top);             cur->next = node;             cur = cur->next;         }         return result->next;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {         stack<int> s1, s2, s;         while(l1 != NULL) {             s1.push(l1->val);             l1 = l1->next;         }         while(l2 != NULL) {             s2.push(l2->val);             l2 = l2->next;         }         int carry = 0;         while(!s1.empty() || !s2.empty()) {             int tempsum = carry;             if(!s1.empty()) {                 tempsum += s1.top();                 s1.pop();             }             if(!s2.empty()) {                 tempsum += s2.top();                 s2.pop();             }             carry = 0;             if(tempsum >= 10) {                 carry = 1;                 tempsum = tempsum - 10;             }             s.push(tempsum);         }         if(carry == 1)             s.push(1);         ListNode* result = new ListNode(0);         ListNode* cur = result;         while(!s.empty()) {             int top = s.top();             s.pop();             ListNode* node = new ListNode(top);             cur->next = node;             cur = cur->next;         }         return result->next;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/25/445. Add Two Numbers II.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)"
    },
    {
        "f": [],
        "fm": "int numberOfBoomerangs(vector<pair<int, int>>& points) {         int cnt = 0;         for(int i = 0; i < points.size(); i++) {             map<int, int> m;             int x1 = points[i].first, y1 = points[i].second;             for(int j = 0; j < points.size(); j++) {                 if(j == i) continue;                 int x2 = points[j].first, y2 = points[j].second;                 int dis = (x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2);                 m[dis]++;             }             for(auto it = m.begin(); it != m.end(); it++) {                 cnt += it->second * (it->second - 1);             }         }         return cnt;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int numberOfBoomerangs(vector<pair<int, int>>& points) {         int cnt = 0;         for(int i = 0; i < points.size(); i++) {             map<int, int> m;             int x1 = points[i].first, y1 = points[i].second;             for(int j = 0; j < points.size(); j++) {                 if(j == i) continue;                 int x2 = points[j].first, y2 = points[j].second;                 int dis = (x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2);                 m[dis]++;             }             for(auto it = m.begin(); it != m.end(); it++) {                 cnt += it->second * (it->second - 1);             }         }         return cnt;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/25/447. Number of Boomerangs .cpp/Solution/numberOfBoomerangs(vector<pair<int,int>>&)"
    },
    {
        "f": [],
        "fm": "string frequencySort(string s) {         int cnt[256] = {0};         for(int i = 0; i < s.length(); i++)             cnt[s[i]]++;         sort(s.begin(), s.end(), [&](char a, char b) {             return cnt[a] > cnt[b] || (cnt[a] == cnt[b] && a < b);         });         return s;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string frequencySort(string s) {         int cnt[256] = {0};         for(int i = 0; i < s.length(); i++)             cnt[s[i]]++;         sort(s.begin(), s.end(), [&](char a, char b) {             return cnt[a] > cnt[b] || (cnt[a] == cnt[b] && a < b);         });         return s;     }; };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/25/451. Sort Characters By Frequency.cpp/Solution/frequencySort(string)"
    },
    {
        "f": [],
        "fm": "int minMoves(vector<int>& nums) {         int minn = INT_MAX;         for(int i = 0; i < nums.size(); i++)             minn = min(minn, nums[i]);         int cnt = 0;         for(int i = 0; i < nums.size(); i++)             cnt += nums[i] - minn;         return cnt;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minMoves(vector<int>& nums) {         int minn = INT_MAX;         for(int i = 0; i < nums.size(); i++)             minn = min(minn, nums[i]);         int cnt = 0;         for(int i = 0; i < nums.size(); i++)             cnt += nums[i] - minn;         return cnt;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/25/453. Minimum Moves to Equal Array Elements.cpp/Solution/minMoves(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {         map<int, int> m1, m2;         int result = 0, n = A.size();         for(int i = 0; i < n; i++) {             for(int j = 0; j < n; j++) {                 int t1 = A[i] + B[j];                 int t2 = C[i] + D[j];                 m1[t1]++;                 m2[t2]++;             }         }         for(auto it = m1.begin(); it != m1.end(); it++)             result += it->second * m2[0 - it->first];         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {         map<int, int> m1, m2;         int result = 0, n = A.size();         for(int i = 0; i < n; i++) {             for(int j = 0; j < n; j++) {                 int t1 = A[i] + B[j];                 int t2 = C[i] + D[j];                 m1[t1]++;                 m2[t2]++;             }         }         for(auto it = m1.begin(); it != m1.end(); it++)             result += it->second * m2[0 - it->first];         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/25/454. 4Sum II.cpp/Solution/fourSumCount(vector<int>&,vector<int>&,vector<int>&,vector<int>&)"
    }
]