[
    {
        "f": [],
        "fm": "bool isPowerOfThree(int n) {         if(n <= 0)             return false;         return pow(3, (round)(log(n) / log(3))) == n;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isPowerOfThree(int n) {         if(n <= 0)             return false;         return pow(3, (round)(log(n) / log(3))) == n;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/326. Power of Three.cpp/Solution/isPowerOfThree(int)"
    },
    {
        "f": [],
        "fm": "ListNode* oddEvenList(ListNode* head) {         if (head == NULL) return head;         ListNode *odd = head, *even = head->next, *evenHead = head->next;         while (even != NULL && even->next != NULL) {             odd->next = odd->next->next;             even->next = even->next->next;             odd = odd->next;             even = even->next;         }         odd->next = evenHead;         return head;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* oddEvenList(ListNode* head) {         if (head == NULL) return head;         ListNode *odd = head, *even = head->next, *evenHead = head->next;         while (even != NULL && even->next != NULL) {             odd->next = odd->next->next;             even->next = even->next->next;             odd = odd->next;             even = even->next;         }         odd->next = evenHead;         return head;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/328. Odd Even Linked List.cpp/Solution/oddEvenList(ListNode*)"
    },
    {
        "f": [],
        "fm": "int minPatches(vector<int>& nums, int n) {         int len = nums.size();         long long int t = 1;         int cnt = 0;         int i = 0;         while(t <= n) {             if(i < len && nums[i] <= t) {                 t = t + nums[i];                 i++;             } else {                 t = t + t;                 cnt++;             }         }         return cnt;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minPatches(vector<int>& nums, int n) {         int len = nums.size();         long long int t = 1;         int cnt = 0;         int i = 0;         while(t <= n) {             if(i < len && nums[i] <= t) {                 t = t + nums[i];                 i++;             } else {                 t = t + t;                 cnt++;             }         }         return cnt;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/330. Patching Array.cpp/Solution/minPatches(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "vector<int> countBits(int num) {         vector<int> v(num + 1);         for(int i = 0; i <= num; i++) {             int temp = i;             int cnt = 0;             while(temp) {                 cnt = cnt + temp % 2;                 temp = temp / 2;             }             v[i] = cnt;         }         return v;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> countBits(int num) {         vector<int> v(num + 1);         for(int i = 0; i <= num; i++) {             int temp = i;             int cnt = 0;             while(temp) {                 cnt = cnt + temp % 2;                 temp = temp / 2;             }             v[i] = cnt;         }         return v;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/338. Counting Bits.cpp/Solution/countBits(int)"
    },
    {
        "f": [],
        "fm": "bool isPowerOfFour(int num) {         return num <= 0 ? false : pow(4, (round)(log(num) / log(4))) == num;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isPowerOfFour(int num) {         return num <= 0 ? false : pow(4, (round)(log(num) / log(4))) == num;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/342. Power of Four.cpp/Solution/isPowerOfFour(int)"
    },
    {
        "f": [],
        "fm": "int integerBreak(int n) {         if(n <= 3)             return n - 1;         int cnt = 1;         while(n > 2) {             cnt = cnt * 3;             n = n - 3;         }         if(n == 0)              return cnt;         else if(n == 1)             return cnt / 3 * 4;         else              return cnt * 2;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int integerBreak(int n) {         if(n <= 3)             return n - 1;         int cnt = 1;         while(n > 2) {             cnt = cnt * 3;             n = n - 3;         }         if(n == 0)              return cnt;         else if(n == 1)             return cnt / 3 * 4;         else              return cnt * 2;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/343. Integer Break.cpp/Solution/integerBreak(int)"
    },
    {
        "f": [],
        "fm": "string reverseString(string s) {         reverse(s.begin(), s.end());         return s;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string reverseString(string s) {         reverse(s.begin(), s.end());         return s;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/344. Reverse String.cpp/Solution/reverseString(string)"
    },
    {
        "f": [],
        "fm": "string reverseVowels(string s) {         int i = 0, j = s.length() - 1;         while(i < j) {             while(i < j && s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'                         && s[i] != 'A' && s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U') {                 i++;             }             while(i < j && s[j] != 'a' && s[j] != 'e' && s[j] != 'i' && s[j] != 'o' && s[j] != 'u'                         && s[j] != 'A' && s[j] != 'E' && s[j] != 'I' && s[j] != 'O' && s[j] != 'U') {                 j--;             }             if(i < j) {                 swap(s[i], s[j]);             }             i++;             j--;         }         return s;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string reverseVowels(string s) {         int i = 0, j = s.length() - 1;         while(i < j) {             while(i < j && s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u'                         && s[i] != 'A' && s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U') {                 i++;             }             while(i < j && s[j] != 'a' && s[j] != 'e' && s[j] != 'i' && s[j] != 'o' && s[j] != 'u'                         && s[j] != 'A' && s[j] != 'E' && s[j] != 'I' && s[j] != 'O' && s[j] != 'U') {                 j--;             }             if(i < j) {                 swap(s[i], s[j]);             }             i++;             j--;         }         return s;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/345. Reverse Vowels of a String.cpp/Solution/reverseVowels(string)"
    },
    {
        "f": [],
        "fm": "vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {         set<int> s1;         set<int> s2;         for(int i = 0; i < nums1.size(); i++) {             s1.insert(nums1[i]);         }         for(int i = 0; i < nums2.size(); i++) {             if(s1.find(nums2[i]) != s1.end()) {                 s2.insert(nums2[i]);             }         }         vector<int> v;         for(set<int>::iterator it = s2.begin(); it != s2.end(); it++) {             v.push_back(*it);         }         return v;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {         set<int> s1;         set<int> s2;         for(int i = 0; i < nums1.size(); i++) {             s1.insert(nums1[i]);         }         for(int i = 0; i < nums2.size(); i++) {             if(s1.find(nums2[i]) != s1.end()) {                 s2.insert(nums2[i]);             }         }         vector<int> v;         for(set<int>::iterator it = s2.begin(); it != s2.end(); it++) {             v.push_back(*it);         }         return v;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/349. Intersection of Two Arrays.cpp/Solution/intersection(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {         vector<int> result;         map<int, int> m;         for(int i = 0; i < nums1.size(); i++)             m[nums1[i]]++;         for(int i = 0; i < nums2.size(); i++) {             if(m[nums2[i]] != 0) {                 m[nums2[i]]--;                 result.push_back(nums2[i]);             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {         vector<int> result;         map<int, int> m;         for(int i = 0; i < nums1.size(); i++)             m[nums1[i]]++;         for(int i = 0; i < nums2.size(); i++) {             if(m[nums2[i]] != 0) {                 m[nums2[i]]--;                 result.push_back(nums2[i]);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/350. Intersection of Two Arrays II.cpp/Solution/intersect(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int combinationSum4(vector<int>& nums, int target) {         vector<int> dp(target + 1);         dp[0] = 1;         for (int i = 1; i <= target; i++)             for (int j = 0; j < nums.size(); j++)                 if (i >= nums[j]) dp[i] += dp[i - nums[j]];         return dp[target];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int combinationSum4(vector<int>& nums, int target) {         vector<int> dp(target + 1);         dp[0] = 1;         for (int i = 1; i <= target; i++)             for (int j = 0; j < nums.size(); j++)                 if (i >= nums[j]) dp[i] += dp[i - nums[j]];         return dp[target];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/377. Combination Sum IV.cpp/Solution/combinationSum4(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int kthSmallest(vector<vector<int>>& matrix, int k) {         multiset<int> s;         for(int i = 0; i < matrix.size(); i++) {             for(int j = 0; j < matrix[i].size(); j++) {                 s.insert(matrix[i][j]);                 if(s.size() > k)                     s.erase(--s.end());             }         }         return *s.rbegin();     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int kthSmallest(vector<vector<int>>& matrix, int k) {         multiset<int> s;         for(int i = 0; i < matrix.size(); i++) {             for(int j = 0; j < matrix[i].size(); j++) {                 s.insert(matrix[i][j]);                 if(s.size() > k)                     s.erase(--s.end());             }         }         return *s.rbegin();     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/378. Kth Smallest Element in a Sorted Matrix.cpp/Solution/kthSmallest(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "bool canConstruct(string ransomNote, string magazine) {         vector<int> hash(256);         for(int i = 0; i < magazine.size(); i++)             hash[magazine[i]]++;         for(int i = 0; i < ransomNote.size(); i++)             if(hash[ransomNote[i]])                 hash[ransomNote[i]]--;             else                 return false;         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool canConstruct(string ransomNote, string magazine) {         vector<int> hash(256);         for(int i = 0; i < magazine.size(); i++)             hash[magazine[i]]++;         for(int i = 0; i < ransomNote.size(); i++)             if(hash[ransomNote[i]])                 hash[ransomNote[i]]--;             else                 return false;         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/29/383. Ransom Note.cpp/Solution/canConstruct(string,string)"
    }
]