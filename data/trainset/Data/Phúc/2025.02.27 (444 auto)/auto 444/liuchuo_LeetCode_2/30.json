[
    {
        "f": [],
        "fm": "bool wordPattern(string pattern, string str) {         map<char, string> ptos;         map<string, char> stop;         int len = pattern.length();         string *s = new string [len];         int cnt = 0;         for(int i = 0; i < str.length(); i++) {             if(str[i] == ' ')                 cnt++;         }         if(cnt != len - 1) {             return false;         }         int t = 0;         for(int i = 0; i < str.length(); i++) {             if(str[i] != ' ') {                 s[t] += str[i];             } else {                 t++;             }         }         for(int i = 0; i < len; i++) {             if(ptos.find(pattern[i]) != ptos.end() && ptos[pattern[i]] != s[i]             || stop.find(s[i]) != stop.end() && stop[s[i]] != pattern[i])                 return false;             ptos[pattern[i]] = s[i];             stop[s[i]] = pattern[i];         }         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool wordPattern(string pattern, string str) {         map<char, string> ptos;         map<string, char> stop;         int len = pattern.length();         string *s = new string [len];         int cnt = 0;         for(int i = 0; i < str.length(); i++) {             if(str[i] == ' ')                 cnt++;         }         if(cnt != len - 1) {             return false;         }         int t = 0;         for(int i = 0; i < str.length(); i++) {             if(str[i] != ' ') {                 s[t] += str[i];             } else {                 t++;             }         }         for(int i = 0; i < len; i++) {             if(ptos.find(pattern[i]) != ptos.end() && ptos[pattern[i]] != s[i]             || stop.find(s[i]) != stop.end() && stop[s[i]] != pattern[i])                 return false;             ptos[pattern[i]] = s[i];             stop[s[i]] = pattern[i];         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/290. Word Pattern.cpp/Solution/wordPattern(string,string)"
    },
    {
        "f": [],
        "fm": "bool canWinNim(int n) {         return n % 4;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool canWinNim(int n) {         return n % 4;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/292. Nim Game.cpp/Solution/canWinNim(int)"
    },
    {
        "f": [],
        "fm": "string getHint(string secret, string guess) {         int bull = 0, cow = 0;         int s[10], g[10];         memset(s, 0, sizeof(int) * 10);         memset(g, 0, sizeof(int) * 10);         for(int i = 0; i < secret.length(); i++) {             if(secret[i] == guess[i]) {                 bull++;             } else {                 s[secret[i] - '0']++;                 g[guess[i] - '0']++;             }         }                  for(int i = 0; i < 10; i++) {             if(s[i] >= g[i]) {                 cow = cow + g[i];             } else {                 cow = cow + s[i];             }         }                  string b = \"\";         if(bull == 0)             b = \"0\";         while(bull) {             char temp1 = (bull % 10 + '0');             bull = bull / 10;             b = temp1 + b;         }                  string c = \"\";         if(cow == 0)             c = \"0\";         while(cow) {             char temp2 = (cow % 10 + '0');             cow = cow / 10;             c = temp2 + c;         }                  string ans = b + 'A' + c + 'B';         return ans;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string getHint(string secret, string guess) {         int bull = 0, cow = 0;         int s[10], g[10];         memset(s, 0, sizeof(int) * 10);         memset(g, 0, sizeof(int) * 10);         for(int i = 0; i < secret.length(); i++) {             if(secret[i] == guess[i]) {                 bull++;             } else {                 s[secret[i] - '0']++;                 g[guess[i] - '0']++;             }         }                  for(int i = 0; i < 10; i++) {             if(s[i] >= g[i]) {                 cow = cow + g[i];             } else {                 cow = cow + s[i];             }         }                  string b = \"\";         if(bull == 0)             b = \"0\";         while(bull) {             char temp1 = (bull % 10 + '0');             bull = bull / 10;             b = temp1 + b;         }                  string c = \"\";         if(cow == 0)             c = \"0\";         while(cow) {             char temp2 = (cow % 10 + '0');             cow = cow / 10;             c = temp2 + c;         }                  string ans = b + 'A' + c + 'B';         return ans;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/299. Bulls and Cows.cpp/Solution/getHint(string,string)"
    },
    {
        "f": [],
        "fm": "int lengthOfLIS(vector<int>& nums) {         int n = nums.size();         if(n == 0)             return 0;         vector<int> v;         v.push_back(nums[0]);         for(int i = 1; i < n; i++) {             if(nums[i] > v.back()) {                 v.push_back(nums[i]);             } else {                 *lower_bound(v.begin(), v.end(), nums[i]) = nums[i];             }         }         return v.size();     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int lengthOfLIS(vector<int>& nums) {         int n = nums.size();         if(n == 0)             return 0;         vector<int> v;         v.push_back(nums[0]);         for(int i = 1; i < n; i++) {             if(nums[i] > v.back()) {                 v.push_back(nums[i]);             } else {                 *lower_bound(v.begin(), v.end(), nums[i]) = nums[i];             }         }         return v.size();     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/300. Longest Increasing Subsequence .cpp/Solution/lengthOfLIS(vector<int>&)"
    },
    {
        "f": [
            "vector<int> v;"
        ],
        "fm": "NumArray(vector<int> &nums) {         if(nums.size() == 0)             return ;         v.push_back(nums[0]);         for(int i = 1; i < nums.size(); i++) {             v.push_back(v[i - 1] + nums[i]);         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class NumArray { private:     vector<int> v; public:     NumArray(vector<int> &nums) {         if(nums.size() == 0)             return ;         v.push_back(nums[0]);         for(int i = 1; i < nums.size(); i++) {             v.push_back(v[i - 1] + nums[i]);         }     }      int sumRange(int i, int j) {         if(i == 0)             return v[j];         return v[j] - v[i - 1];     } };",
        "c": [
            "NumArray(vector<int> &nums) {\n        if(nums.size() == 0)\n            return ;\n        v.push_back(nums[0]);\n        for(int i = 1; i < nums.size(); i++) {\n            v.push_back(v[i - 1] + nums[i]);\n        }\n    }"
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/303. Range Sum Query - Immutable.cpp/NumArray/NumArray(vector<int>&)"
    },
    {
        "f": [
            "vector<vector<int>> v;"
        ],
        "fm": "NumMatrix(vector<vector<int>> &matrix) {         int m = matrix.size();         if(matrix.empty())             return ;         int n = matrix[0].size();         v = vector<vector<int>> (m, vector<int>(n));         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(i == 0 && j == 0) {                     v[i][j] = matrix[0][0];                 } else if(i == 0) {                     v[i][j] = v[i][j-1] + matrix[i][j];                 } else if(j == 0) {                     v[i][j] = v[i-1][j] + matrix[i][j];                 } else {                     v[i][j] = v[i-1][j] + v[i][j-1] + matrix[i][j] - v[i-1][j-1];                 }             }         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class NumMatrix { public:     vector<vector<int>> v;     NumMatrix(vector<vector<int>> &matrix) {         int m = matrix.size();         if(matrix.empty())             return ;         int n = matrix[0].size();         v = vector<vector<int>> (m, vector<int>(n));         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(i == 0 && j == 0) {                     v[i][j] = matrix[0][0];                 } else if(i == 0) {                     v[i][j] = v[i][j-1] + matrix[i][j];                 } else if(j == 0) {                     v[i][j] = v[i-1][j] + matrix[i][j];                 } else {                     v[i][j] = v[i-1][j] + v[i][j-1] + matrix[i][j] - v[i-1][j-1];                 }             }         }     }      int sumRegion(int row1, int col1, int row2, int col2) {         if(row1 == 0 && col1 == 0) {             return v[row2][col2];         } else if(row1 == 0) {             return v[row2][col2] - v[row2][col1-1];         } else if(col1 == 0) {             return v[row2][col2] - v[row1-1][col2];         } else {             return v[row2][col2] - v[row1-1][col2] - v[row2][col1-1] + v[row1-1][col1-1];         }     } };",
        "c": [
            "NumMatrix(vector<vector<int>> &matrix) {\n        int m = matrix.size();\n        if(matrix.empty())\n            return ;\n        int n = matrix[0].size();\n        v = vector<vector<int>> (m, vector<int>(n));\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i == 0 && j == 0) {\n                    v[i][j] = matrix[0][0];\n                } else if(i == 0) {\n                    v[i][j] = v[i][j-1] + matrix[i][j];\n                } else if(j == 0) {\n                    v[i][j] = v[i-1][j] + matrix[i][j];\n                } else {\n                    v[i][j] = v[i-1][j] + v[i][j-1] + matrix[i][j] - v[i-1][j-1];\n                }\n            }\n        }\n    }"
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/304. Range Sum Query 2D - Immutable.cpp/NumMatrix/NumMatrix(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int maxProduct(vector<string>& words) {         vector<int> v(words.size());         int result = 0;         for(int i = 0; i < words.size(); i++)             for(int j = 0; j < words[i].length(); j++)                 v[i] = v[i] | 1 << (words[i][j] - 'a');         for(int i = 0; i < words.size(); i++)             for(int j = i + 1; j < words.size(); j++)                 if((v[i] & v[j]) == 0)                     result = max(result, (int)(words[i].length() * words[j].length()));         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maxProduct(vector<string>& words) {         vector<int> v(words.size());         int result = 0;         for(int i = 0; i < words.size(); i++)             for(int j = 0; j < words[i].length(); j++)                 v[i] = v[i] | 1 << (words[i][j] - 'a');         for(int i = 0; i < words.size(); i++)             for(int j = i + 1; j < words.size(); j++)                 if((v[i] & v[j]) == 0)                     result = max(result, (int)(words[i].length() * words[j].length()));         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/318. Maximum Product of Word Lengths.cpp/Solution/maxProduct(vector<string>&)"
    },
    {
        "f": [],
        "fm": "int bulbSwitch(int n) {         int ans = 0;         for(int i = 1; i * i <= n; i++) {             ans++;         }         return ans;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int bulbSwitch(int n) {         int ans = 0;         for(int i = 1; i * i <= n; i++) {             ans++;         }         return ans;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/319. Bulb Switcher.cpp/Solution/bulbSwitch(int)"
    },
    {
        "f": [],
        "fm": "int coinChange(vector<int>& coins, int amount) {         vector<int> dp(amount + 1, -1);         dp[0] = 0;         for (int i = 1; i <= amount; i++) {             for (int j = 0; j < coins.size(); j++) {                 if (i >= coins[j] && dp[i-coins[j]] != -1) {                     if (dp[i] > 0)                          dp[i] = min(dp[i], dp[i-coins[j]] + 1);                     else                         dp[i] = dp[i-coins[j]] + 1;                 }             }         }         return dp[amount];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int coinChange(vector<int>& coins, int amount) {         vector<int> dp(amount + 1, -1);         dp[0] = 0;         for (int i = 1; i <= amount; i++) {             for (int j = 0; j < coins.size(); j++) {                 if (i >= coins[j] && dp[i-coins[j]] != -1) {                     if (dp[i] > 0)                          dp[i] = min(dp[i], dp[i-coins[j]] + 1);                     else                         dp[i] = dp[i-coins[j]] + 1;                 }             }         }         return dp[amount];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/30/322. Coin Change.cpp/Solution/coinChange(vector<int>&,int)"
    }
]