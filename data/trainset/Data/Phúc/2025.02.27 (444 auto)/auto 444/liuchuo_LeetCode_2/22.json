[
    {
        "f": [],
        "fm": "vector<string> findRelativeRanks(vector<int>& nums) {         vector<int> arr = nums;         auto cmp = [](int a, int b) {return a > b;};         sort(arr.begin(), arr.end(), cmp);         vector<string> result(nums.size());         for (int i = 0; i < nums.size(); i++) {             for (int j = 0; j < nums.size(); j++) {                 if (nums[i] == arr[j]) {                     switch(j) {                         case 0: result[i] = \"Gold Medal\"; break;                         case 1: result[i] = \"Silver Medal\"; break;                         case 2: result[i] = \"Bronze Medal\"; break;                         default: result[i] = to_string(j + 1); break;                     }                     break;                 }             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> findRelativeRanks(vector<int>& nums) {         vector<int> arr = nums;         auto cmp = [](int a, int b) {return a > b;};         sort(arr.begin(), arr.end(), cmp);         vector<string> result(nums.size());         for (int i = 0; i < nums.size(); i++) {             for (int j = 0; j < nums.size(); j++) {                 if (nums[i] == arr[j]) {                     switch(j) {                         case 0: result[i] = \"Gold Medal\"; break;                         case 1: result[i] = \"Silver Medal\"; break;                         case 2: result[i] = \"Bronze Medal\"; break;                         default: result[i] = to_string(j + 1); break;                     }                     break;                 }             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/506. Relative Ranks.cpp/Solution/findRelativeRanks(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool checkPerfectNumber(int num) {         if (num == 1) return false;         int sum = 1;         for (int i = 2; i <= sqrt(num); i++)             if (num % i == 0) sum = sum + (num / i) + i;         return num == sum;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool checkPerfectNumber(int num) {         if (num == 1) return false;         int sum = 1;         for (int i = 2; i <= sqrt(num); i++)             if (num % i == 0) sum = sum + (num / i) + i;         return num == sum;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/507. Perfect Number.cpp/Solution/checkPerfectNumber(int)"
    },
    {
        "f": [
            "map<int, int> m;"
        ],
        "fm": "vector<int> findFrequentTreeSum(TreeNode* root) {         vector<int> result;         dfs(root);         int maxn = 0;         for (auto it = m.begin(); it != m.end(); it++)             maxn = max(maxn, it->second);         for (auto it = m.begin(); it != m.end(); it++)             if (it->second == maxn)                 result.push_back(it->first);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     map<int, int> m; public:     vector<int> findFrequentTreeSum(TreeNode* root) {         vector<int> result;         dfs(root);         int maxn = 0;         for (auto it = m.begin(); it != m.end(); it++)             maxn = max(maxn, it->second);         for (auto it = m.begin(); it != m.end(); it++)             if (it->second == maxn)                 result.push_back(it->first);         return result;     }          void dfs(TreeNode* root) {         if (root == NULL) return ;         if (root->left != NULL) {             dfs(root->left);             root->val += root->left->val;         }         if (root->right != NULL) {             dfs(root->right);             root->val += root->right->val;         }         m[root->val]++;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/508. Most Frequent Subtree Sum.cpp/Solution/findFrequentTreeSum(TreeNode*)"
    },
    {
        "f": [
            "map<int, int> m;"
        ],
        "fm": "void dfs(TreeNode* root) {         if (root == NULL) return ;         if (root->left != NULL) {             dfs(root->left);             root->val += root->left->val;         }         if (root->right != NULL) {             dfs(root->right);             root->val += root->right->val;         }         m[root->val]++;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     map<int, int> m; public:     vector<int> findFrequentTreeSum(TreeNode* root) {         vector<int> result;         dfs(root);         int maxn = 0;         for (auto it = m.begin(); it != m.end(); it++)             maxn = max(maxn, it->second);         for (auto it = m.begin(); it != m.end(); it++)             if (it->second == maxn)                 result.push_back(it->first);         return result;     }          void dfs(TreeNode* root) {         if (root == NULL) return ;         if (root->left != NULL) {             dfs(root->left);             root->val += root->left->val;         }         if (root->right != NULL) {             dfs(root->right);             root->val += root->right->val;         }         m[root->val]++;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/508. Most Frequent Subtree Sum.cpp/Solution/dfs(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int findBottomLeftValue(TreeNode* root) {         int result = root->val;         queue<TreeNode *> q;         q.push(root);         TreeNode* temp;         while (!q.empty()) {             int size = q.size();             result = q.front()->val;             while (size--) {                 temp = q.front();                 q.pop();                 if (temp->left != NULL) q.push(temp->left);                 if (temp->right != NULL) q.push(temp->right);             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findBottomLeftValue(TreeNode* root) {         int result = root->val;         queue<TreeNode *> q;         q.push(root);         TreeNode* temp;         while (!q.empty()) {             int size = q.size();             result = q.front()->val;             while (size--) {                 temp = q.front();                 q.pop();                 if (temp->left != NULL) q.push(temp->left);                 if (temp->right != NULL) q.push(temp->right);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/513. Find Bottom Left Tree Value.cpp/Solution/findBottomLeftValue(TreeNode*)"
    },
    {
        "f": [],
        "fm": "vector<int> largestValues(TreeNode* root) {         vector<int> result;         queue<TreeNode *> q;         if (root == NULL) return result;         q.push(root);         TreeNode *temp;         while (!q.empty()) {             int size = q.size();             int maxn = INT_MIN;             while (size--) {                 temp = q.front();                 q.pop();                 maxn = max(maxn, temp->val);                 if (temp->left != NULL) q.push(temp->left);                 if (temp->right != NULL) q.push(temp->right);             }             result.push_back(maxn);         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> largestValues(TreeNode* root) {         vector<int> result;         queue<TreeNode *> q;         if (root == NULL) return result;         q.push(root);         TreeNode *temp;         while (!q.empty()) {             int size = q.size();             int maxn = INT_MIN;             while (size--) {                 temp = q.front();                 q.pop();                 maxn = max(maxn, temp->val);                 if (temp->left != NULL) q.push(temp->left);                 if (temp->right != NULL) q.push(temp->right);             }             result.push_back(maxn);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/515. Find Largest Value in Each Tree Row.cpp/Solution/largestValues(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int longestPalindromeSubseq(string s) {         int len = s.length();         vector<vector<int>> dp(len, vector<int>(len));         for (int i = len - 1; i >= 0; i--) {             dp[i][i] = 1;             for (int j = i + 1; j < len; j++) {                 if (s[i] == s[j])                     dp[i][j] = dp[i+1][j-1] + 2;                 else                     dp[i][j] = max(dp[i+1][j], dp[i][j-1]);             }         }         return dp[0][len-1];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int longestPalindromeSubseq(string s) {         int len = s.length();         vector<vector<int>> dp(len, vector<int>(len));         for (int i = len - 1; i >= 0; i--) {             dp[i][i] = 1;             for (int j = i + 1; j < len; j++) {                 if (s[i] == s[j])                     dp[i][j] = dp[i+1][j-1] + 2;                 else                     dp[i][j] = max(dp[i+1][j], dp[i][j-1]);             }         }         return dp[0][len-1];     }      };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/516. Longest Palindromic Subsequence.cpp/Solution/longestPalindromeSubseq(string)"
    },
    {
        "f": [],
        "fm": "bool detectCapitalUse(string word) {         if (word.length() <= 1) return true;         if (islower(word[0]) || (isupper(word[0]) && islower(word[1]))) {             for (int i = 1; i < word.length(); i++)                 if (isupper(word[i])) return false;         } else {             for (int i = 1; i < word.length(); i++)                 if (islower(word[i])) return false;         }         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool detectCapitalUse(string word) {         if (word.length() <= 1) return true;         if (islower(word[0]) || (isupper(word[0]) && islower(word[1]))) {             for (int i = 1; i < word.length(); i++)                 if (isupper(word[i])) return false;         } else {             for (int i = 1; i < word.length(); i++)                 if (islower(word[i])) return false;         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/520. Detect Capital.cpp/Solution/detectCapitalUse(string)"
    },
    {
        "f": [],
        "fm": "int findLUSlength(string a, string b) {         return a == b ? -1 : max(a.length(), b.length());     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findLUSlength(string a, string b) {         return a == b ? -1 : max(a.length(), b.length());     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/521. Longest Uncommon Subsequence I.cpp/Solution/findLUSlength(string,string)"
    },
    {
        "f": [],
        "fm": "string findLongestWord(string s, vector<string>& d) {         string result = \"\";         for (int index = 0; index < d.size(); index++) {             int i, j;             for (i = 0, j = 0; i < s.length() && j < d[index].length(); i++) {                 if (s[i] == d[index][j]) j++;             }             if (j == d[index].length() && (result.length() < d[index].length() || (result.length() == d[index].length() && result > d[index])))                 result = d[index];         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string findLongestWord(string s, vector<string>& d) {         string result = \"\";         for (int index = 0; index < d.size(); index++) {             int i, j;             for (i = 0, j = 0; i < s.length() && j < d[index].length(); i++) {                 if (s[i] == d[index][j]) j++;             }             if (j == d[index].length() && (result.length() < d[index].length() || (result.length() == d[index].length() && result > d[index])))                 result = d[index];         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/524. Longest Word in Dictionary through Deleting.cpp/Solution/findLongestWord(string,vector<string>&)"
    },
    {
        "f": [],
        "fm": "int findMaxLength(vector<int>& nums) {         int result = 0, sum = 0;         for (int i = 0; i < nums.size(); i++)             if (nums[i] == 0) nums[i] = -1;         map<int, int> m;         m[0] = -1;         for (int i = 0; i < nums.size(); i++) {             sum += nums[i];             if (m.find(sum) != m.end())                 result = max(result, i - m[sum]);             else                 m[sum] = i;         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findMaxLength(vector<int>& nums) {         int result = 0, sum = 0;         for (int i = 0; i < nums.size(); i++)             if (nums[i] == 0) nums[i] = -1;         map<int, int> m;         m[0] = -1;         for (int i = 0; i < nums.size(); i++) {             sum += nums[i];             if (m.find(sum) != m.end())                 result = max(result, i - m[sum]);             else                 m[sum] = i;         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/22/525. Contiguous Array.cpp/Solution/findMaxLength(vector<int>&)"
    }
]