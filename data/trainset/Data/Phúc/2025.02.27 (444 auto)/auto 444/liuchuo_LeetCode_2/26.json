[
    {
        "f": [],
        "fm": "string toHex(int num) {         string result = \"\", s = \"0123456789abcdef\";         for(int i = 1; i <= 8; i++) {             result += s[num & 15];             num = num >> 4;         }         reverse(result.begin(), result.end());         while(result.length() > 1 && result[0] == '0')             result = result.substr(1);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string toHex(int num) {         string result = \"\", s = \"0123456789abcdef\";         for(int i = 1; i <= 8; i++) {             result += s[num & 15];             num = num >> 4;         }         reverse(result.begin(), result.end());         while(result.length() > 1 && result[0] == '0')             result = result.substr(1);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/405. Convert a Number to Hexadecimal.cpp/Solution/toHex(int)"
    },
    {
        "f": [],
        "fm": "int longestPalindrome(string s) {         int hash[256] = {0}, len = 0, flag = 0;         for(int i = 0; i < s.length(); i++)             hash[s[i]]++;         for(int i = 0; i < 256; i++) {             if(hash[i] % 2 == 0) {                 len += hash[i];             } else {                 len += (hash[i] - 1);                 flag = 1;             }         }         return len + flag;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int longestPalindrome(string s) {         int hash[256] = {0}, len = 0, flag = 0;         for(int i = 0; i < s.length(); i++)             hash[s[i]]++;         for(int i = 0; i < 256; i++) {             if(hash[i] % 2 == 0) {                 len += hash[i];             } else {                 len += (hash[i] - 1);                 flag = 1;             }         }         return len + flag;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/409. Longest Palindrome.cpp/Solution/longestPalindrome(string)"
    },
    {
        "f": [],
        "fm": "vector<string> fizzBuzz(int n) {         vector<string> result(n);         for(int i = 0; i < n; i++) {             if((i + 1) % 15 == 0)                 result[i] = \"FizzBuzz\";             else if((i + 1) % 5 == 0)                 result[i] = \"Buzz\";             else if((i + 1) % 3 == 0)                 result[i] = \"Fizz\";             else                 result[i] = to_string(i + 1);         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> fizzBuzz(int n) {         vector<string> result(n);         for(int i = 0; i < n; i++) {             if((i + 1) % 15 == 0)                 result[i] = \"FizzBuzz\";             else if((i + 1) % 5 == 0)                 result[i] = \"Buzz\";             else if((i + 1) % 3 == 0)                 result[i] = \"Fizz\";             else                 result[i] = to_string(i + 1);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/412. Fizz Buzz .cpp/Solution/fizzBuzz(int)"
    },
    {
        "f": [],
        "fm": "int numberOfArithmeticSlices(vector<int>& A) {         int cnt = 0, result = 0;         for(int i = 2; i < A.size(); i++) {             if(A[i-1] - A[i-2] == A[i] - A[i-1]) {                 cnt++;                 result += cnt;             } else {                 cnt = 0;             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int numberOfArithmeticSlices(vector<int>& A) {         int cnt = 0, result = 0;         for(int i = 2; i < A.size(); i++) {             if(A[i-1] - A[i-2] == A[i] - A[i-1]) {                 cnt++;                 result += cnt;             } else {                 cnt = 0;             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/413. Arithmetic Slices.cpp/Solution/numberOfArithmeticSlices(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int thirdMax(vector<int>& nums) {         set<int> s;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() > 3)                 s.erase(s.begin());         }         return s.size() == 3 ? *s.begin() : * s.rbegin();     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int thirdMax(vector<int>& nums) {         set<int> s;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() > 3)                 s.erase(s.begin());         }         return s.size() == 3 ? *s.begin() : * s.rbegin();     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/414. Third Maximum Number.cpp/Solution/thirdMax(vector<int>&)"
    },
    {
        "f": [],
        "fm": "string addStrings(string num1, string num2) {         int len1 = num1.length(), len2 = num2.length();         for(int i = 0; i < len1 / 2; i++)             swap(num1[i], num1[len1 - i - 1]);         for(int i = 0; i < len2 / 2; i++)             swap(num2[i], num2[len2 - i - 1]);         string result = \"\";         int sign = 0, p = 0, q = 0;         while(p < len1 && q < len2) {             int t = (num1[p] - '0') + (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;             q++;         }         while(p < len1) {             int t = (num1[p] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;         }         while(q < len2) {             int t = (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             q++;         }         if(sign == 1)             result += '1';         int len = result.length();         for(int i = 0; i < len / 2; i++) {             swap(result[i], result[len - 1 - i]);         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string addStrings(string num1, string num2) {         int len1 = num1.length(), len2 = num2.length();         for(int i = 0; i < len1 / 2; i++)             swap(num1[i], num1[len1 - i - 1]);         for(int i = 0; i < len2 / 2; i++)             swap(num2[i], num2[len2 - i - 1]);         string result = \"\";         int sign = 0, p = 0, q = 0;         while(p < len1 && q < len2) {             int t = (num1[p] - '0') + (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;             q++;         }         while(p < len1) {             int t = (num1[p] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             p++;         }         while(q < len2) {             int t = (num2[q] - '0') + sign;             if(t >= 10) {                 t = t - 10;                 sign = 1;             } else {                 sign = 0;             }             result += (char)(t + '0');             q++;         }         if(sign == 1)             result += '1';         int len = result.length();         for(int i = 0; i < len / 2; i++) {             swap(result[i], result[len - 1 - i]);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/415. Add Strings .cpp/Solution/addStrings(string,string)"
    },
    {
        "f": [],
        "fm": "int countBattleships(vector<vector<char>>& board) {         int result = 0;         if(board.size() == 0) return 0;         for(int i = 0; i < board.size(); i++) {             for(int j = 0; j < board[0].size(); j++) {                 if(board[i][j] == 'X' && (i == 0 || board[i-1][j] == '.') && (j == 0 || board[i][j-1] == '.'))                     result++;             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int countBattleships(vector<vector<char>>& board) {         int result = 0;         if(board.size() == 0) return 0;         for(int i = 0; i < board.size(); i++) {             for(int j = 0; j < board[0].size(); j++) {                 if(board[i][j] == 'X' && (i == 0 || board[i-1][j] == '.') && (j == 0 || board[i][j-1] == '.'))                     result++;             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/419. Battleships in a Board.cpp/Solution/countBattleships(vector<vector<char>>&)"
    },
    {
        "f": [],
        "fm": "string originalDigits(string s) {         map<char, int> m;         int cnt[10] = {0}, temp;         for(int i = 0; i < s.length(); i++)             m[s[i]]++;         temp = m['z'];         cnt[0] = temp;         m['z'] -= temp;         m['e'] -= temp;         m['r'] -= temp;         m['o'] -= temp;         temp = m['x'];         cnt[6] = temp;         m['s'] -= temp;         m['i'] -= temp;         m['x'] -= temp;         temp = m['w'];         cnt[2] = temp;         m['t'] -= temp;         m['w'] -= temp;         m['o'] -= temp;         temp = m['g'];         cnt[8] = temp;         m['e'] -= temp;         m['i'] -= temp;         m['g'] -= temp;         m['h'] -= temp;         m['t'] -= temp;         temp = m['u'];         cnt[4] = temp;         m['f'] -= temp;         m['o'] -= temp;         m['u'] -= temp;         m['r'] -= temp;         temp = m['s'];         cnt[7] = temp;         m['s'] -= temp;         m['e'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         m['n'] -= temp;         temp = m['r'];         cnt[3] = temp;         m['t'] -= temp;         m['h'] -= temp;         m['r'] -= temp;         m['e'] -= temp;         m['e'] -= temp;         temp = m['o'];         cnt[1] = temp;         m['o'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         temp = m['f'];         cnt[5] = temp;         m['f'] -= temp;         m['i'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         temp = m['e'];         cnt[9] = temp;         m['n'] -= temp;         m['i'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         string result = \"\";         for(int i = 0; i <= 9; i++)             for(int j = 0; j < cnt[i]; j++)                 result += to_string(i);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string originalDigits(string s) {         map<char, int> m;         int cnt[10] = {0}, temp;         for(int i = 0; i < s.length(); i++)             m[s[i]]++;         temp = m['z'];         cnt[0] = temp;         m['z'] -= temp;         m['e'] -= temp;         m['r'] -= temp;         m['o'] -= temp;         temp = m['x'];         cnt[6] = temp;         m['s'] -= temp;         m['i'] -= temp;         m['x'] -= temp;         temp = m['w'];         cnt[2] = temp;         m['t'] -= temp;         m['w'] -= temp;         m['o'] -= temp;         temp = m['g'];         cnt[8] = temp;         m['e'] -= temp;         m['i'] -= temp;         m['g'] -= temp;         m['h'] -= temp;         m['t'] -= temp;         temp = m['u'];         cnt[4] = temp;         m['f'] -= temp;         m['o'] -= temp;         m['u'] -= temp;         m['r'] -= temp;         temp = m['s'];         cnt[7] = temp;         m['s'] -= temp;         m['e'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         m['n'] -= temp;         temp = m['r'];         cnt[3] = temp;         m['t'] -= temp;         m['h'] -= temp;         m['r'] -= temp;         m['e'] -= temp;         m['e'] -= temp;         temp = m['o'];         cnt[1] = temp;         m['o'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         temp = m['f'];         cnt[5] = temp;         m['f'] -= temp;         m['i'] -= temp;         m['v'] -= temp;         m['e'] -= temp;         temp = m['e'];         cnt[9] = temp;         m['n'] -= temp;         m['i'] -= temp;         m['n'] -= temp;         m['e'] -= temp;         string result = \"\";         for(int i = 0; i <= 9; i++)             for(int j = 0; j < cnt[i]; j++)                 result += to_string(i);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/423. Reconstruct Original Digits from English.cpp/Solution/originalDigits(string)"
    },
    {
        "f": [],
        "fm": "int countSegments(string s) {        int cnt = 0, flag = 0;        for(int i = 0; i < s.length(); i++) {            if(s[i] != ' ' && flag == 0) {                cnt++;                flag = 1;            } else if(s[i] == ' ') {                flag = 0;            }         }         return cnt;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int countSegments(string s) {        int cnt = 0, flag = 0;        for(int i = 0; i < s.length(); i++) {            if(s[i] != ' ' && flag == 0) {                cnt++;                flag = 1;            } else if(s[i] == ' ') {                flag = 0;            }         }         return cnt;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/434. Number of Segments in a String.cpp/Solution/countSegments(string)"
    },
    {
        "f": [
            "int result = 0;"
        ],
        "fm": "int pathSum(TreeNode* root, int sum) {         if(root == NULL)             return 0;         pathSum(root->left, sum);         pathSum(root->right, sum);         dfs(root, sum);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int result = 0;     int pathSum(TreeNode* root, int sum) {         if(root == NULL)             return 0;         pathSum(root->left, sum);         pathSum(root->right, sum);         dfs(root, sum);         return result;     }          void dfs(TreeNode* root, int sum) {         if(root == NULL) return ;         if(root->val == sum) result++;         dfs(root->left, sum - root->val);         dfs(root->right, sum - root->val);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/437. Path Sum III.cpp/Solution/pathSum(TreeNode*,int)"
    },
    {
        "f": [
            "int result = 0;"
        ],
        "fm": "void dfs(TreeNode* root, int sum) {         if(root == NULL) return ;         if(root->val == sum) result++;         dfs(root->left, sum - root->val);         dfs(root->right, sum - root->val);     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int result = 0;     int pathSum(TreeNode* root, int sum) {         if(root == NULL)             return 0;         pathSum(root->left, sum);         pathSum(root->right, sum);         dfs(root, sum);         return result;     }          void dfs(TreeNode* root, int sum) {         if(root == NULL) return ;         if(root->val == sum) result++;         dfs(root->left, sum - root->val);         dfs(root->right, sum - root->val);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/26/437. Path Sum III.cpp/Solution/dfs(TreeNode*,int)"
    }
]