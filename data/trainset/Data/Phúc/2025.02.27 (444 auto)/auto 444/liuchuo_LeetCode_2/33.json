[
    {
        "f": [],
        "fm": "void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {         int index = m + n - 1;         int aindex = m - 1;         int bindex = n - 1;         while(aindex >= 0 && bindex >= 0) {             if(nums1[aindex] > nums2[bindex]) {                 nums1[index--] = nums1[aindex--];             } else {                 nums1[index--] = nums2[bindex--];             }         }         while(bindex >= 0) {             nums1[index--] = nums2[bindex--];         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {         int index = m + n - 1;         int aindex = m - 1;         int bindex = n - 1;         while(aindex >= 0 && bindex >= 0) {             if(nums1[aindex] > nums2[bindex]) {                 nums1[index--] = nums1[aindex--];             } else {                 nums1[index--] = nums2[bindex--];             }         }         while(bindex >= 0) {             nums1[index--] = nums2[bindex--];         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/088. Merge Sorted Array .cpp/Solution/merge(vector<int>&,int,vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int countPrimes(int n) {         int *book = new int [n];         for(int i = 2; i < n; i++) {             book[i] = 1;         }         for(int i = 2; i * i < n; i++) {             if(book[i] == 0)                 continue;             for(int j = i * i; j < n; j = j + i) {                 if(j % i == 0)                     book[j] = 0;             }         }         int cnt = 0;         for(int i = 2; i < n; i++) {             if(book[i] == 1)                 cnt++;         }         return cnt;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int countPrimes(int n) {         int *book = new int [n];         for(int i = 2; i < n; i++) {             book[i] = 1;         }         for(int i = 2; i * i < n; i++) {             if(book[i] == 0)                 continue;             for(int j = i * i; j < n; j = j + i) {                 if(j % i == 0)                     book[j] = 0;             }         }         int cnt = 0;         for(int i = 2; i < n; i++) {             if(book[i] == 1)                 cnt++;         }         return cnt;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/204. Count Primes.cpp/Solution/countPrimes(int)"
    },
    {
        "f": [],
        "fm": "bool isIsomorphic(string s, string t) {         int len = s.length();         int lent = t.length();         if(len != lent)             return false;         map<char, char> stot;         map<char, char> ttos;         for(int i = 0; i < len; i++) {             if(stot.find(s[i]) != stot.end() && stot[s[i]] != t[i]              || ttos.find(t[i]) != ttos.end() && ttos[t[i]] != s[i])                 return false;             stot[s[i]] = t[i];             ttos[t[i]] = s[i];         }         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isIsomorphic(string s, string t) {         int len = s.length();         int lent = t.length();         if(len != lent)             return false;         map<char, char> stot;         map<char, char> ttos;         for(int i = 0; i < len; i++) {             if(stot.find(s[i]) != stot.end() && stot[s[i]] != t[i]              || ttos.find(t[i]) != ttos.end() && ttos[t[i]] != s[i])                 return false;             stot[s[i]] = t[i];             ttos[t[i]] = s[i];         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/205. Isomorphic Strings.cpp/Solution/isIsomorphic(string,string)"
    },
    {
        "f": [],
        "fm": "int minSubArrayLen(int s, vector<int>& nums) {         int len = nums.size();         int minlen = len + 1;         vector<int> sum(len + 1);         for(int i = 1; i <= len; i++) {             sum[i] = sum[i-1] + nums[i-1];         }         for(int i = 0; i <= len; i++) {             for(int j = i + 1; j <= len; j++) {                 if(sum[j] - sum[i] >= s) {                     minlen = min(minlen, j - i);                     break;                 }             }         }         if(minlen == len + 1)             return 0;         return minlen;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minSubArrayLen(int s, vector<int>& nums) {         int len = nums.size();         int minlen = len + 1;         vector<int> sum(len + 1);         for(int i = 1; i <= len; i++) {             sum[i] = sum[i-1] + nums[i-1];         }         for(int i = 0; i <= len; i++) {             for(int j = i + 1; j <= len; j++) {                 if(sum[j] - sum[i] >= s) {                     minlen = min(minlen, j - i);                     break;                 }             }         }         if(minlen == len + 1)             return 0;         return minlen;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/209. Minimum Size Subarray Sum.cpp/Solution/minSubArrayLen(int,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int rob(vector<int>& nums) {         int n = nums.size();         if(n == 0)             return 0;         if(n == 1)             return nums[0];         if(n == 2)             return max(nums[0], nums[1]);         return max(func(nums, 0, n-2), func(nums, 1, n-1));     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int rob(vector<int>& nums) {         int n = nums.size();         if(n == 0)             return 0;         if(n == 1)             return nums[0];         if(n == 2)             return max(nums[0], nums[1]);         return max(func(nums, 0, n-2), func(nums, 1, n-1));     }     int func(vector<int>& nums, int begin, int end) {         int n = end - begin + 1;         vector<int> dp(n);         dp[0] = nums[begin];         dp[1] = max(nums[begin], nums[begin+1]);         for(int i = 2; i < n; i++) {             int temp = dp[i - 2] + nums[begin+i];             dp[i] = max(temp, dp[i-1]);         }         return dp[n - 1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/213. House Robber II.cpp/Solution/rob(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int func(vector<int>& nums, int begin, int end) {         int n = end - begin + 1;         vector<int> dp(n);         dp[0] = nums[begin];         dp[1] = max(nums[begin], nums[begin+1]);         for(int i = 2; i < n; i++) {             int temp = dp[i - 2] + nums[begin+i];             dp[i] = max(temp, dp[i-1]);         }         return dp[n - 1];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int rob(vector<int>& nums) {         int n = nums.size();         if(n == 0)             return 0;         if(n == 1)             return nums[0];         if(n == 2)             return max(nums[0], nums[1]);         return max(func(nums, 0, n-2), func(nums, 1, n-1));     }     int func(vector<int>& nums, int begin, int end) {         int n = end - begin + 1;         vector<int> dp(n);         dp[0] = nums[begin];         dp[1] = max(nums[begin], nums[begin+1]);         for(int i = 2; i < n; i++) {             int temp = dp[i - 2] + nums[begin+i];             dp[i] = max(temp, dp[i-1]);         }         return dp[n - 1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/213. House Robber II.cpp/Solution/func(vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "int findKthLargest(vector<int>& nums, int k) {         multiset<int> s;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() > k)                 s.erase(s.begin());         }         return *s.begin();     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findKthLargest(vector<int>& nums, int k) {         multiset<int> s;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() > k)                 s.erase(s.begin());         }         return *s.begin();     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/215. Kth Largest Element in an Array.cpp/Solution/findKthLargest(vector<int>&,int)"
    },
    {
        "f": [
            "vector<vector<int>> result;",
            "vector<int> path;"
        ],
        "fm": "vector<vector<int>> combinationSum3(int k, int n) {         dfs(k, n, 1);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> result;     vector<int> path;     vector<vector<int>> combinationSum3(int k, int n) {         dfs(k, n, 1);         return result;     }          void dfs(int k, int n, int start) {         if(k == 0) {             if(n == 0)                 result.push_back(path);             return ;         }         for(int i = start; i <= 9; i++) {             path.push_back(i);             dfs(k - 1, n - i, i + 1);             path.pop_back();         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/216. Combination Sum III.cpp/Solution/combinationSum3(int,int)"
    },
    {
        "f": [],
        "fm": "bool containsDuplicate(vector<int>& nums) {         set<int> m;         for(int i = 0; i < nums.size(); i++) {             m.insert(nums[i]);         }         return nums.size() != m.size();     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool containsDuplicate(vector<int>& nums) {         set<int> m;         for(int i = 0; i < nums.size(); i++) {             m.insert(nums[i]);         }         return nums.size() != m.size();     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/217. Contains Duplicate .cpp/Solution/containsDuplicate(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool containsNearbyDuplicate(vector<int>& nums, int k) {         set<int> s;         int t = 0;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() == t) {                 for(int j = i - 1; j >= 0 && j >= i - k; j--) {                     if(nums[i] == nums[j])                         return true;                 }             }             t = s.size();         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool containsNearbyDuplicate(vector<int>& nums, int k) {         set<int> s;         int t = 0;         for(int i = 0; i < nums.size(); i++) {             s.insert(nums[i]);             if(s.size() == t) {                 for(int j = i - 1; j >= 0 && j >= i - k; j--) {                     if(nums[i] == nums[j])                         return true;                 }             }             t = s.size();         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/219. Contains Duplicate II.cpp/Solution/containsNearbyDuplicate(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {         map<long, int> m;         int j = 0;         for (int i = 0; i < nums.size(); ++i) {             if (i - j > k && m[nums[j]] == j) m.erase(nums[j++]);             auto a = m.lower_bound((long)nums[i] - t);             if (a != m.end() && abs(a->first - nums[i]) <= t) return true;             m[nums[i]] = i;         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {         map<long, int> m;         int j = 0;         for (int i = 0; i < nums.size(); ++i) {             if (i - j > k && m[nums[j]] == j) m.erase(nums[j++]);             auto a = m.lower_bound((long)nums[i] - t);             if (a != m.end() && abs(a->first - nums[i]) <= t) return true;             m[nums[i]] = i;         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/220. Contains Duplicate III.cpp/Solution/containsNearbyAlmostDuplicate(vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {         int maxae = A > E ? A : E;         int mincg = C > G ? G : C;         int maxfb = F > B ? F : B;         int minhd = H > D ? D : H;         int overlap;         if(maxae >= mincg || maxfb >= minhd)             overlap = 0;         else             overlap = (mincg - maxae) * (minhd - maxfb);         return (C - A) * (D - B) + (G - E) * (H - F) - overlap;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {         int maxae = A > E ? A : E;         int mincg = C > G ? G : C;         int maxfb = F > B ? F : B;         int minhd = H > D ? D : H;         int overlap;         if(maxae >= mincg || maxfb >= minhd)             overlap = 0;         else             overlap = (mincg - maxae) * (minhd - maxfb);         return (C - A) * (D - B) + (G - E) * (H - F) - overlap;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/223. Rectangle Area.cpp/Solution/computeArea(int,int,int,int,int,int,int,int)"
    },
    {
        "f": [],
        "fm": "vector<string> summaryRanges(vector<int>& nums) {         vector<string> result;         if(nums.size() == 0)             return result;         string temp = \"\";         int flag = 0;         temp += to_string(nums[0]);         for(int i = 1; i < nums.size(); i++) {             if(nums[i] != nums[i-1] + 1 && flag == 1) {                 flag = 0;                 temp += \"->\" + to_string(nums[i-1]);                 result.push_back(temp);                 temp = \"\" + to_string(nums[i]);             } else if(nums[i] != nums[i-1] + 1) {                 result.push_back(temp);                 temp = \"\" + to_string(nums[i]);             } else {                 flag = 1;             }         }         if(flag == 1) {             temp += \"->\" + to_string(nums[nums.size() - 1]);         }         result.push_back(temp);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> summaryRanges(vector<int>& nums) {         vector<string> result;         if(nums.size() == 0)             return result;         string temp = \"\";         int flag = 0;         temp += to_string(nums[0]);         for(int i = 1; i < nums.size(); i++) {             if(nums[i] != nums[i-1] + 1 && flag == 1) {                 flag = 0;                 temp += \"->\" + to_string(nums[i-1]);                 result.push_back(temp);                 temp = \"\" + to_string(nums[i]);             } else if(nums[i] != nums[i-1] + 1) {                 result.push_back(temp);                 temp = \"\" + to_string(nums[i]);             } else {                 flag = 1;             }         }         if(flag == 1) {             temp += \"->\" + to_string(nums[nums.size() - 1]);         }         result.push_back(temp);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/33/228. Summary Ranges.cpp/Solution/summaryRanges(vector<int>&)"
    }
]