[
    {
        "f": [
            "vector<int> nums;",
            "vector<vector<int>> dp;"
        ],
        "fm": "bool PredictTheWinner(vector<int>& nums) {         this->nums = nums;         int len = nums.size();         dp.resize(len, vector<int>(len));         return func(0, len-1) >= 0;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool PredictTheWinner(vector<int>& nums) {         this->nums = nums;         int len = nums.size();         dp.resize(len, vector<int>(len));         return func(0, len-1) >= 0;     } private:     vector<int> nums;     vector<vector<int>> dp;     int func(int begin, int end) {         dp[begin][end] = begin == end ? nums[begin] : max(nums[begin] - func(begin+1, end), nums[end] - func(begin, end-1));         return dp[begin][end];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/486. Predict the Winner.cpp/Solution/PredictTheWinner(vector<int>&)"
    },
    {
        "f": [
            "set<vector<int>> s;",
            "vector<int> nums;",
            "vector<int> row;"
        ],
        "fm": "vector<vector<int>> findSubsequences(vector<int>& nums) {         vector<vector<int>> result;         this->nums = nums;         dfs(-101, -1);         for (auto it = s.begin(); it != s.end(); it++)             result.push_back(*it);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> findSubsequences(vector<int>& nums) {         vector<vector<int>> result;         this->nums = nums;         dfs(-101, -1);         for (auto it = s.begin(); it != s.end(); it++)             result.push_back(*it);         return result;     } private:     set<vector<int>> s;     vector<int> nums, row;     void dfs(int lastNum, int index) {         if (row.size() >= 2) s.insert(row);         if (index == nums.size()) return ;         for (int i = index + 1; i < nums.size(); i++) {             if (nums[i] >= lastNum) {                 row.push_back(nums[i]);                 dfs(nums[i], i);                 row.pop_back();             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/491. Increasing Subsequences.cpp/Solution/findSubsequences(vector<int>&)"
    },
    {
        "f": [
            "set<vector<int>> s;",
            "vector<int> nums;",
            "vector<int> row;"
        ],
        "fm": "void dfs(int lastNum, int index) {         if (row.size() >= 2) s.insert(row);         if (index == nums.size()) return ;         for (int i = index + 1; i < nums.size(); i++) {             if (nums[i] >= lastNum) {                 row.push_back(nums[i]);                 dfs(nums[i], i);                 row.pop_back();             }         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> findSubsequences(vector<int>& nums) {         vector<vector<int>> result;         this->nums = nums;         dfs(-101, -1);         for (auto it = s.begin(); it != s.end(); it++)             result.push_back(*it);         return result;     } private:     set<vector<int>> s;     vector<int> nums, row;     void dfs(int lastNum, int index) {         if (row.size() >= 2) s.insert(row);         if (index == nums.size()) return ;         for (int i = index + 1; i < nums.size(); i++) {             if (nums[i] >= lastNum) {                 row.push_back(nums[i]);                 dfs(nums[i], i);                 row.pop_back();             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/491. Increasing Subsequences.cpp/Solution/dfs(int,int)"
    },
    {
        "f": [],
        "fm": "vector<int> constructRectangle(int area) {         vector<int> result(2, 0);         int l = sqrt(area), w = sqrt(area);         while(l * w != area) {             if(l * w < area)                 l++;             else                 w--;         }         result[0] = l;         result[1] = w;         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> constructRectangle(int area) {         vector<int> result(2, 0);         int l = sqrt(area), w = sqrt(area);         while(l * w != area) {             if(l * w < area)                 l++;             else                 w--;         }         result[0] = l;         result[1] = w;         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/492. Construct the Rectangle.cpp/Solution/constructRectangle(int)"
    },
    {
        "f": [
            "int result;"
        ],
        "fm": "int findTargetSumWays(vector<int>& nums, int S) {         dfs(0, 0, nums, S);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int result;     int findTargetSumWays(vector<int>& nums, int S) {         dfs(0, 0, nums, S);         return result;     }     void dfs(int sum, int cnt, vector<int>& nums, int S) {         if(cnt == nums.size()) {             if(sum == S)                 result++;             return ;         }         dfs(sum + nums[cnt], cnt + 1, nums, S);         dfs(sum - nums[cnt], cnt + 1, nums, S);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/494. Target Sum.cpp/Solution/findTargetSumWays(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {         vector<int> result;         stack<int> s;         map<int, int> m;         for (int i = nums.size() - 1; i >= 0; i--) {             while (!s.empty() && s.top() <= nums[i])                  s.pop();             m[nums[i]] = s.empty() ? -1 : s.top();             s.push(nums[i]);         }         for (int i = 0; i < findNums.size(); i++)             result.push_back(m[findNums[i]]);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {         vector<int> result;         stack<int> s;         map<int, int> m;         for (int i = nums.size() - 1; i >= 0; i--) {             while (!s.empty() && s.top() <= nums[i])                  s.pop();             m[nums[i]] = s.empty() ? -1 : s.top();             s.push(nums[i]);         }         for (int i = 0; i < findNums.size(); i++)             result.push_back(m[findNums[i]]);         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/496. Next Greater Element I.cpp/Solution/nextGreaterElement(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {         vector<int> result;         int m = matrix.size();         if (m == 0) return result;         int n = matrix[0].size(), index = 0;         vector<vector<int>> temp(m + n - 1);         for (int i = 0; i < m; i++, index++) {             temp[index].push_back(matrix[i][0]);             for (int x = i, y = 0; x - 1 >= 0 && y + 1 < n; x--, y++)                 temp[index].push_back(matrix[x-1][y+1]);         }         for (int j = 1; j < n; j++, index++) {             temp[index].push_back(matrix[m-1][j]);             for (int x = m - 1, y = j; x - 1 >= 0 && y + 1 < n; x--, y++)                 temp[index].push_back(matrix[x-1][y+1]);         }         for (int i = 0; i < m + n - 1; i++) {             if (i % 2 == 1) {                 for (int j = temp[i].size() - 1; j >= 0; j--)                     result.push_back(temp[i][j]);             } else {                 for (int j = 0; j < temp[i].size(); j++)                 result.push_back(temp[i][j]);             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {         vector<int> result;         int m = matrix.size();         if (m == 0) return result;         int n = matrix[0].size(), index = 0;         vector<vector<int>> temp(m + n - 1);         for (int i = 0; i < m; i++, index++) {             temp[index].push_back(matrix[i][0]);             for (int x = i, y = 0; x - 1 >= 0 && y + 1 < n; x--, y++)                 temp[index].push_back(matrix[x-1][y+1]);         }         for (int j = 1; j < n; j++, index++) {             temp[index].push_back(matrix[m-1][j]);             for (int x = m - 1, y = j; x - 1 >= 0 && y + 1 < n; x--, y++)                 temp[index].push_back(matrix[x-1][y+1]);         }         for (int i = 0; i < m + n - 1; i++) {             if (i % 2 == 1) {                 for (int j = temp[i].size() - 1; j >= 0; j--)                     result.push_back(temp[i][j]);             } else {                 for (int j = 0; j < temp[i].size(); j++)                 result.push_back(temp[i][j]);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/498. Diagonal Traverse.cpp/Solution/findDiagonalOrder(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<string> findWords(vector<string>& words) {         vector<string> result;         vector<set<char>> v(3);         string s1 = \"QWERTYUIOPqwertyuiop\", s2 = \"ASDFGHJKLasdfghjkl\", s3 = \"ZXCVBNMzxcvbnm\";         for (int i = 0; i < s1.length(); i++) v[0].insert(s1[i]);         for (int i = 0; i < s2.length(); i++) v[1].insert(s2[i]);         for (int i = 0; i < s3.length(); i++) v[2].insert(s3[i]);         for (int i = 0; i < words.size(); i++) {             int tag = -1;             bool flag = true;             if (words[i].length() == 0) continue;              if (v[0].find(words[i][0]) != v[0].end()) tag = 0;             if (v[1].find(words[i][0]) != v[1].end()) tag = 1;             if (v[2].find(words[i][0]) != v[2].end()) tag = 2;             for (int j = 1; j < words[i].length(); j++) {                 if (v[tag].find(words[i][j]) == v[tag].end()) {                     flag = false;                     break;                 }             }             if (flag == true)                 result.push_back(words[i]);         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<string> findWords(vector<string>& words) {         vector<string> result;         vector<set<char>> v(3);         string s1 = \"QWERTYUIOPqwertyuiop\", s2 = \"ASDFGHJKLasdfghjkl\", s3 = \"ZXCVBNMzxcvbnm\";         for (int i = 0; i < s1.length(); i++) v[0].insert(s1[i]);         for (int i = 0; i < s2.length(); i++) v[1].insert(s2[i]);         for (int i = 0; i < s3.length(); i++) v[2].insert(s3[i]);         for (int i = 0; i < words.size(); i++) {             int tag = -1;             bool flag = true;             if (words[i].length() == 0) continue;              if (v[0].find(words[i][0]) != v[0].end()) tag = 0;             if (v[1].find(words[i][0]) != v[1].end()) tag = 1;             if (v[2].find(words[i][0]) != v[2].end()) tag = 2;             for (int j = 1; j < words[i].length(); j++) {                 if (v[tag].find(words[i][j]) == v[tag].end()) {                     flag = false;                     break;                 }             }             if (flag == true)                 result.push_back(words[i]);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/500. Keyboard Row.cpp/Solution/findWords(vector<string>&)"
    },
    {
        "f": [],
        "fm": "vector<int> nextGreaterElements(vector<int>& nums) {         int n = nums.size();         vector<int> result(n, -1);         stack<int> s;         for (int i = 0; i < n; i++) {             while (!s.empty() && nums[s.top()] < nums[i]) {                 result[s.top()] = nums[i];                 s.pop();             }             s.push(i);         }         for (int i = 0; i < n; i++) {             while (!s.empty() && nums[s.top()] < nums[i]) {                 result[s.top()] = nums[i];                 s.pop();             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> nextGreaterElements(vector<int>& nums) {         int n = nums.size();         vector<int> result(n, -1);         stack<int> s;         for (int i = 0; i < n; i++) {             while (!s.empty() && nums[s.top()] < nums[i]) {                 result[s.top()] = nums[i];                 s.pop();             }             s.push(i);         }         for (int i = 0; i < n; i++) {             while (!s.empty() && nums[s.top()] < nums[i]) {                 result[s.top()] = nums[i];                 s.pop();             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/503. Next Greater Element II.cpp/Solution/nextGreaterElements(vector<int>&)"
    },
    {
        "f": [],
        "fm": "string convertToBase7(int num) {         if (num == 0) return \"0\";         string sign = \"\";         if (num < 0) {             num = 0 - num;             sign = \"-\";         }         string result = \"\";         while (num != 0) {             result = to_string(num % 7) + result;             num = num / 7;         }         return sign + result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string convertToBase7(int num) {         if (num == 0) return \"0\";         string sign = \"\";         if (num < 0) {             num = 0 - num;             sign = \"-\";         }         string result = \"\";         while (num != 0) {             result = to_string(num % 7) + result;             num = num / 7;         }         return sign + result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/23/504. Base 7.cpp/Solution/convertToBase7(int)"
    }
]