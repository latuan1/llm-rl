[
    {
        "f": [],
        "fm": "int exploreIsland(int i, int j, vector<vector<char>>& grid, vector<vector<bool>>& visited) {         int result = 0;         int rows = grid.size();         int cols = 0;         if (rows > 0) cols = grid[0].size();         queue<vector<int>> q;         q.push({i, j});         while (!q.empty()) {             vector<int> front = q.front();             q.pop();             i = front[0];             j = front[1];             if (visited[i][j]) continue;             visited[i][j] = true;             if (grid[i][j] == '1') {                 result = 1;                 if ((i-1 >= 0) && !visited[i-1][j]) q.push({i-1, j});                 if ((i+1 < rows) && !visited[i+1][j]) q.push({i+1, j});                 if ((j-1 >= 0) && !visited[i][j-1]) q.push({i, j-1});                 if ((j+1 < cols) && !visited[i][j+1]) q.push({i, j+1});             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int exploreIsland(int i, int j, vector<vector<char>>& grid, vector<vector<bool>>& visited) {         int result = 0;         int rows = grid.size();         int cols = 0;         if (rows > 0) cols = grid[0].size();         queue<vector<int>> q;         q.push({i, j});         while (!q.empty()) {             vector<int> front = q.front();             q.pop();             i = front[0];             j = front[1];             if (visited[i][j]) continue;             visited[i][j] = true;             if (grid[i][j] == '1') {                 result = 1;                 if ((i-1 >= 0) && !visited[i-1][j]) q.push({i-1, j});                 if ((i+1 < rows) && !visited[i+1][j]) q.push({i+1, j});                 if ((j-1 >= 0) && !visited[i][j-1]) q.push({i, j-1});                 if ((j+1 < cols) && !visited[i][j+1]) q.push({i, j+1});             }         }         return result;     }          int numIslands(vector<vector<char>>& grid) {         int result = 0;         int rows = grid.size();         int cols = 0;         if (rows > 0) cols = grid[0].size();         vector<vector<bool>> visited(rows, vector<bool>(cols, false));         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (visited[i][j]) continue;                 if (grid[i][j] == '1') {                     result += exploreIsland(i, j, grid, visited);                 } else {                     visited[i][j] = true;                 }             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/200-number-of-islands.cpp/Solution/exploreIsland(int,int,vector<vector<char>>&,vector<vector<bool>>&)"
    },
    {
        "f": [],
        "fm": "int numIslands(vector<vector<char>>& grid) {         int result = 0;         int rows = grid.size();         int cols = 0;         if (rows > 0) cols = grid[0].size();         vector<vector<bool>> visited(rows, vector<bool>(cols, false));         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (visited[i][j]) continue;                 if (grid[i][j] == '1') {                     result += exploreIsland(i, j, grid, visited);                 } else {                     visited[i][j] = true;                 }             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int exploreIsland(int i, int j, vector<vector<char>>& grid, vector<vector<bool>>& visited) {         int result = 0;         int rows = grid.size();         int cols = 0;         if (rows > 0) cols = grid[0].size();         queue<vector<int>> q;         q.push({i, j});         while (!q.empty()) {             vector<int> front = q.front();             q.pop();             i = front[0];             j = front[1];             if (visited[i][j]) continue;             visited[i][j] = true;             if (grid[i][j] == '1') {                 result = 1;                 if ((i-1 >= 0) && !visited[i-1][j]) q.push({i-1, j});                 if ((i+1 < rows) && !visited[i+1][j]) q.push({i+1, j});                 if ((j-1 >= 0) && !visited[i][j-1]) q.push({i, j-1});                 if ((j+1 < cols) && !visited[i][j+1]) q.push({i, j+1});             }         }         return result;     }          int numIslands(vector<vector<char>>& grid) {         int result = 0;         int rows = grid.size();         int cols = 0;         if (rows > 0) cols = grid[0].size();         vector<vector<bool>> visited(rows, vector<bool>(cols, false));         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (visited[i][j]) continue;                 if (grid[i][j] == '1') {                     result += exploreIsland(i, j, grid, visited);                 } else {                     visited[i][j] = true;                 }             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/200-number-of-islands.cpp/Solution/numIslands(vector<vector<char>>&)"
    },
    {
        "f": [],
        "fm": "ListNode* reverseList(ListNode* head) {         ListNode* p1 = nullptr;         ListNode* p2 = head;         while (p2 != nullptr) {             ListNode* p3 = p2->next;             p2->next = p1;             p1 = p2;             p2 = p3;         }         return p1;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* reverseList(ListNode* head) {         ListNode* p1 = nullptr;         ListNode* p2 = head;         while (p2 != nullptr) {             ListNode* p3 = p2->next;             p2->next = p1;             p1 = p2;             p2 = p3;         }         return p1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/206-reverse-linked-list.cpp/Solution/reverseList(ListNode*)"
    },
    {
        "f": [],
        "fm": "bool dfs(int i, vector<bool>& visited, unordered_set<int>& visiting, unordered_map<int, vector<int>>& graph) {         if (visiting.find(i) != visiting.end()) return false;         visiting.emplace(i);         for (int n : graph[i]) {             if (!visited[i]) {                 bool finishPossible = dfs(n, visited, visiting, graph);                 if (!finishPossible) return false;             }         }         visited[i] = true;         visiting.erase(i);         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool dfs(int i, vector<bool>& visited, unordered_set<int>& visiting, unordered_map<int, vector<int>>& graph) {         if (visiting.find(i) != visiting.end()) return false;         visiting.emplace(i);         for (int n : graph[i]) {             if (!visited[i]) {                 bool finishPossible = dfs(n, visited, visiting, graph);                 if (!finishPossible) return false;             }         }         visited[i] = true;         visiting.erase(i);         return true;     }          bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {         unordered_map<int, vector<int>> graph;         for (const vector<int>& prereq : prerequisites) {             auto it = graph.find(prereq[0]);             if (it != graph.end()) {                 (it->second).push_back(prereq[1]);             } else {                 graph[prereq[0]] = {prereq[1]};             }         }                  vector<bool> visited(numCourses, false);         unordered_set<int> visiting;                  for (int i = 0; i < numCourses; i++) {             if (!visited[i]) {                 bool finishPossible = dfs(i, visited, visiting, graph);                 if (!finishPossible) return false;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/207-course-schedule.cpp/Solution/dfs(int,vector<bool>&,unordered_set<int>&,unordered_map<int,vector<int>>&)"
    },
    {
        "f": [],
        "fm": "bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {         unordered_map<int, vector<int>> graph;         for (const vector<int>& prereq : prerequisites) {             auto it = graph.find(prereq[0]);             if (it != graph.end()) {                 (it->second).push_back(prereq[1]);             } else {                 graph[prereq[0]] = {prereq[1]};             }         }                  vector<bool> visited(numCourses, false);         unordered_set<int> visiting;                  for (int i = 0; i < numCourses; i++) {             if (!visited[i]) {                 bool finishPossible = dfs(i, visited, visiting, graph);                 if (!finishPossible) return false;             }         }         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool dfs(int i, vector<bool>& visited, unordered_set<int>& visiting, unordered_map<int, vector<int>>& graph) {         if (visiting.find(i) != visiting.end()) return false;         visiting.emplace(i);         for (int n : graph[i]) {             if (!visited[i]) {                 bool finishPossible = dfs(n, visited, visiting, graph);                 if (!finishPossible) return false;             }         }         visited[i] = true;         visiting.erase(i);         return true;     }          bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {         unordered_map<int, vector<int>> graph;         for (const vector<int>& prereq : prerequisites) {             auto it = graph.find(prereq[0]);             if (it != graph.end()) {                 (it->second).push_back(prereq[1]);             } else {                 graph[prereq[0]] = {prereq[1]};             }         }                  vector<bool> visited(numCourses, false);         unordered_set<int> visiting;                  for (int i = 0; i < numCourses; i++) {             if (!visited[i]) {                 bool finishPossible = dfs(i, visited, visiting, graph);                 if (!finishPossible) return false;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/207-course-schedule.cpp/Solution/canFinish(int,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int findKthLargest(vector<int>& nums, int k) {         sort(nums.begin(), nums.end(), greater<int>());         return nums[k-1];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findKthLargest(vector<int>& nums, int k) {         sort(nums.begin(), nums.end(), greater<int>());         return nums[k-1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/215-kth-largest-element-in-array.cpp/Solution/findKthLargest(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int maximalSquare(vector<vector<char>>& matrix) {         int rows = matrix.size();         if (rows == 0) return 0;         int cols = matrix[0].size();         vector<vector<int>> maxSquareCorner(rows + 1, vector<int>(cols + 1, 0));         int result = 0;         for (int i = 1; i <= rows; i++) {             for (int j = 1; j <= cols; j++) {                 if (matrix[i - 1][j - 1] == '1') {                     maxSquareCorner[i][j] = min(maxSquareCorner[i - 1][j - 1], min(maxSquareCorner[i - 1][j], maxSquareCorner[i][j - 1])) + 1;                     result = max(result, maxSquareCorner[i][j]);                 }             }         }         return result * result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maximalSquare(vector<vector<char>>& matrix) {         int rows = matrix.size();         if (rows == 0) return 0;         int cols = matrix[0].size();         vector<vector<int>> maxSquareCorner(rows + 1, vector<int>(cols + 1, 0));         int result = 0;         for (int i = 1; i <= rows; i++) {             for (int j = 1; j <= cols; j++) {                 if (matrix[i - 1][j - 1] == '1') {                     maxSquareCorner[i][j] = min(maxSquareCorner[i - 1][j - 1], min(maxSquareCorner[i - 1][j], maxSquareCorner[i][j - 1])) + 1;                     result = max(result, maxSquareCorner[i][j]);                 }             }         }         return result * result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/221-maximal-square.cpp/Solution/maximalSquare(vector<vector<char>>&)"
    },
    {
        "f": [],
        "fm": "TreeNode* invertTree(TreeNode* root) {         if (!root || !root->left && !root->right) {             return root;         }         TreeNode* tmp;         tmp = invertTree(root->left);         root->left = invertTree(root->right);         root->right = tmp;         return root;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     TreeNode* invertTree(TreeNode* root) {         if (!root || !root->left && !root->right) {             return root;         }         TreeNode* tmp;         tmp = invertTree(root->left);         root->left = invertTree(root->right);         root->right = tmp;         return root;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/226-invert-binary-tree.cpp/Solution/invertTree(TreeNode*)"
    },
    {
        "f": [],
        "fm": "vector<int> majorityElement(vector<int>& nums) {         int times = nums.size() / 3;         unordered_map<int, int> counts;         vector<int> result;         for (int i = 0; i < nums.size(); i++) {             if (counts.find(nums[i]) == counts.end()) {                 counts[nums[i]] = 1;             } else {                 counts[nums[i]]++;             }         }         for (auto it = counts.begin(); it != counts.end(); it++) {             if (it->second > times) {                 result.push_back(it->first);             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> majorityElement(vector<int>& nums) {         int times = nums.size() / 3;         unordered_map<int, int> counts;         vector<int> result;         for (int i = 0; i < nums.size(); i++) {             if (counts.find(nums[i]) == counts.end()) {                 counts[nums[i]] = 1;             } else {                 counts[nums[i]]++;             }         }         for (auto it = counts.begin(); it != counts.end(); it++) {             if (it->second > times) {                 result.push_back(it->first);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/229-majority-element-ii.cpp/Solution/majorityElement(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> productExceptSelf(vector<int>& nums) {         vector<int> result(nums.size(), 1);         for (int i = 1; i < nums.size(); i++) {             result[i] = nums[i - 1] * result[i - 1];         }         int prevProduct = 1;         for (int i = nums.size() - 2; i >= 0; i--) {             int product = nums[i + 1] * prevProduct;             result[i] = result[i] * product;             prevProduct = product;         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> productExceptSelf(vector<int>& nums) {         vector<int> result(nums.size(), 1);         for (int i = 1; i < nums.size(); i++) {             result[i] = nums[i - 1] * result[i - 1];         }         int prevProduct = 1;         for (int i = nums.size() - 2; i >= 0; i--) {             int product = nums[i + 1] * prevProduct;             result[i] = result[i] * product;             prevProduct = product;         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/238-product-of-array-except-self.cpp/Solution/productExceptSelf(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (rows == 0) return false;         int cols = matrix[0].size();         int currRow = 0;         int currCol = cols - 1;         while (currRow < rows && currCol >= 0) {             if (matrix[currRow][currCol] == target) {                 return true;             } else if (matrix[currRow][currCol] < target) {                 currRow++;             } else {                 currCol--;             }         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (rows == 0) return false;         int cols = matrix[0].size();         int currRow = 0;         int currCol = cols - 1;         while (currRow < rows && currCol >= 0) {             if (matrix[currRow][currCol] == target) {                 return true;             } else if (matrix[currRow][currCol] < target) {                 currRow++;             } else {                 currCol--;             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/240-search-a-2d-matrix-ii.cpp/Solution/searchMatrix(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "int minMeetingRooms(vector<vector<int>>& intervals) {         if (intervals.size() <= 1) return intervals.size();         sort(intervals.begin(), intervals.end(),              [] (const auto& i, const auto& j) {                 return i[0] < j[0];             });                  priority_queue<int, vector<int>, greater<int>> minHeap;         int roomsRequired = 1;         minHeap.emplace(intervals[0][1]);         for (int i = 1; i < intervals.size(); i++) {             int earliestEndingTime = minHeap.top();             if (intervals[i][0] < earliestEndingTime) {                 roomsRequired++;             } else {                 minHeap.pop();             }             minHeap.emplace(intervals[i][1]);         }         return roomsRequired;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minMeetingRooms(vector<vector<int>>& intervals) {         if (intervals.size() <= 1) return intervals.size();         sort(intervals.begin(), intervals.end(),              [] (const auto& i, const auto& j) {                 return i[0] < j[0];             });                  priority_queue<int, vector<int>, greater<int>> minHeap;         int roomsRequired = 1;         minHeap.emplace(intervals[0][1]);         for (int i = 1; i < intervals.size(); i++) {             int earliestEndingTime = minHeap.top();             if (intervals[i][0] < earliestEndingTime) {                 roomsRequired++;             } else {                 minHeap.pop();             }             minHeap.emplace(intervals[i][1]);         }         return roomsRequired;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/6/253-meeting-rooms-ii.cpp/Solution/minMeetingRooms(vector<vector<int>>&)"
    }
]