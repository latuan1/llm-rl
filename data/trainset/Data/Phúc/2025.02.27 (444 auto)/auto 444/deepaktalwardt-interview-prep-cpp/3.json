[
    {
        "f": [],
        "fm": "vector<int> spiralOrder(vector<vector<int>>& matrix) {                  if (matrix.size() == 0) return {};                  int r_beg = 0;         int r_end = matrix.size() - 1;         int c_beg = 0;         int c_end = matrix[0].size() - 1;         vector<int> result;                  while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result.push_back(matrix[r_beg][i]);             }             r_beg++;                          for (int i = r_beg; i <= r_end; i++) {                 result.push_back(matrix[i][c_end]);             }             c_end--;                          if (r_beg <= r_end) {                 for (int i = c_end; i >= c_beg; i--) {                     result.push_back(matrix[r_end][i]);                 }             }             r_end--;                          if (c_beg <= c_end) {                 for (int i = r_end; i >= r_beg; i--) {                     result.push_back(matrix[i][c_beg]);                 }             }             c_beg++;         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> spiralOrder(vector<vector<int>>& matrix) {                  if (matrix.size() == 0) return {};                  int r_beg = 0;         int r_end = matrix.size() - 1;         int c_beg = 0;         int c_end = matrix[0].size() - 1;         vector<int> result;                  while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result.push_back(matrix[r_beg][i]);             }             r_beg++;                          for (int i = r_beg; i <= r_end; i++) {                 result.push_back(matrix[i][c_end]);             }             c_end--;                          if (r_beg <= r_end) {                 for (int i = c_end; i >= c_beg; i--) {                     result.push_back(matrix[r_end][i]);                 }             }             r_end--;                          if (c_beg <= c_end) {                 for (int i = r_end; i >= r_beg; i--) {                     result.push_back(matrix[i][c_beg]);                 }             }             c_beg++;         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/54-spiral-matrix.cpp/Solution/spiralOrder(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> merge(vector<vector<int>>& intervals) {         if (intervals.size() == 0) return {};          if (intervals.size() == 1) return {intervals[0]};         sort(intervals.begin(), intervals.end(),              [](const vector<int>& v1, const vector<int>& v2) {                return v1[0] < v2[0];              });                  vector<vector<int>> result = {intervals[0]};                  for (int i = 1; i < intervals.size(); i++) {             vector<int> toCompare = result[result.size() - 1];             if (toCompare[1] >= intervals[i][0]) {                 if (toCompare[1] <= intervals[i][1]) {                     result[result.size() - 1] = {toCompare[0], intervals[i][1]};                 }             } else {                 result.push_back(intervals[i]);             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> merge(vector<vector<int>>& intervals) {         if (intervals.size() == 0) return {};          if (intervals.size() == 1) return {intervals[0]};         sort(intervals.begin(), intervals.end(),              [](const vector<int>& v1, const vector<int>& v2) {                return v1[0] < v2[0];              });                  vector<vector<int>> result = {intervals[0]};                  for (int i = 1; i < intervals.size(); i++) {             vector<int> toCompare = result[result.size() - 1];             if (toCompare[1] >= intervals[i][0]) {                 if (toCompare[1] <= intervals[i][1]) {                     result[result.size() - 1] = {toCompare[0], intervals[i][1]};                 }             } else {                 result.push_back(intervals[i]);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/56-merge-intervals.cpp/Solution/merge(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> generateMatrix(int n) {         vector<vector<int>> result(n, vector<int>(n, 0));         int r_beg = 0;         int r_end = n - 1;         int c_beg = 0;         int c_end = n - 1;         int val = 1;         while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result[r_beg][i] = val++;             }             r_beg++;             for (int i = r_beg; i <= r_end; i++) {                 result[i][c_end] = val++;             }             c_end--;             for (int i = c_end; i >= c_beg; i--) {                 result[r_end][i] = val++;             }             r_end--;             for (int i = r_end; i >= r_beg; i--) {                 result[i][c_beg] = val++;             }             c_beg++;         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> generateMatrix(int n) {         vector<vector<int>> result(n, vector<int>(n, 0));         int r_beg = 0;         int r_end = n - 1;         int c_beg = 0;         int c_end = n - 1;         int val = 1;         while (r_beg <= r_end && c_beg <= c_end) {             for (int i = c_beg; i <= c_end; i++) {                 result[r_beg][i] = val++;             }             r_beg++;             for (int i = r_beg; i <= r_end; i++) {                 result[i][c_end] = val++;             }             c_end--;             for (int i = c_end; i >= c_beg; i--) {                 result[r_end][i] = val++;             }             r_end--;             for (int i = r_end; i >= r_beg; i--) {                 result[i][c_beg] = val++;             }             c_beg++;         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/59-spiral-matrix-ii.cpp/Solution/generateMatrix(int)"
    },
    {
        "f": [],
        "fm": "int climbStairs(int n) {         if (n == 1) return 1;         int prevPrev = 1; // Number of ways to climb staircase of len 1         int prev = 2; // Number of ways to climb staircase of len 2         for (int i = 3; i < n + 1; i++) {             int curr = prevPrev + prev;              prevPrev = prev;             prev = curr;         }         return prev;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int climbStairs(int n) {         if (n == 1) return 1;         int prevPrev = 1; // Number of ways to climb staircase of len 1         int prev = 2; // Number of ways to climb staircase of len 2         for (int i = 3; i < n + 1; i++) {             int curr = prevPrev + prev;              prevPrev = prev;             prev = curr;         }         return prev;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/70-climbing-stairs.cpp/Solution/climbStairs(int)"
    },
    {
        "f": [],
        "fm": "bool binarySearch(vector<int>& row, int target, int start, int end) {         if (start >= end) {             return false;         }         int mid = (start + end) / 2;         if (row[mid] == target) {             return true;         } else if (row[mid] < target) {             return binarySearch(row, target, mid + 1, end);         } else {             return binarySearch(row, target, start, mid);         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool binarySearch(vector<int>& row, int target, int start, int end) {         if (start >= end) {             return false;         }         int mid = (start + end) / 2;         if (row[mid] == target) {             return true;         } else if (row[mid] < target) {             return binarySearch(row, target, mid + 1, end);         } else {             return binarySearch(row, target, start, mid);         }     }          bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (!rows) return false;         int cols = matrix[0].size();         if (!cols) return false;         for (int r = 0; r < rows; r++) {             if (target >= matrix[r][0] && target <= matrix[r][cols - 1]) {                 return binarySearch(matrix[r], target, 0, cols);             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/74-search-a-2d-matrix.cpp/Solution/binarySearch(vector<int>&,int,int,int)"
    },
    {
        "f": [],
        "fm": "bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (!rows) return false;         int cols = matrix[0].size();         if (!cols) return false;         for (int r = 0; r < rows; r++) {             if (target >= matrix[r][0] && target <= matrix[r][cols - 1]) {                 return binarySearch(matrix[r], target, 0, cols);             }         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool binarySearch(vector<int>& row, int target, int start, int end) {         if (start >= end) {             return false;         }         int mid = (start + end) / 2;         if (row[mid] == target) {             return true;         } else if (row[mid] < target) {             return binarySearch(row, target, mid + 1, end);         } else {             return binarySearch(row, target, start, mid);         }     }          bool searchMatrix(vector<vector<int>>& matrix, int target) {         int rows = matrix.size();         if (!rows) return false;         int cols = matrix[0].size();         if (!cols) return false;         for (int r = 0; r < rows; r++) {             if (target >= matrix[r][0] && target <= matrix[r][cols - 1]) {                 return binarySearch(matrix[r], target, 0, cols);             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/74-search-a-2d-matrix.cpp/Solution/searchMatrix(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "bool findWord(vector<vector<char>>& board, string& word, int i, int j, int pos, int& rows, int& cols) {         if (i < 0 || i >= rows || j < 0 || j >= cols) {             return false;         }                  if (pos == word.size() - 1) return true;                  char tempChar = board[i][j];         board[i][j] = '$';                  bool found = false;         if (i + 1 < rows && board[i + 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i + 1, j, pos + 1, rows, cols);         }         if (i - 1 >= 0 && board[i - 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i - 1, j, pos + 1, rows, cols);         }         if (j + 1 < cols && board[i][j + 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j + 1, pos + 1, rows, cols);         }         if (j - 1 >= 0 && board[i][j - 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j - 1, pos + 1, rows, cols);         }                  board[i][j] = tempChar;                  return found;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool findWord(vector<vector<char>>& board, string& word, int i, int j, int pos, int& rows, int& cols) {         if (i < 0 || i >= rows || j < 0 || j >= cols) {             return false;         }                  if (pos == word.size() - 1) return true;                  char tempChar = board[i][j];         board[i][j] = '$';                  bool found = false;         if (i + 1 < rows && board[i + 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i + 1, j, pos + 1, rows, cols);         }         if (i - 1 >= 0 && board[i - 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i - 1, j, pos + 1, rows, cols);         }         if (j + 1 < cols && board[i][j + 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j + 1, pos + 1, rows, cols);         }         if (j - 1 >= 0 && board[i][j - 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j - 1, pos + 1, rows, cols);         }                  board[i][j] = tempChar;                  return found;     }          bool exist(vector<vector<char>>& board, string word) {         int rows = board.size();         if (rows == 0) return false;         int cols = board[0].size();         int pos = 0;         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (board[i][j] == word[pos]) {                     if (word.size() == 1) return true;                     bool found = findWord(board, word, i, j, pos, rows, cols);                     if (found) return true;                 }             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/79-word-search.cpp/Solution/findWord(vector<vector<char>>&,string&,int,int,int,int&,int&)"
    },
    {
        "f": [],
        "fm": "bool exist(vector<vector<char>>& board, string word) {         int rows = board.size();         if (rows == 0) return false;         int cols = board[0].size();         int pos = 0;         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (board[i][j] == word[pos]) {                     if (word.size() == 1) return true;                     bool found = findWord(board, word, i, j, pos, rows, cols);                     if (found) return true;                 }             }         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool findWord(vector<vector<char>>& board, string& word, int i, int j, int pos, int& rows, int& cols) {         if (i < 0 || i >= rows || j < 0 || j >= cols) {             return false;         }                  if (pos == word.size() - 1) return true;                  char tempChar = board[i][j];         board[i][j] = '$';                  bool found = false;         if (i + 1 < rows && board[i + 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i + 1, j, pos + 1, rows, cols);         }         if (i - 1 >= 0 && board[i - 1][j] == word[pos + 1]) {             found = found || findWord(board, word, i - 1, j, pos + 1, rows, cols);         }         if (j + 1 < cols && board[i][j + 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j + 1, pos + 1, rows, cols);         }         if (j - 1 >= 0 && board[i][j - 1] == word[pos + 1]) {             found = found || findWord(board, word, i, j - 1, pos + 1, rows, cols);         }                  board[i][j] = tempChar;                  return found;     }          bool exist(vector<vector<char>>& board, string word) {         int rows = board.size();         if (rows == 0) return false;         int cols = board[0].size();         int pos = 0;         for (int i = 0; i < rows; i++) {             for (int j = 0; j < cols; j++) {                 if (board[i][j] == word[pos]) {                     if (word.size() == 1) return true;                     bool found = findWord(board, word, i, j, pos, rows, cols);                     if (found) return true;                 }             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/79-word-search.cpp/Solution/exist(vector<vector<char>>&,string)"
    },
    {
        "f": [],
        "fm": "bool search(vector<int>& nums, int target) {         int n = nums.size();         if (n == 0) return false;                  int left = 0;         int right = n - 1;         int mid, midNum, leftNum, rightNum;                  while (left <= right) {             mid = (left + right) / 2;             midNum = nums[mid];             leftNum = nums[left];             rightNum = nums[right];                          if (midNum == target) {                 return true;             } else if (leftNum < midNum) { // left array is sorted                 if (target >= leftNum && target <= midNum) {                     right = mid - 1;                 } else {                      left = mid + 1;                 }             } else if (leftNum > midNum) { // right array is sorted                 if (target >= midNum && target <= rightNum) {                     left = mid + 1;                 } else {                     right = mid - 1;                 }             } else {                 left++;             }         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool search(vector<int>& nums, int target) {         int n = nums.size();         if (n == 0) return false;                  int left = 0;         int right = n - 1;         int mid, midNum, leftNum, rightNum;                  while (left <= right) {             mid = (left + right) / 2;             midNum = nums[mid];             leftNum = nums[left];             rightNum = nums[right];                          if (midNum == target) {                 return true;             } else if (leftNum < midNum) { // left array is sorted                 if (target >= leftNum && target <= midNum) {                     right = mid - 1;                 } else {                      left = mid + 1;                 }             } else if (leftNum > midNum) { // right array is sorted                 if (target >= midNum && target <= rightNum) {                     left = mid + 1;                 } else {                     right = mid - 1;                 }             } else {                 left++;             }         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/81-search-in-rotated-sorted-array-ii.cpp/Solution/search(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {                  int p = m + n - 1;         int p1 = m - 1;         int p2 = n - 1;                  while (p1 >= 0 && p2 >= 0) {             if (nums1[p1] < nums2[p2]) {                 nums1[p] = nums2[p2];                 p2--;             } else {                 nums1[p] = nums1[p1];                 p1--;             }             p--;         }         for (int i = 0; i <= p2; i++) {             nums1[i] = nums2[i];         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {                  int p = m + n - 1;         int p1 = m - 1;         int p2 = n - 1;                  while (p1 >= 0 && p2 >= 0) {             if (nums1[p1] < nums2[p2]) {                 nums1[p] = nums2[p2];                 p2--;             } else {                 nums1[p] = nums1[p1];                 p1--;             }             p--;         }         for (int i = 0; i <= p2; i++) {             nums1[i] = nums2[i];         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/88-merge-sorted-array.cpp/Solution/merge(vector<int>&,int,vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int numDecodings(string s) {         int n = s.size();                  if (n == 1 && s[0] == '0') {             return 0;         } else if (n == 1) {             return 1;         }                  vector<int> ways(n + 1, 0);         ways[n] = 1;                  for (int i = n - 1; i >= 0; i--) {             if (s[i] == '0') {                 ways[i] = 0;             } else if (s[i] == '1') {                 ways[i] = ways[i + 1];                 if (i != n - 1) {                     ways[i] += ways[i + 2];                 }             } else if (s[i] == '2') {                 ways[i] = ways[i + 1];                 if (i != n - 1 && s[i + 1] < '7') {                     ways[i] += ways[i + 2];                 }             } else {                 ways[i] = ways[i + 1];             }         }         return ways[0];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int numDecodings(string s) {         int n = s.size();                  if (n == 1 && s[0] == '0') {             return 0;         } else if (n == 1) {             return 1;         }                  vector<int> ways(n + 1, 0);         ways[n] = 1;                  for (int i = n - 1; i >= 0; i--) {             if (s[i] == '0') {                 ways[i] = 0;             } else if (s[i] == '1') {                 ways[i] = ways[i + 1];                 if (i != n - 1) {                     ways[i] += ways[i + 2];                 }             } else if (s[i] == '2') {                 ways[i] = ways[i + 1];                 if (i != n - 1 && s[i + 1] < '7') {                     ways[i] += ways[i + 2];                 }             } else {                 ways[i] = ways[i + 1];             }         }         return ways[0];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/91-decode-ways.cpp/Solution/numDecodings(string)"
    },
    {
        "f": [],
        "fm": "bool isValidBST(TreeNode* root, long minVal=LONG_MIN, long maxVal=LONG_MAX) {         if (!root) return true;         int val = root->val;         if (val > minVal && val < maxVal) {             return isValidBST(root->left, minVal, val) && isValidBST(root->right, val, maxVal);         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isValidBST(TreeNode* root, long minVal=LONG_MIN, long maxVal=LONG_MAX) {         if (!root) return true;         int val = root->val;         if (val > minVal && val < maxVal) {             return isValidBST(root->left, minVal, val) && isValidBST(root->right, val, maxVal);         }         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/3/98-validate-binary-search-tree.cpp/Solution/isValidBST(TreeNode*,long= ,long=)"
    }
]