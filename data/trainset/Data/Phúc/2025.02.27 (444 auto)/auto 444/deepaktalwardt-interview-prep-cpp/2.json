[
    {
        "f": [],
        "fm": "int checkRotations(int elem, vector<int>& A, vector<int>& B) {         int rotA = 0;         int rotB = 0;         for (int i = 0; i < A.size(); i++) {             if (A[i] != elem && B[i] != elem) {                 return -1;             } else if (A[i] != elem) {                 rotA++;             } else if (B[i] != elem) {                 rotB++;             }         }         return min(rotA, rotB);     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int checkRotations(int elem, vector<int>& A, vector<int>& B) {         int rotA = 0;         int rotB = 0;         for (int i = 0; i < A.size(); i++) {             if (A[i] != elem && B[i] != elem) {                 return -1;             } else if (A[i] != elem) {                 rotA++;             } else if (B[i] != elem) {                 rotB++;             }         }         return min(rotA, rotB);     }          int minDominoRotations(vector<int>& A, vector<int>& B) {         int rotations = checkRotations(A[0], A, B);         if (rotations != -1) {             return rotations;         }         return checkRotations(B[0], A, B);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1007-minimum-domino-rotations-for-equal-row.cpp/Solution/checkRotations(int,vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int minDominoRotations(vector<int>& A, vector<int>& B) {         int rotations = checkRotations(A[0], A, B);         if (rotations != -1) {             return rotations;         }         return checkRotations(B[0], A, B);     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int checkRotations(int elem, vector<int>& A, vector<int>& B) {         int rotA = 0;         int rotB = 0;         for (int i = 0; i < A.size(); i++) {             if (A[i] != elem && B[i] != elem) {                 return -1;             } else if (A[i] != elem) {                 rotA++;             } else if (B[i] != elem) {                 rotB++;             }         }         return min(rotA, rotB);     }          int minDominoRotations(vector<int>& A, vector<int>& B) {         int rotations = checkRotations(A[0], A, B);         if (rotations != -1) {             return rotations;         }         return checkRotations(B[0], A, B);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1007-minimum-domino-rotations-for-equal-row.cpp/Solution/minDominoRotations(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "void visitNeighbors(int garden, vector<vector<int>>& graph, vector<int>& flowers) {         vector<bool> colors(4, false); \t\t \t\t// Find all colors already assigned to neighbors         for (int& n : graph[garden]) {             if (flowers[n] != -1) {                 colors[flowers[n] - 1] = true;             }         } \t\t \t\t// Assign the first unassiged color to the current garden         for (int i = 0; i < 4; i++) {             if (!colors[i]) {                 flowers[garden] = i + 1;                 break;             }         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void visitNeighbors(int garden, vector<vector<int>>& graph, vector<int>& flowers) {         vector<bool> colors(4, false); \t\t \t\t// Find all colors already assigned to neighbors         for (int& n : graph[garden]) {             if (flowers[n] != -1) {                 colors[flowers[n] - 1] = true;             }         } \t\t \t\t// Assign the first unassiged color to the current garden         for (int i = 0; i < 4; i++) {             if (!colors[i]) {                 flowers[garden] = i + 1;                 break;             }         }     }          vector<int> gardenNoAdj(int N, vector<vector<int>>& paths) {         vector<vector<int>> graph(N, vector<int>{});         for (int i = 0; i < paths.size(); i++) {             int to = paths[i][0];             int from = paths[i][1];             graph[to - 1].push_back(from - 1);             graph[from - 1].push_back(to - 1);         }         vector<int> flowers(N, -1);         for (int garden = 0; garden < N; garden++) { \t\t// Only visit neighbors of unvisited gardens             if (flowers[garden] == -1) {                 visitNeighbors(garden, graph, flowers);             }         }         return flowers;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1042-flower-planting-with-no-adjacent.cpp/Solution/visitNeighbors(int,vector<vector<int>>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> gardenNoAdj(int N, vector<vector<int>>& paths) {         vector<vector<int>> graph(N, vector<int>{});         for (int i = 0; i < paths.size(); i++) {             int to = paths[i][0];             int from = paths[i][1];             graph[to - 1].push_back(from - 1);             graph[from - 1].push_back(to - 1);         }         vector<int> flowers(N, -1);         for (int garden = 0; garden < N; garden++) { \t\t// Only visit neighbors of unvisited gardens             if (flowers[garden] == -1) {                 visitNeighbors(garden, graph, flowers);             }         }         return flowers;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void visitNeighbors(int garden, vector<vector<int>>& graph, vector<int>& flowers) {         vector<bool> colors(4, false); \t\t \t\t// Find all colors already assigned to neighbors         for (int& n : graph[garden]) {             if (flowers[n] != -1) {                 colors[flowers[n] - 1] = true;             }         } \t\t \t\t// Assign the first unassiged color to the current garden         for (int i = 0; i < 4; i++) {             if (!colors[i]) {                 flowers[garden] = i + 1;                 break;             }         }     }          vector<int> gardenNoAdj(int N, vector<vector<int>>& paths) {         vector<vector<int>> graph(N, vector<int>{});         for (int i = 0; i < paths.size(); i++) {             int to = paths[i][0];             int from = paths[i][1];             graph[to - 1].push_back(from - 1);             graph[from - 1].push_back(to - 1);         }         vector<int> flowers(N, -1);         for (int garden = 0; garden < N; garden++) { \t\t// Only visit neighbors of unvisited gardens             if (flowers[garden] == -1) {                 visitNeighbors(garden, graph, flowers);             }         }         return flowers;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1042-flower-planting-with-no-adjacent.cpp/Solution/gardenNoAdj(int,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int shortestWay(string source, string target) {         int result = 0;         int skips = 0;         int i = 0;         int j = 0;                  while (i < target.size()) {             if (source[j] == target[i]) {                 skips = 0;                 i++;             } else {                 skips++;                 if (skips == source.size()) {                     return -1;                 }             }             j++;             if (j == source.size() || i == target.size()) {                 result++;                 j = 0;             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int shortestWay(string source, string target) {         int result = 0;         int skips = 0;         int i = 0;         int j = 0;                  while (i < target.size()) {             if (source[j] == target[i]) {                 skips = 0;                 i++;             } else {                 skips++;                 if (skips == source.size()) {                     return -1;                 }             }             j++;             if (j == source.size() || i == target.size()) {                 result++;                 j = 0;             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1055-shortest-way-to-form-string.cpp/Solution/shortestWay(string,string)"
    },
    {
        "f": [],
        "fm": "int countPossibilities(unordered_map<char, int>& charMap, int len) {         if (len == 0) return 0;         int sum = 0;         for (auto& item : charMap) {             if (item.second > 0) {                 item.second--;                 sum += 1 + countPossibilities(charMap, len - 1);                 item.second++;             }         }         return sum;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int countPossibilities(unordered_map<char, int>& charMap, int len) {         if (len == 0) return 0;         int sum = 0;         for (auto& item : charMap) {             if (item.second > 0) {                 item.second--;                 sum += 1 + countPossibilities(charMap, len - 1);                 item.second++;             }         }         return sum;     }          int numTilePossibilities(string tiles) {         unordered_map<char, int> charMap;         for (char t : tiles) {             charMap[t]++;         }         return countPossibilities(charMap, tiles.size());     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1079-letter-tile-possibilities.cpp/Solution/countPossibilities(unordered_map<char,int>&,int)"
    },
    {
        "f": [],
        "fm": "int numTilePossibilities(string tiles) {         unordered_map<char, int> charMap;         for (char t : tiles) {             charMap[t]++;         }         return countPossibilities(charMap, tiles.size());     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int countPossibilities(unordered_map<char, int>& charMap, int len) {         if (len == 0) return 0;         int sum = 0;         for (auto& item : charMap) {             if (item.second > 0) {                 item.second--;                 sum += 1 + countPossibilities(charMap, len - 1);                 item.second++;             }         }         return sum;     }          int numTilePossibilities(string tiles) {         unordered_map<char, int> charMap;         for (char t : tiles) {             charMap[t]++;         }         return countPossibilities(charMap, tiles.size());     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1079-letter-tile-possibilities.cpp/Solution/numTilePossibilities(string)"
    },
    {
        "f": [],
        "fm": "int maximumMinimumPath(vector<vector<int>>& A) {         int m = A.size();         if (m == 0) return 0;         int n = A[0].size();                  vector<vector<int>> diff = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};                 using qtype = pair<int, pair<int, int>>;                      priority_queue<qtype, vector<qtype>, function<bool(qtype, qtype)>>              pq([](const qtype& v1, const qtype& v2) {                 return v1.first < v2.first;             });                  pq.push({A[0][0], {0, 0}});         while (!pq.empty()) {             qtype curr = pq.top();             pq.pop();             int i = curr.second.first;             int j = curr.second.second;             int w = curr.first;             if (i == m - 1 && j == n - 1) {                 return w;             }             A[i][j] = -1;             for (const auto& d : diff) {                 int x = i + d[0];                 int y = j + d[1];                 if (x >= 0 && x < m && y >= 0 && y < n && A[x][y] >= 0) {                     pq.push({min(A[x][y], w), {x, y}});                 }             }         }         return -1;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maximumMinimumPath(vector<vector<int>>& A) {         int m = A.size();         if (m == 0) return 0;         int n = A[0].size();                  vector<vector<int>> diff = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};                 using qtype = pair<int, pair<int, int>>;                      priority_queue<qtype, vector<qtype>, function<bool(qtype, qtype)>>              pq([](const qtype& v1, const qtype& v2) {                 return v1.first < v2.first;             });                  pq.push({A[0][0], {0, 0}});         while (!pq.empty()) {             qtype curr = pq.top();             pq.pop();             int i = curr.second.first;             int j = curr.second.second;             int w = curr.first;             if (i == m - 1 && j == n - 1) {                 return w;             }             A[i][j] = -1;             for (const auto& d : diff) {                 int x = i + d[0];                 int y = j + d[1];                 if (x >= 0 && x < m && y >= 0 && y < n && A[x][y] >= 0) {                     pq.push({min(A[x][y], w), {x, y}});                 }             }         }         return -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1102-path-with-maximum-minimum-value.cpp/Solution/maximumMinimumPath(vector<vector<int>>&)"
    },
    {
        "f": [
            "int connectedComponents;",
            "vector<int> parent;",
            "int totalCost;"
        ],
        "fm": "void init(int N) {         connectedComponents = N;         totalCost = 0;         for (int i = 0; i < N + 1; i++) {             parent.push_back(-1);         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     int connectedComponents;     vector<int> parent;     int totalCost; public:     void init(int N) {         connectedComponents = N;         totalCost = 0;         for (int i = 0; i < N + 1; i++) {             parent.push_back(-1);         }     }          int findParent(int x) {         if (parent[x] < 0) {             return x;         }         return parent[x] = findParent(parent[x]);     }          void unite(const vector<int> conn) {         int c1 = conn[0];         int c2 = conn[1];         int cost = conn[2];         int p1 = findParent(c1);         int p2 = findParent(c2);         if (p1 != p2) {             int r1 = parent[p1];             int r2 = parent[p2];             if (r1 < r2) { // Remember ranks are -ve so the effect is opposite                 parent[p2] = p1;             } else {                 parent[p1] = p2;                 if (r1 == r2) {                     parent[p2]--;                 }             }             connectedComponents--;             totalCost += cost;         }     }          int minimumCost(int N, vector<vector<int>>& connections) {         init(N);         sort(connections.begin(), connections.end(),              [](const vector<int>& v1, const vector<int>& v2) {                 return v1[2] < v2[2];             });         for (const vector<int>& c : connections) {             unite(c);             if (connectedComponents == 1) {                 return totalCost;             }         }         return connectedComponents == 1 ? totalCost : -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1135-connecting-cities-with-minimum-cost.cpp/Solution/init(int)"
    },
    {
        "f": [
            "int connectedComponents;",
            "vector<int> parent;",
            "int totalCost;"
        ],
        "fm": "int findParent(int x) {         if (parent[x] < 0) {             return x;         }         return parent[x] = findParent(parent[x]);     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     int connectedComponents;     vector<int> parent;     int totalCost; public:     void init(int N) {         connectedComponents = N;         totalCost = 0;         for (int i = 0; i < N + 1; i++) {             parent.push_back(-1);         }     }          int findParent(int x) {         if (parent[x] < 0) {             return x;         }         return parent[x] = findParent(parent[x]);     }          void unite(const vector<int> conn) {         int c1 = conn[0];         int c2 = conn[1];         int cost = conn[2];         int p1 = findParent(c1);         int p2 = findParent(c2);         if (p1 != p2) {             int r1 = parent[p1];             int r2 = parent[p2];             if (r1 < r2) { // Remember ranks are -ve so the effect is opposite                 parent[p2] = p1;             } else {                 parent[p1] = p2;                 if (r1 == r2) {                     parent[p2]--;                 }             }             connectedComponents--;             totalCost += cost;         }     }          int minimumCost(int N, vector<vector<int>>& connections) {         init(N);         sort(connections.begin(), connections.end(),              [](const vector<int>& v1, const vector<int>& v2) {                 return v1[2] < v2[2];             });         for (const vector<int>& c : connections) {             unite(c);             if (connectedComponents == 1) {                 return totalCost;             }         }         return connectedComponents == 1 ? totalCost : -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1135-connecting-cities-with-minimum-cost.cpp/Solution/findParent(int)"
    },
    {
        "f": [
            "int connectedComponents;",
            "vector<int> parent;",
            "int totalCost;"
        ],
        "fm": "void unite(const vector<int> conn) {         int c1 = conn[0];         int c2 = conn[1];         int cost = conn[2];         int p1 = findParent(c1);         int p2 = findParent(c2);         if (p1 != p2) {             int r1 = parent[p1];             int r2 = parent[p2];             if (r1 < r2) { // Remember ranks are -ve so the effect is opposite                 parent[p2] = p1;             } else {                 parent[p1] = p2;                 if (r1 == r2) {                     parent[p2]--;                 }             }             connectedComponents--;             totalCost += cost;         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     int connectedComponents;     vector<int> parent;     int totalCost; public:     void init(int N) {         connectedComponents = N;         totalCost = 0;         for (int i = 0; i < N + 1; i++) {             parent.push_back(-1);         }     }          int findParent(int x) {         if (parent[x] < 0) {             return x;         }         return parent[x] = findParent(parent[x]);     }          void unite(const vector<int> conn) {         int c1 = conn[0];         int c2 = conn[1];         int cost = conn[2];         int p1 = findParent(c1);         int p2 = findParent(c2);         if (p1 != p2) {             int r1 = parent[p1];             int r2 = parent[p2];             if (r1 < r2) { // Remember ranks are -ve so the effect is opposite                 parent[p2] = p1;             } else {                 parent[p1] = p2;                 if (r1 == r2) {                     parent[p2]--;                 }             }             connectedComponents--;             totalCost += cost;         }     }          int minimumCost(int N, vector<vector<int>>& connections) {         init(N);         sort(connections.begin(), connections.end(),              [](const vector<int>& v1, const vector<int>& v2) {                 return v1[2] < v2[2];             });         for (const vector<int>& c : connections) {             unite(c);             if (connectedComponents == 1) {                 return totalCost;             }         }         return connectedComponents == 1 ? totalCost : -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1135-connecting-cities-with-minimum-cost.cpp/Solution/unite(vector<int>const)"
    },
    {
        "f": [
            "int connectedComponents;",
            "vector<int> parent;",
            "int totalCost;"
        ],
        "fm": "int minimumCost(int N, vector<vector<int>>& connections) {         init(N);         sort(connections.begin(), connections.end(),              [](const vector<int>& v1, const vector<int>& v2) {                 return v1[2] < v2[2];             });         for (const vector<int>& c : connections) {             unite(c);             if (connectedComponents == 1) {                 return totalCost;             }         }         return connectedComponents == 1 ? totalCost : -1;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { private:     int connectedComponents;     vector<int> parent;     int totalCost; public:     void init(int N) {         connectedComponents = N;         totalCost = 0;         for (int i = 0; i < N + 1; i++) {             parent.push_back(-1);         }     }          int findParent(int x) {         if (parent[x] < 0) {             return x;         }         return parent[x] = findParent(parent[x]);     }          void unite(const vector<int> conn) {         int c1 = conn[0];         int c2 = conn[1];         int cost = conn[2];         int p1 = findParent(c1);         int p2 = findParent(c2);         if (p1 != p2) {             int r1 = parent[p1];             int r2 = parent[p2];             if (r1 < r2) { // Remember ranks are -ve so the effect is opposite                 parent[p2] = p1;             } else {                 parent[p1] = p2;                 if (r1 == r2) {                     parent[p2]--;                 }             }             connectedComponents--;             totalCost += cost;         }     }          int minimumCost(int N, vector<vector<int>>& connections) {         init(N);         sort(connections.begin(), connections.end(),              [](const vector<int>& v1, const vector<int>& v2) {                 return v1[2] < v2[2];             });         for (const vector<int>& c : connections) {             unite(c);             if (connectedComponents == 1) {                 return totalCost;             }         }         return connectedComponents == 1 ? totalCost : -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1135-connecting-cities-with-minimum-cost.cpp/Solution/minimumCost(int,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "void dfs(int u, int parent, vector<int>& ids, vector<bool>& visited, vector<int>& low, vector<vector<int>>& graph, vector<vector<int>>& result) {         visited[u] = true;         int id = ids[parent] + 1;         low[u] = id;         ids[u] = id;         for (int n : graph[u]) {             if (n == parent) continue;             if (!visited[n]) {                 dfs(n, u, ids, visited, low, graph, result);                 low[u] = min(low[u], low[n]);                 if (ids[u] < low[n]) {                     result.push_back({u, n});                 }             } else {                 low[u] = min(low[u], ids[n]);             }         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void dfs(int u, int parent, vector<int>& ids, vector<bool>& visited, vector<int>& low, vector<vector<int>>& graph, vector<vector<int>>& result) {         visited[u] = true;         int id = ids[parent] + 1;         low[u] = id;         ids[u] = id;         for (int n : graph[u]) {             if (n == parent) continue;             if (!visited[n]) {                 dfs(n, u, ids, visited, low, graph, result);                 low[u] = min(low[u], low[n]);                 if (ids[u] < low[n]) {                     result.push_back({u, n});                 }             } else {                 low[u] = min(low[u], ids[n]);             }         }     }          vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {         vector<vector<int>> graph(n, vector<int>());          for (const vector<int>& conn : connections) {             int to = conn[0];             int from = conn[1];             graph[to].push_back(from);             graph[from].push_back(to);         }                  vector<vector<int>> result;         vector<bool> visited(n, false);         vector<int> low(n, -1);         vector<int> ids(n, 0);                  for (int i = 0; i < n; i++) {             if (!visited[i]) {                 dfs(i, i, ids, visited, low, graph, result);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1192-critical-connections-in-a-network.cpp/Solution/dfs(int,int,vector<int>&,vector<bool>&,vector<int>&,vector<vector<int>>&,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {         vector<vector<int>> graph(n, vector<int>());          for (const vector<int>& conn : connections) {             int to = conn[0];             int from = conn[1];             graph[to].push_back(from);             graph[from].push_back(to);         }                  vector<vector<int>> result;         vector<bool> visited(n, false);         vector<int> low(n, -1);         vector<int> ids(n, 0);                  for (int i = 0; i < n; i++) {             if (!visited[i]) {                 dfs(i, i, ids, visited, low, graph, result);             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void dfs(int u, int parent, vector<int>& ids, vector<bool>& visited, vector<int>& low, vector<vector<int>>& graph, vector<vector<int>>& result) {         visited[u] = true;         int id = ids[parent] + 1;         low[u] = id;         ids[u] = id;         for (int n : graph[u]) {             if (n == parent) continue;             if (!visited[n]) {                 dfs(n, u, ids, visited, low, graph, result);                 low[u] = min(low[u], low[n]);                 if (ids[u] < low[n]) {                     result.push_back({u, n});                 }             } else {                 low[u] = min(low[u], ids[n]);             }         }     }          vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {         vector<vector<int>> graph(n, vector<int>());          for (const vector<int>& conn : connections) {             int to = conn[0];             int from = conn[1];             graph[to].push_back(from);             graph[from].push_back(to);         }                  vector<vector<int>> result;         vector<bool> visited(n, false);         vector<int> low(n, -1);         vector<int> ids(n, 0);                  for (int i = 0; i < n; i++) {             if (!visited[i]) {                 dfs(i, i, ids, visited, low, graph, result);             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/1192-critical-connections-in-a-network.cpp/Solution/criticalConnections(int,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int mincostTickets(vector<int>& days, vector<int>& costs) {         int n = days.size();         if (n == 0) return 0;         if (n == 1) return costs[0];                  vector<int> minCosts(366, 0);         int currDay = 0;         int dc = costs[0];         int wc = costs[1];         int mc = costs[2];                  for (int i = 1; i <= 365; i++) {             if (currDay == n) {                 break;             }             if (days[currDay] != i) {                 minCosts[i] = minCosts[i - 1];             } else {                 int dailyCost = dc, weeklyCost = wc, monthlyCost = mc;                 if (i > 1) {                     dailyCost += minCosts[i - 1];                 }                 if (i > 7) {                     weeklyCost += minCosts[i - 7];                 }                 if (i > 30) {                     monthlyCost += minCosts[i - 30];                 }                 minCosts[i] = min(dailyCost, min(weeklyCost, monthlyCost));                 currDay++;             }         }         return minCosts[days[n - 1]];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int mincostTickets(vector<int>& days, vector<int>& costs) {         int n = days.size();         if (n == 0) return 0;         if (n == 1) return costs[0];                  vector<int> minCosts(366, 0);         int currDay = 0;         int dc = costs[0];         int wc = costs[1];         int mc = costs[2];                  for (int i = 1; i <= 365; i++) {             if (currDay == n) {                 break;             }             if (days[currDay] != i) {                 minCosts[i] = minCosts[i - 1];             } else {                 int dailyCost = dc, weeklyCost = wc, monthlyCost = mc;                 if (i > 1) {                     dailyCost += minCosts[i - 1];                 }                 if (i > 7) {                     weeklyCost += minCosts[i - 7];                 }                 if (i > 30) {                     monthlyCost += minCosts[i - 30];                 }                 minCosts[i] = min(dailyCost, min(weeklyCost, monthlyCost));                 currDay++;             }         }         return minCosts[days[n - 1]];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/983-minimum-cost-for-tickets.cpp/Solution/mincostTickets(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int orangesRotting(vector<vector<int>>& grid) {         int R = grid.size();         int C = grid[0].size();                  queue<int> q;         unordered_map<int, int> depth;         int numFresh = 0;                  for (int r = 0; r < R; r++) {             for (int c = 0; c < C; c++) {                 if (grid[r][c] == 2) {                     int code = c + r * C;                     q.push(code);                     depth[code] = 0;                 } else if (grid[r][c] == 1) {                     numFresh++;                 }             }         }                  vector<int> dr = {-1, 0, 1, 0};         vector<int> dc = {0, -1, 0, 1};         int maxDepth = 0;         int newlyRotten = 0;                  while (!q.empty()) {             int elem = q.front();             q.pop();             int r = elem / C;             int c = elem % C;             for (int k = 0; k < 4; k++) {                 int nr = r + dr[k];                 int nc = c + dc[k];                 if (nr >= 0 && nr < R && nc >= 0 && nc < C && grid[nr][nc] == 1) {                     int ncode = nc + nr * C;                     q.push(ncode);                     grid[nr][nc] = 2;                     newlyRotten++;                     int ndepth = depth.find(elem)->second + 1;                     depth[ncode] = ndepth;                     if (ndepth > maxDepth) {                         maxDepth = ndepth;                     }                 }             }         }         if (newlyRotten < numFresh) return -1;         return maxDepth;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int orangesRotting(vector<vector<int>>& grid) {         int R = grid.size();         int C = grid[0].size();                  queue<int> q;         unordered_map<int, int> depth;         int numFresh = 0;                  for (int r = 0; r < R; r++) {             for (int c = 0; c < C; c++) {                 if (grid[r][c] == 2) {                     int code = c + r * C;                     q.push(code);                     depth[code] = 0;                 } else if (grid[r][c] == 1) {                     numFresh++;                 }             }         }                  vector<int> dr = {-1, 0, 1, 0};         vector<int> dc = {0, -1, 0, 1};         int maxDepth = 0;         int newlyRotten = 0;                  while (!q.empty()) {             int elem = q.front();             q.pop();             int r = elem / C;             int c = elem % C;             for (int k = 0; k < 4; k++) {                 int nr = r + dr[k];                 int nc = c + dc[k];                 if (nr >= 0 && nr < R && nc >= 0 && nc < C && grid[nr][nc] == 1) {                     int ncode = nc + nr * C;                     q.push(ncode);                     grid[nr][nc] = 2;                     newlyRotten++;                     int ndepth = depth.find(elem)->second + 1;                     depth[ncode] = ndepth;                     if (ndepth > maxDepth) {                         maxDepth = ndepth;                     }                 }             }         }         if (newlyRotten < numFresh) return -1;         return maxDepth;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/994-rotting-oranges.cpp/Solution/orangesRotting(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int findJudge(int N, vector<vector<int>>& trust) {         vector<vector<int>> trustGraph(N, vector<int>());         for (int i = 0; i < trust.size(); i++) {             int from = trust[i][0];             int to = trust[i][1];             trustGraph[from - 1].push_back(to);         }         int candidate = -1;         int numCandidates = 0;         for (int i = 0; i < N; i++) {             if (trustGraph[i].size() == 0) {                 candidate = i + 1;                 numCandidates++;             }         }         if (numCandidates != 1) return -1;         for (int i = 0; i < N; i++) {             if (i == candidate - 1) continue;             vector<int> conn = trustGraph[i];             if (find(conn.begin(), conn.end(), candidate) == conn.end()) return -1;         }         return candidate;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int findJudge(int N, vector<vector<int>>& trust) {         vector<vector<int>> trustGraph(N, vector<int>());         for (int i = 0; i < trust.size(); i++) {             int from = trust[i][0];             int to = trust[i][1];             trustGraph[from - 1].push_back(to);         }         int candidate = -1;         int numCandidates = 0;         for (int i = 0; i < N; i++) {             if (trustGraph[i].size() == 0) {                 candidate = i + 1;                 numCandidates++;             }         }         if (numCandidates != 1) return -1;         for (int i = 0; i < N; i++) {             if (i == candidate - 1) continue;             vector<int> conn = trustGraph[i];             if (find(conn.begin(), conn.end(), candidate) == conn.end()) return -1;         }         return candidate;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2/997-find-the-town-judge.cpp/Solution/findJudge(int,vector<vector<int>>&)"
    }
]