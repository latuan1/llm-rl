[
    {
        "f": [],
        "fm": "ListNode* swapPairs(ListNode* head) {         if(head == NULL || head->next == NULL) {             return head;         }         ListNode *p, *q, *h, *t;         p = head;         q = head->next;         h = q;         while(p != NULL && q != NULL) {             p->next = q->next;             q->next = p;             t = p;             if(p->next != NULL) {                 p = p->next;             } else {                 return h;             }             if(p->next != NULL) {                 q = p->next;                 t->next = q;             } else {                 return h;             }         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* swapPairs(ListNode* head) {         if(head == NULL || head->next == NULL) {             return head;         }         ListNode *p, *q, *h, *t;         p = head;         q = head->next;         h = q;         while(p != NULL && q != NULL) {             p->next = q->next;             q->next = p;             t = p;             if(p->next != NULL) {                 p = p->next;             } else {                 return h;             }             if(p->next != NULL) {                 q = p->next;                 t->next = q;             } else {                 return h;             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/024. Swap Nodes in Pairs.cpp/Solution/swapPairs(ListNode*)"
    },
    {
        "f": [],
        "fm": "int removeDuplicates(vector<int>& nums) {         if(nums.size() == 0) {             return 0;         }         int len = 1;         for(int i = 1; i < nums.size(); i++) {             if(nums[i] != nums[i - 1]) {                 nums[len++] = nums[i];             }         }         return len;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int removeDuplicates(vector<int>& nums) {         if(nums.size() == 0) {             return 0;         }         int len = 1;         for(int i = 1; i < nums.size(); i++) {             if(nums[i] != nums[i - 1]) {                 nums[len++] = nums[i];             }         }         return len;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/026. Remove Duplicates from Sorted Array.cpp/Solution/removeDuplicates(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int removeElement(vector<int>& nums, int val) {         int len = 0;         for(int i = 0; i < nums.size(); i++) {             if(nums[i] != val) {                 nums[len++] = nums[i];             }         }         return len;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int removeElement(vector<int>& nums, int val) {         int len = 0;         for(int i = 0; i < nums.size(); i++) {             if(nums[i] != val) {                 nums[len++] = nums[i];             }         }         return len;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/027. Remove Element.cpp/Solution/removeElement(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int strStr(string haystack, string needle) {         int len1 = haystack.length();         int len2 = needle.length();         if(len2 == 0)             return 0;         for(int i = 0; i <= len1 - len2; i++) {             for(int j = 0; j < len2 && needle[j] == haystack[i + j]; j++) {                 if(j == len2 - 1)                     return i;             }         }         return -1;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int strStr(string haystack, string needle) {         int len1 = haystack.length();         int len2 = needle.length();         if(len2 == 0)             return 0;         for(int i = 0; i <= len1 - len2; i++) {             for(int j = 0; j < len2 && needle[j] == haystack[i + j]; j++) {                 if(j == len2 - 1)                     return i;             }         }         return -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/028. Implement strStr().cpp/Solution/strStr(string,string)"
    },
    {
        "f": [],
        "fm": "int divide(int dividend, int divisor) {         if(divisor == 0 || dividend == INT_MIN && divisor == -1) return INT_MAX;         int sign = ((dividend >> 31) ^ (divisor >> 31)) == 0 ? 1 : -1;         long a = abs((long)dividend);         long b = abs((long)divisor);         double c = exp(log(a) - log(b)) + 0.0000000001;         return (int)(sign * c);     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int divide(int dividend, int divisor) {         if(divisor == 0 || dividend == INT_MIN && divisor == -1) return INT_MAX;         int sign = ((dividend >> 31) ^ (divisor >> 31)) == 0 ? 1 : -1;         long a = abs((long)dividend);         long b = abs((long)divisor);         double c = exp(log(a) - log(b)) + 0.0000000001;         return (int)(sign * c);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/029. Divide Two Integers.cpp/Solution/divide(int,int)"
    },
    {
        "f": [],
        "fm": "void nextPermutation(vector<int>& nums) {         next_permutation(nums.begin(), nums.end());     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void nextPermutation(vector<int>& nums) {         next_permutation(nums.begin(), nums.end());     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/031. Next Permutation.cpp/Solution/nextPermutation(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> searchRange(vector<int>& nums, int target) {         int low = 0, high = nums.size() - 1;         while(low <= high && nums[low] != target && nums[high] != target) {             int mid = (high - low) / 2 + low;             if(nums[mid] < target) {                 low = mid + 1;             } else if(nums[mid] > target){                 high = mid - 1;             } else {                 break;             }         }         vector<int> v(2);         if(low > high) {             v[0] = -1;             v[1] = -1;             return v;         }         while(nums[low] != target) {             low++;         }         while(nums[high] != target) {             high--;         }         v[0] = low;         v[1] = high;         return v;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> searchRange(vector<int>& nums, int target) {         int low = 0, high = nums.size() - 1;         while(low <= high && nums[low] != target && nums[high] != target) {             int mid = (high - low) / 2 + low;             if(nums[mid] < target) {                 low = mid + 1;             } else if(nums[mid] > target){                 high = mid - 1;             } else {                 break;             }         }         vector<int> v(2);         if(low > high) {             v[0] = -1;             v[1] = -1;             return v;         }         while(nums[low] != target) {             low++;         }         while(nums[high] != target) {             high--;         }         v[0] = low;         v[1] = high;         return v;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/034. Search for a Range.cpp/Solution/searchRange(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int searchInsert(vector<int>& nums, int target) {         for(int i = 0; i < nums.size(); i++) {             if(nums[i] >= target) {                 return i;             }             if(i == nums.size() - 1) {                 return nums.size();             }         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int searchInsert(vector<int>& nums, int target) {         for(int i = 0; i < nums.size(); i++) {             if(nums[i] >= target) {                 return i;             }             if(i == nums.size() - 1) {                 return nums.size();             }         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/035. Search Insert Position.cpp/Solution/searchInsert(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "bool isValidSudoku(vector<vector<char>>& board) {         int book[10];         memset(book, 0, sizeof(int)*10);         //每一列         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[i][j] == '.') continue;                 if(book[board[i][j] - '0'] == 0)                     book[board[i][j] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每一行         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[j][i] == '.') continue;                 if(book[board[j][i] - '0'] == 0)                     book[board[j][i] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每个小九宫格         for(int m = 0; m <= 6; m = m + 3) {             for(int i = 0; i <= 8; i++) {                 if(i % 3 == 0)                      memset(book, 0, sizeof(int) * 10);                 for(int j = 0; j <= 2; j++) {                     if(board[i][j + m] == '.') continue;                     if(book[board[i][j + m] - '0'] == 0)                         book[board[i][j + m] - '0'] = 1;                     else                         return false;                 }             }         }         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isValidSudoku(vector<vector<char>>& board) {         int book[10];         memset(book, 0, sizeof(int)*10);         //每一列         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[i][j] == '.') continue;                 if(book[board[i][j] - '0'] == 0)                     book[board[i][j] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每一行         for(int i = 0; i < 9; i++) {             for(int j = 0; j < 9; j++) {                 if(board[j][i] == '.') continue;                 if(book[board[j][i] - '0'] == 0)                     book[board[j][i] - '0'] = 1;                 else                     return false;             }             memset(book, 0, sizeof(int) * 10);         }         //每个小九宫格         for(int m = 0; m <= 6; m = m + 3) {             for(int i = 0; i <= 8; i++) {                 if(i % 3 == 0)                      memset(book, 0, sizeof(int) * 10);                 for(int j = 0; j <= 2; j++) {                     if(board[i][j + m] == '.') continue;                     if(book[board[i][j + m] - '0'] == 0)                         book[board[i][j + m] - '0'] = 1;                     else                         return false;                 }             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/036. Valid Sudoku.cpp/Solution/isValidSudoku(vector<vector<char>>&)"
    },
    {
        "f": [],
        "fm": "int search(vector<int>& nums, int target) {         int l = 0, r = nums.size() - 1;         while (l <= r) {             int mid = (l + r) / 2;             if (nums[mid] == target) return mid;             if (nums[mid] < nums[l]) {                 if (target > nums[mid] && target <= nums[r])                     l = mid + 1;                 else                     r = mid - 1;             } else if (nums[mid] > nums[r]) {                 if (target >= nums[l] && target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             } else {                 if (target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             }         }         return -1;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int search(vector<int>& nums, int target) {         int l = 0, r = nums.size() - 1;         while (l <= r) {             int mid = (l + r) / 2;             if (nums[mid] == target) return mid;             if (nums[mid] < nums[l]) {                 if (target > nums[mid] && target <= nums[r])                     l = mid + 1;                 else                     r = mid - 1;             } else if (nums[mid] > nums[r]) {                 if (target >= nums[l] && target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             } else {                 if (target < nums[mid])                     r = mid - 1;                 else                     l = mid + 1;             }         }         return -1;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/13/33. Search in Rotated Sorted Array.cpp/Solution/search(vector<int>&,int)"
    }
]