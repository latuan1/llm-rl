[
    {
        "f": [],
        "fm": "bool rotateString(string A, string B) {         if (A.length() != B.length()) return false;                  string bothStrings = A + A;                  return bothStrings.find(B) != string::npos;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool rotateString(string A, string B) {         if (A.length() != B.length()) return false;                  string bothStrings = A + A;                  return bothStrings.find(B) != string::npos;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/796-is-rotation.cpp/Solution/rotateString(string,string)"
    },
    {
        "f": [],
        "fm": "int numMagicSquaresInside(vector<vector<int>>& grid) {         int rows = grid.size();         int cols = grid[0].size();         int result = 0;         for (int r = 0; r < rows - 2; r++) {             for (int c = 0; c < cols - 2; c++) {                 if (isMagic({grid[r][c],   grid[r][c+1],   grid[r][c+2],                             grid[r+1][c], grid[r+1][c+1], grid[r+1][c+2],                             grid[r+2][c], grid[r+2][c+1], grid[r+2][c+2]})) {                     result++;                 }             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool isMagic(vector<int> vals) {         vector<int> counts(16, 0);         for (int v : vals) {             counts[v]++;         }         for (int i = 1; i <= 9; i++) {             if (counts[i] != 1) return false;         }         return vals[0] + vals[1] + vals[2] == 15 &&                vals[3] + vals[4] + vals[5] == 15 &&                vals[6] + vals[7] + vals[8] == 15 &&                vals[0] + vals[4] + vals[8] == 15 &&                vals[2] + vals[4] + vals[6] == 15 &&                vals[0] + vals[3] + vals[6] == 15 &&                vals[1] + vals[4] + vals[7] == 15 &&                vals[2] + vals[5] + vals[8] == 15;     }          int numMagicSquaresInside(vector<vector<int>>& grid) {         int rows = grid.size();         int cols = grid[0].size();         int result = 0;         for (int r = 0; r < rows - 2; r++) {             for (int c = 0; c < cols - 2; c++) {                 if (isMagic({grid[r][c],   grid[r][c+1],   grid[r][c+2],                             grid[r+1][c], grid[r+1][c+1], grid[r+1][c+2],                             grid[r+2][c], grid[r+2][c+1], grid[r+2][c+2]})) {                     result++;                 }             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/840-magic-squares-in-grid.cpp/Solution/numMagicSquaresInside(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> transpose(vector<vector<int>>& A) {         int rows = A.size();         int cols = A[0].size();         vector<vector<int>> result(cols, vector<int>(rows, 0));         for (int r = 0; r < rows; r++) {             for (int c = 0; c < cols; c++) {                 result[c][r] = A[r][c];             }         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> transpose(vector<vector<int>>& A) {         int rows = A.size();         int cols = A[0].size();         vector<vector<int>> result(cols, vector<int>(rows, 0));         for (int r = 0; r < rows; r++) {             for (int c = 0; c < cols; c++) {                 result[c][r] = A[r][c];             }         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/867-transpose-matrix.cpp/Solution/transpose(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int totalFruit(vector<int>& tree) {         int n = tree.size();         if (n < 3) return n;                  int p1 = 0;         int p2 = 0;         int prevStart = 0;         int typeB1 = tree[p1];          int typeB2 = tree[p2];                  int maxFruits = 0;                          for (int i = 1; i < n; i++) {             int currType = tree[i];                          if (currType != typeB1 && typeB1 == typeB2) {                 typeB2 = currType;             }             if (currType == typeB1 || currType == typeB2) {                 p2++;                 if (currType != tree[prevStart]) prevStart = i;             } else {                 maxFruits = max(p2 - p1 + 1, maxFruits);                 p1 = prevStart;                 p2 = i;                 typeB1 = tree[p1];                 typeB2 = currType;                 prevStart = p2;             }         }         maxFruits = max(p2 - p1 + 1, maxFruits);         return maxFruits;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     /*          [1,   2,   3,   2,   2]           p1             p2          b1 -> 2     b2 -> 3     currFruits = 4     maxFruits = 4          [3,  3,  3,  1,  2,  1,  1,  2,  3,  3,  4]                                          p1  p2          b1 -> 3     b2 -> 4     currFruits = 2     maxFruits = 5          */          int totalFruit(vector<int>& tree) {         int n = tree.size();         if (n < 3) return n;                  int p1 = 0;         int p2 = 0;         int prevStart = 0;         int typeB1 = tree[p1];          int typeB2 = tree[p2];                  int maxFruits = 0;                          for (int i = 1; i < n; i++) {             int currType = tree[i];                          if (currType != typeB1 && typeB1 == typeB2) {                 typeB2 = currType;             }             if (currType == typeB1 || currType == typeB2) {                 p2++;                 if (currType != tree[prevStart]) prevStart = i;             } else {                 maxFruits = max(p2 - p1 + 1, maxFruits);                 p1 = prevStart;                 p2 = i;                 typeB1 = tree[p1];                 typeB2 = currType;                 prevStart = p2;             }         }         maxFruits = max(p2 - p1 + 1, maxFruits);         return maxFruits;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/904-fruit-into-baskets.cpp/Solution/totalFruit(vector<int>&)"
    },
    {
        "f": [],
        "fm": "string reverseOnlyLetters(string S) {         stack<char> rev_chars;         string to_return;         for (int i = 0; i < S.length(); i++) {             if (isalpha(S[i])) {                 rev_chars.push(S[i]);             }         }                  for (int k = 0; k < S.length(); k++) {             if (isalpha(S[k])) {                 to_return.push_back(rev_chars.top());                 rev_chars.pop();             } else {                 to_return.push_back(S[k]);             }         }         return to_return;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string reverseOnlyLetters(string S) {         stack<char> rev_chars;         string to_return;         for (int i = 0; i < S.length(); i++) {             if (isalpha(S[i])) {                 rev_chars.push(S[i]);             }         }                  for (int k = 0; k < S.length(); k++) {             if (isalpha(S[k])) {                 to_return.push_back(rev_chars.top());                 rev_chars.pop();             } else {                 to_return.push_back(S[k]);             }         }         return to_return;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/917-reverse-only-letters.cpp/Solution/reverseOnlyLetters(string)"
    },
    {
        "f": [],
        "fm": "vector<string> reorderLogFiles(vector<string>& logs) {         vector<string> let_logs;         vector<string> dig_logs;         string id, first_word;         for (string log : logs) {                          stringstream ss(log);             ss >> id;             ss >> first_word;             if (isalpha(first_word[0])) {                 let_logs.push_back(log);             } else {                 dig_logs.push_back(log);             }         }         sort(let_logs.begin(), let_logs.end(), [](const string& a, const string& b) {             string str_a = a.substr(a.find_first_of(\" \") + 1);             string str_b = b.substr(b.find_first_of(\" \") + 1);             if (str_a != str_b) {                 return str_a < str_b;             } else {                 return a < b;             }                      });         let_logs.insert(let_logs.end(), dig_logs.begin(), dig_logs.end());         return let_logs;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:      vector<string> reorderLogFiles(vector<string>& logs) {         vector<string> let_logs;         vector<string> dig_logs;         string id, first_word;         for (string log : logs) {                          stringstream ss(log);             ss >> id;             ss >> first_word;             if (isalpha(first_word[0])) {                 let_logs.push_back(log);             } else {                 dig_logs.push_back(log);             }         }         sort(let_logs.begin(), let_logs.end(), [](const string& a, const string& b) {             string str_a = a.substr(a.find_first_of(\" \") + 1);             string str_b = b.substr(b.find_first_of(\" \") + 1);             if (str_a != str_b) {                 return str_a < str_b;             } else {                 return a < b;             }                      });         let_logs.insert(let_logs.end(), dig_logs.begin(), dig_logs.end());         return let_logs;     }                  };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/937-reorder-data-in-log-files.cpp/Solution/reorderLogFiles(vector<string>&)"
    },
    {
        "f": [],
        "fm": "bool isTopRight(Point& other) {             return other.x > x && other.y > y;         }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "/mnt/sdb2/LAB/test/10/939-minimum-area-rectangle.cpp/Solution/Point/isTopRight(Point&)"
    },
    {
        "f": [],
        "fm": "string getName() {             return \"(\" + to_string(x) + \", \" + to_string(y) + \")\";         }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "/mnt/sdb2/LAB/test/10/939-minimum-area-rectangle.cpp/Solution/Point/getName()"
    },
    {
        "f": [],
        "fm": "int minAreaRect(vector<vector<int>>& points) {         int minArea = INT_MAX;         unordered_map<string, Point> pointsMap;         for (vector<int>& p : points) {             Point pn(p[0], p[1]);             string name = pn.getName();             pointsMap[name] = pn;         }         for (auto it1 = pointsMap.begin(); it1 != pointsMap.end(); it1++) {             Point currPoint = it1->second;             for (auto it2 = pointsMap.begin(); it2 != pointsMap.end(); it2++) {                 Point candidateDiagonal = it2->second;                 if (currPoint.isTopRight(candidateDiagonal)) {                     int area = areaFormed(currPoint, candidateDiagonal, pointsMap);                     if (area != -1) {                         minArea = min(minArea, area);                     }                 }             }         }         return minArea == INT_MAX ? 0 : minArea;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     struct Point {         int x;         int y;                  Point() {             x = 0;             y = 0;         }                  Point(int x_, int y_) {             x = x_;             y = y_;         }          bool isTopRight(Point& other) {             return other.x > x && other.y > y;         }          string getName() {             return \"(\" + to_string(x) + \", \" + to_string(y) + \")\";         }     };          int areaFormed(Point p1, Point p2, unordered_map<string, Point>& pointsMap) {         Point topLeft(p1.x, p2.y);         Point bottomRight(p2.x, p1.y);         if (pointsMap.find(topLeft.getName()) != pointsMap.end() && pointsMap.find(bottomRight.getName()) != pointsMap.end()) {             return (p2.y - p1.y) * (p2.x - p1.x);         } else {             return -1;         }     }          int minAreaRect(vector<vector<int>>& points) {         int minArea = INT_MAX;         unordered_map<string, Point> pointsMap;         for (vector<int>& p : points) {             Point pn(p[0], p[1]);             string name = pn.getName();             pointsMap[name] = pn;         }         for (auto it1 = pointsMap.begin(); it1 != pointsMap.end(); it1++) {             Point currPoint = it1->second;             for (auto it2 = pointsMap.begin(); it2 != pointsMap.end(); it2++) {                 Point candidateDiagonal = it2->second;                 if (currPoint.isTopRight(candidateDiagonal)) {                     int area = areaFormed(currPoint, candidateDiagonal, pointsMap);                     if (area != -1) {                         minArea = min(minArea, area);                     }                 }             }         }         return minArea == INT_MAX ? 0 : minArea;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/939-minimum-area-rectangle.cpp/Solution/minAreaRect(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "bool inOrder(unordered_map<char, int>& orderMap, vector<string>& words, int i, int j) {         string word1 = words[i];         string word2 = words[j];         int shorterLen = word1.size() < word2.size() ? word1.size() : word2.size();         for (int k = 0; k < shorterLen; k++) {             char c1 = word1[k];             char c2 = word2[k];             if (c1 == c2) {                 continue;             } else if (orderMap[c1] < orderMap[c2]) {                 return true;             } else {                 return false;             }         }         if (shorterLen == word1.size()) {             return true;         }         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool inOrder(unordered_map<char, int>& orderMap, vector<string>& words, int i, int j) {         string word1 = words[i];         string word2 = words[j];         int shorterLen = word1.size() < word2.size() ? word1.size() : word2.size();         for (int k = 0; k < shorterLen; k++) {             char c1 = word1[k];             char c2 = word2[k];             if (c1 == c2) {                 continue;             } else if (orderMap[c1] < orderMap[c2]) {                 return true;             } else {                 return false;             }         }         if (shorterLen == word1.size()) {             return true;         }         return false;     }          bool isAlienSorted(vector<string>& words, string order) {         unordered_map<char, int> orderMap;         for (int i = 0; i < order.size(); i++) {             orderMap[order[i]] = i;         }         for (int i = 1; i < words.size(); i++) {             if (!inOrder(orderMap, words, i - 1, i)) return false;         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/953-verifying-an-alien-dictionary.cpp/Solution/inOrder(unordered_map<char,int>&,vector<string>&,int,int)"
    },
    {
        "f": [],
        "fm": "bool isAlienSorted(vector<string>& words, string order) {         unordered_map<char, int> orderMap;         for (int i = 0; i < order.size(); i++) {             orderMap[order[i]] = i;         }         for (int i = 1; i < words.size(); i++) {             if (!inOrder(orderMap, words, i - 1, i)) return false;         }         return true;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool inOrder(unordered_map<char, int>& orderMap, vector<string>& words, int i, int j) {         string word1 = words[i];         string word2 = words[j];         int shorterLen = word1.size() < word2.size() ? word1.size() : word2.size();         for (int k = 0; k < shorterLen; k++) {             char c1 = word1[k];             char c2 = word2[k];             if (c1 == c2) {                 continue;             } else if (orderMap[c1] < orderMap[c2]) {                 return true;             } else {                 return false;             }         }         if (shorterLen == word1.size()) {             return true;         }         return false;     }          bool isAlienSorted(vector<string>& words, string order) {         unordered_map<char, int> orderMap;         for (int i = 0; i < order.size(); i++) {             orderMap[order[i]] = i;         }         for (int i = 1; i < words.size(); i++) {             if (!inOrder(orderMap, words, i - 1, i)) return false;         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/10/953-verifying-an-alien-dictionary.cpp/Solution/isAlienSorted(vector<string>&,string)"
    }
]