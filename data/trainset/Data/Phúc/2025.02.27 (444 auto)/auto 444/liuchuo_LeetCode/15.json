[
    {
        "f": [],
        "fm": "int maxSubArray(vector<int>& nums) {         int len = nums.size();         if(len == 0)             return 0;         int ans = nums[0], temp = nums[0];         for(int i = 1; i < len; i++) {             if(temp > 0) {                 temp = temp + nums[i];             } else {                 temp = nums[i];             }             ans = max(ans, temp);         }         return ans;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maxSubArray(vector<int>& nums) {         int len = nums.size();         if(len == 0)             return 0;         int ans = nums[0], temp = nums[0];         for(int i = 1; i < len; i++) {             if(temp > 0) {                 temp = temp + nums[i];             } else {                 temp = nums[i];             }             ans = max(ans, temp);         }         return ans;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/053. Maximum Subarray.cpp/Solution/maxSubArray(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> spiralOrder(vector<vector<int>>& matrix) {         vector<int> result;         if(matrix.empty()) return result;         int m = matrix.size() - 1, n = matrix[0].size() - 1;         for (int x = 0, y = 0; x <= m && y <= n; x++, y++, m--, n--) {             for (int j = y; j <= n; j++)                 result.push_back(matrix[x][j]);             for (int i = x + 1; i <= m - 1; i++)                 result.push_back(matrix[i][n]);             for (int j = n; j >= y && x != m; j--)                 result.push_back(matrix[m][j]);             for (int i = m - 1; i > x && y != n; i--)                 result.push_back(matrix[i][y]);         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> spiralOrder(vector<vector<int>>& matrix) {         vector<int> result;         if(matrix.empty()) return result;         int m = matrix.size() - 1, n = matrix[0].size() - 1;         for (int x = 0, y = 0; x <= m && y <= n; x++, y++, m--, n--) {             for (int j = y; j <= n; j++)                 result.push_back(matrix[x][j]);             for (int i = x + 1; i <= m - 1; i++)                 result.push_back(matrix[i][n]);             for (int j = n; j >= y && x != m; j--)                 result.push_back(matrix[m][j]);             for (int i = m - 1; i > x && y != n; i--)                 result.push_back(matrix[i][y]);         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/054. Spiral Matrix.cpp/Solution/spiralOrder(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "bool canJump(vector<int>& nums) {         int distance = 0;         for(int i = 0; i < nums.size() - 1 && i <= distance; i++) {             distance = max(distance, i + nums[i]);         }         return distance >= (nums.size() - 1);     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool canJump(vector<int>& nums) {         int distance = 0;         for(int i = 0; i < nums.size() - 1 && i <= distance; i++) {             distance = max(distance, i + nums[i]);         }         return distance >= (nums.size() - 1);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/055. Jump Game.cpp/Solution/canJump(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<Interval> merge(vector<Interval>& intervals) {         vector<Interval> ans;         if (intervals.size() == 0) return ans;         sort(intervals.begin(), intervals.end(), [](Interval a, Interval b){return a.start < b.start;});         ans.push_back(intervals[0]);         for (int i = 1; i < intervals.size(); i++) {             if(ans.back().end < intervals[i].start)                  ans.push_back(intervals[i]);             else                 ans.back().end = max(ans.back().end, intervals[i].end);         }         return ans;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<Interval> merge(vector<Interval>& intervals) {         vector<Interval> ans;         if (intervals.size() == 0) return ans;         sort(intervals.begin(), intervals.end(), [](Interval a, Interval b){return a.start < b.start;});         ans.push_back(intervals[0]);         for (int i = 1; i < intervals.size(); i++) {             if(ans.back().end < intervals[i].start)                  ans.push_back(intervals[i]);             else                 ans.back().end = max(ans.back().end, intervals[i].end);         }         return ans;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/056. Merge Intervals.cpp/Solution/merge(vector<Interval>&)"
    },
    {
        "f": [],
        "fm": "int lengthOfLastWord(string s) {         int cnt = 0;         int flag = 0;         for(int i = s.length() - 1; i >= 0; i--) {             if(flag == 0 && s[i] == ' ') {                 continue;             }             if(s[i] != ' ') {                 flag = 1;                 cnt++;             } else {                 break;             }         }         return cnt;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int lengthOfLastWord(string s) {         int cnt = 0;         int flag = 0;         for(int i = s.length() - 1; i >= 0; i--) {             if(flag == 0 && s[i] == ' ') {                 continue;             }             if(s[i] != ' ') {                 flag = 1;                 cnt++;             } else {                 break;             }         }         return cnt;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/058. Length of Last Word.cpp/Solution/lengthOfLastWord(string)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> generateMatrix(int n) {         vector<vector<int>> result(n, vector<int>(n));         n = n - 1;         int num = 1;         for (int x = 0; x <= n; x++, n--) {             for (int j = x; j <= n; j++)                 result[x][j] = num++;             for (int i = x + 1; i <= n - 1; i++)                 result[i][n] = num++;             for (int j = n; j >= x && x != n; j--)                 result[n][j] = num++;             for (int i = n - 1; i >= x + 1 && x != n; i--)                 result[i][x] = num++;         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> generateMatrix(int n) {         vector<vector<int>> result(n, vector<int>(n));         n = n - 1;         int num = 1;         for (int x = 0; x <= n; x++, n--) {             for (int j = x; j <= n; j++)                 result[x][j] = num++;             for (int i = x + 1; i <= n - 1; i++)                 result[i][n] = num++;             for (int j = n; j >= x && x != n; j--)                 result[n][j] = num++;             for (int i = n - 1; i >= x + 1 && x != n; i--)                 result[i][x] = num++;         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/059. Spiral Matrix II.cpp/Solution/generateMatrix(int)"
    },
    {
        "f": [],
        "fm": "string getPermutation(int n, int k) {         string result = \"\";         for (int i = 1; i <= n; i++)             result += to_string(i);         do {             k--;         } while (k > 0 && next_permutation(result.begin(), result.end()));         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string getPermutation(int n, int k) {         string result = \"\";         for (int i = 1; i <= n; i++)             result += to_string(i);         do {             k--;         } while (k > 0 && next_permutation(result.begin(), result.end()));         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/060. Permutation Sequence.cpp/Solution/getPermutation(int,int)"
    },
    {
        "f": [],
        "fm": "ListNode* rotateRight(ListNode* head, int k) {         if (head == NULL) return head;         int len = 0;         ListNode *newhead = head, *tail = head, *p = head;         while (p != NULL) {             if (p->next == NULL)                 tail = p;             len++;             p = p->next;         }         int moveDistance = len - k % len;         if (moveDistance == len) return head;         for (int i = 0; i < moveDistance - 1; i++) {             newhead = newhead->next;         }         ListNode *temp = newhead;         newhead = newhead->next;         temp->next = NULL;         tail->next = head;         return newhead;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     ListNode* rotateRight(ListNode* head, int k) {         if (head == NULL) return head;         int len = 0;         ListNode *newhead = head, *tail = head, *p = head;         while (p != NULL) {             if (p->next == NULL)                 tail = p;             len++;             p = p->next;         }         int moveDistance = len - k % len;         if (moveDistance == len) return head;         for (int i = 0; i < moveDistance - 1; i++) {             newhead = newhead->next;         }         ListNode *temp = newhead;         newhead = newhead->next;         temp->next = NULL;         tail->next = head;         return newhead;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/061. Rotate List.cpp/Solution/rotateRight(ListNode*,int)"
    },
    {
        "f": [],
        "fm": "int uniquePaths(int m, int n) {         int a[100][100];         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(i == 0 || j == 0)                     a[i][j] = 1;                 else                     a[i][j] = a[i - 1][j] + a[i][j - 1];             }         }         return a[m - 1][n - 1];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int uniquePaths(int m, int n) {         int a[100][100];         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(i == 0 || j == 0)                     a[i][j] = 1;                 else                     a[i][j] = a[i - 1][j] + a[i][j - 1];             }         }         return a[m - 1][n - 1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/062. Unique Paths.cpp/Solution/uniquePaths(int,int)"
    },
    {
        "f": [],
        "fm": "int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {         int m = obstacleGrid.size();         int n = obstacleGrid[0].size();         int a[100][100];         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(obstacleGrid[i][j] == 1) {                     a[i][j] = 0;                 } else if(i == 0 && j == 0) {                     a[i][j] = 1;                 } else if(i == 0) {                     a[i][j] = a[i][j-1];                 } else if(j == 0) {                     a[i][j] = a[i-1][j];                 } else {                     a[i][j] = a[i-1][j] + a[i][j-1];                 }             }         }         return a[m-1][n-1];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {         int m = obstacleGrid.size();         int n = obstacleGrid[0].size();         int a[100][100];         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(obstacleGrid[i][j] == 1) {                     a[i][j] = 0;                 } else if(i == 0 && j == 0) {                     a[i][j] = 1;                 } else if(i == 0) {                     a[i][j] = a[i][j-1];                 } else if(j == 0) {                     a[i][j] = a[i-1][j];                 } else {                     a[i][j] = a[i-1][j] + a[i][j-1];                 }             }         }         return a[m-1][n-1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/15/063. Unique Paths II.cpp/Solution/uniquePathsWithObstacles(vector<vector<int>>&)"
    }
]