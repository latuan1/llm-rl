[
    {
        "f": [],
        "fm": "int minPathSum(vector<vector<int>>& grid) {         int m = grid.size();         int n = grid[0].size();         if(m == 0 || n == 0)             return 0;         vector<vector<int>> dp(m, vector<int>(n));         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(i == 0 && j == 0) {                     dp[i][j] = grid[i][j];                 } else if(i == 0) {                     dp[i][j] = dp[i][j-1] + grid[i][j];                 } else if(j == 0) {                     dp[i][j] = dp[i-1][j] + grid[i][j];                 } else {                     dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];                 }             }         }         return dp[m-1][n-1];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minPathSum(vector<vector<int>>& grid) {         int m = grid.size();         int n = grid[0].size();         if(m == 0 || n == 0)             return 0;         vector<vector<int>> dp(m, vector<int>(n));         for(int i = 0; i < m; i++) {             for(int j = 0; j < n; j++) {                 if(i == 0 && j == 0) {                     dp[i][j] = grid[i][j];                 } else if(i == 0) {                     dp[i][j] = dp[i][j-1] + grid[i][j];                 } else if(j == 0) {                     dp[i][j] = dp[i-1][j] + grid[i][j];                 } else {                     dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];                 }             }         }         return dp[m-1][n-1];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/064. Minimum Path Sum.cpp/Solution/minPathSum(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "vector<int> plusOne(vector<int>& digits) {             for(int i = digits.size() - 1; i >= 0; i--) {                 if(digits[i] != 9) {                     digits[i] = digits[i] + 1;                     return digits;                 } else {                     digits[i] = 0;                 }             }             digits.insert(digits.begin(), 1);                          return digits;                  }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> plusOne(vector<int>& digits) {             for(int i = digits.size() - 1; i >= 0; i--) {                 if(digits[i] != 9) {                     digits[i] = digits[i] + 1;                     return digits;                 } else {                     digits[i] = 0;                 }             }             digits.insert(digits.begin(), 1);                          return digits;                  } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/066. Plus One.cpp/Solution/plusOne(vector<int>&)"
    },
    {
        "f": [],
        "fm": "string addBinary(string a, string b) {         string s;         int lena = a.length() - 1;         int lenb = b.length() - 1;         int temp = 0;         char c;         while(lena >= 0 && lenb >= 0) {             c = (a[lena] - '0') + (b[lenb] - '0') + temp + '0';             temp = 0;             if((c - '0') >= 2) {                 temp = 1;                 c = c - 2;             }             s = c + s;             lena--;             lenb--;         }         while(lena >= 0) {             c = (a[lena] - '0') + temp + '0';             temp = 0;             if((c - '0') >= 2) {                 temp = 1;                 c = c - 2;             }             s = c + s;             lena--;         }         while(lenb >= 0) {             c =(b[lenb] - '0') + temp + '0';             temp = 0;             if((c - '0') >= 2) {                 temp = 1;                 c = c - 2;             }             s = c + s;             lenb--;         }         if(temp == 1) {             s = '1' + s;         }         return s;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string addBinary(string a, string b) {         string s;         int lena = a.length() - 1;         int lenb = b.length() - 1;         int temp = 0;         char c;         while(lena >= 0 && lenb >= 0) {             c = (a[lena] - '0') + (b[lenb] - '0') + temp + '0';             temp = 0;             if((c - '0') >= 2) {                 temp = 1;                 c = c - 2;             }             s = c + s;             lena--;             lenb--;         }         while(lena >= 0) {             c = (a[lena] - '0') + temp + '0';             temp = 0;             if((c - '0') >= 2) {                 temp = 1;                 c = c - 2;             }             s = c + s;             lena--;         }         while(lenb >= 0) {             c =(b[lenb] - '0') + temp + '0';             temp = 0;             if((c - '0') >= 2) {                 temp = 1;                 c = c - 2;             }             s = c + s;             lenb--;         }         if(temp == 1) {             s = '1' + s;         }         return s;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/067. Add Binary.cpp/Solution/addBinary(string,string)"
    },
    {
        "f": [],
        "fm": "int mySqrt(int x) {         long left = 0, right = INT_MAX, mid = 0;         while (true) {             long mid = left + (right - left) / 2;             if (mid * mid <= x && (mid + 1) * (mid + 1) > x)                 return (int)mid;             if (mid * mid < x)                 left = mid + 1;             else                 right = mid - 1;         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int mySqrt(int x) {         long left = 0, right = INT_MAX, mid = 0;         while (true) {             long mid = left + (right - left) / 2;             if (mid * mid <= x && (mid + 1) * (mid + 1) > x)                 return (int)mid;             if (mid * mid < x)                 left = mid + 1;             else                 right = mid - 1;         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/069. Sqrt(x).cpp/Solution/mySqrt(int)"
    },
    {
        "f": [],
        "fm": "int climbStairs(int n) {         int *a = new int [n + 1];         a[0] = 1;         a[1] = 1;         for(int i = 2; i <= n; i++) {             a[i] = a[i - 1] + a[i - 2];         }         return a[n];     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int climbStairs(int n) {         int *a = new int [n + 1];         a[0] = 1;         a[1] = 1;         for(int i = 2; i <= n; i++) {             a[i] = a[i - 1] + a[i - 2];         }         return a[n];     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/070. Climbing Stairs.cpp/Solution/climbStairs(int)"
    },
    {
        "f": [],
        "fm": "string simplifyPath(string path) {         stack<string> s;         string result = \"\", temp = \"\";         int i = 0, len = path.length();         while (i < len) {             while (i < len && path[i] == '/') i++;             temp = \"\";             while (i < len && path[i] != '/') temp += path[i++];             if (temp == \"..\" && !s.empty())                 s.pop();             else if (temp != \"\" && temp != \".\" && temp != \"..\")                 s.push(temp);         }         if (s.empty()) return \"/\";         while (!s.empty()) {             result = \"/\" + s.top() + result;             s.pop();         }         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string simplifyPath(string path) {         stack<string> s;         string result = \"\", temp = \"\";         int i = 0, len = path.length();         while (i < len) {             while (i < len && path[i] == '/') i++;             temp = \"\";             while (i < len && path[i] != '/') temp += path[i++];             if (temp == \"..\" && !s.empty())                 s.pop();             else if (temp != \"\" && temp != \".\" && temp != \"..\")                 s.push(temp);         }         if (s.empty()) return \"/\";         while (!s.empty()) {             result = \"/\" + s.top() + result;             s.pop();         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/071. Simplify Path.cpp/Solution/simplifyPath(string)"
    },
    {
        "f": [],
        "fm": "bool searchMatrix(vector<vector<int>>& matrix, int target) {         for(int i = 0; i < matrix.size(); i++)             if (binary_search(matrix[i].begin(), matrix[i].end(), target)) return true;         return false;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool searchMatrix(vector<vector<int>>& matrix, int target) {         for(int i = 0; i < matrix.size(); i++)             if (binary_search(matrix[i].begin(), matrix[i].end(), target)) return true;         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/074. Search a 2D Matrix.cpp/Solution/searchMatrix(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "void sortColors(vector<int>& nums) {         int cnt0 = 0, cnt1 = 0, cnt2 = 0;         for(int i = 0; i < nums.size(); i++) {             if(nums[i] == 0) {                 cnt0++;             } else if (nums[i] == 1) {                 cnt1++;             } else {                 cnt2++;             }         }         for(int i = 0; i < cnt0; i++) {             nums[i] = 0;         }         for(int i = cnt0; i < cnt0 + cnt1; i++) {             nums[i] = 1;         }         for(int i = cnt1 + cnt0; i < nums.size(); i++) {             nums[i] = 2;         }     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     void sortColors(vector<int>& nums) {         int cnt0 = 0, cnt1 = 0, cnt2 = 0;         for(int i = 0; i < nums.size(); i++) {             if(nums[i] == 0) {                 cnt0++;             } else if (nums[i] == 1) {                 cnt1++;             } else {                 cnt2++;             }         }         for(int i = 0; i < cnt0; i++) {             nums[i] = 0;         }         for(int i = cnt0; i < cnt0 + cnt1; i++) {             nums[i] = 1;         }         for(int i = cnt1 + cnt0; i < nums.size(); i++) {             nums[i] = 2;         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/075. Sort Colors.cpp/Solution/sortColors(vector<int>&)"
    },
    {
        "f": [
            "int n;",
            "int k;",
            "vector<vector<int>> result;",
            "vector<int> row;"
        ],
        "fm": "vector<vector<int>> combine(int n, int k) {         this->n = n, this->k = k;         dfs(0, 0);         return result;     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<vector<int>> combine(int n, int k) {         this->n = n, this->k = k;         dfs(0, 0);         return result;     } private:     int n, k;     vector<vector<int>> result;     vector<int> row;     void dfs(int cur, int cnt) {         if (cnt == k) {             result.push_back(row);             return;         }         for (int i = cur + 1; i <= n; i++) {             row.push_back(i);             dfs(i, cnt + 1);             row.pop_back();         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/16/077. Combinations .cpp/Solution/combine(int,int)"
    }
]