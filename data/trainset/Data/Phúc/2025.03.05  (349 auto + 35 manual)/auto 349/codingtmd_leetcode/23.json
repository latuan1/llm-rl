[
    {
        "f": [],
        "fm": "vector<vector<int> > threeSum(vector<int> &num) { \t\tstd::sort(num.begin(), num.end()); \t\tvector<vector<int>> result; \t\tfor (int i = 0 ; i < num.size() ; i++ ) \t\t{ \t\t\tint target = 0 - num[i]; \t\t\tint start = i + 1, end = num.size() - 1; \t\t\twhile (start < end) \t\t\t{ \t\t\t\tint sum = num[start] + num[end]; \t\t\t\tif (sum == target) \t\t\t\t{ \t\t\t\t\tvector<int> oneSolution; \t\t\t\t\toneSolution.push_back(num[i]); \t\t\t\t\toneSolution.push_back(num[start]); \t\t\t\t\toneSolution.push_back(num[end]); \t\t\t\t\tresult.push_back(oneSolution); \t\t\t\t\tstart++; \t\t\t\t\tend--; \t\t\t\t\twhile (start < num.size() && num[start] == num[start - 1]) start++; \t\t\t\t\twhile (end > 0 && num[end] == num[end + 1]) end--; \t\t\t\t}  \t\t\t\tif (sum < target) \t\t\t\t{ \t\t\t\t\tstart++; \t\t\t\t}  \t\t\t\tif (sum > target) \t\t\t\t{ \t\t\t\t\tend--; \t\t\t\t} \t\t\t}  \t\t\twhile (i < num.size() - 1 && num[i] == num[i + 1]) i++; \t\t} \t\treturn result; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "3Sum.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/3Sum.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/3Sum.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/3Sum.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/3Sum.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/3Sum.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/3Sum.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/3Sum.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "threeSum(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "num_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)/num/element #0",
                                            "correspondingType": "int",
                                            "value": "1368836020"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "num_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)/num/element #1",
                                            "correspondingType": "int",
                                            "value": "-1445626909"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": "./23/3Sum.cpp/Solution/threeSum(vector<int>&)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_threeSum_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_threeSum_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/3Sum.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=1368836020;\nnum.push_back(num_element0);\nint num_element1=-1445626909;\nnum.push_back(num_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSum_vector_int_random_3\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSum(num);\nAKA_fCall++;AKA_mark(\"Return from: ./23/3Sum.cpp/Solution/threeSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/3Sum.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=1368836020;\nnum.push_back(num_element0);\nint num_element1=-1445626909;\nnum.push_back(num_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tvector<vector<int> > threeSum(vector<int> &num) { \t\tstd::sort(num.begin(), num.end()); \t\tvector<vector<int>> result; \t\tfor (int i = 0 ; i < num.size() ; i++ ) \t\t{ \t\t\tint target = 0 - num[i]; \t\t\tint start = i + 1, end = num.size() - 1; \t\t\twhile (start < end) \t\t\t{ \t\t\t\tint sum = num[start] + num[end]; \t\t\t\tif (sum == target) \t\t\t\t{ \t\t\t\t\tvector<int> oneSolution; \t\t\t\t\toneSolution.push_back(num[i]); \t\t\t\t\toneSolution.push_back(num[start]); \t\t\t\t\toneSolution.push_back(num[end]); \t\t\t\t\tresult.push_back(oneSolution); \t\t\t\t\tstart++; \t\t\t\t\tend--; \t\t\t\t\twhile (start < num.size() && num[start] == num[start - 1]) start++; \t\t\t\t\twhile (end > 0 && num[end] == num[end + 1]) end--; \t\t\t\t}  \t\t\t\tif (sum < target) \t\t\t\t{ \t\t\t\t\tstart++; \t\t\t\t}  \t\t\t\tif (sum > target) \t\t\t\t{ \t\t\t\t\tend--; \t\t\t\t} \t\t\t}  \t\t\twhile (i < num.size() - 1 && num[i] == num[i + 1]) i++; \t\t} \t\treturn result; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/3Sum.cpp/Solution/threeSum(vector<int>&)"
    },
    {
        "f": [],
        "fm": "string addBinary(string a, string b) {         int carry = 0;         string result;         for (             int i = a.size() - 1, j = b.size() - 1;             i >= 0 || j >= 0;             --i, --j         )         {             int ai = i >= 0 ? a[i] - '0' : 0;             int bj = j >= 0 ? b[j] - '0' : 0;             int val = (ai + bj + carry) % 2;             carry = (ai + bj + carry) / 2;             result.insert(result.begin(), val + '0');         }          if (carry == 1)         {             result.insert(result.begin(), '1');         }         return result;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Add_Binary.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Add_Binary.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Add_Binary.cpp/Solution/addBinary(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Binary.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Add_Binary.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Add_Binary.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Add_Binary.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Add_Binary.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Add_Binary.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "addBinary(string,string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": "./23/Add_Binary.cpp/Solution/addBinary(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "b",
                                    "virtual_name": "EXPECTED_b",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Binary.cpp/Solution/addBinary(string,string)/b",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "a",
                                    "virtual_name": "EXPECTED_a",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Binary.cpp/Solution/addBinary(string,string)/a",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Add_Binary.cpp/Solution/addBinary(string,string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "a",
                                    "virtual_name": "a",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Binary.cpp/Solution/addBinary(string,string)/a",
                                    "correspondingType": "string",
                                    "value": "2",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "a[0]",
                                            "virtual_name": "a[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./23/Add_Binary.cpp/Solution/addBinary(string,string)/a/a[0]",
                                            "correspondingType": "char",
                                            "value": "-6"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "b",
                                    "virtual_name": "b",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Binary.cpp/Solution/addBinary(string,string)/b",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "b[0]",
                                            "virtual_name": "b[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./23/Add_Binary.cpp/Solution/addBinary(string,string)/b/b[0]",
                                            "correspondingType": "char",
                                            "value": "-103"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Binary.cpp/Solution/addBinary(string,string)/RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_addBinary_string_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_addBinary_string_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Add_Binary.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName643994 = new char[2];akaRandomName643994[0] = -6;akaRandomName643994[1] = '\\0';string a=akaRandomName643994;\nchar* akaRandomName643689 = new char[2];akaRandomName643689[0] = -103;akaRandomName643689[1] = '\\0';string b=akaRandomName643689;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addBinary_string_string_random_1\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addBinary(a,b);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Add_Binary.cpp/Solution/addBinary(string,string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Add_Binary.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName896823 = new char[2];akaRandomName896823[0] = -6;akaRandomName896823[1] = '\\0';string a=akaRandomName896823;\nchar* akaRandomName175365 = new char[2];akaRandomName175365[0] = -103;akaRandomName175365[1] = '\\0';string b=akaRandomName175365;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string addBinary(string a, string b) {         int carry = 0;         string result;         for (             int i = a.size() - 1, j = b.size() - 1;             i >= 0 || j >= 0;             --i, --j         )         {             int ai = i >= 0 ? a[i] - '0' : 0;             int bj = j >= 0 ? b[j] - '0' : 0;             int val = (ai + bj + carry) % 2;             carry = (ai + bj + carry) / 2;             result.insert(result.begin(), val + '0');         }          if (carry == 1)         {             result.insert(result.begin(), '1');         }         return result;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/Add_Binary.cpp/Solution/addBinary(string,string)"
    },
    {
        "f": [],
        "fm": "ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) { \t\tListNode* result = new ListNode(-1); \t\tListNode* pre = result; \t\tListNode *pa = l1, *pb = l2; \t\tint carry = 0; \t\twhile (pa != NULL || pb != NULL) \t\t{ \t\t\tint av = pa == NULL ? 0 : pa->val; \t\t\tint bv = pb == NULL ? 0 : pb->val; \t\t\tListNode* node = new ListNode((av + bv + carry) % 10); \t\t\tcarry = (av + bv + carry) / 10; \t\t\tpre->next = node; \t\t\tpre = pre->next; \t\t\tpa = pa == NULL ? NULL : pa->next; \t\t\tpb = pb == NULL ? NULL : pb->next; \t\t} \t\tif (carry > 0) \t\t\tpre->next = new ListNode(1); \t\tpre = result->next; \t\tdelete result; \t\treturn pre; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Add_Two_Numbers.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Add_Two_Numbers.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Add_Two_Numbers.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Add_Two_Numbers.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Add_Two_Numbers.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "addTwoNumbers(ListNode*,ListNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "ListNode*",
                            "realType": "ListNode*",
                            "functionNode": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "l2",
                                    "virtual_name": "EXPECTED_l2",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l2",
                                    "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                    "level": 1
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "l1",
                                    "virtual_name": "EXPECTED_l1",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l1",
                                    "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "l1",
                                    "virtual_name": "l1",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l1",
                                    "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                    "level": 1,
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "l1[0]",
                                            "virtual_name": "l1[0]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l1/l1[0]",
                                            "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "l1",
                                                    "virtual_name": "l1[0]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l1/l1",
                                                    "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "l1[0]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": "./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "l10_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "1173312711"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "l1[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./23/Add_Two_Numbers.cpp/ListNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "l1[0].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Add_Two_Numbers.cpp/ListNode/next",
                                                            "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "l1[1]",
                                            "virtual_name": "l1[1]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l1/l1[1]",
                                            "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "l1",
                                                    "virtual_name": "l1[1]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l1/l1",
                                                    "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "l1[1]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": "./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "l11_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "-815344091"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "l1[1].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./23/Add_Two_Numbers.cpp/ListNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "l1[1].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Add_Two_Numbers.cpp/ListNode/next",
                                                            "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "l2",
                                    "virtual_name": "l2",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/l2",
                                    "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                    "level": 1
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)/RETURN",
                                    "correspondingType": "./23/Add_Two_Numbers.cpp/ListNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_addTwoNumbers_ListNodemul_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_addTwoNumbers_ListNodemul_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Add_Two_Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=1173312711;\nAKA_mark(\"Calling: ./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)|ROOT/Add_Two_Numbers.cpp/addTwoNumbers(ListNode*,ListNode*)/l1/AKA_VECTOR_INIT_l1_0/l1/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=-815344091;\nAKA_mark(\"Calling: ./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)|ROOT/Add_Two_Numbers.cpp/addTwoNumbers(ListNode*,ListNode*)/l1/AKA_VECTOR_INIT_l1_1/l1/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addTwoNumbers_ListNodemul_ListNodemul_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addTwoNumbers(l1,l2);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Add_Two_Numbers.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=1173312711;\nAKA_mark(\"Calling: ./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)|ROOT/Add_Two_Numbers.cpp/addTwoNumbers(ListNode*,ListNode*)/l1/AKA_VECTOR_INIT_l1_0/l1/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=-815344091;\nAKA_mark(\"Calling: ./23/Add_Two_Numbers.cpp/ListNode/ListNode(int)|ROOT/Add_Two_Numbers.cpp/addTwoNumbers(ListNode*,ListNode*)/l1/AKA_VECTOR_INIT_l1_1/l1/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nListNode* l2;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tListNode *addTwoNumbers(ListNode *l1, ListNode *l2) { \t\tListNode* result = new ListNode(-1); \t\tListNode* pre = result; \t\tListNode *pa = l1, *pb = l2; \t\tint carry = 0; \t\twhile (pa != NULL || pb != NULL) \t\t{ \t\t\tint av = pa == NULL ? 0 : pa->val; \t\t\tint bv = pb == NULL ? 0 : pb->val; \t\t\tListNode* node = new ListNode((av + bv + carry) % 10); \t\t\tcarry = (av + bv + carry) / 10; \t\t\tpre->next = node; \t\t\tpre = pre->next; \t\t\tpa = pa == NULL ? NULL : pa->next; \t\t\tpb = pb == NULL ? NULL : pb->next; \t\t} \t\tif (carry > 0) \t\t\tpre->next = new ListNode(1); \t\tpre = result->next; \t\tdelete result; \t\treturn pre; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/Add_Two_Numbers.cpp/Solution/addTwoNumbers(ListNode*,ListNode*)"
    },
    {
        "f": [],
        "fm": "bool isBalanced(TreeNode *root) { \t\tif (root == NULL) return true; \t\tint val = GetBalance(root); \t\tif (val == -1) return false; \t\treturn true; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Balanced_Binary_Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Balanced_Binary_Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "isBalanced(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)/root",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)/root",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                    "level": 1,
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)/root/root[0]",
                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)/root/root",
                                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "1608495920"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/left",
                                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/right",
                                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[1]",
                                            "virtual_name": "root[1]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)/root/root[1]",
                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[1]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)/root/root",
                                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[1]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root1_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "-706709504"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[1].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[1].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/left",
                                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[1].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/right",
                                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_isBalanced_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Balanced_Binary_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1608495920;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/isBalanced(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-706709504;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/isBalanced(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Balanced_Binary_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1608495920;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/isBalanced(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-706709504;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/isBalanced(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tbool isBalanced(TreeNode *root) { \t\tif (root == NULL) return true; \t\tint val = GetBalance(root); \t\tif (val == -1) return false; \t\treturn true; \t} \tint GetBalance(TreeNode* node) \t{ \t\tif (node == NULL) \t\t\treturn 0; \t\tint left = GetBalance(node->left); \t\tif (left == -1) return -1; \t\tint right = GetBalance(node->right); \t\tif (right == -1) return -1; \t\tif (left - right > 1 || right - left > 1) \t\t\treturn -1; \t\treturn left > right ? left + 1 : right + 1; \t}  };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/Balanced_Binary_Tree.cpp/Solution/isBalanced(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int GetBalance(TreeNode* node) \t{ \t\tif (node == NULL) \t\t\treturn 0; \t\tint left = GetBalance(node->left); \t\tif (left == -1) return -1; \t\tint right = GetBalance(node->right); \t\tif (right == -1) return -1; \t\tif (left - right > 1 || right - left > 1) \t\t\treturn -1; \t\treturn left > right ? left + 1 : right + 1; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Balanced_Binary_Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Balanced_Binary_Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "GetBalance(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "node",
                                    "virtual_name": "EXPECTED_node",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)/node",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "node",
                                    "virtual_name": "node",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)/node",
                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                    "level": 1,
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "node[0]",
                                            "virtual_name": "node[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)/node/node[0]",
                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "node",
                                                    "virtual_name": "node[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)/node/node",
                                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "node[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "node0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "452676054"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "node[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "node[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/left",
                                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                            "level": 1,
                                                            "size": 1,
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "left[0]",
                                                                    "virtual_name": "node[0].left[0]",
                                                                    "dataType": "TreeNode",
                                                                    "realType": "TreeNode",
                                                                    "external": false,
                                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/left/left[0]",
                                                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "left",
                                                                            "virtual_name": "node[0].left[0]",
                                                                            "dataType": "::TreeNode",
                                                                            "realType": "::TreeNode",
                                                                            "external": false,
                                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/left/left",
                                                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                                            "rawType": "::TreeNode",
                                                                            "selectedConstructor": "TreeNode(int)",
                                                                            "variableType": "::TreeNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "TreeNode(int)",
                                                                                    "virtual_name": "node[0].left[0]",
                                                                                    "dataType": "::TreeNode",
                                                                                    "realType": "::TreeNode",
                                                                                    "functionNode": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "node0_left0_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)/x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "-723672690"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "node[0].left[0].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "null"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "left",
                                                                                    "virtual_name": "node[0].left[0].left",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/left",
                                                                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                                                    "level": 1
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "right",
                                                                                    "virtual_name": "node[0].left[0].right",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/right",
                                                                                    "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "node[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": "./23/Balanced_Binary_Tree.cpp/TreeNode/right",
                                                            "correspondingType": "./23/Balanced_Binary_Tree.cpp/TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_GetBalance_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_GetBalance_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Balanced_Binary_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=452676054;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/GetBalance(TreeNode*)/node/AKA_VECTOR_INIT_node_0/node/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left0_x=-723672690;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/GetBalance(TreeNode*)/node/AKA_VECTOR_INIT_node_0/node/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_0 = new ::TreeNode(node0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_0);\n(*AKA_VECTOR_INIT_node_0).left = AKA_VECTOR_INIT_node_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetBalance_TreeNodemul_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->GetBalance(node);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Balanced_Binary_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=452676054;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/GetBalance(TreeNode*)/node/AKA_VECTOR_INIT_node_0/node/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_left0_x=-723672690;\nAKA_mark(\"Calling: ./23/Balanced_Binary_Tree.cpp/TreeNode/TreeNode(int)|ROOT/Balanced_Binary_Tree.cpp/GetBalance(TreeNode*)/node/AKA_VECTOR_INIT_node_0/node/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_left_0 = new ::TreeNode(node0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0_DOT_left_0).right;\nAKA_VECTOR_INIT_node_0_DOT_left.push_back(AKA_VECTOR_INIT_node_0_DOT_left_0);\n(*AKA_VECTOR_INIT_node_0).left = AKA_VECTOR_INIT_node_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tbool isBalanced(TreeNode *root) { \t\tif (root == NULL) return true; \t\tint val = GetBalance(root); \t\tif (val == -1) return false; \t\treturn true; \t} \tint GetBalance(TreeNode* node) \t{ \t\tif (node == NULL) \t\t\treturn 0; \t\tint left = GetBalance(node->left); \t\tif (left == -1) return -1; \t\tint right = GetBalance(node->right); \t\tif (right == -1) return -1; \t\tif (left - right > 1 || right - left > 1) \t\t\treturn -1; \t\treturn left > right ? left + 1 : right + 1; \t}  };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/Balanced_Binary_Tree.cpp/Solution/GetBalance(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int maxProfit(vector<int>&prices) { \t\t// Start typing your C/C++ solution below \t\t// DO NOT write int main() function \t\tint minV = INT_MAX; int max = 0; \t\tint diff = 0; \t\tfor (int i = 0; i < prices.size(); i++) \t\t{ \t\t\tif (prices[i] < minV) minV = prices[i]; \t\t\tdiff = prices[i] - minV; \t\t\tif (max < diff) \t\t\t\tmax = diff; \t\t} \t\treturn max; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Best_Time_to_Buy_and_Sell_Stock.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxProfit(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "EXPECTED_prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "prices_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices/element #0",
                                            "correspondingType": "int",
                                            "value": "1574380468"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "prices_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices/element #1",
                                            "correspondingType": "int",
                                            "value": "1981932300"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_10(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_10\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=1574380468;\nprices.push_back(prices_element0);\nint prices_element1=1981932300;\nprices.push_back(prices_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_10\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=1574380468;\nprices.push_back(prices_element0);\nint prices_element1=1981932300;\nprices.push_back(prices_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Best_Time_to_Buy_and_Sell_Stock.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxProfit(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "EXPECTED_prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "prices_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices/element #0",
                                            "correspondingType": "int",
                                            "value": "-1192660737"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "prices_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices/element #1",
                                            "correspondingType": "int",
                                            "value": "-1281898094"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "prices_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/prices/element #2",
                                            "correspondingType": "int",
                                            "value": "772255529"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-1192660737;\nprices.push_back(prices_element0);\nint prices_element1=-1281898094;\nprices.push_back(prices_element1);\nint prices_element2=772255529;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-1192660737;\nprices.push_back(prices_element0);\nint prices_element1=-1281898094;\nprices.push_back(prices_element1);\nint prices_element2=772255529;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tint maxProfit(vector<int>&prices) { \t\t// Start typing your C/C++ solution below \t\t// DO NOT write int main() function \t\tint minV = INT_MAX; int max = 0; \t\tint diff = 0; \t\tfor (int i = 0; i < prices.size(); i++) \t\t{ \t\t\tif (prices[i] < minV) minV = prices[i]; \t\t\tdiff = prices[i] - minV; \t\t\tif (max < diff) \t\t\t\tmax = diff; \t\t} \t\treturn max; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/Best_Time_to_Buy_and_Sell_Stock.cpp/Solution/maxProfit(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int maxProfit(vector<int>&prices) { \t\tint max = 0; \t\tint sum = 0; \t\tfor (int i = 1; i < prices.size(); i++) \t\t{ \t\t\tint diff = prices[i] - prices[i - 1]; \t\t\tif (diff > 0) \t\t\t\tsum += diff; \t\t} \t\treturn sum; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Best_Time_to_Buy_and_Sell_Stock_II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxProfit(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "EXPECTED_prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "prices_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #0",
                                            "correspondingType": "int",
                                            "value": "1350035097"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "prices_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #1",
                                            "correspondingType": "int",
                                            "value": "505684289"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "prices_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #2",
                                            "correspondingType": "int",
                                            "value": "66359902"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_5(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=1350035097;\nprices.push_back(prices_element0);\nint prices_element1=505684289;\nprices.push_back(prices_element1);\nint prices_element2=66359902;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_5\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=1350035097;\nprices.push_back(prices_element0);\nint prices_element1=505684289;\nprices.push_back(prices_element1);\nint prices_element2=66359902;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Best_Time_to_Buy_and_Sell_Stock_II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxProfit(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "EXPECTED_prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "prices_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #0",
                                            "correspondingType": "int",
                                            "value": "-2091266554"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "prices_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #1",
                                            "correspondingType": "int",
                                            "value": "-568805241"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_6(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-2091266554;\nprices.push_back(prices_element0);\nint prices_element1=-568805241;\nprices.push_back(prices_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_6\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-2091266554;\nprices.push_back(prices_element0);\nint prices_element1=-568805241;\nprices.push_back(prices_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Best_Time_to_Buy_and_Sell_Stock_II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxProfit(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "EXPECTED_prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "prices_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #0",
                                            "correspondingType": "int",
                                            "value": "398482856"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "prices_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #1",
                                            "correspondingType": "int",
                                            "value": "-1435959194"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "prices_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/prices/element #2",
                                            "correspondingType": "int",
                                            "value": "697059857"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=398482856;\nprices.push_back(prices_element0);\nint prices_element1=-1435959194;\nprices.push_back(prices_element1);\nint prices_element2=697059857;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=398482856;\nprices.push_back(prices_element0);\nint prices_element1=-1435959194;\nprices.push_back(prices_element1);\nint prices_element2=697059857;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tint maxProfit(vector<int>&prices) { \t\tint max = 0; \t\tint sum = 0; \t\tfor (int i = 1; i < prices.size(); i++) \t\t{ \t\t\tint diff = prices[i] - prices[i - 1]; \t\t\tif (diff > 0) \t\t\t\tsum += diff; \t\t} \t\treturn sum; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/Best_Time_to_Buy_and_Sell_Stock_II.cpp/Solution/maxProfit(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int maxProfit(vector<int> &prices) {     if (prices.size() <= 1) return 0;     vector<int> maxFromLeft(prices.size(), 0);     vector<int> maxFromRight(prices.size(), 0);     int minV = INT_MAX, maxP = INT_MIN;     for (int i = 0; i < prices.size(); i++)     {       if (minV > prices[i]) minV = prices[i];       int temp = prices[i] - minV;       if (temp > maxP) maxP = temp;       maxFromLeft[i] = maxP;     }      int maxV = INT_MIN;     maxP = INT_MIN;     for (int i = prices.size() - 1; i >= 0; i--)     {       if (maxV < prices[i]) maxV = prices[i];       int temp = maxV - prices[i];       if (temp > maxP) maxP = temp;       maxFromRight[i] = maxP;     }      int maxProfit = INT_MIN;     for (int i = 0; i < prices.size() - 1; i++)     {       int sum = maxFromLeft[i] + maxFromRight[i + 1];       if (sum > maxProfit) maxProfit = sum;     }     if (maxProfit < maxFromRight[0])       maxProfit = maxFromRight[0];     return maxProfit;   }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Best_Time_to_Buy_and_Sell_Stock_III.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxProfit(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "EXPECTED_prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "prices_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices/element #0",
                                            "correspondingType": "int",
                                            "value": "-64131444"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "prices_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices/element #1",
                                            "correspondingType": "int",
                                            "value": "-990651303"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "prices_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices/element #2",
                                            "correspondingType": "int",
                                            "value": "152652194"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_7(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-64131444;\nprices.push_back(prices_element0);\nint prices_element1=-990651303;\nprices.push_back(prices_element1);\nint prices_element2=152652194;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_7\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-64131444;\nprices.push_back(prices_element0);\nint prices_element1=-990651303;\nprices.push_back(prices_element1);\nint prices_element2=152652194;\nprices.push_back(prices_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Best_Time_to_Buy_and_Sell_Stock_III.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxProfit(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "EXPECTED_prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "prices",
                                    "virtual_name": "prices",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "prices_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/prices/element #0",
                                            "correspondingType": "int",
                                            "value": "-1358352940"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxProfit_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maxProfit_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-1358352940;\nprices.push_back(prices_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxProfit_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxProfit(prices);\nAKA_fCall++;AKA_mark(\"Return from: ./23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)\");\n\n\nvector<int> EXPECTED_prices;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Best_Time_to_Buy_and_Sell_Stock_III.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> prices;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode prices */\nint prices_element0=-1358352940;\nprices.push_back(prices_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:   int maxProfit(vector<int> &prices) {     if (prices.size() <= 1) return 0;     vector<int> maxFromLeft(prices.size(), 0);     vector<int> maxFromRight(prices.size(), 0);     int minV = INT_MAX, maxP = INT_MIN;     for (int i = 0; i < prices.size(); i++)     {       if (minV > prices[i]) minV = prices[i];       int temp = prices[i] - minV;       if (temp > maxP) maxP = temp;       maxFromLeft[i] = maxP;     }      int maxV = INT_MIN;     maxP = INT_MIN;     for (int i = prices.size() - 1; i >= 0; i--)     {       if (maxV < prices[i]) maxV = prices[i];       int temp = maxV - prices[i];       if (temp > maxP) maxP = temp;       maxFromRight[i] = maxP;     }      int maxProfit = INT_MIN;     for (int i = 0; i < prices.size() - 1; i++)     {       int sum = maxFromLeft[i] + maxFromRight[i + 1];       if (sum > maxProfit) maxProfit = sum;     }     if (maxProfit < maxFromRight[0])       maxProfit = maxFromRight[0];     return maxProfit;   } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/23/Best_Time_to_Buy_and_Sell_Stock_III.cpp/Solution/maxProfit(vector<int>&)"
    }
]