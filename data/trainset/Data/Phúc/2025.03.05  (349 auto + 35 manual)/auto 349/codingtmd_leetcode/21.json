[
    {
        "f": [],
        "fm": "vector<vector<int> > combinationSum2( \t    vector<int> &num, int target) \t{ \t\tvector<vector<int> > result; \t\tvector<int> solution; \t\tint sum = 0; \t\tstd::sort(num.begin(), num.end()); \t\tGetCombinations(num, sum, 0, target, solution, result); \t\treturn result; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Combination_Sum_II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Combination_Sum_II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Combination_Sum_II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Combination_Sum_II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Combination_Sum_II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "combinationSum2(vector<int>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "EXPECTED_target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)/target",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "num_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)/num/element #0",
                                            "correspondingType": "int",
                                            "value": "133275261"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "num_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)/num/element #1",
                                            "correspondingType": "int",
                                            "value": "1599070448"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)/target",
                                    "correspondingType": "int",
                                    "value": "1303411123"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_combinationSum2_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_combinationSum2_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Combination_Sum_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=1303411123;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=133275261;\nnum.push_back(num_element0);\nint num_element1=1599070448;\nnum.push_back(num_element1);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_combinationSum2_vector_int_int_random_1\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->combinationSum2(num,target);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Combination_Sum_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint target=1303411123;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=133275261;\nnum.push_back(num_element0);\nint num_element1=1599070448;\nnum.push_back(num_element1);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tvector<vector<int> > combinationSum2( \t    vector<int> &num, int target) \t{ \t\tvector<vector<int> > result; \t\tvector<int> solution; \t\tint sum = 0; \t\tstd::sort(num.begin(), num.end()); \t\tGetCombinations(num, sum, 0, target, solution, result); \t\treturn result; \t}  \tvoid GetCombinations( \t    vector<int>& candidates, \t    int& sum, \t    int level, \t    int target, \t    vector<int>& solution, \t    vector<vector<int> >& result) \t{ \t\tif (sum > target) return; \t\tif (sum == target) \t\t{ \t\t\tresult.push_back(solution); \t\t\treturn; \t\t} \t\tfor (int i = level; i < candidates.size(); i++) \t\t{ \t\t\tsum += candidates[i]; \t\t\tsolution.push_back(candidates[i]); \t\t\tGetCombinations( \t\t\t    candidates, sum, i + 1, target, solution, result); \t\t\tsolution.pop_back(); \t\t\tsum -= candidates[i]; \t\t\twhile ( i < candidates.size() - 1 \t\t\t        && candidates[i] == candidates[i + 1]) \t\t\t\ti++; \t\t} \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Combination_Sum_II.cpp/Solution/combinationSum2(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "void GetCombinations( \t    vector<int>& candidates, \t    int& sum, \t    int level, \t    int target, \t    vector<int>& solution, \t    vector<vector<int> >& result) \t{ \t\tif (sum > target) return; \t\tif (sum == target) \t\t{ \t\t\tresult.push_back(solution); \t\t\treturn; \t\t} \t\tfor (int i = level; i < candidates.size(); i++) \t\t{ \t\t\tsum += candidates[i]; \t\t\tsolution.push_back(candidates[i]); \t\t\tGetCombinations( \t\t\t    candidates, sum, i + 1, target, solution, result); \t\t\tsolution.pop_back(); \t\t\tsum -= candidates[i]; \t\t\twhile ( i < candidates.size() - 1 \t\t\t        && candidates[i] == candidates[i + 1]) \t\t\t\ti++; \t\t} \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Combination_Sum_II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Combination_Sum_II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Combination_Sum_II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Combination_Sum_II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Combination_Sum_II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "void",
                            "realType": "void",
                            "functionNode": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "candidates",
                                    "virtual_name": "EXPECTED_candidates",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/candidates",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "level",
                                    "virtual_name": "EXPECTED_level",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/level",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "result",
                                    "virtual_name": "EXPECTED_result",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "sum",
                                    "virtual_name": "EXPECTED_sum",
                                    "dataType": "int&",
                                    "realType": "int&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/sum",
                                    "correspondingType": "int&",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "solution",
                                    "virtual_name": "EXPECTED_solution",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/solution",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "EXPECTED_target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/target",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "candidates",
                                    "virtual_name": "candidates",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/candidates",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "candidates_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/candidates/element #0",
                                            "correspondingType": "int",
                                            "value": "-1082195910"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "candidates_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/candidates/element #1",
                                            "correspondingType": "int",
                                            "value": "517534244"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "candidates_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/candidates/element #2",
                                            "correspondingType": "int",
                                            "value": "-2079742973"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "sum",
                                    "virtual_name": "sum",
                                    "dataType": "int&",
                                    "realType": "int&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/sum",
                                    "correspondingType": "int&",
                                    "value": "-1347230134"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "level",
                                    "virtual_name": "level",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/level",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/target",
                                    "correspondingType": "int",
                                    "value": "-146422275"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "solution",
                                    "virtual_name": "solution",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/solution",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "solution_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/solution/element #0",
                                            "correspondingType": "int",
                                            "value": "-833449276"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "result",
                                    "virtual_name": "result",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "result_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 3,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "result_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #0/element #0",
                                                    "correspondingType": "int",
                                                    "value": "256495810"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "result_element0_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #0/element #1",
                                                    "correspondingType": "int",
                                                    "value": "-1445866138"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #2",
                                                    "virtual_name": "result_element0_element2",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #0/element #2",
                                                    "correspondingType": "int",
                                                    "value": "-541978995"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #1",
                                            "virtual_name": "result_element1",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #1",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 2,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "result_element1_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #1/element #0",
                                                    "correspondingType": "int",
                                                    "value": "-1467016547"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "result_element1_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #1/element #1",
                                                    "correspondingType": "int",
                                                    "value": "1279871862"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #2",
                                            "virtual_name": "result_element2",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #2",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 2,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "result_element2_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #2/element #0",
                                                    "correspondingType": "int",
                                                    "value": "-1422253054"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "result_element2_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)/result/element #2/element #1",
                                                    "correspondingType": "int",
                                                    "value": "-1863610231"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Combination_Sum_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-1347230134;\n\n\nint level=0;\n\n\nint target=-146422275;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-1082195910;\ncandidates.push_back(candidates_element0);\nint candidates_element1=517534244;\ncandidates.push_back(candidates_element1);\nint candidates_element2=-2079742973;\ncandidates.push_back(candidates_element2);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=-833449276;\nsolution.push_back(solution_element0);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=256495810;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-1445866138;\nresult_element0.push_back(result_element0_element1);\nint result_element0_element2=-541978995;\nresult_element0.push_back(result_element0_element2);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=-1467016547;\nresult_element1.push_back(result_element1_element0);\nint result_element1_element1=1279871862;\nresult_element1.push_back(result_element1_element1);\nresult.push_back(result_element1);\nvector<int> result_element2;\nint result_element2_element0=-1422253054;\nresult_element2.push_back(result_element2_element0);\nint result_element2_element1=-1863610231;\nresult_element2.push_back(result_element2_element1);\nresult.push_back(result_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_GetCombinations_vector_int_int_int_int_vector_int_vector_vector_int_random_0\");AKA_INSTANCE___Solution->GetCombinations(candidates,sum,level,target,solution,result);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_candidates;\n\nvector<int> EXPECTED_solution;\n\nvector<vector<int>> EXPECTED_result;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Combination_Sum_II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> candidates;\n\n\nint sum=-1347230134;\n\n\nint level=0;\n\n\nint target=-146422275;\nvector<int> solution;\nvector<vector<int>> result;\n\n/* RootDataNode STATIC */\n/* VectorDataNode candidates */\nint candidates_element0=-1082195910;\ncandidates.push_back(candidates_element0);\nint candidates_element1=517534244;\ncandidates.push_back(candidates_element1);\nint candidates_element2=-2079742973;\ncandidates.push_back(candidates_element2);\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode level */\n/* NormalNumberDataNode target */\n/* VectorDataNode solution */\nint solution_element0=-833449276;\nsolution.push_back(solution_element0);\n/* VectorDataNode result */\nvector<int> result_element0;\nint result_element0_element0=256495810;\nresult_element0.push_back(result_element0_element0);\nint result_element0_element1=-1445866138;\nresult_element0.push_back(result_element0_element1);\nint result_element0_element2=-541978995;\nresult_element0.push_back(result_element0_element2);\nresult.push_back(result_element0);\nvector<int> result_element1;\nint result_element1_element0=-1467016547;\nresult_element1.push_back(result_element1_element0);\nint result_element1_element1=1279871862;\nresult_element1.push_back(result_element1_element1);\nresult.push_back(result_element1);\nvector<int> result_element2;\nint result_element2_element0=-1422253054;\nresult_element2.push_back(result_element2_element0);\nint result_element2_element1=-1863610231;\nresult_element2.push_back(result_element2_element1);\nresult.push_back(result_element2);\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tvector<vector<int> > combinationSum2( \t    vector<int> &num, int target) \t{ \t\tvector<vector<int> > result; \t\tvector<int> solution; \t\tint sum = 0; \t\tstd::sort(num.begin(), num.end()); \t\tGetCombinations(num, sum, 0, target, solution, result); \t\treturn result; \t}  \tvoid GetCombinations( \t    vector<int>& candidates, \t    int& sum, \t    int level, \t    int target, \t    vector<int>& solution, \t    vector<vector<int> >& result) \t{ \t\tif (sum > target) return; \t\tif (sum == target) \t\t{ \t\t\tresult.push_back(solution); \t\t\treturn; \t\t} \t\tfor (int i = level; i < candidates.size(); i++) \t\t{ \t\t\tsum += candidates[i]; \t\t\tsolution.push_back(candidates[i]); \t\t\tGetCombinations( \t\t\t    candidates, sum, i + 1, target, solution, result); \t\t\tsolution.pop_back(); \t\t\tsum -= candidates[i]; \t\t\twhile ( i < candidates.size() - 1 \t\t\t        && candidates[i] == candidates[i + 1]) \t\t\t\ti++; \t\t} \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Combination_Sum_II.cpp/Solution/GetCombinations(vector<int>&,int&,int,int,vector<int>&,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *buildTree( \t    vector<int> &preorder, \t    vector<int> &inorder) \t{ \t\treturn BuildTreePI( preorder, inorder, \t\t                    0, preorder.size() - 1, 0, preorder.size()); \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "buildTree(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "EXPECTED_preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "preorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/preorder/element #0",
                                            "correspondingType": "int",
                                            "value": "-1304876477"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "preorder_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/preorder/element #1",
                                            "correspondingType": "int",
                                            "value": "-603921226"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "inorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/inorder/element #0",
                                            "correspondingType": "int",
                                            "value": "1517306835"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)/RETURN",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_buildTree_vector_int_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_buildTree_vector_int_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-1304876477;\npreorder.push_back(preorder_element0);\nint preorder_element1=-603921226;\npreorder.push_back(preorder_element1);\n/* VectorDataNode inorder */\nint inorder_element0=1517306835;\ninorder.push_back(inorder_element0);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildTree_vector_int_vector_int_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buildTree(preorder,inorder);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-1304876477;\npreorder.push_back(preorder_element0);\nint preorder_element1=-603921226;\npreorder.push_back(preorder_element1);\n/* VectorDataNode inorder */\nint inorder_element0=1517306835;\ninorder.push_back(inorder_element0);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tTreeNode *buildTree( \t    vector<int> &preorder, \t    vector<int> &inorder) \t{ \t\treturn BuildTreePI( preorder, inorder, \t\t                    0, preorder.size() - 1, 0, preorder.size()); \t} \tTreeNode* BuildTreePI( \t    vector<int> &preorder, \t    vector<int> &inorder, \t    int p_s, int p_e, \t    int i_s, int i_e) \t{ \t\tif (p_s > p_e) \t\t\treturn NULL; \t\tint pivot = preorder[i_s]; \t\tint i = p_s; \t\tfor (; i < p_e; i++) \t\t{ \t\t\tif (inorder[i] == pivot) \t\t\t\tbreak; \t\t} \t\tTreeNode* node = new TreeNode(pivot); \t\tnode->left = BuildTreePI(preorder, inorder, \t\t                         p_s, i - 1, i_s + 1, i - p_s + i_s); \t\tnode->right = BuildTreePI(preorder, inorder, \t\t                          i + 1, p_e, i - p_s + i_s + 1, i_e); \t\treturn node; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/buildTree(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode* BuildTreePI( \t    vector<int> &preorder, \t    vector<int> &inorder, \t    int p_s, int p_e, \t    int i_s, int i_e) \t{ \t\tif (p_s > p_e) \t\t\treturn NULL; \t\tint pivot = preorder[i_s]; \t\tint i = p_s; \t\tfor (; i < p_e; i++) \t\t{ \t\t\tif (inorder[i] == pivot) \t\t\t\tbreak; \t\t} \t\tTreeNode* node = new TreeNode(pivot); \t\tnode->left = BuildTreePI(preorder, inorder, \t\t                         p_s, i - 1, i_s + 1, i - p_s + i_s); \t\tnode->right = BuildTreePI(preorder, inorder, \t\t                          i + 1, p_e, i - p_s + i_s + 1, i_e); \t\treturn node; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "EXPECTED_preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_e",
                                    "virtual_name": "EXPECTED_p_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_e",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_e",
                                    "virtual_name": "EXPECTED_i_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_e",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_s",
                                    "virtual_name": "EXPECTED_p_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_s",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_s",
                                    "virtual_name": "EXPECTED_i_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_s",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "preorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder/element #0",
                                            "correspondingType": "int",
                                            "value": "1468599008"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "preorder_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder/element #1",
                                            "correspondingType": "int",
                                            "value": "-559140697"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "inorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder/element #0",
                                            "correspondingType": "int",
                                            "value": "560606676"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "inorder_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder/element #1",
                                            "correspondingType": "int",
                                            "value": "-1621703749"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "inorder_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder/element #2",
                                            "correspondingType": "int",
                                            "value": "-1806061064"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_s",
                                    "virtual_name": "p_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_s",
                                    "correspondingType": "int",
                                    "value": "7"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_e",
                                    "virtual_name": "p_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_e",
                                    "correspondingType": "int",
                                    "value": "2"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_s",
                                    "virtual_name": "i_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_s",
                                    "correspondingType": "int",
                                    "value": "961077163"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_e",
                                    "virtual_name": "i_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_e",
                                    "correspondingType": "int",
                                    "value": "-546005579"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/RETURN",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=7;\n\n\nint p_e=2;\n\n\nint i_s=961077163;\n\n\nint i_e=-546005579;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=1468599008;\npreorder.push_back(preorder_element0);\nint preorder_element1=-559140697;\npreorder.push_back(preorder_element1);\n/* VectorDataNode inorder */\nint inorder_element0=560606676;\ninorder.push_back(inorder_element0);\nint inorder_element1=-1621703749;\ninorder.push_back(inorder_element1);\nint inorder_element2=-1806061064;\ninorder.push_back(inorder_element2);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=7;\n\n\nint p_e=2;\n\n\nint i_s=961077163;\n\n\nint i_e=-546005579;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=1468599008;\npreorder.push_back(preorder_element0);\nint preorder_element1=-559140697;\npreorder.push_back(preorder_element1);\n/* VectorDataNode inorder */\nint inorder_element0=560606676;\ninorder.push_back(inorder_element0);\nint inorder_element1=-1621703749;\ninorder.push_back(inorder_element1);\nint inorder_element2=-1806061064;\ninorder.push_back(inorder_element2);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_e",
                                    "virtual_name": "EXPECTED_i_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_e",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "EXPECTED_preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_s",
                                    "virtual_name": "EXPECTED_i_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_s",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_s",
                                    "virtual_name": "EXPECTED_p_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_s",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_e",
                                    "virtual_name": "EXPECTED_p_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_e",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "preorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder/element #0",
                                            "correspondingType": "int",
                                            "value": "-771666622"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "preorder_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder/element #1",
                                            "correspondingType": "int",
                                            "value": "-356771482"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "preorder_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/preorder/element #2",
                                            "correspondingType": "int",
                                            "value": "1566167103"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "inorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/inorder/element #0",
                                            "correspondingType": "int",
                                            "value": "-822091626"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_s",
                                    "virtual_name": "p_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_s",
                                    "correspondingType": "int",
                                    "value": "5"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "p_e",
                                    "virtual_name": "p_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/p_e",
                                    "correspondingType": "int",
                                    "value": "6"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_s",
                                    "virtual_name": "i_s",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_s",
                                    "correspondingType": "int",
                                    "value": "398908166"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "i_e",
                                    "virtual_name": "i_e",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/i_e",
                                    "correspondingType": "int",
                                    "value": "1981697951"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)/RETURN",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=5;\n\n\nint p_e=6;\n\n\nint i_s=398908166;\n\n\nint i_e=1981697951;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-771666622;\npreorder.push_back(preorder_element0);\nint preorder_element1=-356771482;\npreorder.push_back(preorder_element1);\nint preorder_element2=1566167103;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=-822091626;\ninorder.push_back(inorder_element0);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTreePI_vector_int_vector_int_int_int_int_int_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTreePI(preorder,inorder,p_s,p_e,i_s,i_e);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint p_s=5;\n\n\nint p_e=6;\n\n\nint i_s=398908166;\n\n\nint i_e=1981697951;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=-771666622;\npreorder.push_back(preorder_element0);\nint preorder_element1=-356771482;\npreorder.push_back(preorder_element1);\nint preorder_element2=1566167103;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=-822091626;\ninorder.push_back(inorder_element0);\n/* NormalNumberDataNode p_s */\n/* NormalNumberDataNode p_e */\n/* NormalNumberDataNode i_s */\n/* NormalNumberDataNode i_e */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tTreeNode *buildTree( \t    vector<int> &preorder, \t    vector<int> &inorder) \t{ \t\treturn BuildTreePI( preorder, inorder, \t\t                    0, preorder.size() - 1, 0, preorder.size()); \t} \tTreeNode* BuildTreePI( \t    vector<int> &preorder, \t    vector<int> &inorder, \t    int p_s, int p_e, \t    int i_s, int i_e) \t{ \t\tif (p_s > p_e) \t\t\treturn NULL; \t\tint pivot = preorder[i_s]; \t\tint i = p_s; \t\tfor (; i < p_e; i++) \t\t{ \t\t\tif (inorder[i] == pivot) \t\t\t\tbreak; \t\t} \t\tTreeNode* node = new TreeNode(pivot); \t\tnode->left = BuildTreePI(preorder, inorder, \t\t                         p_s, i - 1, i_s + 1, i - p_s + i_s); \t\tnode->right = BuildTreePI(preorder, inorder, \t\t                          i + 1, p_e, i - p_s + i_s + 1, i_e); \t\treturn node; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/Solution/BuildTreePI(vector<int>&,vector<int>&,int,int,int,int)"
    },
    {
        "f": [],
        "fm": "int maxArea(vector<int> &height) { \t\tint start = 0; \t\tint end = height.size() - 1; \t\tint maxV = INT_MIN; \t\twhile (start < end) \t\t{ \t\t\tint contain = min(height[end], height[start]) * (end - start); \t\t\tmaxV = max(maxV, contain); \t\t\tif (height[start] <= height[end]) \t\t\t{ \t\t\t\tstart++; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tend--; \t\t\t} \t\t} \t\treturn maxV; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Container_With_Most_Water.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Container_With_Most_Water.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Container_With_Most_Water.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Container_With_Most_Water.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Container_With_Most_Water.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxArea(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "height",
                                    "virtual_name": "EXPECTED_height",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)/height",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "height",
                                    "virtual_name": "height",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)/height",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "height_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)/height/element #0",
                                            "correspondingType": "int",
                                            "value": "-720420338"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "height_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)/height/element #1",
                                            "correspondingType": "int",
                                            "value": "-205071551"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "height_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)/height/element #2",
                                            "correspondingType": "int",
                                            "value": "-1772530273"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxArea_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maxArea_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Container_With_Most_Water.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> height;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode height */\nint height_element0=-720420338;\nheight.push_back(height_element0);\nint height_element1=-205071551;\nheight.push_back(height_element1);\nint height_element2=-1772530273;\nheight.push_back(height_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxArea_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxArea(height);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)\");\n\n\nvector<int> EXPECTED_height;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Container_With_Most_Water.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> height;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode height */\nint height_element0=-720420338;\nheight.push_back(height_element0);\nint height_element1=-205071551;\nheight.push_back(height_element1);\nint height_element2=-1772530273;\nheight.push_back(height_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tint maxArea(vector<int> &height) { \t\tint start = 0; \t\tint end = height.size() - 1; \t\tint maxV = INT_MIN; \t\twhile (start < end) \t\t{ \t\t\tint contain = min(height[end], height[start]) * (end - start); \t\t\tmaxV = max(maxV, contain); \t\t\tif (height[start] <= height[end]) \t\t\t{ \t\t\t\tstart++; \t\t\t} \t\t\telse \t\t\t{ \t\t\t\tend--; \t\t\t} \t\t} \t\treturn maxV; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Container_With_Most_Water.cpp/Solution/maxArea(vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *sortedArrayToBST(vector<int> &num) { \t\treturn BuildTree(num, 0, num.size() - 1); \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Convert_Sorted_Array_to_Binary_Search_Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "sortedArrayToBST(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "num_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)/num/element #0",
                                            "correspondingType": "int",
                                            "value": "-1135043904"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "num_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)/num/element #1",
                                            "correspondingType": "int",
                                            "value": "-2084080775"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)/RETURN",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_sortedArrayToBST_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_sortedArrayToBST_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-1135043904;\nnum.push_back(num_element0);\nint num_element1=-2084080775;\nnum.push_back(num_element1);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedArrayToBST_vector_int_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedArrayToBST(num);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=-1135043904;\nnum.push_back(num_element0);\nint num_element1=-2084080775;\nnum.push_back(num_element1);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tTreeNode *sortedArrayToBST(vector<int> &num) { \t\treturn BuildTree(num, 0, num.size() - 1); \t} \t \tTreeNode *BuildTree(vector<int> &num, int start, int end) \t{ \t\tif (start > end) return NULL; \t\tif (start == end) return new TreeNode(num[start]); \t\tint mid = (start + end) / 2; \t\tTreeNode *node = new TreeNode(num[mid]); \t\tnode->left = BuildTree(num, start, mid - 1); \t\tnode->right = BuildTree(num, mid + 1, end); \t\treturn node; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/sortedArrayToBST(vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode *BuildTree(vector<int> &num, int start, int end) \t{ \t\tif (start > end) return NULL; \t\tif (start == end) return new TreeNode(num[start]); \t\tint mid = (start + end) / 2; \t\tTreeNode *node = new TreeNode(num[mid]); \t\tnode->left = BuildTree(num, start, mid - 1); \t\tnode->right = BuildTree(num, mid + 1, end); \t\treturn node; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Convert_Sorted_Array_to_Binary_Search_Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "BuildTree(vector<int>&,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "start",
                                    "virtual_name": "EXPECTED_start",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/start",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "end",
                                    "virtual_name": "EXPECTED_end",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/end",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "num_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num/element #0",
                                            "correspondingType": "int",
                                            "value": "1982270443"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "num_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num/element #1",
                                            "correspondingType": "int",
                                            "value": "55029401"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "num_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num/element #2",
                                            "correspondingType": "int",
                                            "value": "-483322443"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "start",
                                    "virtual_name": "start",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/start",
                                    "correspondingType": "int",
                                    "value": "-460475503"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "end",
                                    "virtual_name": "end",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/end",
                                    "correspondingType": "int",
                                    "value": "-114293631"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/RETURN",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_BuildTree_vector_int_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_BuildTree_vector_int_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=-460475503;\n\n\nint end=-114293631;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=1982270443;\nnum.push_back(num_element0);\nint num_element1=55029401;\nnum.push_back(num_element1);\nint num_element2=-483322443;\nnum.push_back(num_element2);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTree_vector_int_int_int_random_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTree(num,start,end);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=-460475503;\n\n\nint end=-114293631;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=1982270443;\nnum.push_back(num_element0);\nint num_element1=55029401;\nnum.push_back(num_element1);\nint num_element2=-483322443;\nnum.push_back(num_element2);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Convert_Sorted_Array_to_Binary_Search_Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "BuildTree(vector<int>&,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "end",
                                    "virtual_name": "EXPECTED_end",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/end",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "start",
                                    "virtual_name": "EXPECTED_start",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/start",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "num_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num/element #0",
                                            "correspondingType": "int",
                                            "value": "535907090"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "num_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/num/element #1",
                                            "correspondingType": "int",
                                            "value": "-2119327318"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "start",
                                    "virtual_name": "start",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/start",
                                    "correspondingType": "int",
                                    "value": "-550576263"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "end",
                                    "virtual_name": "end",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/end",
                                    "correspondingType": "int",
                                    "value": "-1153102220"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)/RETURN",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_BuildTree_vector_int_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_BuildTree_vector_int_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=-550576263;\n\n\nint end=-1153102220;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=535907090;\nnum.push_back(num_element0);\nint num_element1=-2119327318;\nnum.push_back(num_element1);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_BuildTree_vector_int_int_int_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->BuildTree(num,start,end);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_num;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> num;\n\n\nint start=-550576263;\n\n\nint end=-1153102220;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode num */\nint num_element0=535907090;\nnum.push_back(num_element0);\nint num_element1=-2119327318;\nnum.push_back(num_element1);\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode end */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tTreeNode *sortedArrayToBST(vector<int> &num) { \t\treturn BuildTree(num, 0, num.size() - 1); \t} \t \tTreeNode *BuildTree(vector<int> &num, int start, int end) \t{ \t\tif (start > end) return NULL; \t\tif (start == end) return new TreeNode(num[start]); \t\tint mid = (start + end) / 2; \t\tTreeNode *node = new TreeNode(num[mid]); \t\tnode->left = BuildTree(num, start, mid - 1); \t\tnode->right = BuildTree(num, mid + 1, end); \t\treturn node; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Convert_Sorted_Array_to_Binary_Search_Tree.cpp/Solution/BuildTree(vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode *sortedListToBST(ListNode *head) { \t\tint len = 0; \t\tListNode *p = head; \t\twhile (p) \t\t{ \t\t\tlen++; \t\t\tp = p->next; \t\t} \t\treturn BuildBST(head, 0, len - 1); \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Convert_Sorted_List_to_Binary_Search_Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "sortedListToBST(ListNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "head",
                                    "virtual_name": "EXPECTED_head",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head",
                                    "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "head",
                                    "virtual_name": "head",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head",
                                    "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                    "level": 1,
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "head[0]",
                                            "virtual_name": "head[0]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head/head[0]",
                                            "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "head",
                                                    "virtual_name": "head[0]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head/head",
                                                    "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "head[0]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "head0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "-1627374467"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "head[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "head[0].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/next",
                                                            "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "head[1]",
                                            "virtual_name": "head[1]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head/head[1]",
                                            "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "head",
                                                    "virtual_name": "head[1]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head/head",
                                                    "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "head[1]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "head1_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "-1629429134"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "head[1].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "head[1].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/next",
                                                            "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "head[2]",
                                            "virtual_name": "head[2]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head/head[2]",
                                            "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "head",
                                                    "virtual_name": "head[2]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/head/head",
                                                    "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "head[2]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "head2_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)/x",
                                                                    "correspondingType": "int",
                                                                    "value": "0"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "head[2].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "head[2].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/next",
                                                            "correspondingType": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": "./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)/RETURN",
                                    "correspondingType": "./21/Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal.cpp/TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_sortedListToBST_ListNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_sortedListToBST_ListNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1627374467;\nAKA_mark(\"Calling: ./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/sortedListToBST(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-1629429134;\nAKA_mark(\"Calling: ./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/sortedListToBST(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=0;\nAKA_mark(\"Calling: ./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/sortedListToBST(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedListToBST_ListNodemul_random_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedListToBST(head);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-1627374467;\nAKA_mark(\"Calling: ./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/sortedListToBST(ListNode*)/head/AKA_VECTOR_INIT_head_0/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-1629429134;\nAKA_mark(\"Calling: ./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/sortedListToBST(ListNode*)/head/AKA_VECTOR_INIT_head_1/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head2_x=0;\nAKA_mark(\"Calling: ./21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/ListNode/ListNode(int)|ROOT/Convert_Sorted_List_to_Binary_Search_Tree.cpp/sortedListToBST(ListNode*)/head/AKA_VECTOR_INIT_head_2/head/ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::ListNode(head2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_2).next;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tTreeNode *sortedListToBST(ListNode *head) { \t\tint len = 0; \t\tListNode *p = head; \t\twhile (p) \t\t{ \t\t\tlen++; \t\t\tp = p->next; \t\t} \t\treturn BuildBST(head, 0, len - 1); \t}  \tTreeNode* BuildBST(ListNode*& list, int start, int end) \t{ \t\tif (start > end) return NULL; \t\tint mid = (start + end) / 2; \t\tTreeNode *leftChild = BuildBST(list, start, mid - 1); \t\tTreeNode *parent = new TreeNode(list->val); \t\tparent->left = leftChild; \t\tlist = list->next; \t\tparent->right = BuildBST(list, mid + 1, end); \t\treturn parent; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Convert_Sorted_List_to_Binary_Search_Tree.cpp/Solution/sortedListToBST(ListNode*)"
    },
    {
        "f": [],
        "fm": "string countAndSay(int n) { \t\tstring seq = \"1\"; \t\tint it = 1; \t\twhile (it < n) \t\t{ \t\t\tstringstream newSeq; \t\t\tchar last = seq[0]; \t\t\tint count = 0; \t\t\tfor (int i = 0; i <= seq.size(); i++) \t\t\t{ \t\t\t\tif (seq[i] == last) \t\t\t\t{ \t\t\t\t\tcount ++; \t\t\t\t\tcontinue; \t\t\t\t} \t\t\t\telse \t\t\t\t{ \t\t\t\t\tnewSeq << count << last; \t\t\t\t\tlast = seq[i]; \t\t\t\t\tcount = 1; \t\t\t\t} \t\t\t} \t\t\tseq = newSeq.str(); \t\t\tit++; \t\t} \t\treturn seq; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Count_and_Say.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Count_and_Say.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Count_and_Say.cpp/Solution/countAndSay(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Count_and_Say.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Count_and_Say.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Count_and_Say.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Count_and_Say.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Count_and_Say.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Count_and_Say.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "countAndSay(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": "./21/Count_and_Say.cpp/Solution/countAndSay(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "n",
                                    "virtual_name": "EXPECTED_n",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Count_and_Say.cpp/Solution/countAndSay(int)/n",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Count_and_Say.cpp/Solution/countAndSay(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "n",
                                    "virtual_name": "n",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Count_and_Say.cpp/Solution/countAndSay(int)/n",
                                    "correspondingType": "int",
                                    "value": "5"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./21/Count_and_Say.cpp/Solution/countAndSay(int)/RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_countAndSay_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_countAndSay_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Count_and_Say.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countAndSay_int_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countAndSay(n);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Count_and_Say.cpp/Solution/countAndSay(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Count_and_Say.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tstring countAndSay(int n) { \t\tstring seq = \"1\"; \t\tint it = 1; \t\twhile (it < n) \t\t{ \t\t\tstringstream newSeq; \t\t\tchar last = seq[0]; \t\t\tint count = 0; \t\t\tfor (int i = 0; i <= seq.size(); i++) \t\t\t{ \t\t\t\tif (seq[i] == last) \t\t\t\t{ \t\t\t\t\tcount ++; \t\t\t\t\tcontinue; \t\t\t\t} \t\t\t\telse \t\t\t\t{ \t\t\t\t\tnewSeq << count << last; \t\t\t\t\tlast = seq[i]; \t\t\t\t\tcount = 1; \t\t\t\t} \t\t\t} \t\t\tseq = newSeq.str(); \t\t\tit++; \t\t} \t\treturn seq; \t} };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Count_and_Say.cpp/Solution/countAndSay(int)"
    },
    {
        "f": [],
        "fm": "int check(char one) \t{ \t\treturn (one != '0') ? 1 : 0; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Decode_Ways.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Decode_Ways.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Decode_Ways.cpp/Solution/check(char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Decode_Ways.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Decode_Ways.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Decode_Ways.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Decode_Ways.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "check(char)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./21/Decode_Ways.cpp/Solution/check(char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "one",
                                    "virtual_name": "EXPECTED_one",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char)/one",
                                    "correspondingType": "char",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Decode_Ways.cpp/Solution/check(char)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "one",
                                    "virtual_name": "one",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char)/one",
                                    "correspondingType": "char",
                                    "value": "-111"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_check_char_random_0(void) {\n{\nAKA_test_case_name=\"Solution_check_char_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Decode_Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=-111;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_check_char_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->check(one);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Decode_Ways.cpp/Solution/check(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Decode_Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=-111;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tint numDecodings(string s) { \t\tif (s.empty() || s[0] == '0') return 0; \t\tif (s.size() == 1) return check(s[0]); \t\tint fn = 0, fn_1 = 0, fn_2 = 1; \t\tfn_1 = (check(s[0]) * check(s[1])) + check(s[0], s[1]); \t\tfor (int i = 2; i < s.size(); i++) \t\t{ \t\t\tif (check(s[i])) fn += fn_1; \t\t\tif (check(s[i - 1], s[i])) fn += fn_2; \t\t\tif (fn == 0) \t\t\t\treturn 0; \t\t\tfn_2 = fn_1; \t\t\tfn_1 = fn; \t\t\tfn = 0; \t\t} \t\treturn fn_1; \t}  \tint check(char one) \t{ \t\treturn (one != '0') ? 1 : 0; \t} \t \tint check(char one, char two) \t{ \t\treturn (one == '1' || (one == '2' && two <= '6')) ? 1 : 0; \t}  };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Decode_Ways.cpp/Solution/check(char)"
    },
    {
        "f": [],
        "fm": "int check(char one, char two) \t{ \t\treturn (one == '1' || (one == '2' && two <= '6')) ? 1 : 0; \t}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Decode_Ways.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Decode_Ways.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Decode_Ways.cpp/Solution/check(char,char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Decode_Ways.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Decode_Ways.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Decode_Ways.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Decode_Ways.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "check(char,char)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./21/Decode_Ways.cpp/Solution/check(char,char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "one",
                                    "virtual_name": "EXPECTED_one",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char,char)/one",
                                    "correspondingType": "char",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "two",
                                    "virtual_name": "EXPECTED_two",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char,char)/two",
                                    "correspondingType": "char",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Decode_Ways.cpp/Solution/check(char,char)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "one",
                                    "virtual_name": "one",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char,char)/one",
                                    "correspondingType": "char",
                                    "value": "59"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "two",
                                    "virtual_name": "two",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char,char)/two",
                                    "correspondingType": "char",
                                    "value": "52"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Decode_Ways.cpp/Solution/check(char,char)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_check_char_char_random_0(void) {\n{\nAKA_test_case_name=\"Solution_check_char_char_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Decode_Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=59;\n\nchar two=52;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalCharacterDataNode two */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_check_char_char_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->check(one,two);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Decode_Ways.cpp/Solution/check(char,char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Decode_Ways.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nchar one=59;\n\nchar two=52;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode one */\n/* NormalCharacterDataNode two */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public: \tint numDecodings(string s) { \t\tif (s.empty() || s[0] == '0') return 0; \t\tif (s.size() == 1) return check(s[0]); \t\tint fn = 0, fn_1 = 0, fn_2 = 1; \t\tfn_1 = (check(s[0]) * check(s[1])) + check(s[0], s[1]); \t\tfor (int i = 2; i < s.size(); i++) \t\t{ \t\t\tif (check(s[i])) fn += fn_1; \t\t\tif (check(s[i - 1], s[i])) fn += fn_2; \t\t\tif (fn == 0) \t\t\t\treturn 0; \t\t\tfn_2 = fn_1; \t\t\tfn_1 = fn; \t\t\tfn = 0; \t\t} \t\treturn fn_1; \t}  \tint check(char one) \t{ \t\treturn (one != '0') ? 1 : 0; \t} \t \tint check(char one, char two) \t{ \t\treturn (one == '1' || (one == '2' && two <= '6')) ? 1 : 0; \t}  };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Decode_Ways.cpp/Solution/check(char,char)"
    },
    {
        "f": [
            "unordered_map<string, vector<int>> memo;"
        ],
        "fm": "int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Different Ways to Add Parentheses(Memoization).cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Different Ways to Add Parentheses(Memoization).cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.stl.containers.unordered.UnorderedMapDataNode",
                                                    "name": "memo",
                                                    "virtual_name": "AKA_INSTANCE___Solution->memo",
                                                    "dataType": "unordered_map<string,vector<int>>",
                                                    "realType": "unordered_map<string,vector<int>>",
                                                    "external": false,
                                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/memo",
                                                    "correspondingType": "STLListBaseType",
                                                    "templateArg": "std::pair<string, vector<int>>"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "compute(int,int,char)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "op",
                                    "virtual_name": "EXPECTED_op",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)/op",
                                    "correspondingType": "char",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "b",
                                    "virtual_name": "EXPECTED_b",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)/b",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "a",
                                    "virtual_name": "EXPECTED_a",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)/a",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "a",
                                    "virtual_name": "a",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)/a",
                                    "correspondingType": "int",
                                    "value": "-1524100006"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "b",
                                    "virtual_name": "b",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)/b",
                                    "correspondingType": "int",
                                    "value": "44229411"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "op",
                                    "virtual_name": "op",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)/op",
                                    "correspondingType": "char",
                                    "value": "-5"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_compute_int_int_char_random_1(void) {\n{\nAKA_test_case_name=\"Solution_compute_int_int_char_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\n\n\nint a=-1524100006;\n\n\nint b=44229411;\n\nchar op=-5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalCharacterDataNode op */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_compute_int_int_char_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->compute(a,b,op);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\n\n\nint a=-1524100006;\n\n\nint b=44229411;\n\nchar op=-5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalCharacterDataNode op */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     unordered_map<string, vector<int>> memo;     int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }          string generateKey(int startIndex, int endIndex) {         return to_string(startIndex) + \"-\" + to_string(endIndex);     }      vector<int> diffWaysToCompute(string input) {         return diffWaysToComputeWithMemo(input, 0, input.size()-1);     }     vector<int> diffWaysToComputeWithMemo(string& input, int startIndex, int endIndex) {             string cache_key = generateKey(startIndex, endIndex);         if(memo.find(cache_key) != memo.end()) return memo[cache_key];                  int number = 0, i=startIndex;         for(; i<= endIndex && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i > endIndex)  return {number};                  vector<int> diffWays, lefts, rights;         for(int i =startIndex; i< endIndex; i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToComputeWithMemo(input, startIndex, i-1);             rights =                  diffWaysToComputeWithMemo(input, i+1, endIndex );             for(int j = 0; j < lefts.size(); ++j)                  for( int k =0; k < rights.size(); ++k)                      diffWays.push_back(compute(lefts[j], rights[k], input[i]));         }         memo[cache_key] = diffWays;         return diffWays;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Different Ways to Add Parentheses(Memoization).cpp/Solution/compute(int,int,char)"
    },
    {
        "f": [
            "unordered_map<string, vector<int>> memo;"
        ],
        "fm": "string generateKey(int startIndex, int endIndex) {         return to_string(startIndex) + \"-\" + to_string(endIndex);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Different Ways to Add Parentheses(Memoization).cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Different Ways to Add Parentheses(Memoization).cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.stl.containers.unordered.UnorderedMapDataNode",
                                                    "name": "memo",
                                                    "virtual_name": "AKA_INSTANCE___Solution->memo",
                                                    "dataType": "unordered_map<string,vector<int>>",
                                                    "realType": "unordered_map<string,vector<int>>",
                                                    "external": false,
                                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/memo",
                                                    "correspondingType": "STLListBaseType",
                                                    "templateArg": "std::pair<string, vector<int>>"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "generateKey(int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "endIndex",
                                    "virtual_name": "EXPECTED_endIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)/endIndex",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "startIndex",
                                    "virtual_name": "EXPECTED_startIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)/startIndex",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "startIndex",
                                    "virtual_name": "startIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)/startIndex",
                                    "correspondingType": "int",
                                    "value": "1241513437"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "endIndex",
                                    "virtual_name": "endIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)/endIndex",
                                    "correspondingType": "int",
                                    "value": "-649675097"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)/RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_generateKey_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_generateKey_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\n\n\nint startIndex=1241513437;\n\n\nint endIndex=-649675097;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode startIndex */\n/* NormalNumberDataNode endIndex */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_generateKey_int_int_random_4\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->generateKey(startIndex,endIndex);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\n\n\nint startIndex=1241513437;\n\n\nint endIndex=-649675097;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode startIndex */\n/* NormalNumberDataNode endIndex */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     unordered_map<string, vector<int>> memo;     int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }          string generateKey(int startIndex, int endIndex) {         return to_string(startIndex) + \"-\" + to_string(endIndex);     }      vector<int> diffWaysToCompute(string input) {         return diffWaysToComputeWithMemo(input, 0, input.size()-1);     }     vector<int> diffWaysToComputeWithMemo(string& input, int startIndex, int endIndex) {             string cache_key = generateKey(startIndex, endIndex);         if(memo.find(cache_key) != memo.end()) return memo[cache_key];                  int number = 0, i=startIndex;         for(; i<= endIndex && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i > endIndex)  return {number};                  vector<int> diffWays, lefts, rights;         for(int i =startIndex; i< endIndex; i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToComputeWithMemo(input, startIndex, i-1);             rights =                  diffWaysToComputeWithMemo(input, i+1, endIndex );             for(int j = 0; j < lefts.size(); ++j)                  for( int k =0; k < rights.size(); ++k)                      diffWays.push_back(compute(lefts[j], rights[k], input[i]));         }         memo[cache_key] = diffWays;         return diffWays;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Different Ways to Add Parentheses(Memoization).cpp/Solution/generateKey(int,int)"
    },
    {
        "f": [
            "unordered_map<string, vector<int>> memo;"
        ],
        "fm": "vector<int> diffWaysToCompute(string input) {         return diffWaysToComputeWithMemo(input, 0, input.size()-1);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Different Ways to Add Parentheses(Memoization).cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Different Ways to Add Parentheses(Memoization).cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.stl.containers.unordered.UnorderedMapDataNode",
                                                    "name": "memo",
                                                    "virtual_name": "AKA_INSTANCE___Solution->memo",
                                                    "dataType": "unordered_map<string,vector<int>>",
                                                    "realType": "unordered_map<string,vector<int>>",
                                                    "external": false,
                                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/memo",
                                                    "correspondingType": "STLListBaseType",
                                                    "templateArg": "std::pair<string, vector<int>>"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "diffWaysToCompute(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "input",
                                    "virtual_name": "EXPECTED_input",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)/input",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "input",
                                    "virtual_name": "input",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)/input",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "input[0]",
                                            "virtual_name": "input[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)/input/input[0]",
                                            "correspondingType": "char",
                                            "value": "-13"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_diffWaysToCompute_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_diffWaysToCompute_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\nchar* akaRandomName277777 = new char[2];akaRandomName277777[0] = -13;akaRandomName277777[1] = '\\0';string input=akaRandomName277777;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode input */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_diffWaysToCompute_string_random_3\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->diffWaysToCompute(input);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\nchar* akaRandomName525428 = new char[2];akaRandomName525428[0] = -13;akaRandomName525428[1] = '\\0';string input=akaRandomName525428;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode input */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     unordered_map<string, vector<int>> memo;     int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }          string generateKey(int startIndex, int endIndex) {         return to_string(startIndex) + \"-\" + to_string(endIndex);     }      vector<int> diffWaysToCompute(string input) {         return diffWaysToComputeWithMemo(input, 0, input.size()-1);     }     vector<int> diffWaysToComputeWithMemo(string& input, int startIndex, int endIndex) {             string cache_key = generateKey(startIndex, endIndex);         if(memo.find(cache_key) != memo.end()) return memo[cache_key];                  int number = 0, i=startIndex;         for(; i<= endIndex && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i > endIndex)  return {number};                  vector<int> diffWays, lefts, rights;         for(int i =startIndex; i< endIndex; i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToComputeWithMemo(input, startIndex, i-1);             rights =                  diffWaysToComputeWithMemo(input, i+1, endIndex );             for(int j = 0; j < lefts.size(); ++j)                  for( int k =0; k < rights.size(); ++k)                      diffWays.push_back(compute(lefts[j], rights[k], input[i]));         }         memo[cache_key] = diffWays;         return diffWays;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToCompute(string)"
    },
    {
        "f": [
            "unordered_map<string, vector<int>> memo;"
        ],
        "fm": "vector<int> diffWaysToComputeWithMemo(string& input, int startIndex, int endIndex) {             string cache_key = generateKey(startIndex, endIndex);         if(memo.find(cache_key) != memo.end()) return memo[cache_key];                  int number = 0, i=startIndex;         for(; i<= endIndex && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i > endIndex)  return {number};                  vector<int> diffWays, lefts, rights;         for(int i =startIndex; i< endIndex; i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToComputeWithMemo(input, startIndex, i-1);             rights =                  diffWaysToComputeWithMemo(input, i+1, endIndex );             for(int j = 0; j < lefts.size(); ++j)                  for( int k =0; k < rights.size(); ++k)                      diffWays.push_back(compute(lefts[j], rights[k], input[i]));         }         memo[cache_key] = diffWays;         return diffWays;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Different Ways to Add Parentheses(Memoization).cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Different Ways to Add Parentheses(Memoization).cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.stl.containers.unordered.UnorderedMapDataNode",
                                                    "name": "memo",
                                                    "virtual_name": "AKA_INSTANCE___Solution->memo",
                                                    "dataType": "unordered_map<string,vector<int>>",
                                                    "realType": "unordered_map<string,vector<int>>",
                                                    "external": false,
                                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/memo",
                                                    "correspondingType": "STLListBaseType",
                                                    "templateArg": "std::pair<string, vector<int>>"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "diffWaysToComputeWithMemo(string&,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "input",
                                    "virtual_name": "EXPECTED_input",
                                    "dataType": "string&",
                                    "realType": "string&",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/input",
                                    "correspondingType": "string&",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "endIndex",
                                    "virtual_name": "EXPECTED_endIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/endIndex",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "startIndex",
                                    "virtual_name": "EXPECTED_startIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/startIndex",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "input",
                                    "virtual_name": "input",
                                    "dataType": "string&",
                                    "realType": "string&",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/input",
                                    "correspondingType": "string&",
                                    "value": "2",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "input[0]",
                                            "virtual_name": "input[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/input/input[0]",
                                            "correspondingType": "char",
                                            "value": "112"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "startIndex",
                                    "virtual_name": "startIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/startIndex",
                                    "correspondingType": "int",
                                    "value": "2"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "endIndex",
                                    "virtual_name": "endIndex",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/endIndex",
                                    "correspondingType": "int",
                                    "value": "9"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_diffWaysToComputeWithMemo_string_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_diffWaysToComputeWithMemo_string_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\nchar* akaRandomName266702 = new char[2];akaRandomName266702[0] = 112;akaRandomName266702[1] = '\\0';string input=akaRandomName266702;\n\n\nint startIndex=2;\n\n\nint endIndex=9;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode input */\n/* NormalNumberDataNode startIndex */\n/* NormalNumberDataNode endIndex */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_diffWaysToComputeWithMemo_string_int_int_random_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->diffWaysToComputeWithMemo(input,startIndex,endIndex);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses(Memoization).cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* UnorderedMapDataNode memo */\n\n\nchar* akaRandomName469800 = new char[2];akaRandomName469800[0] = 112;akaRandomName469800[1] = '\\0';string input=akaRandomName469800;\n\n\nint startIndex=2;\n\n\nint endIndex=9;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode input */\n/* NormalNumberDataNode startIndex */\n/* NormalNumberDataNode endIndex */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     unordered_map<string, vector<int>> memo;     int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }          string generateKey(int startIndex, int endIndex) {         return to_string(startIndex) + \"-\" + to_string(endIndex);     }      vector<int> diffWaysToCompute(string input) {         return diffWaysToComputeWithMemo(input, 0, input.size()-1);     }     vector<int> diffWaysToComputeWithMemo(string& input, int startIndex, int endIndex) {             string cache_key = generateKey(startIndex, endIndex);         if(memo.find(cache_key) != memo.end()) return memo[cache_key];                  int number = 0, i=startIndex;         for(; i<= endIndex && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i > endIndex)  return {number};                  vector<int> diffWays, lefts, rights;         for(int i =startIndex; i< endIndex; i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToComputeWithMemo(input, startIndex, i-1);             rights =                  diffWaysToComputeWithMemo(input, i+1, endIndex );             for(int j = 0; j < lefts.size(); ++j)                  for( int k =0; k < rights.size(); ++k)                      diffWays.push_back(compute(lefts[j], rights[k], input[i]));         }         memo[cache_key] = diffWays;         return diffWays;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Different Ways to Add Parentheses(Memoization).cpp/Solution/diffWaysToComputeWithMemo(string&,int,int)"
    },
    {
        "f": [],
        "fm": "int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Different Ways to Add Parentheses.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Different Ways to Add Parentheses.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Different Ways to Add Parentheses.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "compute(int,int,char)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "b",
                                    "virtual_name": "EXPECTED_b",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)/b",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "a",
                                    "virtual_name": "EXPECTED_a",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)/a",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "op",
                                    "virtual_name": "EXPECTED_op",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)/op",
                                    "correspondingType": "char",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "a",
                                    "virtual_name": "a",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)/a",
                                    "correspondingType": "int",
                                    "value": "-1718538134"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "b",
                                    "virtual_name": "b",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)/b",
                                    "correspondingType": "int",
                                    "value": "1482221423"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                    "name": "op",
                                    "virtual_name": "op",
                                    "dataType": "char",
                                    "realType": "char",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)/op",
                                    "correspondingType": "char",
                                    "value": "-80"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_compute_int_int_char_random_4(void) {\n{\nAKA_test_case_name=\"Solution_compute_int_int_char_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint a=-1718538134;\n\n\nint b=1482221423;\n\nchar op=-80;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalCharacterDataNode op */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_compute_int_int_char_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->compute(a,b,op);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint a=-1718538134;\n\n\nint b=1482221423;\n\nchar op=-80;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalCharacterDataNode op */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }          vector<int> diffWaysToCompute(string input) {         int number = 0, i=0;         for(; i< input.length() && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i == input.length())             return {number};                  vector<int> diffWays, lefts, rights;         for(int i =0; i< input.length(); i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToCompute(input.substr(0, i));             rights =                  diffWaysToCompute(input.substr(i + 1, input.length() - i - 1));             for(int j = 0; j < lefts.size(); ++j) {                 for( int k =0; k < rights.size(); ++k) {                     diffWays.push_back(compute(lefts[j], rights[k], input[i]));                 }             }         }         return diffWays;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Different Ways to Add Parentheses.cpp/Solution/compute(int,int,char)"
    },
    {
        "f": [],
        "fm": "vector<int> diffWaysToCompute(string input) {         int number = 0, i=0;         for(; i< input.length() && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i == input.length())             return {number};                  vector<int> diffWays, lefts, rights;         for(int i =0; i< input.length(); i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToCompute(input.substr(0, i));             rights =                  diffWaysToCompute(input.substr(i + 1, input.length() - i - 1));             for(int j = 0; j < lefts.size(); ++j) {                 for( int k =0; k < rights.size(); ++k) {                     diffWays.push_back(compute(lefts[j], rights[k], input[i]));                 }             }         }         return diffWays;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "Different Ways to Add Parentheses.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./21/Different Ways to Add Parentheses.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./21/Different Ways to Add Parentheses.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./21/Different Ways to Add Parentheses.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "diffWaysToCompute(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": "./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "input",
                                    "virtual_name": "EXPECTED_input",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)/input",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "input",
                                    "virtual_name": "input",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)/input",
                                    "correspondingType": "string",
                                    "value": "2",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "input[0]",
                                            "virtual_name": "input[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)/input/input[0]",
                                            "correspondingType": "char",
                                            "value": "-14"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": "./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_diffWaysToCompute_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_diffWaysToCompute_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName322356 = new char[2];akaRandomName322356[0] = -14;akaRandomName322356[1] = '\\0';string input=akaRandomName322356;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode input */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_diffWaysToCompute_string_random_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->diffWaysToCompute(input);\nAKA_fCall++;AKA_mark(\"Return from: ./21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/Different Ways to Add Parentheses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName457974 = new char[2];akaRandomName457974[0] = -14;akaRandomName457974[1] = '\\0';string input=akaRandomName457974;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode input */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int compute(int a, int b, char op) {         switch(op) {             case '+': return a + b;             case '-': return a - b;             case '*': return a * b;         }     }          vector<int> diffWaysToCompute(string input) {         int number = 0, i=0;         for(; i< input.length() && isdigit(input[i]); ++i) {             number  = number * 10 + input[i]-'0';         }         // if pure number, just return         if(i == input.length())             return {number};                  vector<int> diffWays, lefts, rights;         for(int i =0; i< input.length(); i++) {             if(isdigit(input[i])) continue;             lefts =                  diffWaysToCompute(input.substr(0, i));             rights =                  diffWaysToCompute(input.substr(i + 1, input.length() - i - 1));             for(int j = 0; j < lefts.size(); ++j) {                 for( int k =0; k < rights.size(); ++k) {                     diffWays.push_back(compute(lefts[j], rights[k], input[i]));                 }             }         }         return diffWays;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.01/21/Different Ways to Add Parentheses.cpp/Solution/diffWaysToCompute(string)"
    }
]