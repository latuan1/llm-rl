[
    {
        "f": [],
        "fm": "string predictPartyVictory(string senate)      {         string str=senate;         int len=0;         int count=0;         while (senate.size()!=len)         {             len=senate.size();             string s;             for (int i=0; i<senate.size(); i++)             {                 if (senate[i]=='R')                 {                                         if (count>=0) s.push_back('R');                     count++;                 }                 else                 {                                         if (count<=0) s.push_back('D');                     count--;                 }             }             senate = s;         }                  if (senate[0]=='R')             return \"Radiant\";         else             return \"Dire\";     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "649.Dota2-Senate.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./9/649.Dota2-Senate.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./9/649.Dota2-Senate.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/649.Dota2-Senate.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./9/649.Dota2-Senate.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/649.Dota2-Senate.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./9/649.Dota2-Senate.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./9/649.Dota2-Senate.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "predictPartyVictory(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": "./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "senate",
                                    "virtual_name": "EXPECTED_senate",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)/senate",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "senate",
                                    "virtual_name": "senate",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)/senate",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "senate[0]",
                                            "virtual_name": "senate[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)/senate/senate[0]",
                                            "correspondingType": "char",
                                            "value": "-86"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)/RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_predictPartyVictory_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_predictPartyVictory_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/649.Dota2-Senate.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName686694 = new char[2];akaRandomName686694[0] = -86;akaRandomName686694[1] = '\\0';string senate=akaRandomName686694;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode senate */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_predictPartyVictory_string_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->predictPartyVictory(senate);\nAKA_fCall++;AKA_mark(\"Return from: ./9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/649.Dota2-Senate.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName215008 = new char[2];akaRandomName215008[0] = -86;akaRandomName215008[1] = '\\0';string senate=akaRandomName215008;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode senate */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     string predictPartyVictory(string senate)      {         string str=senate;         int len=0;         int count=0;         while (senate.size()!=len)         {             len=senate.size();             string s;             for (int i=0; i<senate.size(); i++)             {                 if (senate[i]=='R')                 {                                         if (count>=0) s.push_back('R');                     count++;                 }                 else                 {                                         if (count<=0) s.push_back('D');                     count--;                 }             }             senate = s;         }                  if (senate[0]=='R')             return \"Radiant\";         else             return \"Dire\";     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/9/649.Dota2-Senate.cpp/Solution/predictPartyVictory(string)"
    },
    {
        "f": [],
        "fm": "bool checkPossibility(vector<int>& nums)      {         int count=0;         for (int i=1; i<nums.size(); i++)         {                         if (nums[i-1]>nums[i])             {                 count++;                                  if (count==2) return false;                                  if (i>=2 && nums[i-2]>nums[i])                     nums[i]=nums[i-1];                 else                     nums[i-1]=nums[i];             }         }         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "665.Non-decreasing-Array_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./9/665.Non-decreasing-Array_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/665.Non-decreasing-Array_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/665.Non-decreasing-Array_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./9/665.Non-decreasing-Array_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkPossibility(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "1956470955"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "-1549592398"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkPossibility_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_checkPossibility_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/665.Non-decreasing-Array_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1956470955;\nnums.push_back(nums_element0);\nint nums_element1=-1549592398;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkPossibility_vector_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkPossibility(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/665.Non-decreasing-Array_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1956470955;\nnums.push_back(nums_element0);\nint nums_element1=-1549592398;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "665.Non-decreasing-Array_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./9/665.Non-decreasing-Array_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/665.Non-decreasing-Array_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/665.Non-decreasing-Array_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./9/665.Non-decreasing-Array_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkPossibility(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-1352476242"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "1883059917"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkPossibility_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_checkPossibility_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/665.Non-decreasing-Array_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1352476242;\nnums.push_back(nums_element0);\nint nums_element1=1883059917;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkPossibility_vector_int_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkPossibility(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/665.Non-decreasing-Array_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1352476242;\nnums.push_back(nums_element0);\nint nums_element1=1883059917;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool checkPossibility(vector<int>& nums)      {         int count=0;         for (int i=1; i<nums.size(); i++)         {                         if (nums[i-1]>nums[i])             {                 count++;                                  if (count==2) return false;                                  if (i>=2 && nums[i-2]>nums[i])                     nums[i]=nums[i-1];                 else                     nums[i-1]=nums[i];             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/9/665.Non-decreasing-Array_v1.cpp/Solution/checkPossibility(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool checkPossibility(vector<int>& nums)      {         int a = -1, b = -1;         for (int i=1; i<nums.size(); i++)         {             if (nums[i-1]>nums[i])             {                 a = i-1;                 b = i;             }         }         if (a==-1) return true;                  int flag = 1;         for (int i=1; i<nums.size(); i++)         {             if (i==a) continue;             else if (i==a+1)             {                 if (i-2>=0 && nums[i-2]>nums[i])                 {                     flag = false;                     break;                                     }                             }             else if (nums[i-1]>nums[i])             {                 flag = false;                 break;             }                         }         if (flag) return true;                  flag = 1;         for (int i=1; i<nums.size(); i++)         {             if (i==b) continue;             else if (i==b+1)             {                 if (i-2>=0 && nums[i-2]>nums[i])                 {                     flag = false;                     break;                                     }               }             else if (nums[i-1]>nums[i])             {                 flag = false;                 break;             }                         }         if (flag) return true;         return false;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "665.Non-decreasing-Array_v2.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./9/665.Non-decreasing-Array_v2.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/665.Non-decreasing-Array_v2.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/665.Non-decreasing-Array_v2.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./9/665.Non-decreasing-Array_v2.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkPossibility(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-733283261"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "1794949239"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkPossibility_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_checkPossibility_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/665.Non-decreasing-Array_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-733283261;\nnums.push_back(nums_element0);\nint nums_element1=1794949239;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkPossibility_vector_int_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkPossibility(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/665.Non-decreasing-Array_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-733283261;\nnums.push_back(nums_element0);\nint nums_element1=1794949239;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool checkPossibility(vector<int>& nums)      {         int a = -1, b = -1;         for (int i=1; i<nums.size(); i++)         {             if (nums[i-1]>nums[i])             {                 a = i-1;                 b = i;             }         }         if (a==-1) return true;                  int flag = 1;         for (int i=1; i<nums.size(); i++)         {             if (i==a) continue;             else if (i==a+1)             {                 if (i-2>=0 && nums[i-2]>nums[i])                 {                     flag = false;                     break;                                     }                             }             else if (nums[i-1]>nums[i])             {                 flag = false;                 break;             }                         }         if (flag) return true;                  flag = 1;         for (int i=1; i<nums.size(); i++)         {             if (i==b) continue;             else if (i==b+1)             {                 if (i-2>=0 && nums[i-2]>nums[i])                 {                     flag = false;                     break;                                     }               }             else if (nums[i-1]>nums[i])             {                 flag = false;                 break;             }                         }         if (flag) return true;         return false;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/9/665.Non-decreasing-Array_v2.cpp/Solution/checkPossibility(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> constructArray(int n, int k)      {         vector<int>ret({k+1});         int count = 1;         for (int d=k; d>=1; d--)         {             if (count%2==1)                 ret.push_back(ret.back()-d);             else                 ret.push_back(ret.back()+d);             count++;         }         reverse(ret.begin(), ret.end());         for (int i=k+2; i<=n; i++)             ret.push_back(i);                  return ret;              }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "667.Beautiful-Arrangement-II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./9/667.Beautiful-Arrangement-II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/667.Beautiful-Arrangement-II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/667.Beautiful-Arrangement-II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./9/667.Beautiful-Arrangement-II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "constructArray(int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "n",
                                    "virtual_name": "EXPECTED_n",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)/n",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "EXPECTED_k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)/k",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "n",
                                    "virtual_name": "n",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)/n",
                                    "correspondingType": "int",
                                    "value": "10"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)/k",
                                    "correspondingType": "int",
                                    "value": "6"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": "./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_constructArray_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_constructArray_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/667.Beautiful-Arrangement-II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\n\n\nint k=6;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_constructArray_int_int_random_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->constructArray(n,k);\nAKA_fCall++;AKA_mark(\"Return from: ./9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/667.Beautiful-Arrangement-II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=10;\n\n\nint k=6;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode k */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> constructArray(int n, int k)      {         vector<int>ret({k+1});         int count = 1;         for (int d=k; d>=1; d--)         {             if (count%2==1)                 ret.push_back(ret.back()-d);             else                 ret.push_back(ret.back()+d);             count++;         }         reverse(ret.begin(), ret.end());         for (int i=k+2; i<=n; i++)             ret.push_back(i);                  return ret;              } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/9/667.Beautiful-Arrangement-II.cpp/Solution/constructArray(int,int)"
    },
    {
        "f": [],
        "fm": "int maximumSwap(int num)      {         int MAX=0;         int pos;         string str=to_string(num);                  string str2=str;         sort(str2.begin(),str2.end());         reverse(str2.begin(),str2.end());                  int j=0;         while (j<str.size() && str[j]==str2[j])             j++;                  if (j==str.size()) return num;                          for (int i=j; i<str.size(); i++)         {             if (str[i]-'0'>=MAX)             {                 MAX=str[i]-'0';                 pos=i;             }         }                  for (int i=j; i<pos; i++)         {             if (str[i]-'0'>=MAX)                 continue;             swap(str[i],str[pos]);                      break;         }                  return stoi(str);                       }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "670.Maximum-Swap.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./9/670.Maximum-Swap.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./9/670.Maximum-Swap.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/670.Maximum-Swap.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./9/670.Maximum-Swap.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/670.Maximum-Swap.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./9/670.Maximum-Swap.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./9/670.Maximum-Swap.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumSwap(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)/num",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)/num",
                                    "correspondingType": "int",
                                    "value": "-2117597814"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumSwap_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maximumSwap_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/670.Maximum-Swap.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=-2117597814;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumSwap_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumSwap(num);\nAKA_fCall++;AKA_mark(\"Return from: ./9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/670.Maximum-Swap.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=-2117597814;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maximumSwap(int num)      {         int MAX=0;         int pos;         string str=to_string(num);                  string str2=str;         sort(str2.begin(),str2.end());         reverse(str2.begin(),str2.end());                  int j=0;         while (j<str.size() && str[j]==str2[j])             j++;                  if (j==str.size()) return num;                          for (int i=j; i<str.size(); i++)         {             if (str[i]-'0'>=MAX)             {                 MAX=str[i]-'0';                 pos=i;             }         }                  for (int i=j; i<pos; i++)         {             if (str[i]-'0'>=MAX)                 continue;             swap(str[i],str[pos]);                      break;         }                  return stoi(str);                       } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/9/670.Maximum-Swap.cpp/Solution/maximumSwap(int)"
    },
    {
        "f": [],
        "fm": "bool checkValidString(string s)      {         int lower=0;         int upper=0;                  for (int i=0; i<s.size(); i++)         {             if (s[i]=='(')             {                 lower++;                 upper++;             }             else if (s[i]=='*')             {                 lower--;                 upper++;             }             else if (s[i]==')')             {                 lower--;                 upper--;             }                          if (lower<0) lower=0;                          if (upper<0) return false;                                 }                  return (lower==0);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "678.Valid-Parenthesis-String.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./9/678.Valid-Parenthesis-String.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./9/678.Valid-Parenthesis-String.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/678.Valid-Parenthesis-String.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./9/678.Valid-Parenthesis-String.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./9/678.Valid-Parenthesis-String.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./9/678.Valid-Parenthesis-String.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./9/678.Valid-Parenthesis-String.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkValidString(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)/s",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "94"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkValidString_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_checkValidString_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/678.Valid-Parenthesis-String.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName808528 = new char[2];akaRandomName808528[0] = 94;akaRandomName808528[1] = '\\0';string s=akaRandomName808528;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkValidString_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkValidString(s);\nAKA_fCall++;AKA_mark(\"Return from: ./9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/678.Valid-Parenthesis-String.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName135653 = new char[2];akaRandomName135653[0] = 94;akaRandomName135653[1] = '\\0';string s=akaRandomName135653;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool checkValidString(string s)      {         int lower=0;         int upper=0;                  for (int i=0; i<s.size(); i++)         {             if (s[i]=='(')             {                 lower++;                 upper++;             }             else if (s[i]=='*')             {                 lower--;                 upper++;             }             else if (s[i]==')')             {                 lower--;                 upper--;             }                          if (lower<0) lower=0;                          if (upper<0) return false;                                 }                  return (lower==0);     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/9/678.Valid-Parenthesis-String.cpp/Solution/checkValidString(string)"
    }
]