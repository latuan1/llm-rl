[
    {
        "f": [],
        "fm": "static bool cmp(vector<int>&a, vector<int>&b)     {         return a[1] < b[1];     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2054.Two-Best-Non-Overlapping-Events.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "cmp(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "a",
                                    "virtual_name": "EXPECTED_a",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/a",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "b",
                                    "virtual_name": "EXPECTED_b",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/b",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "a",
                                    "virtual_name": "a",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/a",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "a_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/a/element #0",
                                            "correspondingType": "int",
                                            "value": "1260231097"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "a_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/a/element #1",
                                            "correspondingType": "int",
                                            "value": "-361187721"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "a_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/a/element #2",
                                            "correspondingType": "int",
                                            "value": "1575459019"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "b",
                                    "virtual_name": "b",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/b",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "b_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/b/element #0",
                                            "correspondingType": "int",
                                            "value": "1301031480"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_cmp_vector_int_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_cmp_vector_int_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2054.Two-Best-Non-Overlapping-Events.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\nvector<int> b;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=1260231097;\na.push_back(a_element0);\nint a_element1=-361187721;\na.push_back(a_element1);\nint a_element2=1575459019;\na.push_back(a_element2);\n/* VectorDataNode b */\nint b_element0=1301031480;\nb.push_back(b_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_cmp_vector_int_vector_int_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->cmp(a,b);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_a;\n\nvector<int> EXPECTED_b;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2054.Two-Best-Non-Overlapping-Events.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\nvector<int> b;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=1260231097;\na.push_back(a_element0);\nint a_element1=-361187721;\na.push_back(a_element1);\nint a_element2=1575459019;\na.push_back(a_element2);\n/* VectorDataNode b */\nint b_element0=1301031480;\nb.push_back(b_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     static bool cmp(vector<int>&a, vector<int>&b)     {         return a[1] < b[1];     }  public:     int maxTwoEvents(vector<vector<int>>& events)      {         int n = events.size();         sort(events.begin(), events.end(), cmp);                  vector<int>rollingMax(n);         int m = 0;         for (int i=0; i<n; i++)         {             m = max(m, events[i][2]);             rollingMax[i] = m;         }                  vector<int>endTimes;         int ret = 0;                  for (int i=0; i<n; i++)         {             int a = events[i][0]-1, b = events[i][1], v = events[i][2];             ret = max(ret, v);                          auto iter = upper_bound(endTimes.begin(), endTimes.end(), a);             if (iter!=endTimes.begin())             {                 iter = prev(iter);                 int idx = iter - endTimes.begin();                 ret = max(ret, rollingMax[idx] + v);             }                          endTimes.push_back(b);         }                  return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/cmp(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int maxTwoEvents(vector<vector<int>>& events)      {         int n = events.size();         sort(events.begin(), events.end(), cmp);                  vector<int>rollingMax(n);         int m = 0;         for (int i=0; i<n; i++)         {             m = max(m, events[i][2]);             rollingMax[i] = m;         }                  vector<int>endTimes;         int ret = 0;                  for (int i=0; i<n; i++)         {             int a = events[i][0]-1, b = events[i][1], v = events[i][2];             ret = max(ret, v);                          auto iter = upper_bound(endTimes.begin(), endTimes.end(), a);             if (iter!=endTimes.begin())             {                 iter = prev(iter);                 int idx = iter - endTimes.begin();                 ret = max(ret, rollingMax[idx] + v);             }                          endTimes.push_back(b);         }                  return ret;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2054.Two-Best-Non-Overlapping-Events.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxTwoEvents(vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "events",
                                    "virtual_name": "EXPECTED_events",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "events",
                                    "virtual_name": "events",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "events_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events/element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 1,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "events_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events/element #0/element #0",
                                                    "correspondingType": "int",
                                                    "value": "1264472039"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #1",
                                            "virtual_name": "events_element1",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events/element #1",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 3,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "events_element1_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events/element #1/element #0",
                                                    "correspondingType": "int",
                                                    "value": "2098457060"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "events_element1_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events/element #1/element #1",
                                                    "correspondingType": "int",
                                                    "value": "-1445126554"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #2",
                                                    "virtual_name": "events_element1_element2",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/events/element #1/element #2",
                                                    "correspondingType": "int",
                                                    "value": "1211091855"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxTwoEvents_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maxTwoEvents_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2054.Two-Best-Non-Overlapping-Events.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> events;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode events */\nvector<int> events_element0;\nint events_element0_element0=1264472039;\nevents_element0.push_back(events_element0_element0);\nevents.push_back(events_element0);\nvector<int> events_element1;\nint events_element1_element0=2098457060;\nevents_element1.push_back(events_element1_element0);\nint events_element1_element1=-1445126554;\nevents_element1.push_back(events_element1_element1);\nint events_element1_element2=1211091855;\nevents_element1.push_back(events_element1_element2);\nevents.push_back(events_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxTwoEvents_vector_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxTwoEvents(events);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_events;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2054.Two-Best-Non-Overlapping-Events.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> events;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode events */\nvector<int> events_element0;\nint events_element0_element0=1264472039;\nevents_element0.push_back(events_element0_element0);\nevents.push_back(events_element0);\nvector<int> events_element1;\nint events_element1_element0=2098457060;\nevents_element1.push_back(events_element1_element0);\nint events_element1_element1=-1445126554;\nevents_element1.push_back(events_element1_element1);\nint events_element1_element2=1211091855;\nevents_element1.push_back(events_element1_element2);\nevents.push_back(events_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     static bool cmp(vector<int>&a, vector<int>&b)     {         return a[1] < b[1];     }  public:     int maxTwoEvents(vector<vector<int>>& events)      {         int n = events.size();         sort(events.begin(), events.end(), cmp);                  vector<int>rollingMax(n);         int m = 0;         for (int i=0; i<n; i++)         {             m = max(m, events[i][2]);             rollingMax[i] = m;         }                  vector<int>endTimes;         int ret = 0;                  for (int i=0; i<n; i++)         {             int a = events[i][0]-1, b = events[i][1], v = events[i][2];             ret = max(ret, v);                          auto iter = upper_bound(endTimes.begin(), endTimes.end(), a);             if (iter!=endTimes.begin())             {                 iter = prev(iter);                 int idx = iter - endTimes.begin();                 ret = max(ret, rollingMax[idx] + v);             }                          endTimes.push_back(b);         }                  return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2054.Two-Best-Non-Overlapping-Events.cpp/Solution/maxTwoEvents(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int minimumBuckets(string street)      {         int n = street.size();         int ret = 0;                  for (int i=0; i<n; i++)         {             if (street[i]!='H') continue;                          if (i-1>=0 && street[i-1]=='#')             {                 continue;             }             else if (i+1<n && street[i+1]=='.')             {                 street[i+1] = '#';                 ret++;             }             else if (i-1>=0 && street[i-1]=='.')             {                 street[i-1] = '#';                 ret++;             }                         else             {                 return -1;             }                     }                  return ret;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minimumBuckets(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "street",
                                    "virtual_name": "EXPECTED_street",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)/street",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "street",
                                    "virtual_name": "street",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)/street",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "street[0]",
                                            "virtual_name": "street[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)/street/street[0]",
                                            "correspondingType": "char",
                                            "value": "-94"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minimumBuckets_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_minimumBuckets_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName11052 = new char[2];akaRandomName11052[0] = -94;akaRandomName11052[1] = '\\0';string street=akaRandomName11052;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode street */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minimumBuckets_string_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minimumBuckets(street);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName891087 = new char[2];akaRandomName891087[0] = -94;akaRandomName891087[1] = '\\0';string street=akaRandomName891087;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode street */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minimumBuckets(string street)      {         int n = street.size();         int ret = 0;                  for (int i=0; i<n; i++)         {             if (street[i]!='H') continue;                          if (i-1>=0 && street[i-1]=='#')             {                 continue;             }             else if (i+1<n && street[i+1]=='.')             {                 street[i+1] = '#';                 ret++;             }             else if (i-1>=0 && street[i-1]=='.')             {                 street[i-1] = '#';                 ret++;             }                         else             {                 return -1;             }                     }                  return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2086.Minimum-Number-of-Buckets-Required-to-Collect-Rainwater-from-Houses.cpp/Solution/minimumBuckets(string)"
    },
    {
        "f": [],
        "fm": "int kIncreasing(vector<int>& arr, int k)      {         int ret = 0;         int n = arr.size();                  for (int t=0; t<k; t++)         {             vector<int>nums;             for (int i=t; i<n; i+=k)                 nums.push_back(arr[i]);             ret += nums.size() - lengthOfLIS(nums);                     }                  return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "kIncreasing(vector<int>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "arr",
                                    "virtual_name": "EXPECTED_arr",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "EXPECTED_k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/k",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "arr",
                                    "virtual_name": "arr",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "arr_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr/element #0",
                                            "correspondingType": "int",
                                            "value": "-1515392462"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "arr_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr/element #1",
                                            "correspondingType": "int",
                                            "value": "567835944"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "arr_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr/element #2",
                                            "correspondingType": "int",
                                            "value": "-717177749"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/k",
                                    "correspondingType": "int",
                                    "value": "9"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_kIncreasing_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_kIncreasing_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint k=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=-1515392462;\narr.push_back(arr_element0);\nint arr_element1=567835944;\narr.push_back(arr_element1);\nint arr_element2=-717177749;\narr.push_back(arr_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_kIncreasing_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->kIncreasing(arr,k);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_arr;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint k=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=-1515392462;\narr.push_back(arr_element0);\nint arr_element1=567835944;\narr.push_back(arr_element1);\nint arr_element2=-717177749;\narr.push_back(arr_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "kIncreasing(vector<int>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "arr",
                                    "virtual_name": "EXPECTED_arr",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "EXPECTED_k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/k",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "arr",
                                    "virtual_name": "arr",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "arr_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr/element #0",
                                            "correspondingType": "int",
                                            "value": "730948362"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "arr_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr/element #1",
                                            "correspondingType": "int",
                                            "value": "258587238"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "arr_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/arr/element #2",
                                            "correspondingType": "int",
                                            "value": "-1001551793"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/k",
                                    "correspondingType": "int",
                                    "value": "1"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_kIncreasing_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_kIncreasing_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint k=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=730948362;\narr.push_back(arr_element0);\nint arr_element1=258587238;\narr.push_back(arr_element1);\nint arr_element2=-1001551793;\narr.push_back(arr_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_kIncreasing_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->kIncreasing(arr,k);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_arr;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> arr;\n\n\nint k=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode arr */\nint arr_element0=730948362;\narr.push_back(arr_element0);\nint arr_element1=258587238;\narr.push_back(arr_element1);\nint arr_element2=-1001551793;\narr.push_back(arr_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int kIncreasing(vector<int>& arr, int k)      {         int ret = 0;         int n = arr.size();                  for (int t=0; t<k; t++)         {             vector<int>nums;             for (int i=t; i<n; i+=k)                 nums.push_back(arr[i]);             ret += nums.size() - lengthOfLIS(nums);                     }                  return ret;     }          int lengthOfLIS(vector<int>& nums)      {         int n = nums.size();                       vector<int>q(n, INT_MAX);         for (int i=0; i<n; i++)         {             auto iter = upper_bound(q.begin(),q.end(),nums[i]);             *iter = nums[i];         }         for (int i = n - 1; i >= 0; i--)         {             if (q[i] != INT_MAX)                 return i + 1;           }         return 0;         } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/kIncreasing(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int lengthOfLIS(vector<int>& nums)      {         int n = nums.size();                       vector<int>q(n, INT_MAX);         for (int i=0; i<n; i++)         {             auto iter = upper_bound(q.begin(),q.end(),nums[i]);             *iter = nums[i];         }         for (int i = n - 1; i >= 0; i--)         {             if (q[i] != INT_MAX)                 return i + 1;           }         return 0;         }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "lengthOfLIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-439101658"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "1281625959"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)/nums/element #2",
                                            "correspondingType": "int",
                                            "value": "-2056262089"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_lengthOfLIS_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_lengthOfLIS_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-439101658;\nnums.push_back(nums_element0);\nint nums_element1=1281625959;\nnums.push_back(nums_element1);\nint nums_element2=-2056262089;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_lengthOfLIS_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->lengthOfLIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-439101658;\nnums.push_back(nums_element0);\nint nums_element1=1281625959;\nnums.push_back(nums_element1);\nint nums_element2=-2056262089;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int kIncreasing(vector<int>& arr, int k)      {         int ret = 0;         int n = arr.size();                  for (int t=0; t<k; t++)         {             vector<int>nums;             for (int i=t; i<n; i+=k)                 nums.push_back(arr[i]);             ret += nums.size() - lengthOfLIS(nums);                     }                  return ret;     }          int lengthOfLIS(vector<int>& nums)      {         int n = nums.size();                       vector<int>q(n, INT_MAX);         for (int i=0; i<n; i++)         {             auto iter = upper_bound(q.begin(),q.end(),nums[i]);             *iter = nums[i];         }         for (int i = n - 1; i >= 0; i--)         {             if (q[i] != INT_MAX)                 return i + 1;           }         return 0;         } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2111.Minimum-Operations-to-Make-the-Array-K-Increasing.cpp/Solution/lengthOfLIS(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool canBeValid(string s, string locked)      {         int n = s.size();         if (n%2!=0) return false;                  if (!checkRight(s, locked)) return false;         if (!checkLeft(s, locked)) return false;         return true;              }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "canBeValid(string,string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "EXPECTED_locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "32"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "locked[0]",
                                            "virtual_name": "locked[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)/locked/locked[0]",
                                            "correspondingType": "char",
                                            "value": "-47"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_canBeValid_string_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_canBeValid_string_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName116683 = new char[2];akaRandomName116683[0] = 32;akaRandomName116683[1] = '\\0';string s=akaRandomName116683;\nchar* akaRandomName245597 = new char[2];akaRandomName245597[0] = -47;akaRandomName245597[1] = '\\0';string locked=akaRandomName245597;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_canBeValid_string_string_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->canBeValid(s,locked);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName101682 = new char[2];akaRandomName101682[0] = 32;akaRandomName101682[1] = '\\0';string s=akaRandomName101682;\nchar* akaRandomName722842 = new char[2];akaRandomName722842[0] = -47;akaRandomName722842[1] = '\\0';string locked=akaRandomName722842;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool canBeValid(string s, string locked)      {         int n = s.size();         if (n%2!=0) return false;                  if (!checkRight(s, locked)) return false;         if (!checkLeft(s, locked)) return false;         return true;              }      bool checkRight(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = 0; i<s.size(); i++)         {             if (s[i]=='(')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]==')')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     }          bool checkLeft(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = s.size()-1; i>=0; i--)         {             if (s[i]==')')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]=='(')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/canBeValid(string,string)"
    },
    {
        "f": [],
        "fm": "bool checkRight(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = 0; i<s.size(); i++)         {             if (s[i]=='(')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]==')')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkRight(string,string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "EXPECTED_locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "41"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "locked[0]",
                                            "virtual_name": "locked[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)/locked/locked[0]",
                                            "correspondingType": "char",
                                            "value": "-75"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkRight_string_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_checkRight_string_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName767618 = new char[2];akaRandomName767618[0] = 41;akaRandomName767618[1] = '\\0';string s=akaRandomName767618;\nchar* akaRandomName357553 = new char[2];akaRandomName357553[0] = -75;akaRandomName357553[1] = '\\0';string locked=akaRandomName357553;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkRight_string_string_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkRight(s,locked);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName382721 = new char[2];akaRandomName382721[0] = 41;akaRandomName382721[1] = '\\0';string s=akaRandomName382721;\nchar* akaRandomName453636 = new char[2];akaRandomName453636[0] = -75;akaRandomName453636[1] = '\\0';string locked=akaRandomName453636;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool canBeValid(string s, string locked)      {         int n = s.size();         if (n%2!=0) return false;                  if (!checkRight(s, locked)) return false;         if (!checkLeft(s, locked)) return false;         return true;              }      bool checkRight(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = 0; i<s.size(); i++)         {             if (s[i]=='(')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]==')')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     }          bool checkLeft(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = s.size()-1; i>=0; i--)         {             if (s[i]==')')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]=='(')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkRight(string,string)"
    },
    {
        "f": [],
        "fm": "bool checkLeft(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = s.size()-1; i>=0; i--)         {             if (s[i]==')')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]=='(')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkLeft(string,string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "EXPECTED_locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "8"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "locked[0]",
                                            "virtual_name": "locked[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)/locked/locked[0]",
                                            "correspondingType": "char",
                                            "value": "56"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkLeft_string_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_checkLeft_string_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName668710 = new char[2];akaRandomName668710[0] = 8;akaRandomName668710[1] = '\\0';string s=akaRandomName668710;\nchar* akaRandomName308546 = new char[2];akaRandomName308546[0] = 56;akaRandomName308546[1] = '\\0';string locked=akaRandomName308546;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkLeft_string_string_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkLeft(s,locked);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName479311 = new char[2];akaRandomName479311[0] = 8;akaRandomName479311[1] = '\\0';string s=akaRandomName479311;\nchar* akaRandomName14814 = new char[2];akaRandomName14814[0] = 56;akaRandomName14814[1] = '\\0';string locked=akaRandomName14814;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool canBeValid(string s, string locked)      {         int n = s.size();         if (n%2!=0) return false;                  if (!checkRight(s, locked)) return false;         if (!checkLeft(s, locked)) return false;         return true;              }      bool checkRight(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = 0; i<s.size(); i++)         {             if (s[i]=='(')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]==')')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     }          bool checkLeft(string s, string locked)     {         int unmatched = 0;         int count = 0;                  for (int i = s.size()-1; i>=0; i--)         {             if (s[i]==')')                 unmatched++;             else                 unmatched--;              if (locked[i]=='0' && s[i]=='(')                             count++;                          if (unmatched < 0)             {                 if (count==0) return false;                 unmatched += 2;                 count--;             }         }         return true;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v1.cpp/Solution/checkLeft(string,string)"
    },
    {
        "f": [],
        "fm": "bool canBeValid(string s, string locked)      {         if (s.size() % 2 != 0) return false;         int upper = 0, lower = 0;         for (int i=0; i<s.size(); i++)         {             if (locked[i]=='1')             {                 if (s[i]=='(')                 {                     upper += 1;                     lower += 1;                 }                                     else                 {                     upper -= 1;                     lower -= 1;                 }             }             else             {                 upper += 1;                 lower -= 1;             }                          if (lower < 0)                 lower += 2;              if (upper < 0) return false;                     }                          return lower == 0;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "canBeValid(string,string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "EXPECTED_locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)/s",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "-55"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "locked",
                                    "virtual_name": "locked",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)/locked",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "locked[0]",
                                            "virtual_name": "locked[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)/locked/locked[0]",
                                            "correspondingType": "char",
                                            "value": "9"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_canBeValid_string_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_canBeValid_string_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName452402 = new char[2];akaRandomName452402[0] = -55;akaRandomName452402[1] = '\\0';string s=akaRandomName452402;\nchar* akaRandomName11576 = new char[2];akaRandomName11576[0] = 9;akaRandomName11576[1] = '\\0';string locked=akaRandomName11576;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_canBeValid_string_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->canBeValid(s,locked);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName338591 = new char[2];akaRandomName338591[0] = -55;akaRandomName338591[1] = '\\0';string s=akaRandomName338591;\nchar* akaRandomName718292 = new char[2];akaRandomName718292[0] = 9;akaRandomName718292[1] = '\\0';string locked=akaRandomName718292;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode locked */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     bool canBeValid(string s, string locked)      {         if (s.size() % 2 != 0) return false;         int upper = 0, lower = 0;         for (int i=0; i<s.size(); i++)         {             if (locked[i]=='1')             {                 if (s[i]=='(')                 {                     upper += 1;                     lower += 1;                 }                                     else                 {                     upper -= 1;                     lower -= 1;                 }             }             else             {                 upper += 1;                 lower -= 1;             }                          if (lower < 0)                 lower += 2;              if (upper < 0) return false;                     }                          return lower == 0;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2116.Check-if-a-Parentheses-String-Can-Be-Valid_v2.cpp/Solution/canBeValid(string,string)"
    },
    {
        "f": [],
        "fm": "vector<int> recoverArray(vector<int>& nums)      {         int n = nums.size()/2;         sort(nums.begin(), nums.end());                  for (int i=1; i<=n; i++)         {             if (nums[i]==nums[0]) continue;             if ((nums[i]+nums[0])%2==1) continue;             int mn = (nums[i]+nums[0])/2;             int k = (nums[i]-nums[0])/2;              int left = 0, right = 1;             int flag = 1;             vector<int>visited(2*n);             vector<int>rets;             for (int t=0; t<n; t++)             {                 while (visited[left]) left++;                 if (left==2*n)                 {                     flag = 0;                     break;                 }                 visited[left] = 1;                 while (right<2*n && (visited[right]==1 || nums[right]!=nums[left]+2*k))                     right++;                 if (right<2*n)                     visited[right] = 1;                 else                 {                     flag = 0;                     break;                 }                                 rets.push_back(nums[left]+k);                 }             if (flag)                 return rets;         }         return {};             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2122.Recover-the-Original-Array.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2122.Recover-the-Original-Array.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2122.Recover-the-Original-Array.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2122.Recover-the-Original-Array.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2122.Recover-the-Original-Array.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "recoverArray(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "783433135"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "-607633818"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_recoverArray_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_recoverArray_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2122.Recover-the-Original-Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=783433135;\nnums.push_back(nums_element0);\nint nums_element1=-607633818;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_recoverArray_vector_int_random_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->recoverArray(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2122.Recover-the-Original-Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=783433135;\nnums.push_back(nums_element0);\nint nums_element1=-607633818;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2122.Recover-the-Original-Array.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2122.Recover-the-Original-Array.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2122.Recover-the-Original-Array.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2122.Recover-the-Original-Array.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2122.Recover-the-Original-Array.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "recoverArray(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-344315019"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "1687382877"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": "./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_recoverArray_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_recoverArray_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2122.Recover-the-Original-Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-344315019;\nnums.push_back(nums_element0);\nint nums_element1=1687382877;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_recoverArray_vector_int_random_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->recoverArray(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2122.Recover-the-Original-Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-344315019;\nnums.push_back(nums_element0);\nint nums_element1=1687382877;\nnums.push_back(nums_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> recoverArray(vector<int>& nums)      {         int n = nums.size()/2;         sort(nums.begin(), nums.end());                  for (int i=1; i<=n; i++)         {             if (nums[i]==nums[0]) continue;             if ((nums[i]+nums[0])%2==1) continue;             int mn = (nums[i]+nums[0])/2;             int k = (nums[i]-nums[0])/2;              int left = 0, right = 1;             int flag = 1;             vector<int>visited(2*n);             vector<int>rets;             for (int t=0; t<n; t++)             {                 while (visited[left]) left++;                 if (left==2*n)                 {                     flag = 0;                     break;                 }                 visited[left] = 1;                 while (right<2*n && (visited[right]==1 || nums[right]!=nums[left]+2*k))                     right++;                 if (right<2*n)                     visited[right] = 1;                 else                 {                     flag = 0;                     break;                 }                                 rets.push_back(nums[left]+k);                 }             if (flag)                 return rets;         }         return {};             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2122.Recover-the-Original-Array.cpp/Solution/recoverArray(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int earliestFullBloom(vector<int>& plantTime, vector<int>& growTime)      {         int n = plantTime.size();         vector<vector<int>>time(n);         for (int i=0; i<n; i++)         {             time[i] = {plantTime[i], -growTime[i]};                     }         sort(time.begin(), time.end(), [](vector<int>&a, vector<int>&b){return a[1]<b[1];});                  int left = 1, right = INT_MAX/2;         while (left < right)         {             int mid = left+(right-left)/2;             if (checkOK(mid, time))                 right = mid;             else                 left = mid+1;         }         return left;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "earliestFullBloom(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "growTime",
                                    "virtual_name": "EXPECTED_growTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "plantTime",
                                    "virtual_name": "EXPECTED_plantTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "plantTime",
                                    "virtual_name": "plantTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "plantTime_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime/element #0",
                                            "correspondingType": "int",
                                            "value": "-735922774"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "growTime",
                                    "virtual_name": "growTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "growTime_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime/element #0",
                                            "correspondingType": "int",
                                            "value": "732801505"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "growTime_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime/element #1",
                                            "correspondingType": "int",
                                            "value": "-1071563908"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_earliestFullBloom_vector_int_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_earliestFullBloom_vector_int_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> plantTime;\nvector<int> growTime;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode plantTime */\nint plantTime_element0=-735922774;\nplantTime.push_back(plantTime_element0);\n/* VectorDataNode growTime */\nint growTime_element0=732801505;\ngrowTime.push_back(growTime_element0);\nint growTime_element1=-1071563908;\ngrowTime.push_back(growTime_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_earliestFullBloom_vector_int_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->earliestFullBloom(plantTime,growTime);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_plantTime;\n\nvector<int> EXPECTED_growTime;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> plantTime;\nvector<int> growTime;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode plantTime */\nint plantTime_element0=-735922774;\nplantTime.push_back(plantTime_element0);\n/* VectorDataNode growTime */\nint growTime_element0=732801505;\ngrowTime.push_back(growTime_element0);\nint growTime_element1=-1071563908;\ngrowTime.push_back(growTime_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "earliestFullBloom(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "growTime",
                                    "virtual_name": "EXPECTED_growTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "plantTime",
                                    "virtual_name": "EXPECTED_plantTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "plantTime",
                                    "virtual_name": "plantTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "plantTime_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime/element #0",
                                            "correspondingType": "int",
                                            "value": "-1230702679"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "plantTime_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime/element #1",
                                            "correspondingType": "int",
                                            "value": "-1264434319"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "plantTime_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime/element #2",
                                            "correspondingType": "int",
                                            "value": "-1025842970"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "growTime",
                                    "virtual_name": "growTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "growTime_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime/element #0",
                                            "correspondingType": "int",
                                            "value": "885073371"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "growTime_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime/element #1",
                                            "correspondingType": "int",
                                            "value": "-244219037"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_earliestFullBloom_vector_int_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_earliestFullBloom_vector_int_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> plantTime;\nvector<int> growTime;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode plantTime */\nint plantTime_element0=-1230702679;\nplantTime.push_back(plantTime_element0);\nint plantTime_element1=-1264434319;\nplantTime.push_back(plantTime_element1);\nint plantTime_element2=-1025842970;\nplantTime.push_back(plantTime_element2);\n/* VectorDataNode growTime */\nint growTime_element0=885073371;\ngrowTime.push_back(growTime_element0);\nint growTime_element1=-244219037;\ngrowTime.push_back(growTime_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_earliestFullBloom_vector_int_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->earliestFullBloom(plantTime,growTime);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_plantTime;\n\nvector<int> EXPECTED_growTime;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> plantTime;\nvector<int> growTime;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode plantTime */\nint plantTime_element0=-1230702679;\nplantTime.push_back(plantTime_element0);\nint plantTime_element1=-1264434319;\nplantTime.push_back(plantTime_element1);\nint plantTime_element2=-1025842970;\nplantTime.push_back(plantTime_element2);\n/* VectorDataNode growTime */\nint growTime_element0=885073371;\ngrowTime.push_back(growTime_element0);\nint growTime_element1=-244219037;\ngrowTime.push_back(growTime_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int earliestFullBloom(vector<int>& plantTime, vector<int>& growTime)      {         int n = plantTime.size();         vector<vector<int>>time(n);         for (int i=0; i<n; i++)         {             time[i] = {plantTime[i], -growTime[i]};                     }         sort(time.begin(), time.end(), [](vector<int>&a, vector<int>&b){return a[1]<b[1];});                  int left = 1, right = INT_MAX/2;         while (left < right)         {             int mid = left+(right-left)/2;             if (checkOK(mid, time))                 right = mid;             else                 left = mid+1;         }         return left;             }          bool checkOK(int T, vector<vector<int>>&time)     {         int n = time.size();         int days = 0;                  for (int i=0; i<n; i++)         {             days += time[i][0];                          if (days > T+time[i][1])             {                 return false;             }         }                 return true;           } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool checkOK(int T, vector<vector<int>>&time)     {         int n = time.size();         int days = 0;                  for (int i=0; i<n; i++)         {             days += time[i][0];                          if (days > T+time[i][1])             {                 return false;             }         }                 return true;           }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkOK(int,vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "time",
                                    "virtual_name": "EXPECTED_time",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "T",
                                    "virtual_name": "EXPECTED_T",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/T",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "T",
                                    "virtual_name": "T",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/T",
                                    "correspondingType": "int",
                                    "value": "-2034386009"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "time",
                                    "virtual_name": "time",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "time_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 1,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "time_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #0/element #0",
                                                    "correspondingType": "int",
                                                    "value": "-293483878"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #1",
                                            "virtual_name": "time_element1",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #1",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 3,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "time_element1_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #1/element #0",
                                                    "correspondingType": "int",
                                                    "value": "-585589554"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "time_element1_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #1/element #1",
                                                    "correspondingType": "int",
                                                    "value": "191929869"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #2",
                                                    "virtual_name": "time_element1_element2",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #1/element #2",
                                                    "correspondingType": "int",
                                                    "value": "-1553149892"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkOK_int_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_checkOK_int_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint T=-2034386009;\nvector<vector<int>> time;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode T */\n/* VectorDataNode time */\nvector<int> time_element0;\nint time_element0_element0=-293483878;\ntime_element0.push_back(time_element0_element0);\ntime.push_back(time_element0);\nvector<int> time_element1;\nint time_element1_element0=-585589554;\ntime_element1.push_back(time_element1_element0);\nint time_element1_element1=191929869;\ntime_element1.push_back(time_element1_element1);\nint time_element1_element2=-1553149892;\ntime_element1.push_back(time_element1_element2);\ntime.push_back(time_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkOK_int_vector_vector_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkOK(T,time);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_time;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint T=-2034386009;\nvector<vector<int>> time;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode T */\n/* VectorDataNode time */\nvector<int> time_element0;\nint time_element0_element0=-293483878;\ntime_element0.push_back(time_element0_element0);\ntime.push_back(time_element0);\nvector<int> time_element1;\nint time_element1_element0=-585589554;\ntime_element1.push_back(time_element1_element0);\nint time_element1_element1=191929869;\ntime_element1.push_back(time_element1_element1);\nint time_element1_element2=-1553149892;\ntime_element1.push_back(time_element1_element2);\ntime.push_back(time_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "checkOK(int,vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "T",
                                    "virtual_name": "EXPECTED_T",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/T",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "time",
                                    "virtual_name": "EXPECTED_time",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "T",
                                    "virtual_name": "T",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/T",
                                    "correspondingType": "int",
                                    "value": "-100544278"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "time",
                                    "virtual_name": "time",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "time_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 1,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "time_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/time/element #0/element #0",
                                                    "correspondingType": "int",
                                                    "value": "1075967052"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_checkOK_int_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_checkOK_int_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint T=-100544278;\nvector<vector<int>> time;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode T */\n/* VectorDataNode time */\nvector<int> time_element0;\nint time_element0_element0=1075967052;\ntime_element0.push_back(time_element0_element0);\ntime.push_back(time_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkOK_int_vector_vector_int_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkOK(T,time);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_time;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint T=-100544278;\nvector<vector<int>> time;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode T */\n/* VectorDataNode time */\nvector<int> time_element0;\nint time_element0_element0=1075967052;\ntime_element0.push_back(time_element0_element0);\ntime.push_back(time_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int earliestFullBloom(vector<int>& plantTime, vector<int>& growTime)      {         int n = plantTime.size();         vector<vector<int>>time(n);         for (int i=0; i<n; i++)         {             time[i] = {plantTime[i], -growTime[i]};                     }         sort(time.begin(), time.end(), [](vector<int>&a, vector<int>&b){return a[1]<b[1];});                  int left = 1, right = INT_MAX/2;         while (left < right)         {             int mid = left+(right-left)/2;             if (checkOK(mid, time))                 right = mid;             else                 left = mid+1;         }         return left;             }          bool checkOK(int T, vector<vector<int>>&time)     {         int n = time.size();         int days = 0;                  for (int i=0; i<n; i++)         {             days += time[i][0];                          if (days > T+time[i][1])             {                 return false;             }         }                 return true;           } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2136.Earliest-Possible-Day-of-Full-Bloom_v1.cpp/Solution/checkOK(int,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int earliestFullBloom(vector<int>& plantTime, vector<int>& growTime)      {         int n = plantTime.size();         vector<vector<int>>time(n);         for (int i=0; i<n; i++)         {             time[i] = {plantTime[i], growTime[i]};                     }         sort(time.begin(), time.end(), [](vector<int>&a, vector<int>&b){return a[1]>b[1];});                  int ret = 0;         int days = 0;         for (int i=0; i<n; i++)         {             days+=time[i][0];             ret = max(ret, days+time[i][1]);         }         return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "earliestFullBloom(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "plantTime",
                                    "virtual_name": "EXPECTED_plantTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "growTime",
                                    "virtual_name": "EXPECTED_growTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "plantTime",
                                    "virtual_name": "plantTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "plantTime_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/plantTime/element #0",
                                            "correspondingType": "int",
                                            "value": "1011238096"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "growTime",
                                    "virtual_name": "growTime",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "growTime_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime/element #0",
                                            "correspondingType": "int",
                                            "value": "1925742743"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "growTime_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/growTime/element #1",
                                            "correspondingType": "int",
                                            "value": "-1983560599"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_earliestFullBloom_vector_int_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_earliestFullBloom_vector_int_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> plantTime;\nvector<int> growTime;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode plantTime */\nint plantTime_element0=1011238096;\nplantTime.push_back(plantTime_element0);\n/* VectorDataNode growTime */\nint growTime_element0=1925742743;\ngrowTime.push_back(growTime_element0);\nint growTime_element1=-1983560599;\ngrowTime.push_back(growTime_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_earliestFullBloom_vector_int_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->earliestFullBloom(plantTime,growTime);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_plantTime;\n\nvector<int> EXPECTED_growTime;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> plantTime;\nvector<int> growTime;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode plantTime */\nint plantTime_element0=1011238096;\nplantTime.push_back(plantTime_element0);\n/* VectorDataNode growTime */\nint growTime_element0=1925742743;\ngrowTime.push_back(growTime_element0);\nint growTime_element1=-1983560599;\ngrowTime.push_back(growTime_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int earliestFullBloom(vector<int>& plantTime, vector<int>& growTime)      {         int n = plantTime.size();         vector<vector<int>>time(n);         for (int i=0; i<n; i++)         {             time[i] = {plantTime[i], growTime[i]};                     }         sort(time.begin(), time.end(), [](vector<int>&a, vector<int>&b){return a[1]>b[1];});                  int ret = 0;         int days = 0;         for (int i=0; i<n; i++)         {             days+=time[i][0];             ret = max(ret, days+time[i][1]);         }         return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2136.Earliest-Possible-Day-of-Full-Bloom_v2.cpp/Solution/earliestFullBloom(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "long long minimumDifference(vector<int>& nums)      {         int n = nums.size()/3;                  vector<LL>leftMin(3*n);          priority_queue<int>pq;         LL sum = 0;         for (int i=0; i<3*n; i++)         {             pq.push(nums[i]);             sum += nums[i];             if (pq.size() > n)             {                 sum -= pq.top();                 pq.pop();             }             leftMin[i] = sum;                     }                  vector<LL>rightMax(3*n);         priority_queue<int, vector<int>, greater<>>pq2;         sum = 0;         for (int i=3*n-1; i>=0; i--)         {             pq2.push(nums[i]);             sum += nums[i];             if (pq2.size() > n)             {                 sum -= pq2.top();                 pq2.pop();             }             rightMax[i] = sum;                     }                  LL ret = LLONG_MAX;         for (int i=n-1; i<2*n; i++)             ret = min(ret, leftMin[i]-rightMax[i+1]);                      return ret;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minimumDifference(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "long long",
                            "realType": "long long",
                            "functionNode": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-567528675"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)/RETURN",
                                    "correspondingType": "long long",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minimumDifference_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_minimumDifference_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-567528675;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minimumDifference_vector_int_random_1\");long long AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minimumDifference(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-567528675;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     long long minimumDifference(vector<int>& nums)      {         int n = nums.size()/3;                  vector<LL>leftMin(3*n);          priority_queue<int>pq;         LL sum = 0;         for (int i=0; i<3*n; i++)         {             pq.push(nums[i]);             sum += nums[i];             if (pq.size() > n)             {                 sum -= pq.top();                 pq.pop();             }             leftMin[i] = sum;                     }                  vector<LL>rightMax(3*n);         priority_queue<int, vector<int>, greater<>>pq2;         sum = 0;         for (int i=3*n-1; i>=0; i--)         {             pq2.push(nums[i]);             sum += nums[i];             if (pq2.size() > n)             {                 sum -= pq2.top();                 pq2.pop();             }             rightMax[i] = sum;                     }                  LL ret = LLONG_MAX;         for (int i=n-1; i<2*n; i++)             ret = min(ret, leftMin[i]-rightMax[i+1]);                      return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/19/2163.Minimum-Difference-in-Sums-After-Removal-of-Elements.cpp/Solution/minimumDifference(vector<int>&)"
    }
]