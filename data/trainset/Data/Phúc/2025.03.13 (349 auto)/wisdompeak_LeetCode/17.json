[
    {
        "f": [],
        "fm": "static bool cmp(vector<int>&a, vector<int>&b)     {         return a[1] < b[1];     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "cmp(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "b",
                                    "virtual_name": "EXPECTED_b",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/b",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "a",
                                    "virtual_name": "EXPECTED_a",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/a",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "a",
                                    "virtual_name": "a",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/a",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "a_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/a/element #0",
                                            "correspondingType": "int",
                                            "value": "246000466"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "a_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/a/element #1",
                                            "correspondingType": "int",
                                            "value": "64977182"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "b",
                                    "virtual_name": "b",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/b",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "b_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/b/element #0",
                                            "correspondingType": "int",
                                            "value": "-1283703809"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "b_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/b/element #1",
                                            "correspondingType": "int",
                                            "value": "1393347434"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_cmp_vector_int_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_cmp_vector_int_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\nvector<int> b;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=246000466;\na.push_back(a_element0);\nint a_element1=64977182;\na.push_back(a_element1);\n/* VectorDataNode b */\nint b_element0=-1283703809;\nb.push_back(b_element0);\nint b_element1=1393347434;\nb.push_back(b_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_cmp_vector_int_vector_int_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->cmp(a,b);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_a;\n\nvector<int> EXPECTED_b;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\nvector<int> b;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=246000466;\na.push_back(a_element0);\nint a_element1=64977182;\na.push_back(a_element1);\n/* VectorDataNode b */\nint b_element0=-1283703809;\nb.push_back(b_element0);\nint b_element1=1393347434;\nb.push_back(b_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {         static bool cmp(vector<int>&a, vector<int>&b)     {         return a[1] < b[1];     } public:     int maxValue(vector<vector<int>>& events, int k)      {                 sort(events.begin(), events.end(), cmp);         int m = events.size();         auto dp = vector<vector<int>>(m+1, vector<int>(k+1,INT_MIN/2));                  events.insert(events.begin(), events[0]);         vector<int>endTime({0});                  int ret = 0;                 for (int i=0; i<=m; i++)             dp[i][0] = 0;                  for (int i=1; i<=m; i++)         {             auto iter = lower_bound(endTime.begin(), endTime.end(), events[i][0]);             int t = iter-endTime.begin()-1;                          for (int j=1; j<=k; j++)             {                 dp[i][j] = max(dp[i-1][j], dp[t][j-1]+events[i][2]);                                                 ret = max(ret, dp[i][j]);             }             endTime.push_back(events[i][1]);         }                  return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/cmp(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int maxValue(vector<vector<int>>& events, int k)      {                 sort(events.begin(), events.end(), cmp);         int m = events.size();         auto dp = vector<vector<int>>(m+1, vector<int>(k+1,INT_MIN/2));                  events.insert(events.begin(), events[0]);         vector<int>endTime({0});                  int ret = 0;                 for (int i=0; i<=m; i++)             dp[i][0] = 0;                  for (int i=1; i<=m; i++)         {             auto iter = lower_bound(endTime.begin(), endTime.end(), events[i][0]);             int t = iter-endTime.begin()-1;                          for (int j=1; j<=k; j++)             {                 dp[i][j] = max(dp[i-1][j], dp[t][j-1]+events[i][2]);                                                 ret = max(ret, dp[i][j]);             }             endTime.push_back(events[i][1]);         }                  return ret;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxValue(vector<vector<int>>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "events",
                                    "virtual_name": "EXPECTED_events",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/events",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "EXPECTED_k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/k",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "events",
                                    "virtual_name": "events",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/events",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "events_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/events/element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 2,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "events_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/events/element #0/element #0",
                                                    "correspondingType": "int",
                                                    "value": "1382321389"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "events_element0_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/events/element #0/element #1",
                                                    "correspondingType": "int",
                                                    "value": "1674379410"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #1",
                                            "virtual_name": "events_element1",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/events/element #1",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 1,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "events_element1_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/events/element #1/element #0",
                                                    "correspondingType": "int",
                                                    "value": "1628105323"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/k",
                                    "correspondingType": "int",
                                    "value": "8"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxValue_vector_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maxValue_vector_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> events;\n\n\nint k=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode events */\nvector<int> events_element0;\nint events_element0_element0=1382321389;\nevents_element0.push_back(events_element0_element0);\nint events_element0_element1=1674379410;\nevents_element0.push_back(events_element0_element1);\nevents.push_back(events_element0);\nvector<int> events_element1;\nint events_element1_element0=1628105323;\nevents_element1.push_back(events_element1_element0);\nevents.push_back(events_element1);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxValue_vector_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxValue(events,k);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_events;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> events;\n\n\nint k=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode events */\nvector<int> events_element0;\nint events_element0_element0=1382321389;\nevents_element0.push_back(events_element0_element0);\nint events_element0_element1=1674379410;\nevents_element0.push_back(events_element0_element1);\nevents.push_back(events_element0);\nvector<int> events_element1;\nint events_element1_element0=1628105323;\nevents_element1.push_back(events_element1_element0);\nevents.push_back(events_element1);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {         static bool cmp(vector<int>&a, vector<int>&b)     {         return a[1] < b[1];     } public:     int maxValue(vector<vector<int>>& events, int k)      {                 sort(events.begin(), events.end(), cmp);         int m = events.size();         auto dp = vector<vector<int>>(m+1, vector<int>(k+1,INT_MIN/2));                  events.insert(events.begin(), events[0]);         vector<int>endTime({0});                  int ret = 0;                 for (int i=0; i<=m; i++)             dp[i][0] = 0;                  for (int i=1; i<=m; i++)         {             auto iter = lower_bound(endTime.begin(), endTime.end(), events[i][0]);             int t = iter-endTime.begin()-1;                          for (int j=1; j<=k; j++)             {                 dp[i][j] = max(dp[i-1][j], dp[t][j-1]+events[i][2]);                                                 ret = max(ret, dp[i][j]);             }             endTime.push_back(events[i][1]);         }                  return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1751.Maximum-Number-of-Events-That-Can-Be-Attended-II.cpp/Solution/maxValue(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "vector<int> minOperations(string boxes)      {         int n = boxes.size();         vector<int>leftMoves(n);         vector<int>rightMoves(n);         int left = 0;         for (int i = 1; i<n; i++)         {             left += (boxes[i-1]=='1');             leftMoves[i] = leftMoves[i-1] + left*1;         }         int right = 0;         for (int i = n-2; i>=0; i--)         {             right += (boxes[i+1]=='1');             rightMoves[i] = rightMoves[i+1] + right*1;         }         vector<int>rets(n);         for (int i=0; i<n; i++)             rets[i] = leftMoves[i]+rightMoves[i];         return rets;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minOperations(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "boxes",
                                    "virtual_name": "EXPECTED_boxes",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)/boxes",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "boxes",
                                    "virtual_name": "boxes",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)/boxes",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "boxes[0]",
                                            "virtual_name": "boxes[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)/boxes/boxes[0]",
                                            "correspondingType": "char",
                                            "value": "-40"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": "./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)/RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minOperations_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_minOperations_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName751597 = new char[2];akaRandomName751597[0] = -40;akaRandomName751597[1] = '\\0';string boxes=akaRandomName751597;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode boxes */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minOperations_string_random_4\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minOperations(boxes);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName734331 = new char[2];akaRandomName734331[0] = -40;akaRandomName734331[1] = '\\0';string boxes=akaRandomName734331;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode boxes */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     vector<int> minOperations(string boxes)      {         int n = boxes.size();         vector<int>leftMoves(n);         vector<int>rightMoves(n);         int left = 0;         for (int i = 1; i<n; i++)         {             left += (boxes[i-1]=='1');             leftMoves[i] = leftMoves[i-1] + left*1;         }         int right = 0;         for (int i = n-2; i>=0; i--)         {             right += (boxes[i+1]=='1');             rightMoves[i] = rightMoves[i+1] + right*1;         }         vector<int>rets(n);         for (int i=0; i<n; i++)             rets[i] = leftMoves[i]+rightMoves[i];         return rets;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1769.Minimum-Number-of-Operations-to-Move-All-Balls-to-Each-Box.cpp/Solution/minOperations(string)"
    },
    {
        "f": [],
        "fm": "int maximumBeauty(vector<int>& flowers)      {         unordered_map<int,vector<int>>Map;         for (int i=0; i<flowers.size(); i++)         {             Map[flowers[i]].push_back(i);         }                  int n = flowers.size();         vector<int>presum(n);         int sum = 0;         for (int i=0; i<n; i++)         {             sum += (flowers[i]<0? 0:flowers[i]);             presum[i] = sum;         }                  int ret = INT_MIN;         for (auto x: Map)         {             if (x.second.size()==1) continue;             int beauty = x.first;                         int a = x.second[0]+1, b = x.second.back()-1;                         ret = max(ret, presum[b] - (a==0?0:presum[a-1]) + 2*beauty);         }         return ret;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1788.Maximize-the-Beauty-of-the-Garden.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumBeauty(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "EXPECTED_flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "flowers_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)/flowers/element #0",
                                            "correspondingType": "int",
                                            "value": "-354319589"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumBeauty_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_maximumBeauty_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1788.Maximize-the-Beauty-of-the-Garden.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=-354319589;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumBeauty_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumBeauty(flowers);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)\");\n\n\nvector<int> EXPECTED_flowers;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1788.Maximize-the-Beauty-of-the-Garden.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=-354319589;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maximumBeauty(vector<int>& flowers)      {         unordered_map<int,vector<int>>Map;         for (int i=0; i<flowers.size(); i++)         {             Map[flowers[i]].push_back(i);         }                  int n = flowers.size();         vector<int>presum(n);         int sum = 0;         for (int i=0; i<n; i++)         {             sum += (flowers[i]<0? 0:flowers[i]);             presum[i] = sum;         }                  int ret = INT_MIN;         for (auto x: Map)         {             if (x.second.size()==1) continue;             int beauty = x.first;                         int a = x.second[0]+1, b = x.second.back()-1;                         ret = max(ret, presum[b] - (a==0?0:presum[a-1]) + 2*beauty);         }         return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1788.Maximize-the-Beauty-of-the-Garden.cpp/Solution/maximumBeauty(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int getMaximumConsecutive(vector<int>& coins)      {         sort(coins.begin(), coins.end());                  int curMax = 0;                  for (auto c: coins)         {             if (c>curMax+1) break;             curMax+=c;                      }         return curMax+1;              }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "getMaximumConsecutive(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "coins",
                                    "virtual_name": "EXPECTED_coins",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)/coins",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "coins",
                                    "virtual_name": "coins",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)/coins",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "coins_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)/coins/element #0",
                                            "correspondingType": "int",
                                            "value": "-1970545444"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "coins_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)/coins/element #1",
                                            "correspondingType": "int",
                                            "value": "1144950330"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_getMaximumConsecutive_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_getMaximumConsecutive_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=-1970545444;\ncoins.push_back(coins_element0);\nint coins_element1=1144950330;\ncoins.push_back(coins_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_getMaximumConsecutive_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getMaximumConsecutive(coins);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)\");\n\n\nvector<int> EXPECTED_coins;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> coins;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode coins */\nint coins_element0=-1970545444;\ncoins.push_back(coins_element0);\nint coins_element1=1144950330;\ncoins.push_back(coins_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int getMaximumConsecutive(vector<int>& coins)      {         sort(coins.begin(), coins.end());                  int curMax = 0;                  for (auto c: coins)         {             if (c>curMax+1) break;             curMax+=c;                      }         return curMax+1;              } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1798.Maximum-Number-of-Consecutive-Values-You-Can-Make.cpp/Solution/getMaximumConsecutive(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int minAbsoluteSumDiff(vector<int>& nums1, vector<int>& nums2)      {         auto arr = nums1;         sort(arr.begin(), arr.end());         int n = nums2.size();         int maxDecrease = 0;                  for (int i=0; i<n; i++)         {             auto iter = lower_bound(arr.begin(), arr.end(), nums2[i]);             int a = INT_MAX/2, b = INT_MAX/2;             if (iter!=arr.end())                 a = *iter;             if (iter!=arr.begin())                 b = *prev(iter);                          int diff = min(abs(a-nums2[i]), abs(b-nums2[i]));                          int origin = abs(nums1[i]-nums2[i]);                         maxDecrease = max(maxDecrease, origin - diff);                     }                  long ret = 0;         long M = 1e9+7;         for (int i=0; i<n; i++)         {             ret = ret + abs((long)nums1[i] - (long)nums2[i]);             ret %= M;         }         ret -= maxDecrease;         ret = (ret+M)%M;                  return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1818.Minimum-Absolute-Sum-Difference.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1818.Minimum-Absolute-Sum-Difference.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minAbsoluteSumDiff(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums1",
                                    "virtual_name": "EXPECTED_nums1",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums1",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums2",
                                    "virtual_name": "EXPECTED_nums2",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums2",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums1",
                                    "virtual_name": "nums1",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums1",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums1_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums1/element #0",
                                            "correspondingType": "int",
                                            "value": "1248274748"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums1_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums1/element #1",
                                            "correspondingType": "int",
                                            "value": "-1681755617"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums2",
                                    "virtual_name": "nums2",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums2",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums2_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums2/element #0",
                                            "correspondingType": "int",
                                            "value": "1689205761"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums2_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/nums2/element #1",
                                            "correspondingType": "int",
                                            "value": "-1831516254"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minAbsoluteSumDiff_vector_int_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_minAbsoluteSumDiff_vector_int_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1818.Minimum-Absolute-Sum-Difference.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1248274748;\nnums1.push_back(nums1_element0);\nint nums1_element1=-1681755617;\nnums1.push_back(nums1_element1);\n/* VectorDataNode nums2 */\nint nums2_element0=1689205761;\nnums2.push_back(nums2_element0);\nint nums2_element1=-1831516254;\nnums2.push_back(nums2_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minAbsoluteSumDiff_vector_int_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minAbsoluteSumDiff(nums1,nums2);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1818.Minimum-Absolute-Sum-Difference.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1248274748;\nnums1.push_back(nums1_element0);\nint nums1_element1=-1681755617;\nnums1.push_back(nums1_element1);\n/* VectorDataNode nums2 */\nint nums2_element0=1689205761;\nnums2.push_back(nums2_element0);\nint nums2_element1=-1831516254;\nnums2.push_back(nums2_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minAbsoluteSumDiff(vector<int>& nums1, vector<int>& nums2)      {         auto arr = nums1;         sort(arr.begin(), arr.end());         int n = nums2.size();         int maxDecrease = 0;                  for (int i=0; i<n; i++)         {             auto iter = lower_bound(arr.begin(), arr.end(), nums2[i]);             int a = INT_MAX/2, b = INT_MAX/2;             if (iter!=arr.end())                 a = *iter;             if (iter!=arr.begin())                 b = *prev(iter);                          int diff = min(abs(a-nums2[i]), abs(b-nums2[i]));                          int origin = abs(nums1[i]-nums2[i]);                         maxDecrease = max(maxDecrease, origin - diff);                     }                  long ret = 0;         long M = 1e9+7;         for (int i=0; i<n; i++)         {             ret = ret + abs((long)nums1[i] - (long)nums2[i]);             ret %= M;         }         ret -= maxDecrease;         ret = (ret+M)%M;                  return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1818.Minimum-Absolute-Sum-Difference.cpp/Solution/minAbsoluteSumDiff(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int maxBuilding(int n, vector<vector<int>>& restrictions)      {                             restrictions.push_back({1,0});         sort(restrictions.begin(), restrictions.end());                  int m = restrictions.size();         vector<int>h(m);                  for (int i=1; i<m; i++)         {             h[i] = min(restrictions[i][1], h[i-1] + restrictions[i][0] - restrictions[i-1][0]);         }                  for (int i=m-2; i>=1; i--)         {             h[i] = min(h[i], h[i+1] + restrictions[i+1][0] - restrictions[i][0]);         }                  int ret = 0;         for (int i=1; i<m; i++)         {             int y = ((h[i-1]-h[i]) - (restrictions[i-1][0]-restrictions[i][0]))/2;             ret = max(ret, h[i]+y);         }                  ret = max(ret, h[m-1] + n - restrictions[m-1][0]);                  return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1840.Maximum-Building-Height.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1840.Maximum-Building-Height.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1840.Maximum-Building-Height.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1840.Maximum-Building-Height.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1840.Maximum-Building-Height.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maxBuilding(int,vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "n",
                                    "virtual_name": "EXPECTED_n",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/n",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "restrictions",
                                    "virtual_name": "EXPECTED_restrictions",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/restrictions",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "n",
                                    "virtual_name": "n",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/n",
                                    "correspondingType": "int",
                                    "value": "1848191138"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "restrictions",
                                    "virtual_name": "restrictions",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/restrictions",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "restrictions_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/restrictions/element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 1,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "restrictions_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/restrictions/element #0/element #0",
                                                    "correspondingType": "int",
                                                    "value": "-1836736439"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #1",
                                            "virtual_name": "restrictions_element1",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/restrictions/element #1",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 1,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "restrictions_element1_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/restrictions/element #1/element #0",
                                                    "correspondingType": "int",
                                                    "value": "368545113"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maxBuilding_int_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maxBuilding_int_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1840.Maximum-Building-Height.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=1848191138;\nvector<vector<int>> restrictions;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode restrictions */\nvector<int> restrictions_element0;\nint restrictions_element0_element0=-1836736439;\nrestrictions_element0.push_back(restrictions_element0_element0);\nrestrictions.push_back(restrictions_element0);\nvector<int> restrictions_element1;\nint restrictions_element1_element0=368545113;\nrestrictions_element1.push_back(restrictions_element1_element0);\nrestrictions.push_back(restrictions_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxBuilding_int_vector_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxBuilding(n,restrictions);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_restrictions;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1840.Maximum-Building-Height.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=1848191138;\nvector<vector<int>> restrictions;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode restrictions */\nvector<int> restrictions_element0;\nint restrictions_element0_element0=-1836736439;\nrestrictions_element0.push_back(restrictions_element0_element0);\nrestrictions.push_back(restrictions_element0);\nvector<int> restrictions_element1;\nint restrictions_element1_element0=368545113;\nrestrictions_element1.push_back(restrictions_element1_element0);\nrestrictions.push_back(restrictions_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     public:     int maxBuilding(int n, vector<vector<int>>& restrictions)      {                             restrictions.push_back({1,0});         sort(restrictions.begin(), restrictions.end());                  int m = restrictions.size();         vector<int>h(m);                  for (int i=1; i<m; i++)         {             h[i] = min(restrictions[i][1], h[i-1] + restrictions[i][0] - restrictions[i-1][0]);         }                  for (int i=m-2; i>=1; i--)         {             h[i] = min(h[i], h[i+1] + restrictions[i+1][0] - restrictions[i][0]);         }                  int ret = 0;         for (int i=1; i<m; i++)         {             int y = ((h[i-1]-h[i]) - (restrictions[i-1][0]-restrictions[i][0]))/2;             ret = max(ret, h[i]+y);         }                  ret = max(ret, h[m-1] + n - restrictions[m-1][0]);                  return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1840.Maximum-Building-Height.cpp/Solution/maxBuilding(int,vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int getMinSwaps(string num, int k)      {         auto num0 = num;         for (int i=0; i<k; i++)         {             std::next_permutation(num.begin(), num.end());         }                  int ret = 0;         for (int i=0; i<num.size(); i++)         {             int count = 0;             for (int j=0; j<num0.size(); j++)             {                 if (num0[j]==num[i])                 {                     num0[j] = '#';                     break;                 }                                     if (num0[j]=='#')                     continue;                 count++;             }             ret += count;         }         return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "getMinSwaps(string,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)/num",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "EXPECTED_k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)/k",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)/num",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "num[0]",
                                            "virtual_name": "num[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)/num/num[0]",
                                            "correspondingType": "char",
                                            "value": "127"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "k",
                                    "virtual_name": "k",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)/k",
                                    "correspondingType": "int",
                                    "value": "1"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_getMinSwaps_string_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_getMinSwaps_string_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName977056 = new char[2];akaRandomName977056[0] = 127;akaRandomName977056[1] = '\\0';string num=akaRandomName977056;\n\n\nint k=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode num */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_getMinSwaps_string_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getMinSwaps(num,k);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName148168 = new char[2];akaRandomName148168[0] = 127;akaRandomName148168[1] = '\\0';string num=akaRandomName148168;\n\n\nint k=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode num */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int getMinSwaps(string num, int k)      {         auto num0 = num;         for (int i=0; i<k; i++)         {             std::next_permutation(num.begin(), num.end());         }                  int ret = 0;         for (int i=0; i<num.size(); i++)         {             int count = 0;             for (int j=0; j<num0.size(); j++)             {                 if (num0[j]==num[i])                 {                     num0[j] = '#';                     break;                 }                                     if (num0[j]=='#')                     continue;                 count++;             }             ret += count;         }         return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1850.Minimum-Adjacent-Swaps-to-Reach-the-Kth-Smallest-Number.cpp/Solution/getMinSwaps(string,int)"
    },
    {
        "f": [],
        "fm": "int minFlips(string s)      {         int n = s.size();                  vector<int>left0(n);         vector<int>left1(n);         vector<int>right0(n);         vector<int>right1(n);                  int sumLeft0 = 0, sumLeft1 = 0;         for (int i=0; i<n; i++)         {             if (i%2==0 && s[i]=='1' || i%2==1 && s[i]=='0')                 sumLeft0++;             if (i%2==0 && s[i]=='0' || i%2==1 && s[i]=='1')                 sumLeft1++;             left0[i] = sumLeft0;             left1[i] = sumLeft1;         }                  int sumRight0 = 0, sumRight1 = 0;         for (int i=n-1; i>=0; i--)         {             int j = n-1-i;             if (j%2==0 && s[i]=='1' || j%2==1 && s[i]=='0')                 sumRight0++;             if (j%2==0 && s[i]=='0' || j%2==1 && s[i]=='1')                 sumRight1++;             right0[i] = sumRight0;             right1[i] = sumRight1;         }                  int ret = n;         ret = min(ret, sumLeft0);         ret = min(ret, sumLeft1);         ret = min(ret, sumRight0);         ret = min(ret, sumRight1);                  for (int i=0; i<n-1; i++)         {             ret = min(ret, left0[i]+right1[i+1]);             ret = min(ret, left1[i]+right0[i+1]);         }                  return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minFlips(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)/s",
                                    "correspondingType": "string",
                                    "value": "2",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "61"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minFlips_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_minFlips_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName951623 = new char[2];akaRandomName951623[0] = 61;akaRandomName951623[1] = '\\0';string s=akaRandomName951623;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minFlips_string_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minFlips(s);\nAKA_fCall++;AKA_mark(\"Return from: ./17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName196693 = new char[2];akaRandomName196693[0] = 61;akaRandomName196693[1] = '\\0';string s=akaRandomName196693;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minFlips(string s)      {         int n = s.size();                  vector<int>left0(n);         vector<int>left1(n);         vector<int>right0(n);         vector<int>right1(n);                  int sumLeft0 = 0, sumLeft1 = 0;         for (int i=0; i<n; i++)         {             if (i%2==0 && s[i]=='1' || i%2==1 && s[i]=='0')                 sumLeft0++;             if (i%2==0 && s[i]=='0' || i%2==1 && s[i]=='1')                 sumLeft1++;             left0[i] = sumLeft0;             left1[i] = sumLeft1;         }                  int sumRight0 = 0, sumRight1 = 0;         for (int i=n-1; i>=0; i--)         {             int j = n-1-i;             if (j%2==0 && s[i]=='1' || j%2==1 && s[i]=='0')                 sumRight0++;             if (j%2==0 && s[i]=='0' || j%2==1 && s[i]=='1')                 sumRight1++;             right0[i] = sumRight0;             right1[i] = sumRight1;         }                  int ret = n;         ret = min(ret, sumLeft0);         ret = min(ret, sumLeft1);         ret = min(ret, sumRight0);         ret = min(ret, sumRight1);                  for (int i=0; i<n-1; i++)         {             ret = min(ret, left0[i]+right1[i+1]);             ret = min(ret, left1[i]+right0[i+1]);         }                  return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/17/1888.Minimum-Number-of-Flips-to-Make-the-Binary-String-Alternating.cpp/Solution/minFlips(string)"
    }
]