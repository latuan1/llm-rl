[
    {
        "f": [],
        "fm": "int minimumTime(string s)      {         int n = s.size();         vector<int>pre(n);                          vector<int>left(n);         left[0] = s[0]=='0'?0:1;         for (int i=1; i<n; i++)         {             if (s[i]=='0')                 left[i] = left[i-1];             else                 left[i] = min(2+left[i-1], i+1);         }                          vector<int>right(n);         right[n-1] = s[n-1]=='0'?0:1;         for (int i=n-2; i>=0; i--)         {             if (s[i]=='0')                 right[i] = right[i+1];             else                 right[i] = min(2+right[i+1], n-i);         }                  int ret = min(left[n-1], right[0]);         for (int i=1; i<n-1; i++)             ret = min(ret, left[i]+right[i+1]);                                  return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minimumTime(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)/s",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "-76"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minimumTime_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_minimumTime_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName509886 = new char[2];akaRandomName509886[0] = -76;akaRandomName509886[1] = '\\0';string s=akaRandomName509886;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minimumTime_string_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minimumTime(s);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName21235 = new char[2];akaRandomName21235[0] = -76;akaRandomName21235[1] = '\\0';string s=akaRandomName21235;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minimumTime(string s)      {         int n = s.size();         vector<int>pre(n);                          vector<int>left(n);         left[0] = s[0]=='0'?0:1;         for (int i=1; i<n; i++)         {             if (s[i]=='0')                 left[i] = left[i-1];             else                 left[i] = min(2+left[i-1], i+1);         }                          vector<int>right(n);         right[n-1] = s[n-1]=='0'?0:1;         for (int i=n-2; i>=0; i--)         {             if (s[i]=='0')                 right[i] = right[i+1];             else                 right[i] = min(2+right[i+1], n-i);         }                  int ret = min(left[n-1], right[0]);         for (int i=1; i<n-1; i++)             ret = min(ret, left[i]+right[i+1]);                                  return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v1.cpp/Solution/minimumTime(string)"
    },
    {
        "f": [],
        "fm": "int minimumTime(string s)      {         int n = s.size();                  vector<int>pre(n);                 pre[0] = (s[0]=='1');         for (int i=1; i<n; i++)             pre[i] = pre[i-1]+(s[i]=='1');                  vector<int>arr(n);         for (int i=0; i<n; i++)             arr[i] = 2*pre[i] - i;                  int ret = n;                 int preMax = 1;         for (int i=0; i<n; i++)         {             ret = min(ret, arr[i]-preMax+n);             preMax = max(preMax, arr[i]);         }                              return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minimumTime(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)/s",
                                    "correspondingType": "string",
                                    "value": "2",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "-36"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minimumTime_string_random_8(void) {\n{\nAKA_test_case_name=\"Solution_minimumTime_string_random_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName956855 = new char[2];akaRandomName956855[0] = -36;akaRandomName956855[1] = '\\0';string s=akaRandomName956855;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minimumTime_string_random_8\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minimumTime(s);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName670347 = new char[2];akaRandomName670347[0] = -36;akaRandomName670347[1] = '\\0';string s=akaRandomName670347;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minimumTime(string s)      {         int n = s.size();                  vector<int>pre(n);                 pre[0] = (s[0]=='1');         for (int i=1; i<n; i++)             pre[i] = pre[i-1]+(s[i]=='1');                  vector<int>arr(n);         for (int i=0; i<n; i++)             arr[i] = 2*pre[i] - i;                  int ret = n;                 int preMax = 1;         for (int i=0; i<n; i++)         {             ret = min(ret, arr[i]-preMax+n);             preMax = max(preMax, arr[i]);         }                              return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2167.Minimum-Time-to-Remove-All-Cars-Containing-Illegal-Goods_v2.cpp/Solution/minimumTime(string)"
    },
    {
        "f": [],
        "fm": "static bool cmp(pair<int,int>&a,pair<int,int>&b)     {         return a.second > b.second;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "cmp(pair<int,int>&,pair<int,int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.PairDataNode",
                                    "name": "a",
                                    "virtual_name": "EXPECTED_a",
                                    "dataType": "pair<int, int>",
                                    "realType": "pair<int,int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/a",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": {
                                        "first": "int",
                                        "second": "int"
                                    },
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "first",
                                            "virtual_name": "EXPECTED_a.first",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/a/first",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "second",
                                            "virtual_name": "EXPECTED_a.second",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/a/second",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.PairDataNode",
                                    "name": "b",
                                    "virtual_name": "EXPECTED_b",
                                    "dataType": "pair<int, int>",
                                    "realType": "pair<int,int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/b",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": {
                                        "first": "int",
                                        "second": "int"
                                    },
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "first",
                                            "virtual_name": "EXPECTED_b.first",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/b/first",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "second",
                                            "virtual_name": "EXPECTED_b.second",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/b/second",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.PairDataNode",
                                    "name": "a",
                                    "virtual_name": "a",
                                    "dataType": "pair<int, int>",
                                    "realType": "pair<int,int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/a",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": {
                                        "first": "int",
                                        "second": "int"
                                    },
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "first",
                                            "virtual_name": "a.first",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/a/first",
                                            "correspondingType": "int",
                                            "value": "-1664749836"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "second",
                                            "virtual_name": "a.second",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/a/second",
                                            "correspondingType": "int",
                                            "value": "-1647203630"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.PairDataNode",
                                    "name": "b",
                                    "virtual_name": "b",
                                    "dataType": "pair<int, int>",
                                    "realType": "pair<int,int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/b",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": {
                                        "first": "int",
                                        "second": "int"
                                    },
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "first",
                                            "virtual_name": "b.first",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/b/first",
                                            "correspondingType": "int",
                                            "value": "-1137920660"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "second",
                                            "virtual_name": "b.second",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/b/second",
                                            "correspondingType": "int",
                                            "value": "1728557217"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)/RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_cmp_pair_int_int_pair_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_cmp_pair_int_int_pair_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\npair<int, int> a;\n\n/* NormalNumberDataNode first */\na.first=-1664749836;\n/* NormalNumberDataNode second */\na.second=-1647203630;\n\npair<int, int> b;\n\n/* NormalNumberDataNode first */\nb.first=-1137920660;\n/* NormalNumberDataNode second */\nb.second=1728557217;\n\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PairDataNode a */\n/* NormalNumberDataNode first */\na.first=-1664749836;\n/* NormalNumberDataNode second */\na.second=-1647203630;\n/* PairDataNode b */\n/* NormalNumberDataNode first */\nb.first=-1137920660;\n/* NormalNumberDataNode second */\nb.second=1728557217;\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_cmp_pair_int_int_pair_int_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->cmp(a,b);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)\");\n\n\npair<int, int> EXPECTED_a;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\n\n\npair<int, int> EXPECTED_b;\n\n/* NormalNumberDataNode first */\n/* first : null value -> no code */\n/* NormalNumberDataNode second */\n/* second : null value -> no code */\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\npair<int, int> a;\n\n/* NormalNumberDataNode first */\na.first=-1664749836;\n/* NormalNumberDataNode second */\na.second=-1647203630;\n\npair<int, int> b;\n\n/* NormalNumberDataNode first */\nb.first=-1137920660;\n/* NormalNumberDataNode second */\nb.second=1728557217;\n\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PairDataNode a */\n/* NormalNumberDataNode first */\na.first=-1664749836;\n/* NormalNumberDataNode second */\na.second=-1647203630;\n/* PairDataNode b */\n/* NormalNumberDataNode first */\nb.first=-1137920660;\n/* NormalNumberDataNode second */\nb.second=1728557217;\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     static bool cmp(pair<int,int>&a,pair<int,int>&b)     {         return a.second > b.second;     } public:     int minimumOperations(vector<int>& nums)      {         int n = nums.size();         if (n==1) return 0;                  unordered_map<int,int>Map1;         unordered_map<int,int>Map2;         int count1 = 0, count2 = 0;         for (int i=0; i<n; i+=2)         {             Map1[nums[i]]++;             count1++;         }         for (int i=1; i<n; i+=2)         {             Map2[nums[i]]++;             count2++;         }                  vector<pair<int,int>>temp1(Map1.begin(), Map1.end());                 vector<pair<int,int>>temp2(Map2.begin(), Map2.end());         sort(temp1.begin(), temp1.end(), cmp);         sort(temp2.begin(), temp2.end(), cmp);                  if (temp1.size()==1) temp1.push_back({0,0});         if (temp2.size()==1) temp2.push_back({0,0});                          if (temp1[0].first!=temp2[0].first)             return n - temp1[0].second - temp2[0].second;         else         {             int x = count1 - temp1[0].second + count2 - temp2[1].second;             int y = count1 - temp1[1].second + count2 - temp2[0].second;             return min(x,y);         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/cmp(pair<int,int>&,pair<int,int>&)"
    },
    {
        "f": [],
        "fm": "int minimumOperations(vector<int>& nums)      {         int n = nums.size();         if (n==1) return 0;                  unordered_map<int,int>Map1;         unordered_map<int,int>Map2;         int count1 = 0, count2 = 0;         for (int i=0; i<n; i+=2)         {             Map1[nums[i]]++;             count1++;         }         for (int i=1; i<n; i+=2)         {             Map2[nums[i]]++;             count2++;         }                  vector<pair<int,int>>temp1(Map1.begin(), Map1.end());                 vector<pair<int,int>>temp2(Map2.begin(), Map2.end());         sort(temp1.begin(), temp1.end(), cmp);         sort(temp2.begin(), temp2.end(), cmp);                  if (temp1.size()==1) temp1.push_back({0,0});         if (temp2.size()==1) temp2.push_back({0,0});                          if (temp1[0].first!=temp2[0].first)             return n - temp1[0].second - temp2[0].second;         else         {             int x = count1 - temp1[0].second + count2 - temp2[1].second;             int y = count1 - temp1[1].second + count2 - temp2[0].second;             return min(x,y);         }     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minimumOperations(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-1494976570"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "-1713415045"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minimumOperations_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_minimumOperations_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1494976570;\nnums.push_back(nums_element0);\nint nums_element1=-1713415045;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minimumOperations_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minimumOperations(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1494976570;\nnums.push_back(nums_element0);\nint nums_element1=-1713415045;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minimumOperations(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-340470387"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minimumOperations_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_minimumOperations_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-340470387;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minimumOperations_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minimumOperations(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-340470387;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     static bool cmp(pair<int,int>&a,pair<int,int>&b)     {         return a.second > b.second;     } public:     int minimumOperations(vector<int>& nums)      {         int n = nums.size();         if (n==1) return 0;                  unordered_map<int,int>Map1;         unordered_map<int,int>Map2;         int count1 = 0, count2 = 0;         for (int i=0; i<n; i+=2)         {             Map1[nums[i]]++;             count1++;         }         for (int i=1; i<n; i+=2)         {             Map2[nums[i]]++;             count2++;         }                  vector<pair<int,int>>temp1(Map1.begin(), Map1.end());                 vector<pair<int,int>>temp2(Map2.begin(), Map2.end());         sort(temp1.begin(), temp1.end(), cmp);         sort(temp2.begin(), temp2.end(), cmp);                  if (temp1.size()==1) temp1.push_back({0,0});         if (temp2.size()==1) temp2.push_back({0,0});                          if (temp1[0].first!=temp2[0].first)             return n - temp1[0].second - temp2[0].second;         else         {             int x = count1 - temp1[0].second + count2 - temp2[1].second;             int y = count1 - temp1[1].second + count2 - temp2[0].second;             return min(x,y);         }     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2170.Minimum-Operations-to-Make-the-Array-Alternating.cpp/Solution/minimumOperations(vector<int>&)"
    },
    {
        "f": [],
        "fm": "long long minimumRemoval(vector<int>& beans)      {         sort(beans.rbegin(), beans.rend());         LL total = accumulate(beans.begin(), beans.end(), 0LL);          LL ret = LLONG_MAX;         for (int i=0; i<beans.size(); i++)         {                         ret = min(ret, total - (LL)beans[i]*(i+1));         }         return ret;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2171.Removing-Minimum-Number-of-Magic-Beans.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minimumRemoval(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "long long",
                            "realType": "long long",
                            "functionNode": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "beans",
                                    "virtual_name": "EXPECTED_beans",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)/beans",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "beans",
                                    "virtual_name": "beans",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)/beans",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "beans_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)/beans/element #0",
                                            "correspondingType": "int",
                                            "value": "-400642903"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "beans_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)/beans/element #1",
                                            "correspondingType": "int",
                                            "value": "695627666"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)/RETURN",
                                    "correspondingType": "long long",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minimumRemoval_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_minimumRemoval_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> beans;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode beans */\nint beans_element0=-400642903;\nbeans.push_back(beans_element0);\nint beans_element1=695627666;\nbeans.push_back(beans_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minimumRemoval_vector_int_random_3\");long long AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minimumRemoval(beans);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)\");\n\n\nvector<int> EXPECTED_beans;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> beans;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode beans */\nint beans_element0=-400642903;\nbeans.push_back(beans_element0);\nint beans_element1=695627666;\nbeans.push_back(beans_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     long long minimumRemoval(vector<int>& beans)      {         sort(beans.rbegin(), beans.rend());         LL total = accumulate(beans.begin(), beans.end(), 0LL);          LL ret = LLONG_MAX;         for (int i=0; i<beans.size(); i++)         {                         ret = min(ret, total - (LL)beans[i]*(i+1));         }         return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2171.Removing-Minimum-Number-of-Magic-Beans.cpp/Solution/minimumRemoval(vector<int>&)"
    },
    {
        "f": [],
        "fm": "int minMovesToMakePalindrome(string s)      {         int n = s.size();         int ret = 0;         int count = 0; // how many left-pair characters have been processed                  for (int i=0; i<n/2; i++)         {                         int j = n-1-count;             while (s[j]!=s[i]) j--;             if (i==j)             {                 int k = n/2-j;                 ret += k;             }             else             {                 int k = n-1-count-j;                 ret += k;                 while (k--)                 {                     swap(s[j], s[j+1]);                     j++;                 }                          count++;             }         }                  return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minMovesToMakePalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)/s",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "-106"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minMovesToMakePalindrome_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_minMovesToMakePalindrome_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName847525 = new char[2];akaRandomName847525[0] = -106;akaRandomName847525[1] = '\\0';string s=akaRandomName847525;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minMovesToMakePalindrome_string_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minMovesToMakePalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName595008 = new char[2];akaRandomName595008[0] = -106;akaRandomName595008[1] = '\\0';string s=akaRandomName595008;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minMovesToMakePalindrome(string s)      {         int n = s.size();         int ret = 0;         int count = 0; // how many left-pair characters have been processed                  for (int i=0; i<n/2; i++)         {                         int j = n-1-count;             while (s[j]!=s[i]) j--;             if (i==j)             {                 int k = n/2-j;                 ret += k;             }             else             {                 int k = n-1-count-j;                 ret += k;                 while (k--)                 {                     swap(s[j], s[j+1]);                     j++;                 }                          count++;             }         }                  return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v1.cpp/Solution/minMovesToMakePalindrome(string)"
    },
    {
        "f": [
            "int temp[50001];"
        ],
        "fm": "int minMovesToMakePalindrome(string s)      {         int n = s.size();         int count = 0; // how many left-pair characters have been processed         int ret = 0;                  unordered_map<char, deque<int>>dq;         for (int i=0; i<n; i++)             dq[s[i]].push_back(i);                  vector<int>arr;         for (int i=0; i<n; i++)         {             if (dq[s[i]].empty())                 continue;             else if (dq[s[i]].size()==1)             {                 ret += i + (n/2-count) - n/2;                 dq[s[i]].pop_back();             }             else             {                 arr.push_back(dq[s[i]].back());                 dq[s[i]].pop_front();                 dq[s[i]].pop_back();                 ret += i-count;                 count++;                             }         }                  reverse(arr.begin(), arr.end());         return ret + reversePairs(arr);     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.OneDimensionNumberDataNode",
                                                    "name": "temp",
                                                    "virtual_name": "AKA_INSTANCE___Solution->temp",
                                                    "dataType": "int[50001]",
                                                    "realType": "int[50001]",
                                                    "external": false,
                                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/temp",
                                                    "correspondingType": "",
                                                    "fixedSize": true,
                                                    "size": 50001
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minMovesToMakePalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)/s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)/s",
                                    "correspondingType": "string",
                                    "value": "3",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)/s/s[0]",
                                            "correspondingType": "char",
                                            "value": "38"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minMovesToMakePalindrome_string_random_5(void) {\n{\nAKA_test_case_name=\"Solution_minMovesToMakePalindrome_string_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode temp */\n;\n\n\nchar* akaRandomName541519 = new char[2];akaRandomName541519[0] = 38;akaRandomName541519[1] = '\\0';string s=akaRandomName541519;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minMovesToMakePalindrome_string_random_5\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minMovesToMakePalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode temp */\n;\n\n\nchar* akaRandomName470468 = new char[2];akaRandomName470468[0] = 38;akaRandomName470468[1] = '\\0';string s=akaRandomName470468;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     int temp[50001]; public:     int minMovesToMakePalindrome(string s)      {         int n = s.size();         int count = 0; // how many left-pair characters have been processed         int ret = 0;                  unordered_map<char, deque<int>>dq;         for (int i=0; i<n; i++)             dq[s[i]].push_back(i);                  vector<int>arr;         for (int i=0; i<n; i++)         {             if (dq[s[i]].empty())                 continue;             else if (dq[s[i]].size()==1)             {                 ret += i + (n/2-count) - n/2;                 dq[s[i]].pop_back();             }             else             {                 arr.push_back(dq[s[i]].back());                 dq[s[i]].pop_front();                 dq[s[i]].pop_back();                 ret += i-count;                 count++;                             }         }                  reverse(arr.begin(), arr.end());         return ret + reversePairs(arr);     }          int reversePairs(vector<int>& nums)      {         int n = nums.size();         vector<int>sorted = nums;                 return helper(nums, sorted, 0, n-1);             }      int helper(vector<int>& nums, vector<int>& sorted, int a, int b)     {         if (a>=b) return 0;         int ret = 0;         int mid = a+(b-a)/2;         ret += helper(nums, sorted, a, mid);         ret += helper(nums, sorted, mid+1, b);          for (int j=mid+1; j<=b; j++)         {             auto iter = upper_bound(sorted.begin()+a, sorted.begin()+mid+1, (long)nums[j]);             ret += sorted.begin()+mid+1 - iter;         }         sort(sorted.begin()+a, sorted.begin()+b+1);         return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/minMovesToMakePalindrome(string)"
    },
    {
        "f": [
            "int temp[50001];"
        ],
        "fm": "int reversePairs(vector<int>& nums)      {         int n = nums.size();         vector<int>sorted = nums;                 return helper(nums, sorted, 0, n-1);             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.OneDimensionNumberDataNode",
                                                    "name": "temp",
                                                    "virtual_name": "AKA_INSTANCE___Solution->temp",
                                                    "dataType": "int[50001]",
                                                    "realType": "int[50001]",
                                                    "external": false,
                                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/temp",
                                                    "correspondingType": "",
                                                    "fixedSize": true,
                                                    "size": 50001
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "reversePairs(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-1614944179"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "-1922597439"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_reversePairs_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_reversePairs_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode temp */\n;\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1614944179;\nnums.push_back(nums_element0);\nint nums_element1=-1922597439;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reversePairs_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reversePairs(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode temp */\n;\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1614944179;\nnums.push_back(nums_element0);\nint nums_element1=-1922597439;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     int temp[50001]; public:     int minMovesToMakePalindrome(string s)      {         int n = s.size();         int count = 0; // how many left-pair characters have been processed         int ret = 0;                  unordered_map<char, deque<int>>dq;         for (int i=0; i<n; i++)             dq[s[i]].push_back(i);                  vector<int>arr;         for (int i=0; i<n; i++)         {             if (dq[s[i]].empty())                 continue;             else if (dq[s[i]].size()==1)             {                 ret += i + (n/2-count) - n/2;                 dq[s[i]].pop_back();             }             else             {                 arr.push_back(dq[s[i]].back());                 dq[s[i]].pop_front();                 dq[s[i]].pop_back();                 ret += i-count;                 count++;                             }         }                  reverse(arr.begin(), arr.end());         return ret + reversePairs(arr);     }          int reversePairs(vector<int>& nums)      {         int n = nums.size();         vector<int>sorted = nums;                 return helper(nums, sorted, 0, n-1);             }      int helper(vector<int>& nums, vector<int>& sorted, int a, int b)     {         if (a>=b) return 0;         int ret = 0;         int mid = a+(b-a)/2;         ret += helper(nums, sorted, a, mid);         ret += helper(nums, sorted, mid+1, b);          for (int j=mid+1; j<=b; j++)         {             auto iter = upper_bound(sorted.begin()+a, sorted.begin()+mid+1, (long)nums[j]);             ret += sorted.begin()+mid+1 - iter;         }         sort(sorted.begin()+a, sorted.begin()+b+1);         return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/reversePairs(vector<int>&)"
    },
    {
        "f": [
            "int temp[50001];"
        ],
        "fm": "int helper(vector<int>& nums, vector<int>& sorted, int a, int b)     {         if (a>=b) return 0;         int ret = 0;         int mid = a+(b-a)/2;         ret += helper(nums, sorted, a, mid);         ret += helper(nums, sorted, mid+1, b);          for (int j=mid+1; j<=b; j++)         {             auto iter = upper_bound(sorted.begin()+a, sorted.begin()+mid+1, (long)nums[j]);             ret += sorted.begin()+mid+1 - iter;         }         sort(sorted.begin()+a, sorted.begin()+b+1);         return ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.OneDimensionNumberDataNode",
                                                    "name": "temp",
                                                    "virtual_name": "AKA_INSTANCE___Solution->temp",
                                                    "dataType": "int[50001]",
                                                    "realType": "int[50001]",
                                                    "external": false,
                                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/temp",
                                                    "correspondingType": "",
                                                    "fixedSize": true,
                                                    "size": 50001
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "helper(vector<int>&,vector<int>&,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "a",
                                    "virtual_name": "EXPECTED_a",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/a",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "sorted",
                                    "virtual_name": "EXPECTED_sorted",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/sorted",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "b",
                                    "virtual_name": "EXPECTED_b",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/b",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "1666186615"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "1216937014"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "sorted",
                                    "virtual_name": "sorted",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/sorted",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "sorted_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/sorted/element #0",
                                            "correspondingType": "int",
                                            "value": "154681356"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "a",
                                    "virtual_name": "a",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/a",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "b",
                                    "virtual_name": "b",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/b",
                                    "correspondingType": "int",
                                    "value": "1"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_helper_vector_int_vector_int_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_helper_vector_int_vector_int_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode temp */\n;\n\n\nvector<int> nums;\nvector<int> sorted;\n\n\nint a=0;\n\n\nint b=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1666186615;\nnums.push_back(nums_element0);\nint nums_element1=1216937014;\nnums.push_back(nums_element1);\n/* VectorDataNode sorted */\nint sorted_element0=154681356;\nsorted.push_back(sorted_element0);\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_helper_vector_int_vector_int_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->helper(nums,sorted,a,b);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)\");\n\n\nvector<int> EXPECTED_nums;\n\nvector<int> EXPECTED_sorted;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode temp */\n;\n\n\nvector<int> nums;\nvector<int> sorted;\n\n\nint a=0;\n\n\nint b=1;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1666186615;\nnums.push_back(nums_element0);\nint nums_element1=1216937014;\nnums.push_back(nums_element1);\n/* VectorDataNode sorted */\nint sorted_element0=154681356;\nsorted.push_back(sorted_element0);\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {     int temp[50001]; public:     int minMovesToMakePalindrome(string s)      {         int n = s.size();         int count = 0; // how many left-pair characters have been processed         int ret = 0;                  unordered_map<char, deque<int>>dq;         for (int i=0; i<n; i++)             dq[s[i]].push_back(i);                  vector<int>arr;         for (int i=0; i<n; i++)         {             if (dq[s[i]].empty())                 continue;             else if (dq[s[i]].size()==1)             {                 ret += i + (n/2-count) - n/2;                 dq[s[i]].pop_back();             }             else             {                 arr.push_back(dq[s[i]].back());                 dq[s[i]].pop_front();                 dq[s[i]].pop_back();                 ret += i-count;                 count++;                             }         }                  reverse(arr.begin(), arr.end());         return ret + reversePairs(arr);     }          int reversePairs(vector<int>& nums)      {         int n = nums.size();         vector<int>sorted = nums;                 return helper(nums, sorted, 0, n-1);             }      int helper(vector<int>& nums, vector<int>& sorted, int a, int b)     {         if (a>=b) return 0;         int ret = 0;         int mid = a+(b-a)/2;         ret += helper(nums, sorted, a, mid);         ret += helper(nums, sorted, mid+1, b);          for (int j=mid+1; j<=b; j++)         {             auto iter = upper_bound(sorted.begin()+a, sorted.begin()+mid+1, (long)nums[j]);             ret += sorted.begin()+mid+1 - iter;         }         sort(sorted.begin()+a, sorted.begin()+b+1);         return ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2193.Minimum-Number-of-Moves-to-Make-Palindrome_v2.cpp/Solution/helper(vector<int>&,vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "int maximumTop(vector<int>& nums, int K)      {         int n = nums.size();                 int ret = INT_MIN;         for (int i=1; i<=n; i++)         {             int k = K;             if (k<i-1) continue;             k -= (i-1);             int flag = 0;              if (k==0)                 flag = 1;             else if (k==1)                 flag = 0;             else if (k%2==0)                 flag = 1;             else if (k%2==1 && i<n)                 flag = 1;             else if (k%2==1 && i>1)                 flag = 1;              if (flag) ret = max(ret, nums[i-1]);         }         return ret==INT_MIN? -1:ret;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2202.Maximize-the-Topmost-Element-After-K-Moves.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumTop(vector<int>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "EXPECTED_K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/K",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "607671939"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "-837040825"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/K",
                                    "correspondingType": "int",
                                    "value": "-746850474"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumTop_vector_int_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_maximumTop_vector_int_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint K=-746850474;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=607671939;\nnums.push_back(nums_element0);\nint nums_element1=-837040825;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode K */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumTop_vector_int_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumTop(nums,K);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint K=-746850474;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=607671939;\nnums.push_back(nums_element0);\nint nums_element1=-837040825;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode K */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2202.Maximize-the-Topmost-Element-After-K-Moves.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumTop(vector<int>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "EXPECTED_K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/K",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "949220207"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/K",
                                    "correspondingType": "int",
                                    "value": "230035627"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumTop_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maximumTop_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint K=230035627;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=949220207;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode K */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumTop_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumTop(nums,K);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint K=230035627;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=949220207;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode K */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2202.Maximize-the-Topmost-Element-After-K-Moves.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumTop(vector<int>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "EXPECTED_K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/K",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "1251236843"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "820273363"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/K",
                                    "correspondingType": "int",
                                    "value": "101311355"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumTop_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maximumTop_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint K=101311355;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1251236843;\nnums.push_back(nums_element0);\nint nums_element1=820273363;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode K */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumTop_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumTop(nums,K);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint K=101311355;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1251236843;\nnums.push_back(nums_element0);\nint nums_element1=820273363;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode K */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int maximumTop(vector<int>& nums, int K)      {         int n = nums.size();                 int ret = INT_MIN;         for (int i=1; i<=n; i++)         {             int k = K;             if (k<i-1) continue;             k -= (i-1);             int flag = 0;              if (k==0)                 flag = 1;             else if (k==1)                 flag = 0;             else if (k%2==0)                 flag = 1;             else if (k%2==1 && i<n)                 flag = 1;             else if (k%2==1 && i>1)                 flag = 1;              if (flag) ret = max(ret, nums[i-1]);         }         return ret==INT_MIN? -1:ret;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2202.Maximize-the-Topmost-Element-After-K-Moves.cpp/Solution/maximumTop(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int minDeletion(vector<int>& nums)      {         int n = nums.size();         int ret = 0;                  int i = 0;                          while (i<n)         {                         int j = i+1;             while (j<n && nums[j]==nums[i])             {                 ret++;                 j++;             }                          if (j<n)             {                 i = j+1;             }             else             {                 ret++;                 break;             }                         }                  return ret;             }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minDeletion(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-1226614079"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/nums/element #1",
                                            "correspondingType": "int",
                                            "value": "1511061297"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minDeletion_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_minDeletion_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1226614079;\nnums.push_back(nums_element0);\nint nums_element1=1511061297;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minDeletion_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minDeletion(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1226614079;\nnums.push_back(nums_element0);\nint nums_element1=1511061297;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minDeletion(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/nums/element #0",
                                            "correspondingType": "int",
                                            "value": "-1682589252"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)/RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minDeletion_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_minDeletion_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1682589252;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minDeletion_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minDeletion(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1682589252;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     int minDeletion(vector<int>& nums)      {         int n = nums.size();         int ret = 0;                  int i = 0;                          while (i<n)         {                         int j = i+1;             while (j<n && nums[j]==nums[i])             {                 ret++;                 j++;             }                          if (j<n)             {                 i = j+1;             }             else             {                 ret++;                 break;             }                         }                  return ret;             } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2216.Minimum-Deletions-to-Make-Array-Beautiful.cpp/Solution/minDeletion(vector<int>&)"
    },
    {
        "f": [],
        "fm": "long long maximumBeauty(vector<int>& flowers, long long newFlowers, int target, int full, int partial)      {         sort(flowers.begin(), flowers.end());                  LL ret0 = 0;         while (flowers.size()>0 && flowers.back()>=target)         {             ret0 += full;             flowers.pop_back();         }                 if (flowers.empty()) return ret0;                  LL n = flowers.size();                         vector<LL>presum(n);         for (LL i=0; i<n; i++)             presum[i] = (i==0?0:presum[i-1])+flowers[i];         vector<LL>diff(n);         for (LL i=0; i<n; i++)             diff[i] = (i+1)*flowers[i] - presum[i];                                  LL ret = 0;                 for (int i=n-1; i>=0; i--)         {             if (newFlowers < 0) break;                          if (presum[i]+newFlowers >= (LL)(target-1)*(i+1))             {                 ret = max(ret, (LL)(target-1)*partial + (LL)(n-1-i)*full);                             }             else             {                 auto iter = upper_bound(diff.begin(), diff.begin()+i+1, newFlowers);                 int k = prev(iter) - diff.begin();                 LL total = presum[k] + newFlowers;                 LL each = total / (LL)(k+1);                 ret = max(ret, each*partial + (LL)(n-1-i)*full);                                                   }             newFlowers -= target-flowers[i];                      }                  if (newFlowers>=0)             ret = max(ret, n*full);                  return ret + ret0;     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2234.Maximum-Total-Beauty-of-the-Gardens.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumBeauty(vector<int>&,long long,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "long long",
                            "realType": "long long",
                            "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "newFlowers",
                                    "virtual_name": "EXPECTED_newFlowers",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/newFlowers",
                                    "correspondingType": "long long",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "full",
                                    "virtual_name": "EXPECTED_full",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/full",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "EXPECTED_target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/target",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "partial",
                                    "virtual_name": "EXPECTED_partial",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/partial",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "EXPECTED_flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "flowers_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers/element #0",
                                            "correspondingType": "int",
                                            "value": "-283655102"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "newFlowers",
                                    "virtual_name": "newFlowers",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/newFlowers",
                                    "correspondingType": "long long",
                                    "value": "-6764200232296292966"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/target",
                                    "correspondingType": "int",
                                    "value": "7"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "full",
                                    "virtual_name": "full",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/full",
                                    "correspondingType": "int",
                                    "value": "268807995"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "partial",
                                    "virtual_name": "partial",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/partial",
                                    "correspondingType": "int",
                                    "value": "-644413616"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/RETURN",
                                    "correspondingType": "long long",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumBeauty_vector_int_long_long_int_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_maximumBeauty_vector_int_long_long_int_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nlong long newFlowers=-6764200232296292966;\n\n\nint target=7;\n\n\nint full=268807995;\n\n\nint partial=-644413616;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=-283655102;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode newFlowers */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode full */\n/* NormalNumberDataNode partial */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumBeauty_vector_int_long_long_int_int_int_random_3\");long long AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumBeauty(flowers,newFlowers,target,full,partial);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)\");\n\n\nvector<int> EXPECTED_flowers;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nlong long newFlowers=-6764200232296292966;\n\n\nint target=7;\n\n\nint full=268807995;\n\n\nint partial=-644413616;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=-283655102;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode newFlowers */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode full */\n/* NormalNumberDataNode partial */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2234.Maximum-Total-Beauty-of-the-Gardens.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumBeauty(vector<int>&,long long,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "long long",
                            "realType": "long long",
                            "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "EXPECTED_flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "newFlowers",
                                    "virtual_name": "EXPECTED_newFlowers",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/newFlowers",
                                    "correspondingType": "long long",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "EXPECTED_target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/target",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "full",
                                    "virtual_name": "EXPECTED_full",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/full",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "partial",
                                    "virtual_name": "EXPECTED_partial",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/partial",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "flowers_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers/element #0",
                                            "correspondingType": "int",
                                            "value": "952377847"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "newFlowers",
                                    "virtual_name": "newFlowers",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/newFlowers",
                                    "correspondingType": "long long",
                                    "value": "820971258686183991"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/target",
                                    "correspondingType": "int",
                                    "value": "7"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "full",
                                    "virtual_name": "full",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/full",
                                    "correspondingType": "int",
                                    "value": "-1238337115"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "partial",
                                    "virtual_name": "partial",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/partial",
                                    "correspondingType": "int",
                                    "value": "-1487656998"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/RETURN",
                                    "correspondingType": "long long",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumBeauty_vector_int_long_long_int_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_maximumBeauty_vector_int_long_long_int_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nlong long newFlowers=820971258686183991;\n\n\nint target=7;\n\n\nint full=-1238337115;\n\n\nint partial=-1487656998;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=952377847;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode newFlowers */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode full */\n/* NormalNumberDataNode partial */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumBeauty_vector_int_long_long_int_int_int_random_4\");long long AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumBeauty(flowers,newFlowers,target,full,partial);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)\");\n\n\nvector<int> EXPECTED_flowers;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nlong long newFlowers=820971258686183991;\n\n\nint target=7;\n\n\nint full=-1238337115;\n\n\nint partial=-1487656998;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=952377847;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode newFlowers */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode full */\n/* NormalNumberDataNode partial */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "2234.Maximum-Total-Beauty-of-the-Gardens.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                    "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/AKA_INSTANCE___Solution",
                                            "correspondingType": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "/Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "maximumBeauty(vector<int>&,long long,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "long long",
                            "realType": "long long",
                            "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "EXPECTED_flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "EXPECTED_target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/target",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "partial",
                                    "virtual_name": "EXPECTED_partial",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/partial",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "newFlowers",
                                    "virtual_name": "EXPECTED_newFlowers",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/newFlowers",
                                    "correspondingType": "long long",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "full",
                                    "virtual_name": "EXPECTED_full",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/full",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "flowers",
                                    "virtual_name": "flowers",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "flowers_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/flowers/element #0",
                                            "correspondingType": "int",
                                            "value": "-997626865"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "newFlowers",
                                    "virtual_name": "newFlowers",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/newFlowers",
                                    "correspondingType": "long long",
                                    "value": "2089862145949832449"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "target",
                                    "virtual_name": "target",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/target",
                                    "correspondingType": "int",
                                    "value": "10"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "full",
                                    "virtual_name": "full",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/full",
                                    "correspondingType": "int",
                                    "value": "-364595851"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "partial",
                                    "virtual_name": "partial",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/partial",
                                    "correspondingType": "int",
                                    "value": "1147567983"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "long long",
                                    "realType": "long long",
                                    "external": false,
                                    "correspondingVar": "./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)/RETURN",
                                    "correspondingType": "long long",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_maximumBeauty_vector_int_long_long_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_maximumBeauty_vector_int_long_long_int_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nlong long newFlowers=2089862145949832449;\n\n\nint target=10;\n\n\nint full=-364595851;\n\n\nint partial=1147567983;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=-997626865;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode newFlowers */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode full */\n/* NormalNumberDataNode partial */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumBeauty_vector_int_long_long_int_int_int_random_1\");long long AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumBeauty(flowers,newFlowers,target,full,partial);\nAKA_fCall++;AKA_mark(\"Return from: ./20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)\");\n\n\nvector<int> EXPECTED_flowers;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> flowers;\n\n\nlong long newFlowers=2089862145949832449;\n\n\nint target=10;\n\n\nint full=-364595851;\n\n\nint partial=1147567983;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode flowers */\nint flowers_element0=-997626865;\nflowers.push_back(flowers_element0);\n/* NormalNumberDataNode newFlowers */\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode full */\n/* NormalNumberDataNode partial */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution { public:     long long maximumBeauty(vector<int>& flowers, long long newFlowers, int target, int full, int partial)      {         sort(flowers.begin(), flowers.end());                  LL ret0 = 0;         while (flowers.size()>0 && flowers.back()>=target)         {             ret0 += full;             flowers.pop_back();         }                 if (flowers.empty()) return ret0;                  LL n = flowers.size();                         vector<LL>presum(n);         for (LL i=0; i<n; i++)             presum[i] = (i==0?0:presum[i-1])+flowers[i];         vector<LL>diff(n);         for (LL i=0; i<n; i++)             diff[i] = (i+1)*flowers[i] - presum[i];                                  LL ret = 0;                 for (int i=n-1; i>=0; i--)         {             if (newFlowers < 0) break;                          if (presum[i]+newFlowers >= (LL)(target-1)*(i+1))             {                 ret = max(ret, (LL)(target-1)*partial + (LL)(n-1-i)*full);                             }             else             {                 auto iter = upper_bound(diff.begin(), diff.begin()+i+1, newFlowers);                 int k = prev(iter) - diff.begin();                 LL total = presum[k] + newFlowers;                 LL each = total / (LL)(k+1);                 ret = max(ret, each*partial + (LL)(n-1-i)*full);                                                   }             newFlowers -= target-flowers[i];                      }                  if (newFlowers>=0)             ret = max(ret, n*full);                  return ret + ret0;     } };",
        "c": [
            ""
        ],
        "path_fm": "/mnt/sdb2/LAB/test/2025.03.08/20/2234.Maximum-Total-Beauty-of-the-Gardens.cpp/Solution/maximumBeauty(vector<int>&,long long,int,int,int)"
    }
]