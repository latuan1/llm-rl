[
    {
        "f": [],
        "fm": "int totalHammingDistance(vector<int>& nums) {\r         int dist = 0;\r         for (int i = 0; i < 8 * sizeof(int); i++) {\r             int b1 = 0;\r             for (int n : nums) {\r                 b1 += n >> i & 1;\r             }\r             dist += b1 * (nums.size() - b1);\r         }\r         return dist;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 477 Total Hamming Distance.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "totalHammingDistance(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "-252728671"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "-1583628740"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_totalHammingDistance_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_totalHammingDistance_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 477 Total Hamming Distance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-252728671;\nnums.push_back(nums_element0);\nint nums_element1=-1583628740;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_totalHammingDistance_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->totalHammingDistance(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 477 Total Hamming Distance.cpp\\\\Solution\\\\totalHammingDistance(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 477 Total Hamming Distance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-252728671;\nnums.push_back(nums_element0);\nint nums_element1=-1583628740;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 477 Total Hamming Distance.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "totalHammingDistance(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_totalHammingDistance_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_totalHammingDistance_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 477 Total Hamming Distance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_totalHammingDistance_vector_int_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->totalHammingDistance(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 477 Total Hamming Distance.cpp\\\\Solution\\\\totalHammingDistance(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 477 Total Hamming Distance.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int totalHammingDistance(vector<int>& nums) {\r         int dist = 0;\r         for (int i = 0; i < 8 * sizeof(int); i++) {\r             int b1 = 0;\r             for (int n : nums) {\r                 b1 += n >> i & 1;\r             }\r             dist += b1 * (nums.size() - b1);\r         }\r         return dist;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 477 Total Hamming Distance.cpp\\Solution\\totalHammingDistance(vector<int>&)"
    },
    {
        "f": [],
        "fm": "string licenseKeyFormatting(string S, int K) {\r         string ans;\r         for (int i = S.size() - 1; i >= 0; i--) {\r             if (S[i] != '-') {\r                 if (ans.size() % (K + 1) == K) {\r                     ans += \"-\";\r                 }\r                 ans += toupper(S[i]);\r             }\r         }\r         reverse(ans.begin(), ans.end());\r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 482 License Key Formatting.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "licenseKeyFormatting(string,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "EXPECTED_K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\K",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "S",
                                    "virtual_name": "EXPECTED_S",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\S",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "S",
                                    "virtual_name": "S",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\S",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\K",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_licenseKeyFormatting_string_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_licenseKeyFormatting_string_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 482 License Key Formatting.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\n\n\nint K=0;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalNumberDataNode K */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_licenseKeyFormatting_string_int_directed_1\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->licenseKeyFormatting(S,K);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 482 License Key Formatting.cpp\\\\Solution\\\\licenseKeyFormatting(string,int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 482 License Key Formatting.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\n\n\nint K=0;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalNumberDataNode K */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 482 License Key Formatting.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "licenseKeyFormatting(string,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "S",
                                    "virtual_name": "EXPECTED_S",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\S",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "EXPECTED_K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\K",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "S",
                                    "virtual_name": "S",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\S",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "S[0]",
                                            "virtual_name": "S[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\S\\S[0]",
                                            "correspondingType": "char",
                                            "value": "68"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\K",
                                    "correspondingType": "int",
                                    "value": "-1192943647"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_licenseKeyFormatting_string_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_licenseKeyFormatting_string_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 482 License Key Formatting.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName487773 = new char[2];akaRandomName487773[0] = 68;akaRandomName487773[1] = '\\0';string S=akaRandomName487773;\n\n\nint K=-1192943647;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalNumberDataNode K */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_licenseKeyFormatting_string_int_random_1\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->licenseKeyFormatting(S,K);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 482 License Key Formatting.cpp\\\\Solution\\\\licenseKeyFormatting(string,int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 482 License Key Formatting.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName8964 = new char[2];akaRandomName8964[0] = 68;akaRandomName8964[1] = '\\0';string S=akaRandomName8964;\n\n\nint K=-1192943647;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalNumberDataNode K */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 482 License Key Formatting.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "licenseKeyFormatting(string,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "EXPECTED_K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\K",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "S",
                                    "virtual_name": "EXPECTED_S",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\S",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "S",
                                    "virtual_name": "S",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\S",
                                    "correspondingType": "string",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "K",
                                    "virtual_name": "K",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\K",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)\\RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_licenseKeyFormatting_string_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_licenseKeyFormatting_string_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 482 License Key Formatting.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\n\n\nint K=0;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalNumberDataNode K */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_licenseKeyFormatting_string_int_directed_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->licenseKeyFormatting(S,K);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 482 License Key Formatting.cpp\\\\Solution\\\\licenseKeyFormatting(string,int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 482 License Key Formatting.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring S=\"\";\n\n\nint K=0;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalNumberDataNode K */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     string licenseKeyFormatting(string S, int K) {\r         string ans;\r         for (int i = S.size() - 1; i >= 0; i--) {\r             if (S[i] != '-') {\r                 if (ans.size() % (K + 1) == K) {\r                     ans += \"-\";\r                 }\r                 ans += toupper(S[i]);\r             }\r         }\r         reverse(ans.begin(), ans.end());\r         return ans;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 482 License Key Formatting.cpp\\Solution\\licenseKeyFormatting(string,int)"
    },
    {
        "f": [],
        "fm": "int findMaxConsecutiveOnes(vector<int>& nums) {\r         int count = 0, max_len = 0;\r         for (int n : nums) {\r             count = count * n + n;\r             max_len = max(max_len, count);\r         }\r         return max_len;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 485 Max Consecutive Ones.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findMaxConsecutiveOnes(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "1193045471"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "515789951"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)\\nums\\element #2",
                                            "correspondingType": "int",
                                            "value": "-2095063516"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findMaxConsecutiveOnes_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_findMaxConsecutiveOnes_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 485 Max Consecutive Ones.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1193045471;\nnums.push_back(nums_element0);\nint nums_element1=515789951;\nnums.push_back(nums_element1);\nint nums_element2=-2095063516;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findMaxConsecutiveOnes_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findMaxConsecutiveOnes(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 485 Max Consecutive Ones.cpp\\\\Solution\\\\findMaxConsecutiveOnes(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 485 Max Consecutive Ones.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1193045471;\nnums.push_back(nums_element0);\nint nums_element1=515789951;\nnums.push_back(nums_element1);\nint nums_element2=-2095063516;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int findMaxConsecutiveOnes(vector<int>& nums) {\r         int count = 0, max_len = 0;\r         for (int n : nums) {\r             count = count * n + n;\r             max_len = max(max_len, count);\r         }\r         return max_len;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 485 Max Consecutive Ones.cpp\\Solution\\findMaxConsecutiveOnes(vector<int>&)"
    },
    {
        "f": [],
        "fm": "vector<int> constructRectangle(int area) {\r         int i = sqrt(area);\r         while (area % i) {\r             i--;\r         }\r         return {area / i, i};\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 492 Construct the Rectangle.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\constructRectangle(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "constructRectangle(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\constructRectangle(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "area",
                                    "virtual_name": "EXPECTED_area",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\constructRectangle(int)\\area",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\constructRectangle(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "area",
                                    "virtual_name": "area",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\constructRectangle(int)\\area",
                                    "correspondingType": "int",
                                    "value": "7"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\constructRectangle(int)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_constructRectangle_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_constructRectangle_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 492 Construct the Rectangle.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint area=7;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode area */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_constructRectangle_int_random_3\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->constructRectangle(area);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 492 Construct the Rectangle.cpp\\\\Solution\\\\constructRectangle(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 492 Construct the Rectangle.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint area=7;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode area */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<int> constructRectangle(int area) {\r         int i = sqrt(area);\r         while (area % i) {\r             i--;\r         }\r         return {area / i, i};\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 492 Construct the Rectangle.cpp\\Solution\\constructRectangle(int)"
    },
    {
        "f": [],
        "fm": "int findTargetSumWays(vector<int>& nums, int S) {\r         return dfs(nums, S, 0);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 494 Target Sum.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 494 Target Sum.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findTargetSumWays(vector<int>&,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "S",
                                    "virtual_name": "EXPECTED_S",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)\\S",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "461070778"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "S",
                                    "virtual_name": "S",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)\\S",
                                    "correspondingType": "int",
                                    "value": "577576141"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findTargetSumWays_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_findTargetSumWays_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 494 Target Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint S=577576141;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=461070778;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode S */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findTargetSumWays_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findTargetSumWays(nums,S);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 494 Target Sum.cpp\\\\Solution\\\\findTargetSumWays(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 494 Target Sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint S=577576141;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=461070778;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode S */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int findTargetSumWays(vector<int>& nums, int S) {\r         return dfs(nums, S, 0);\r     }\r     \r private:\r     int dfs(vector<int> &nums, long S, int ni) {\r         if (ni >= nums.size()) return S ? 0 : 1;\r         return dfs(nums, S + nums[ni], ni + 1) +\r             dfs(nums, S - nums[ni], ni + 1);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\findTargetSumWays(vector<int>&,int)"
    },
    {
        "f": [],
        "fm": "int dfs(vector<int> &nums, long S, int ni) {\r         if (ni >= nums.size()) return S ? 0 : 1;\r         return dfs(nums, S + nums[ni], ni + 1) +\r             dfs(nums, S - nums[ni], ni + 1);\r     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int findTargetSumWays(vector<int>& nums, int S) {\r         return dfs(nums, S, 0);\r     }\r     \r private:\r     int dfs(vector<int> &nums, long S, int ni) {\r         if (ni >= nums.size()) return S ? 0 : 1;\r         return dfs(nums, S + nums[ni], ni + 1) +\r             dfs(nums, S - nums[ni], ni + 1);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 494 Target Sum.cpp\\Solution\\dfs(vector<int>&,long,int)"
    },
    {
        "f": [],
        "fm": "vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\r         if (matrix.empty() || matrix[0].empty()) return {};\r         int m = matrix.size();\r         int n = matrix[0].size();\r         \r         vector<int> ans(m * n);\r         int i = 0, j = 0;\r         for (int &num : ans) {\r             num = matrix[i][j];\r             if ((i + j) % 2) {\r                 if (i >= m - 1) { j++; continue; }\r                 if (j <= 0)     { i++; continue; }\r                 i++; j--;\r             } else {\r                 if (j >= n - 1) { i++; continue; }\r                 if (i <= 0)     { j++; continue; }\r                 i--; j++;\r             }\r         }\r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 498 Diagonal Traverse.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findDiagonalOrder(vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "matrix",
                                    "virtual_name": "EXPECTED_matrix",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "matrix",
                                    "virtual_name": "matrix",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findDiagonalOrder_vector_vector_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_findDiagonalOrder_vector_vector_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 498 Diagonal Traverse.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findDiagonalOrder_vector_vector_int_directed_1\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findDiagonalOrder(matrix);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 498 Diagonal Traverse.cpp\\\\Solution\\\\findDiagonalOrder(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 498 Diagonal Traverse.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 498 Diagonal Traverse.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findDiagonalOrder(vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "matrix",
                                    "virtual_name": "EXPECTED_matrix",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "matrix",
                                    "virtual_name": "matrix",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findDiagonalOrder_vector_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_findDiagonalOrder_vector_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 498 Diagonal Traverse.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findDiagonalOrder_vector_vector_int_directed_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findDiagonalOrder(matrix);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 498 Diagonal Traverse.cpp\\\\Solution\\\\findDiagonalOrder(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 498 Diagonal Traverse.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 498 Diagonal Traverse.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findDiagonalOrder(vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<int>",
                            "realType": "vector<int>",
                            "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "matrix",
                                    "virtual_name": "EXPECTED_matrix",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "matrix",
                                    "virtual_name": "matrix",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "matrix_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 2,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "matrix_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #0\\element #0",
                                                    "correspondingType": "int",
                                                    "value": "1208883650"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "matrix_element0_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #0\\element #1",
                                                    "correspondingType": "int",
                                                    "value": "1214689841"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #1",
                                            "virtual_name": "matrix_element1",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #1",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 3,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "matrix_element1_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #1\\element #0",
                                                    "correspondingType": "int",
                                                    "value": "-1420519532"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "matrix_element1_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #1\\element #1",
                                                    "correspondingType": "int",
                                                    "value": "648043501"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #2",
                                                    "virtual_name": "matrix_element1_element2",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #1\\element #2",
                                                    "correspondingType": "int",
                                                    "value": "159415914"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #2",
                                            "virtual_name": "matrix_element2",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #2",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 2,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "matrix_element2_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #2\\element #0",
                                                    "correspondingType": "int",
                                                    "value": "580313180"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "matrix_element2_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\matrix\\element #2\\element #1",
                                                    "correspondingType": "int",
                                                    "value": "912577500"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findDiagonalOrder_vector_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_findDiagonalOrder_vector_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 498 Diagonal Traverse.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=1208883650;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=1214689841;\nmatrix_element0.push_back(matrix_element0_element1);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-1420519532;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=648043501;\nmatrix_element1.push_back(matrix_element1_element1);\nint matrix_element1_element2=159415914;\nmatrix_element1.push_back(matrix_element1_element2);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=580313180;\nmatrix_element2.push_back(matrix_element2_element0);\nint matrix_element2_element1=912577500;\nmatrix_element2.push_back(matrix_element2_element1);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findDiagonalOrder_vector_vector_int_random_2\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findDiagonalOrder(matrix);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 498 Diagonal Traverse.cpp\\\\Solution\\\\findDiagonalOrder(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_matrix;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 498 Diagonal Traverse.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> matrix;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode matrix */\nvector<int> matrix_element0;\nint matrix_element0_element0=1208883650;\nmatrix_element0.push_back(matrix_element0_element0);\nint matrix_element0_element1=1214689841;\nmatrix_element0.push_back(matrix_element0_element1);\nmatrix.push_back(matrix_element0);\nvector<int> matrix_element1;\nint matrix_element1_element0=-1420519532;\nmatrix_element1.push_back(matrix_element1_element0);\nint matrix_element1_element1=648043501;\nmatrix_element1.push_back(matrix_element1_element1);\nint matrix_element1_element2=159415914;\nmatrix_element1.push_back(matrix_element1_element2);\nmatrix.push_back(matrix_element1);\nvector<int> matrix_element2;\nint matrix_element2_element0=580313180;\nmatrix_element2.push_back(matrix_element2_element0);\nint matrix_element2_element1=912577500;\nmatrix_element2.push_back(matrix_element2_element1);\nmatrix.push_back(matrix_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<int> findDiagonalOrder(vector<vector<int>>& matrix) {\r         if (matrix.empty() || matrix[0].empty()) return {};\r         int m = matrix.size();\r         int n = matrix[0].size();\r         \r         vector<int> ans(m * n);\r         int i = 0, j = 0;\r         for (int &num : ans) {\r             num = matrix[i][j];\r             if ((i + j) % 2) {\r                 if (i >= m - 1) { j++; continue; }\r                 if (j <= 0)     { i++; continue; }\r                 i++; j--;\r             } else {\r                 if (j >= n - 1) { i++; continue; }\r                 if (i <= 0)     { j++; continue; }\r                 i--; j++;\r             }\r         }\r         return ans;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 498 Diagonal Traverse.cpp\\Solution\\findDiagonalOrder(vector<vector<int>>&)"
    },
    {
        "f": [
            "vector<uint8_t> ht = {2, 4, 4, 2, 1, 2, 2, 2, 1, 2,\r\n        2, 2, 4, 4, 1, 1, 1, 1, 2, 1, 1, 4, 1, 4, 1, 4};"
        ],
        "fm": "vector<string> findWords(vector<string>& words) {\r         vector<string> ans;\r         for (string &w : words) {\r             uint8_t byte = 7;\r             for (char ch : w) {\r                 byte &= ht[tolower(ch) - 'a'];\r                 if (!byte) {\r                     break;\r                 }\r             }\r             if (byte) {\r                 ans.push_back(w);\r             }\r         }\r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 500 Keyboard Row.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 500 Keyboard Row.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findWords(vector<string>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<string>",
                            "realType": "vector<string>",
                            "functionNode": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "words",
                                    "virtual_name": "EXPECTED_words",
                                    "dataType": "vector<string>",
                                    "realType": "vector<string>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "string"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "words",
                                    "virtual_name": "words",
                                    "dataType": "vector<string>",
                                    "realType": "vector<string>&",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "string",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalStringDataNode",
                                            "name": "element #0",
                                            "virtual_name": "words_element0",
                                            "dataType": "string",
                                            "realType": "string",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words\\element #0",
                                            "correspondingType": "string",
                                            "value": "1",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                                    "name": "element #0[0]",
                                                    "virtual_name": "words_element0[0]",
                                                    "dataType": "char",
                                                    "realType": "char",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words\\element #0\\element #0[0]",
                                                    "correspondingType": "char",
                                                    "value": "124"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalStringDataNode",
                                            "name": "element #1",
                                            "virtual_name": "words_element1",
                                            "dataType": "string",
                                            "realType": "string",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words\\element #1",
                                            "correspondingType": "string",
                                            "value": "1",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                                    "name": "element #1[0]",
                                                    "virtual_name": "words_element1[0]",
                                                    "dataType": "char",
                                                    "realType": "char",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words\\element #1\\element #1[0]",
                                                    "correspondingType": "char",
                                                    "value": "15"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalStringDataNode",
                                            "name": "element #2",
                                            "virtual_name": "words_element2",
                                            "dataType": "string",
                                            "realType": "string",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words\\element #2",
                                            "correspondingType": "string",
                                            "value": "1",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                                    "name": "element #2[0]",
                                                    "virtual_name": "words_element2[0]",
                                                    "dataType": "char",
                                                    "realType": "char",
                                                    "external": false,
                                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\words\\element #2\\element #2[0]",
                                                    "correspondingType": "char",
                                                    "value": "62"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<string>",
                                    "realType": "vector<string>",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "string"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findWords_vector_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_findWords_vector_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 500 Keyboard Row.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> words;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode words */\nchar* akaRandomName790014 = new char[2];akaRandomName790014[0] = 124;akaRandomName790014[1] = '\\0';string words_element0=akaRandomName790014;\nwords.push_back(words_element0);\nchar* akaRandomName655496 = new char[2];akaRandomName655496[0] = 15;akaRandomName655496[1] = '\\0';string words_element1=akaRandomName655496;\nwords.push_back(words_element1);\nchar* akaRandomName716560 = new char[2];akaRandomName716560[0] = 62;akaRandomName716560[1] = '\\0';string words_element2=akaRandomName716560;\nwords.push_back(words_element2);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findWords_vector_string_random_4\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findWords(words);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 500 Keyboard Row.cpp\\\\Solution\\\\findWords(vector<string>&)\");\n\n\nvector<string> EXPECTED_words;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 500 Keyboard Row.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> words;\nvector<string> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode words */\nchar* akaRandomName812905 = new char[2];akaRandomName812905[0] = 124;akaRandomName812905[1] = '\\0';string words_element0=akaRandomName812905;\nwords.push_back(words_element0);\nchar* akaRandomName804354 = new char[2];akaRandomName804354[0] = 15;akaRandomName804354[1] = '\\0';string words_element1=akaRandomName804354;\nwords.push_back(words_element1);\nchar* akaRandomName883240 = new char[2];akaRandomName883240[0] = 62;akaRandomName883240[1] = '\\0';string words_element2=akaRandomName883240;\nwords.push_back(words_element2);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<string> findWords(vector<string>& words) {\r         vector<string> ans;\r         for (string &w : words) {\r             uint8_t byte = 7;\r             for (char ch : w) {\r                 byte &= ht[tolower(ch) - 'a'];\r                 if (!byte) {\r                     break;\r                 }\r             }\r             if (byte) {\r                 ans.push_back(w);\r             }\r         }\r         return ans;\r     }\r \r private:\r     vector<uint8_t> ht = {2, 4, 4, 2, 1, 2, 2, 2, 1, 2,\r         2, 2, 4, 4, 1, 1, 1, 1, 2, 1, 1, 4, 1, 4, 1, 4};\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 500 Keyboard Row.cpp\\Solution\\findWords(vector<string>&)"
    },
    {
        "f": [],
        "fm": "string convertToBase7(int num) {\r         if (num == 0) return \"0\";\r         if (num  < 0) return \"-\" + convertToBase7(-num);\r         \r         string ans;\r         while (num) {\r             ans += num % 7 + '0';\r             num /= 7;\r         }\r         reverse(ans.begin(), ans.end());\r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 504 Base 7.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 504 Base 7.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "convertToBase7(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)\\num",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)\\num",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)\\RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_convertToBase7_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_convertToBase7_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 504 Base 7.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=0;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_convertToBase7_int_directed_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->convertToBase7(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 504 Base 7.cpp\\\\Solution\\\\convertToBase7(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 504 Base 7.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=0;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 504 Base 7.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 504 Base 7.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "convertToBase7(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "string",
                            "realType": "string",
                            "functionNode": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "num",
                                    "virtual_name": "EXPECTED_num",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)\\num",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "num",
                                    "virtual_name": "num",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)\\num",
                                    "correspondingType": "int",
                                    "value": "-1572093560"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)\\RETURN",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_convertToBase7_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_convertToBase7_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 504 Base 7.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=-1572093560;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_convertToBase7_int_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->convertToBase7(num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 504 Base 7.cpp\\\\Solution\\\\convertToBase7(int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 504 Base 7.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint num=-1572093560;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode num */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     string convertToBase7(int num) {\r         if (num == 0) return \"0\";\r         if (num  < 0) return \"-\" + convertToBase7(-num);\r         \r         string ans;\r         while (num) {\r             ans += num % 7 + '0';\r             num /= 7;\r         }\r         reverse(ans.begin(), ans.end());\r         return ans;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 504 Base 7.cpp\\Solution\\convertToBase7(int)"
    },
    {
        "f": [],
        "fm": "int fib(int N) {\r         vector<int> dp = {0, 1};\r         for (int i = 2; i <= N; i++) {\r             dp[i % 2] = dp[0] + dp[1];\r         }\r         return dp[N % 2];\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "6"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=6;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_directed_5\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=6;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "10"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=10;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_directed_6\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=10;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "9"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "9"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_directed_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=9;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "4"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=4;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_directed_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=4;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "5"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_directed_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "7"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_directed_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 509 Fibonacci Number.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "fib(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "EXPECTED_N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "N",
                                    "virtual_name": "N",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\N",
                                    "correspondingType": "int",
                                    "value": "8"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_fib_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_fib_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_fib_int_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->fib(N);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 509 Fibonacci Number.cpp\\\\Solution\\\\fib(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 509 Fibonacci Number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint N=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int fib(int N) {\r         vector<int> dp = {0, 1};\r         for (int i = 2; i <= N; i++) {\r             dp[i % 2] = dp[0] + dp[1];\r         }\r         return dp[N % 2];\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 509 Fibonacci Number.cpp\\Solution\\fib(int)"
    },
    {
        "f": [],
        "fm": "bool detectCapitalUse(string word) {\r         int cap_cnt = 0;\r         for (char ch : word) {\r             if (isupper(ch)) {\r                 cap_cnt++;\r             }\r         }\r         return cap_cnt == 0 ||\r             cap_cnt == 1 && isupper(word[0]) ||\r             cap_cnt == word.size();\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 520 Detect Capital.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json49\\LeetCode 520 Detect Capital.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "detectCapitalUse(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "word",
                                    "virtual_name": "EXPECTED_word",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)\\word",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "word",
                                    "virtual_name": "word",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)\\word",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "word[0]",
                                            "virtual_name": "word[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)\\word\\word[0]",
                                            "correspondingType": "char",
                                            "value": "-37"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_detectCapitalUse_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_detectCapitalUse_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 520 Detect Capital.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName897004 = new char[2];akaRandomName897004[0] = -37;akaRandomName897004[1] = '\\0';string word=akaRandomName897004;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_detectCapitalUse_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->detectCapitalUse(word);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json49\\\\LeetCode 520 Detect Capital.cpp\\\\Solution\\\\detectCapitalUse(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 520 Detect Capital.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName539523 = new char[2];akaRandomName539523[0] = -37;akaRandomName539523[1] = '\\0';string word=akaRandomName539523;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool detectCapitalUse(string word) {\r         int cap_cnt = 0;\r         for (char ch : word) {\r             if (isupper(ch)) {\r                 cap_cnt++;\r             }\r         }\r         return cap_cnt == 0 ||\r             cap_cnt == 1 && isupper(word[0]) ||\r             cap_cnt == word.size();\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json49\\LeetCode 520 Detect Capital.cpp\\Solution\\detectCapitalUse(string)"
    }
]