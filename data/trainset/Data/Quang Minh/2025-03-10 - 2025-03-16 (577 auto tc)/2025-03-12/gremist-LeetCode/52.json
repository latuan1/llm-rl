[
    {
        "f": [],
        "fm": "vector<vector<int>> imageSmoother(vector<vector<int>>& M) {\r         int m = M.size(), n = M[0].size();\r         vector<vector<int>> ans = M;\r         for (int i = 0; i < m; i++) {\r             for (int j = 0; j < n; j++) {\r                 int cnt = 1;\r                 if (i > 0) {\r                     ans[i][j] += M[i - 1][j];\r                     cnt++;\r                 }\r                 if (i < m - 1) {\r                     ans[i][j] += M[i + 1][j];\r                     cnt++;\r                 }\r                 if (j > 0) {\r                     ans[i][j] += M[i][j - 1];\r                     cnt++;\r                 }\r                 if (j < n - 1) {\r                     ans[i][j] += M[i][j + 1];\r                     cnt++;\r                 }\r                 if (i > 0 && j > 0) {\r                     ans[i][j] += M[i - 1][j - 1];\r                     cnt++;\r                 }\r                 if (i > 0 && j < n - 1) {\r                     ans[i][j] += M[i - 1][j + 1];\r                     cnt++;\r                 }\r                 if (i < m - 1 && j > 0) {\r                     ans[i][j] += M[i + 1][j - 1];\r                     cnt++;\r                 }\r                 if (i < m - 1 && j < n - 1) {\r                     ans[i][j] += M[i + 1][j + 1];\r                     cnt++;\r                 }\r                 ans[i][j] /= cnt;\r             }\r         }\r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 661 Image Smoother.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 661 Image Smoother.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "imageSmoother(vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "M",
                                    "virtual_name": "EXPECTED_M",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "M",
                                    "virtual_name": "M",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_imageSmoother_vector_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_imageSmoother_vector_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 661 Image Smoother.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> M;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode M */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_imageSmoother_vector_vector_int_directed_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->imageSmoother(M);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 661 Image Smoother.cpp\\\\Solution\\\\imageSmoother(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_M;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 661 Image Smoother.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> M;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode M */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 661 Image Smoother.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 661 Image Smoother.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "imageSmoother(vector<vector<int>>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "M",
                                    "virtual_name": "EXPECTED_M",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "M",
                                    "virtual_name": "M",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #0",
                                            "virtual_name": "M_element0",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M\\element #0",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 2,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "M_element0_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M\\element #0\\element #0",
                                                    "correspondingType": "int",
                                                    "value": "418"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #1",
                                                    "virtual_name": "M_element0_element1",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M\\element #0\\element #1",
                                                    "correspondingType": "int",
                                                    "value": "291"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                            "name": "element #1",
                                            "virtual_name": "M_element1",
                                            "dataType": "vector<int>",
                                            "realType": "vector<int>",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M\\element #1",
                                            "correspondingType": "STLListBaseType",
                                            "templateArg": "int",
                                            "size": 1,
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "element #0",
                                                    "virtual_name": "M_element1_element0",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\M\\element #1\\element #0",
                                                    "correspondingType": "int",
                                                    "value": "-306"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_imageSmoother_vector_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_imageSmoother_vector_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 661 Image Smoother.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> M;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode M */\nvector<int> M_element0;\nint M_element0_element0=418;\nM_element0.push_back(M_element0_element0);\nint M_element0_element1=291;\nM_element0.push_back(M_element0_element1);\nM.push_back(M_element0);\nvector<int> M_element1;\nint M_element1_element0=-306;\nM_element1.push_back(M_element1_element0);\nM.push_back(M_element1);\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_imageSmoother_vector_vector_int_random_3\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->imageSmoother(M);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 661 Image Smoother.cpp\\\\Solution\\\\imageSmoother(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_M;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 661 Image Smoother.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> M;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode M */\nvector<int> M_element0;\nint M_element0_element0=418;\nM_element0.push_back(M_element0_element0);\nint M_element0_element1=291;\nM_element0.push_back(M_element0_element1);\nM.push_back(M_element0);\nvector<int> M_element1;\nint M_element1_element0=-306;\nM_element1.push_back(M_element1_element0);\nM.push_back(M_element1);\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<vector<int>> imageSmoother(vector<vector<int>>& M) {\r         int m = M.size(), n = M[0].size();\r         vector<vector<int>> ans = M;\r         for (int i = 0; i < m; i++) {\r             for (int j = 0; j < n; j++) {\r                 int cnt = 1;\r                 if (i > 0) {\r                     ans[i][j] += M[i - 1][j];\r                     cnt++;\r                 }\r                 if (i < m - 1) {\r                     ans[i][j] += M[i + 1][j];\r                     cnt++;\r                 }\r                 if (j > 0) {\r                     ans[i][j] += M[i][j - 1];\r                     cnt++;\r                 }\r                 if (j < n - 1) {\r                     ans[i][j] += M[i][j + 1];\r                     cnt++;\r                 }\r                 if (i > 0 && j > 0) {\r                     ans[i][j] += M[i - 1][j - 1];\r                     cnt++;\r                 }\r                 if (i > 0 && j < n - 1) {\r                     ans[i][j] += M[i - 1][j + 1];\r                     cnt++;\r                 }\r                 if (i < m - 1 && j > 0) {\r                     ans[i][j] += M[i + 1][j - 1];\r                     cnt++;\r                 }\r                 if (i < m - 1 && j < n - 1) {\r                     ans[i][j] += M[i + 1][j + 1];\r                     cnt++;\r                 }\r                 ans[i][j] /= cnt;\r             }\r         }\r         return ans;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json52\\LeetCode 661 Image Smoother.cpp\\Solution\\imageSmoother(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "TreeNode* trimBST(TreeNode* root, int L, int R) {\r         if (!root) return NULL;\r         if (root->val < L) return trimBST(root->right, L, R);\r         if (root->val > R) return trimBST(root->left,  L, R);\r         root->left  = trimBST(root->left,  L, R);\r         root->right = trimBST(root->right, L, R);\r         return root;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 669 Trim a Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "trimBST(TreeNode*,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "R",
                                    "virtual_name": "EXPECTED_R",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\R",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "L",
                                    "virtual_name": "EXPECTED_L",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\L",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root\\root[0]",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root\\root",
                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "0"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "0"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "L",
                                    "virtual_name": "L",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\L",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "R",
                                    "virtual_name": "R",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\R",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\RETURN",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_trimBST_TreeNodemul_int_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_trimBST_TreeNodemul_int_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint L=0;\n\n\nint R=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode R */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_trimBST_TreeNodemul_int_int_directed_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->trimBST(root,L,R);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\Solution\\\\trimBST(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint L=0;\n\n\nint R=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode R */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 669 Trim a Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "trimBST(TreeNode*,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "R",
                                    "virtual_name": "EXPECTED_R",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\R",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "L",
                                    "virtual_name": "EXPECTED_L",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\L",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root\\root[0]",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root\\root",
                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "0"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "0"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                            "level": 1,
                                                            "size": 0
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "L",
                                    "virtual_name": "L",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\L",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "R",
                                    "virtual_name": "R",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\R",
                                    "correspondingType": "int",
                                    "value": "-1"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\RETURN",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_trimBST_TreeNodemul_int_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_trimBST_TreeNodemul_int_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint L=0;\n\n\nint R=-1;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode R */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_trimBST_TreeNodemul_int_int_directed_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->trimBST(root,L,R);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\Solution\\\\trimBST(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=0;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint L=0;\n\n\nint R=-1;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode R */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 669 Trim a Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "trimBST(TreeNode*,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "L",
                                    "virtual_name": "EXPECTED_L",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\L",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "R",
                                    "virtual_name": "EXPECTED_R",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\R",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root\\root[0]",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\root\\root",
                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "726"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "335"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                            "level": 1,
                                                            "size": 1,
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "left[0]",
                                                                    "virtual_name": "root[0].left[0]",
                                                                    "dataType": "TreeNode",
                                                                    "realType": "TreeNode",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left\\left[0]",
                                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "left",
                                                                            "virtual_name": "root[0].left[0]",
                                                                            "dataType": "::TreeNode",
                                                                            "realType": "::TreeNode",
                                                                            "external": false,
                                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left\\left",
                                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                            "rawType": "::TreeNode",
                                                                            "selectedConstructor": "TreeNode(int)",
                                                                            "variableType": "::TreeNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "TreeNode(int)",
                                                                                    "virtual_name": "root[0].left[0]",
                                                                                    "dataType": "::TreeNode",
                                                                                    "realType": "::TreeNode",
                                                                                    "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "root0_left0_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "-336"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "root[0].left[0].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "-315"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "left",
                                                                                    "virtual_name": "root[0].left[0].left",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left",
                                                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "right",
                                                                                    "virtual_name": "root[0].left[0].right",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right",
                                                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                            "level": 1,
                                                            "size": 1,
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "right[0]",
                                                                    "virtual_name": "root[0].right[0]",
                                                                    "dataType": "TreeNode",
                                                                    "realType": "TreeNode",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right\\right[0]",
                                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "right",
                                                                            "virtual_name": "root[0].right[0]",
                                                                            "dataType": "::TreeNode",
                                                                            "realType": "::TreeNode",
                                                                            "external": false,
                                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right\\right",
                                                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                            "rawType": "::TreeNode",
                                                                            "selectedConstructor": "TreeNode(int)",
                                                                            "variableType": "::TreeNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "TreeNode(int)",
                                                                                    "virtual_name": "root[0].right[0]",
                                                                                    "dataType": "::TreeNode",
                                                                                    "realType": "::TreeNode",
                                                                                    "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "root0_right0_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "-528"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "root[0].right[0].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "189"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "left",
                                                                                    "virtual_name": "root[0].right[0].left",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left",
                                                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "right",
                                                                                    "virtual_name": "root[0].right[0].right",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right",
                                                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "L",
                                    "virtual_name": "L",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\L",
                                    "correspondingType": "int",
                                    "value": "1780763910"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "R",
                                    "virtual_name": "R",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\R",
                                    "correspondingType": "int",
                                    "value": "1495039855"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)\\RETURN",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_trimBST_TreeNodemul_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_trimBST_TreeNodemul_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=726;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=335;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-336;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-315;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-528;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=189;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint L=1780763910;\n\n\nint R=1495039855;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode R */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_trimBST_TreeNodemul_int_int_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->trimBST(root,L,R);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\Solution\\\\trimBST(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=726;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=335;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-336;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-315;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-528;\nAKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\trimBST(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=189;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint L=1780763910;\n\n\nint R=1495039855;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode L */\n/* NormalNumberDataNode R */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* trimBST(TreeNode* root, int L, int R) {\r         if (!root) return NULL;\r         if (root->val < L) return trimBST(root->right, L, R);\r         if (root->val > R) return trimBST(root->left,  L, R);\r         root->left  = trimBST(root->left,  L, R);\r         root->right = trimBST(root->right, L, R);\r         return root;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\Solution\\trimBST(TreeNode*,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 669 Trim a Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "-561"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_0(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-561;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-561;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\json52\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 669 Trim a Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json52\\LeetCode 669 Trim a Binary Search Tree.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "int findLengthOfLCIS(vector<int>& nums) {\r         int ans = 0;\r         for (int i = 0, last = -1; i < nums.size(); i++) {\r             if (i > 0 && nums[i] <= nums[i - 1]) {\r                 last = i - 1;\r             }\r             ans = max(ans, i - last);\r         }\r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findLengthOfLCIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 5,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #2",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #3",
                                            "virtual_name": "nums_element3",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #3",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #4",
                                            "virtual_name": "nums_element4",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #4",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findLengthOfLCIS_vector_int_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_findLengthOfLCIS_vector_int_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLengthOfLCIS_vector_int_directed_5\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLengthOfLCIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\Solution\\\\findLengthOfLCIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findLengthOfLCIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 9,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #2",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #3",
                                            "virtual_name": "nums_element3",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #3",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #4",
                                            "virtual_name": "nums_element4",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #4",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #5",
                                            "virtual_name": "nums_element5",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #5",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #6",
                                            "virtual_name": "nums_element6",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #6",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #7",
                                            "virtual_name": "nums_element7",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #7",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #8",
                                            "virtual_name": "nums_element8",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #8",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findLengthOfLCIS_vector_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_findLengthOfLCIS_vector_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* element #5 : null value -> no code */\nnums.push_back(nums_element5);\n/* element #6 : null value -> no code */\nnums.push_back(nums_element6);\n/* element #7 : null value -> no code */\nnums.push_back(nums_element7);\n/* element #8 : null value -> no code */\nnums.push_back(nums_element8);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLengthOfLCIS_vector_int_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLengthOfLCIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\Solution\\\\findLengthOfLCIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* element #5 : null value -> no code */\nnums.push_back(nums_element5);\n/* element #6 : null value -> no code */\nnums.push_back(nums_element6);\n/* element #7 : null value -> no code */\nnums.push_back(nums_element7);\n/* element #8 : null value -> no code */\nnums.push_back(nums_element8);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findLengthOfLCIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findLengthOfLCIS_vector_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_findLengthOfLCIS_vector_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLengthOfLCIS_vector_int_directed_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLengthOfLCIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\Solution\\\\findLengthOfLCIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findLengthOfLCIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 4,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #2",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #3",
                                            "virtual_name": "nums_element3",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #3",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findLengthOfLCIS_vector_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_findLengthOfLCIS_vector_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLengthOfLCIS_vector_int_directed_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLengthOfLCIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\Solution\\\\findLengthOfLCIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findLengthOfLCIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 8,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #2",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #3",
                                            "virtual_name": "nums_element3",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #3",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #4",
                                            "virtual_name": "nums_element4",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #4",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #5",
                                            "virtual_name": "nums_element5",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #5",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #6",
                                            "virtual_name": "nums_element6",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #6",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #7",
                                            "virtual_name": "nums_element7",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #7",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findLengthOfLCIS_vector_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_findLengthOfLCIS_vector_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* element #5 : null value -> no code */\nnums.push_back(nums_element5);\n/* element #6 : null value -> no code */\nnums.push_back(nums_element6);\n/* element #7 : null value -> no code */\nnums.push_back(nums_element7);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLengthOfLCIS_vector_int_directed_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLengthOfLCIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\Solution\\\\findLengthOfLCIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* element #5 : null value -> no code */\nnums.push_back(nums_element5);\n/* element #6 : null value -> no code */\nnums.push_back(nums_element6);\n/* element #7 : null value -> no code */\nnums.push_back(nums_element7);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findLengthOfLCIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "-338"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "374"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findLengthOfLCIS_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_findLengthOfLCIS_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-338;\nnums.push_back(nums_element0);\nint nums_element1=374;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLengthOfLCIS_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLengthOfLCIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\Solution\\\\findLengthOfLCIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-338;\nnums.push_back(nums_element0);\nint nums_element1=374;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "findLengthOfLCIS(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 7,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #2",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #3",
                                            "virtual_name": "nums_element3",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #3",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #4",
                                            "virtual_name": "nums_element4",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #4",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #5",
                                            "virtual_name": "nums_element5",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #5",
                                            "correspondingType": "int",
                                            "value": "null"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #6",
                                            "virtual_name": "nums_element6",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\nums\\element #6",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_findLengthOfLCIS_vector_int_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_findLengthOfLCIS_vector_int_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* element #5 : null value -> no code */\nnums.push_back(nums_element5);\n/* element #6 : null value -> no code */\nnums.push_back(nums_element6);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLengthOfLCIS_vector_int_directed_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLengthOfLCIS(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\Solution\\\\findLengthOfLCIS(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\n/* element #0 : null value -> no code */\nnums.push_back(nums_element0);\n/* element #1 : null value -> no code */\nnums.push_back(nums_element1);\n/* element #2 : null value -> no code */\nnums.push_back(nums_element2);\n/* element #3 : null value -> no code */\nnums.push_back(nums_element3);\n/* element #4 : null value -> no code */\nnums.push_back(nums_element4);\n/* element #5 : null value -> no code */\nnums.push_back(nums_element5);\n/* element #6 : null value -> no code */\nnums.push_back(nums_element6);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int findLengthOfLCIS(vector<int>& nums) {\r         int ans = 0;\r         for (int i = 0, last = -1; i < nums.size(); i++) {\r             if (i > 0 && nums[i] <= nums[i - 1]) {\r                 last = i - 1;\r             }\r             ans = max(ans, i - last);\r         }\r         return ans;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json52\\LeetCode 674 Longest Continuous Increasing Subsequence.cpp\\Solution\\findLengthOfLCIS(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool validPalindrome(string s) {\r         int i = 0, j = s.size() - 1;\r         while (i < j) {\r             if (s[i] != s[j]) {\r                 break;\r             }\r             i++;\r             j--;\r         }\r         while (i < j) {\r             if (s[i + 1] != s[j] && s[i] != s[j - 1]) {\r                 return false;\r             }\r             i++;\r             j--;\r         }\r         return true;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "9",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_14(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName802884 = new char[2];akaRandomName802884[0] = 0;akaRandomName802884[1] = '\\0';string s=akaRandomName802884;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_14\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName336000 = new char[2];akaRandomName336000[0] = 0;akaRandomName336000[1] = '\\0';string s=akaRandomName336000;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "15",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName198923 = new char[3];akaRandomName198923[0] = 0;akaRandomName198923[1] = 0;akaRandomName198923[2] = '\\0';string s=akaRandomName198923;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName726084 = new char[3];akaRandomName726084[0] = 0;akaRandomName726084[1] = 0;akaRandomName726084[2] = '\\0';string s=akaRandomName726084;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "15",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_11(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName838236 = new char[3];akaRandomName838236[0] = 0;akaRandomName838236[1] = 0;akaRandomName838236[2] = '\\0';string s=akaRandomName838236;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_11\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName772788 = new char[3];akaRandomName772788[0] = 0;akaRandomName772788[1] = 0;akaRandomName772788[2] = '\\0';string s=akaRandomName772788;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "18",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_10(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_10\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName973157 = new char[3];akaRandomName973157[0] = 0;akaRandomName973157[1] = 0;akaRandomName973157[2] = '\\0';string s=akaRandomName973157;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_10\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName229908 = new char[3];akaRandomName229908[0] = 0;akaRandomName229908[1] = 0;akaRandomName229908[2] = '\\0';string s=akaRandomName229908;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "11",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_13(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_13\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName519979 = new char[3];akaRandomName519979[0] = 0;akaRandomName519979[1] = 0;akaRandomName519979[2] = '\\0';string s=akaRandomName519979;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_13\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName507259 = new char[3];akaRandomName507259[0] = 0;akaRandomName507259[1] = 0;akaRandomName507259[2] = '\\0';string s=akaRandomName507259;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 5,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "21",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_12(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_12\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName794937 = new char[3];akaRandomName794937[0] = 0;akaRandomName794937[1] = 0;akaRandomName794937[2] = '\\0';string s=akaRandomName794937;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_12\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName975488 = new char[3];akaRandomName975488[0] = 0;akaRandomName975488[1] = 0;akaRandomName975488[2] = '\\0';string s=akaRandomName975488;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 6,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "14",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName573227 = new char[3];akaRandomName573227[0] = 0;akaRandomName573227[1] = 0;akaRandomName573227[2] = '\\0';string s=akaRandomName573227;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName816329 = new char[3];akaRandomName816329[0] = 0;akaRandomName816329[1] = 0;akaRandomName816329[2] = '\\0';string s=akaRandomName816329;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 7,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "1",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "-52"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName555420 = new char[2];akaRandomName555420[0] = -52;akaRandomName555420[1] = '\\0';string s=akaRandomName555420;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName435814 = new char[2];akaRandomName435814[0] = -52;akaRandomName435814[1] = '\\0';string s=akaRandomName435814;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 8,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "4",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName779091 = new char[2];akaRandomName779091[0] = 0;akaRandomName779091[1] = '\\0';string s=akaRandomName779091;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName391380 = new char[2];akaRandomName391380[0] = 0;akaRandomName391380[1] = '\\0';string s=akaRandomName391380;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 9,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "8",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName227652 = new char[2];akaRandomName227652[0] = 0;akaRandomName227652[1] = '\\0';string s=akaRandomName227652;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName179896 = new char[2];akaRandomName179896[0] = 0;akaRandomName179896[1] = '\\0';string s=akaRandomName179896;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 10,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "17",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName17051 = new char[3];akaRandomName17051[0] = 0;akaRandomName17051[1] = 0;akaRandomName17051[2] = '\\0';string s=akaRandomName17051;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName634764 = new char[3];akaRandomName634764[0] = 0;akaRandomName634764[1] = 0;akaRandomName634764[2] = '\\0';string s=akaRandomName634764;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 11,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "18",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_8(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName436429 = new char[3];akaRandomName436429[0] = 0;akaRandomName436429[1] = 0;akaRandomName436429[2] = '\\0';string s=akaRandomName436429;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_8\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName850265 = new char[3];akaRandomName850265[0] = 0;akaRandomName850265[1] = 0;akaRandomName850265[2] = '\\0';string s=akaRandomName850265;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 12,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "7",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_7(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName786290 = new char[2];akaRandomName786290[0] = 0;akaRandomName786290[1] = '\\0';string s=akaRandomName786290;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_7\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName661639 = new char[2];akaRandomName661639[0] = 0;akaRandomName661639[1] = '\\0';string s=akaRandomName661639;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 13,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "5",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName73998 = new char[2];akaRandomName73998[0] = 0;akaRandomName73998[1] = '\\0';string s=akaRandomName73998;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_6\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName651325 = new char[2];akaRandomName651325[0] = 0;akaRandomName651325[1] = '\\0';string s=akaRandomName651325;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 14,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "6",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName425886 = new char[2];akaRandomName425886[0] = 0;akaRandomName425886[1] = '\\0';string s=akaRandomName425886;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName923375 = new char[2];akaRandomName923375[0] = 0;akaRandomName923375[1] = '\\0';string s=akaRandomName923375;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 15,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 680 Valid Palindrome II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "validPalindrome(string)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "EXPECTED_s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalStringDataNode",
                                    "name": "s",
                                    "virtual_name": "s",
                                    "dataType": "string",
                                    "realType": "string",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s",
                                    "correspondingType": "string",
                                    "value": "20",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[0]",
                                            "virtual_name": "s[0]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[0]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                            "name": "s[1]",
                                            "virtual_name": "s[1]",
                                            "dataType": "char",
                                            "realType": "char",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\s\\s[1]",
                                            "correspondingType": "char",
                                            "value": "0"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_validPalindrome_string_directed_9(void) {\n{\nAKA_test_case_name=\"Solution_validPalindrome_string_directed_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName91039 = new char[3];akaRandomName91039[0] = 0;akaRandomName91039[1] = 0;akaRandomName91039[2] = '\\0';string s=akaRandomName91039;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_validPalindrome_string_directed_9\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->validPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 680 Valid Palindrome II.cpp\\\\Solution\\\\validPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 680 Valid Palindrome II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName652795 = new char[3];akaRandomName652795[0] = 0;akaRandomName652795[1] = 0;akaRandomName652795[2] = '\\0';string s=akaRandomName652795;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool validPalindrome(string s) {\r         int i = 0, j = s.size() - 1;\r         while (i < j) {\r             if (s[i] != s[j]) {\r                 break;\r             }\r             i++;\r             j--;\r         }\r         while (i < j) {\r             if (s[i + 1] != s[j] && s[i] != s[j - 1]) {\r                 return false;\r             }\r             i++;\r             j--;\r         }\r         return true;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json52\\LeetCode 680 Valid Palindrome II.cpp\\Solution\\validPalindrome(string)"
    },
    {
        "f": [],
        "fm": "int calPoints(vector<string>& ops) {\r         vector<int> score;\r         for (string &str : ops) {\r             switch (str.front()) {\r             case '+':\r                 score.push_back(score.back() + score[score.size() - 2]);\r                 break;\r             case 'D':\r                 score.push_back(2 * score.back());\r                 break;\r             case 'C':\r                 score.pop_back();\r                 break;\r             default:\r                 score.push_back(stoi(str));\r             }\r         }\r         return accumulate(score.begin(), score.end(), 0);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 682 Baseball Game.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 682 Baseball Game.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "calPoints(vector<string>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "ops",
                                    "virtual_name": "EXPECTED_ops",
                                    "dataType": "vector<string>",
                                    "realType": "vector<string>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "string"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "ops",
                                    "virtual_name": "ops",
                                    "dataType": "vector<string>",
                                    "realType": "vector<string>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "string"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_calPoints_vector_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_calPoints_vector_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 682 Baseball Game.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> ops;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode ops */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_calPoints_vector_string_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->calPoints(ops);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 682 Baseball Game.cpp\\\\Solution\\\\calPoints(vector<string>&)\");\n\n\nvector<string> EXPECTED_ops;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 682 Baseball Game.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> ops;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode ops */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 682 Baseball Game.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json52\\LeetCode 682 Baseball Game.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "calPoints(vector<string>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "ops",
                                    "virtual_name": "EXPECTED_ops",
                                    "dataType": "vector<string>",
                                    "realType": "vector<string>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "string"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "ops",
                                    "virtual_name": "ops",
                                    "dataType": "vector<string>",
                                    "realType": "vector<string>&",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "string",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalStringDataNode",
                                            "name": "element #0",
                                            "virtual_name": "ops_element0",
                                            "dataType": "string",
                                            "realType": "string",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops\\element #0",
                                            "correspondingType": "string",
                                            "value": "1",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                                    "name": "element #0[0]",
                                                    "virtual_name": "ops_element0[0]",
                                                    "dataType": "char",
                                                    "realType": "char",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops\\element #0\\element #0[0]",
                                                    "correspondingType": "char",
                                                    "value": "27"
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalStringDataNode",
                                            "name": "element #1",
                                            "virtual_name": "ops_element1",
                                            "dataType": "string",
                                            "realType": "string",
                                            "external": false,
                                            "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops\\element #1",
                                            "correspondingType": "string",
                                            "value": "1",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.NormalCharacterDataNode",
                                                    "name": "element #1[0]",
                                                    "virtual_name": "ops_element1[0]",
                                                    "dataType": "char",
                                                    "realType": "char",
                                                    "external": false,
                                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\ops\\element #1\\element #1[0]",
                                                    "correspondingType": "char",
                                                    "value": "-33"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_calPoints_vector_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_calPoints_vector_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 682 Baseball Game.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> ops;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode ops */\nchar* akaRandomName228386 = new char[2];akaRandomName228386[0] = 27;akaRandomName228386[1] = '\\0';string ops_element0=akaRandomName228386;\nops.push_back(ops_element0);\nchar* akaRandomName956486 = new char[2];akaRandomName956486[0] = -33;akaRandomName956486[1] = '\\0';string ops_element1=akaRandomName956486;\nops.push_back(ops_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_calPoints_vector_string_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->calPoints(ops);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json52\\\\LeetCode 682 Baseball Game.cpp\\\\Solution\\\\calPoints(vector<string>&)\");\n\n\nvector<string> EXPECTED_ops;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 682 Baseball Game.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> ops;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode ops */\nchar* akaRandomName20951 = new char[2];akaRandomName20951[0] = 27;akaRandomName20951[1] = '\\0';string ops_element0=akaRandomName20951;\nops.push_back(ops_element0);\nchar* akaRandomName858690 = new char[2];akaRandomName858690[0] = -33;akaRandomName858690[1] = '\\0';string ops_element1=akaRandomName858690;\nops.push_back(ops_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int calPoints(vector<string>& ops) {\r         vector<int> score;\r         for (string &str : ops) {\r             switch (str.front()) {\r             case '+':\r                 score.push_back(score.back() + score[score.size() - 2]);\r                 break;\r             case 'D':\r                 score.push_back(2 * score.back());\r                 break;\r             case 'C':\r                 score.pop_back();\r                 break;\r             default:\r                 score.push_back(stoi(str));\r             }\r         }\r         return accumulate(score.begin(), score.end(), 0);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json52\\LeetCode 682 Baseball Game.cpp\\Solution\\calPoints(vector<string>&)"
    }
]