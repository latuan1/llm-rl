[
    {
        "f": [],
        "fm": "TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\r         return dfs(preorder, inorder, 0, 0, preorder.size());\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "buildTree(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "EXPECTED_preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "preorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\preorder\\element #0",
                                            "correspondingType": "int",
                                            "value": "929703905"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "preorder_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\preorder\\element #1",
                                            "correspondingType": "int",
                                            "value": "-640825261"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "preorder_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\preorder\\element #2",
                                            "correspondingType": "int",
                                            "value": "-1714570560"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "inorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder\\element #0",
                                            "correspondingType": "int",
                                            "value": "219959509"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "inorder_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder\\element #1",
                                            "correspondingType": "int",
                                            "value": "-1253923833"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "inorder_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder\\element #2",
                                            "correspondingType": "int",
                                            "value": "343911314"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_buildTree_vector_int_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_buildTree_vector_int_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=929703905;\npreorder.push_back(preorder_element0);\nint preorder_element1=-640825261;\npreorder.push_back(preorder_element1);\nint preorder_element2=-1714570560;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=219959509;\ninorder.push_back(inorder_element0);\nint inorder_element1=-1253923833;\ninorder.push_back(inorder_element1);\nint inorder_element2=343911314;\ninorder.push_back(inorder_element2);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildTree_vector_int_vector_int_random_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buildTree(preorder,inorder);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\Solution\\\\buildTree(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\nint preorder_element0=929703905;\npreorder.push_back(preorder_element0);\nint preorder_element1=-640825261;\npreorder.push_back(preorder_element1);\nint preorder_element2=-1714570560;\npreorder.push_back(preorder_element2);\n/* VectorDataNode inorder */\nint inorder_element0=219959509;\ninorder.push_back(inorder_element0);\nint inorder_element1=-1253923833;\ninorder.push_back(inorder_element1);\nint inorder_element2=343911314;\ninorder.push_back(inorder_element2);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\r         return dfs(preorder, inorder, 0, 0, preorder.size());\r     }\r     \r private:\r     TreeNode * dfs(vector<int> preorder, vector<int> &inorder, int pi, int ii, int size) {\r         if (size <= 0) return NULL;\r         for (int i = 0; i < size; i++) {\r             if (inorder[ii + i] == preorder[pi]) {\r                 TreeNode *root = new TreeNode(preorder[pi]);\r                 root->left  = dfs(preorder, inorder, pi + 1, ii, i);\r                 root->right = dfs(preorder, inorder, pi + i + 1, ii + i + 1, size - i - 1);\r                 return root;\r             }\r         }\r         throw logic_error(\"Unreachable code path\");\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode * dfs(vector<int> preorder, vector<int> &inorder, int pi, int ii, int size) {\r         if (size <= 0) return NULL;\r         for (int i = 0; i < size; i++) {\r             if (inorder[ii + i] == preorder[pi]) {\r                 TreeNode *root = new TreeNode(preorder[pi]);\r                 root->left  = dfs(preorder, inorder, pi + 1, ii, i);\r                 root->right = dfs(preorder, inorder, pi + i + 1, ii + i + 1, size - i - 1);\r                 return root;\r             }\r         }\r         throw logic_error(\"Unreachable code path\");\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "dfs(vector<int>,vector<int>&,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "EXPECTED_size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "EXPECTED_pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "EXPECTED_ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "EXPECTED_preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "preorder",
                                    "virtual_name": "preorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\preorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "preorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\preorder\\element #0",
                                            "correspondingType": "int",
                                            "value": "null"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "1"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_dfs_vector_int_vector_int_int_int_int_directed_3(void) {\n{\nAKA_test_case_name=\"Solution_dfs_vector_int_vector_int_int_int_int_directed_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint pi=0;\n\n\nint ii=0;\n\n\nint size=1;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_vector_int_vector_int_int_int_int_directed_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dfs(preorder,inorder,pi,ii,size);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\Solution\\\\dfs(vector<int>,vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_preorder;\n\nvector<int> EXPECTED_inorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> preorder;\nvector<int> inorder;\n\n\nint pi=0;\n\n\nint ii=0;\n\n\nint size=1;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode preorder */\n/* element #0 : null value -> no code */\npreorder.push_back(preorder_element0);\n/* VectorDataNode inorder */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\r         return dfs(preorder, inorder, 0, 0, preorder.size());\r     }\r     \r private:\r     TreeNode * dfs(vector<int> preorder, vector<int> &inorder, int pi, int ii, int size) {\r         if (size <= 0) return NULL;\r         for (int i = 0; i < size; i++) {\r             if (inorder[ii + i] == preorder[pi]) {\r                 TreeNode *root = new TreeNode(preorder[pi]);\r                 root->left  = dfs(preorder, inorder, pi + 1, ii, i);\r                 root->right = dfs(preorder, inorder, pi + i + 1, ii + i + 1, size - i - 1);\r                 return root;\r             }\r         }\r         throw logic_error(\"Unreachable code path\");\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\Solution\\dfs(vector<int>,vector<int>&,int,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "1405759310"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_0(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=1405759310;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=1405759310;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "-529429302"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_5(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_5\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-529429302;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_5\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-529429302;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_5\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\r         return dfs(inorder, postorder, 0, 0, inorder.size());\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "buildTree(vector<int>&,vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "EXPECTED_postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "inorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\inorder\\element #0",
                                            "correspondingType": "int",
                                            "value": "2129041718"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "postorder_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\postorder\\element #0",
                                            "correspondingType": "int",
                                            "value": "-1913624911"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "postorder_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\postorder\\element #1",
                                            "correspondingType": "int",
                                            "value": "1187896565"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_buildTree_vector_int_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_buildTree_vector_int_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\nint inorder_element0=2129041718;\ninorder.push_back(inorder_element0);\n/* VectorDataNode postorder */\nint postorder_element0=-1913624911;\npostorder.push_back(postorder_element0);\nint postorder_element1=1187896565;\npostorder.push_back(postorder_element1);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildTree_vector_int_vector_int_random_2\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buildTree(inorder,postorder);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\Solution\\\\buildTree(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_inorder;\n\nvector<int> EXPECTED_postorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\nint inorder_element0=2129041718;\ninorder.push_back(inorder_element0);\n/* VectorDataNode postorder */\nint postorder_element0=-1913624911;\npostorder.push_back(postorder_element0);\nint postorder_element1=1187896565;\npostorder.push_back(postorder_element1);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\r         return dfs(inorder, postorder, 0, 0, inorder.size());\r     }\r     \r private: \r     TreeNode * dfs(vector<int>& inorder, vector<int>& postorder, int ii, int pi, int size) {\r         if (size <= 0) return NULL;\r         for (int i = 0; i < size; i++) {\r             if (inorder[ii + i] == postorder[pi + size - 1]) {\r                 TreeNode *root = new TreeNode(postorder[pi + size - 1]); \r                 root->left  = dfs(inorder, postorder, ii, pi, i);\r                 root->right = dfs(inorder, postorder, ii + i + 1, pi + i, size - i - 1);\r                 return root;\r             }\r         }\r         throw logic_error(\"Unreachable code path\");\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\buildTree(vector<int>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode * dfs(vector<int>& inorder, vector<int>& postorder, int ii, int pi, int size) {\r         if (size <= 0) return NULL;\r         for (int i = 0; i < size; i++) {\r             if (inorder[ii + i] == postorder[pi + size - 1]) {\r                 TreeNode *root = new TreeNode(postorder[pi + size - 1]); \r                 root->left  = dfs(inorder, postorder, ii, pi, i);\r                 root->right = dfs(inorder, postorder, ii + i + 1, pi + i, size - i - 1);\r                 return root;\r             }\r         }\r         throw logic_error(\"Unreachable code path\");\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "dfs(vector<int>&,vector<int>&,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "EXPECTED_ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "EXPECTED_postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "EXPECTED_pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "EXPECTED_size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_dfs_vector_int_vector_int_int_int_int_directed_5(void) {\n{\nAKA_test_case_name=\"Solution_dfs_vector_int_vector_int_int_int_int_directed_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\n\n\nint ii=0;\n\n\nint pi=0;\n\n\nint size=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\n/* VectorDataNode postorder */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_vector_int_vector_int_int_int_int_directed_5\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dfs(inorder,postorder,ii,pi,size);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\Solution\\\\dfs(vector<int>&,vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_inorder;\n\nvector<int> EXPECTED_postorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\n\n\nint ii=0;\n\n\nint pi=0;\n\n\nint size=0;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\n/* VectorDataNode postorder */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "dfs(vector<int>&,vector<int>&,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "EXPECTED_size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "EXPECTED_postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "EXPECTED_pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "EXPECTED_ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "9"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_dfs_vector_int_vector_int_int_int_int_directed_6(void) {\n{\nAKA_test_case_name=\"Solution_dfs_vector_int_vector_int_int_int_int_directed_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\n\n\nint ii=0;\n\n\nint pi=0;\n\n\nint size=9;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\n/* VectorDataNode postorder */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_vector_int_vector_int_int_int_int_directed_6\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dfs(inorder,postorder,ii,pi,size);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\Solution\\\\dfs(vector<int>&,vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_inorder;\n\nvector<int> EXPECTED_postorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\n\n\nint ii=0;\n\n\nint pi=0;\n\n\nint size=9;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\n/* VectorDataNode postorder */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "dfs(vector<int>&,vector<int>&,int,int,int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "EXPECTED_ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "EXPECTED_inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "EXPECTED_postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "EXPECTED_size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "null"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "EXPECTED_pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "inorder",
                                    "virtual_name": "inorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\inorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "postorder",
                                    "virtual_name": "postorder",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\postorder",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "ii",
                                    "virtual_name": "ii",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\ii",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "pi",
                                    "virtual_name": "pi",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\pi",
                                    "correspondingType": "int",
                                    "value": "0"
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "size",
                                    "virtual_name": "size",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\size",
                                    "correspondingType": "int",
                                    "value": "1"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_dfs_vector_int_vector_int_int_int_int_directed_4(void) {\n{\nAKA_test_case_name=\"Solution_dfs_vector_int_vector_int_int_int_int_directed_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\n\n\nint ii=0;\n\n\nint pi=0;\n\n\nint size=1;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\n/* VectorDataNode postorder */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_vector_int_vector_int_int_int_int_directed_4\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dfs(inorder,postorder,ii,pi,size);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\Solution\\\\dfs(vector<int>&,vector<int>&,int,int,int)\");\n\n\nvector<int> EXPECTED_inorder;\n\nvector<int> EXPECTED_postorder;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> inorder;\nvector<int> postorder;\n\n\nint ii=0;\n\n\nint pi=0;\n\n\nint size=1;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode inorder */\n/* VectorDataNode postorder */\n/* NormalNumberDataNode ii */\n/* NormalNumberDataNode pi */\n/* NormalNumberDataNode size */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\r         return dfs(inorder, postorder, 0, 0, inorder.size());\r     }\r     \r private: \r     TreeNode * dfs(vector<int>& inorder, vector<int>& postorder, int ii, int pi, int size) {\r         if (size <= 0) return NULL;\r         for (int i = 0; i < size; i++) {\r             if (inorder[ii + i] == postorder[pi + size - 1]) {\r                 TreeNode *root = new TreeNode(postorder[pi + size - 1]); \r                 root->left  = dfs(inorder, postorder, ii, pi, i);\r                 root->right = dfs(inorder, postorder, ii + i + 1, pi + i, size - i - 1);\r                 return root;\r             }\r         }\r         throw logic_error(\"Unreachable code path\");\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 106 Construct Binary Tree from Inorder and Postorder Traversal.cpp\\Solution\\dfs(vector<int>&,vector<int>&,int,int,int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "1412637239"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_1(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_1\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=1412637239;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_1\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=1412637239;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_1\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "vector<vector<int>> levelOrderBottom(TreeNode* root) {\r         if (!root) return {};\r         vector<vector<int>> ans;\r         \r         queue<TreeNode *> q;\r         q.push(root);\r         \r         while (!q.empty()) {\r             ans.emplace_back(q.size());\r             for (int &val : ans.back()) {\r                 TreeNode *front = q.front();\r                 q.pop();\r                 val = front->val;\r                 if (front->left) {\r                     q.push(front->left);\r                 }\r                 if (front->right) {\r                     q.push(front->right);\r                 }\r             }\r         }\r         reverse(ans.begin(), ans.end());\r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "levelOrderBottom(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root\\root[0]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "1465904695"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[1]",
                                            "virtual_name": "root[1]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root\\root[1]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[1]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[1]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root1_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "-408683827"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[1].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[1].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[1].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[2]",
                                            "virtual_name": "root[2]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root\\root[2]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[2]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[2]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root2_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "0"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[2].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[2].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[2].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_levelOrderBottom_TreeNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_levelOrderBottom_TreeNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1465904695;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\levelOrderBottom(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-408683827;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\levelOrderBottom(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\levelOrderBottom(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_levelOrderBottom_TreeNodemul_random_3\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->levelOrderBottom(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\Solution\\\\levelOrderBottom(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1465904695;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\levelOrderBottom(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-408683827;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\levelOrderBottom(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\levelOrderBottom(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "levelOrderBottom(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_levelOrderBottom_TreeNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_levelOrderBottom_TreeNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_levelOrderBottom_TreeNodemul_random_4\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->levelOrderBottom(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\Solution\\\\levelOrderBottom(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "levelOrderBottom(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 0
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_levelOrderBottom_TreeNodemul_directed_2(void) {\n{\nAKA_test_case_name=\"Solution_levelOrderBottom_TreeNodemul_directed_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_levelOrderBottom_TreeNodemul_directed_2\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->levelOrderBottom(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\Solution\\\\levelOrderBottom(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 3,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "levelOrderBottom(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 0
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_levelOrderBottom_TreeNodemul_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_levelOrderBottom_TreeNodemul_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_levelOrderBottom_TreeNodemul_directed_1\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->levelOrderBottom(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\Solution\\\\levelOrderBottom(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 4,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "levelOrderBottom(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "vector<vector<int>>",
                            "realType": "vector<vector<int>>",
                            "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 0
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "vector<vector<int>>",
                                    "realType": "vector<vector<int>>",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)\\RETURN",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "vector<int>"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_levelOrderBottom_TreeNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_levelOrderBottom_TreeNodemul_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_levelOrderBottom_TreeNodemul_directed_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->levelOrderBottom(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\Solution\\\\levelOrderBottom(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<vector<int>> levelOrderBottom(TreeNode* root) {\r         if (!root) return {};\r         vector<vector<int>> ans;\r         \r         queue<TreeNode *> q;\r         q.push(root);\r         \r         while (!q.empty()) {\r             ans.emplace_back(q.size());\r             for (int &val : ans.back()) {\r                 TreeNode *front = q.front();\r                 q.pop();\r                 val = front->val;\r                 if (front->left) {\r                     q.push(front->left);\r                 }\r                 if (front->right) {\r                     q.push(front->right);\r                 }\r             }\r         }\r         reverse(ans.begin(), ans.end());\r         return ans;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 107 Binary Tree Level Order Traversal II.cpp\\Solution\\levelOrderBottom(TreeNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "855107986"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_2(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_2\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=855107986;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_2\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=855107986;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_2\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "TreeNode* sortedArrayToBST(vector<int>& nums) {\r         return dfs(nums, 0, nums.size());\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "sortedArrayToBST(vector<int>&)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "EXPECTED_nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int"
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.stl.containers.sequence.VectorDataNode",
                                    "name": "nums",
                                    "virtual_name": "nums",
                                    "dataType": "vector<int>",
                                    "realType": "vector<int>&",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)\\nums",
                                    "correspondingType": "STLListBaseType",
                                    "templateArg": "int",
                                    "size": 3,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #0",
                                            "virtual_name": "nums_element0",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)\\nums\\element #0",
                                            "correspondingType": "int",
                                            "value": "1151553824"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #1",
                                            "virtual_name": "nums_element1",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)\\nums\\element #1",
                                            "correspondingType": "int",
                                            "value": "-1546487771"
                                        },
                                        {
                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                            "name": "element #2",
                                            "virtual_name": "nums_element2",
                                            "dataType": "int",
                                            "realType": "int",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)\\nums\\element #2",
                                            "correspondingType": "int",
                                            "value": "-451487649"
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_sortedArrayToBST_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_sortedArrayToBST_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1151553824;\nnums.push_back(nums_element0);\nint nums_element1=-1546487771;\nnums.push_back(nums_element1);\nint nums_element2=-451487649;\nnums.push_back(nums_element2);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedArrayToBST_vector_int_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedArrayToBST(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\\\Solution\\\\sortedArrayToBST(vector<int>&)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1151553824;\nnums.push_back(nums_element0);\nint nums_element1=-1546487771;\nnums.push_back(nums_element1);\nint nums_element2=-451487649;\nnums.push_back(nums_element2);\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* sortedArrayToBST(vector<int>& nums) {\r         return dfs(nums, 0, nums.size());\r     }\r     \r private:\r     TreeNode * dfs(vector<int> &nums, int begin, int end) {\r         if (begin >= end) return NULL;\r         int cut = (begin + end) / 2;\r         TreeNode *root = new TreeNode(nums[cut]);\r         root->left  = dfs(nums, begin, cut);\r         root->right = dfs(nums, cut + 1, end);\r         return root;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\sortedArrayToBST(vector<int>&)"
    },
    {
        "f": [],
        "fm": "TreeNode * dfs(vector<int> &nums, int begin, int end) {\r         if (begin >= end) return NULL;\r         int cut = (begin + end) / 2;\r         TreeNode *root = new TreeNode(nums[cut]);\r         root->left  = dfs(nums, begin, cut);\r         root->right = dfs(nums, cut + 1, end);\r         return root;\r     }",
        "datatest": [],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* sortedArrayToBST(vector<int>& nums) {\r         return dfs(nums, 0, nums.size());\r     }\r     \r private:\r     TreeNode * dfs(vector<int> &nums, int begin, int end) {\r         if (begin >= end) return NULL;\r         int cut = (begin + end) / 2;\r         TreeNode *root = new TreeNode(nums[cut]);\r         root->left  = dfs(nums, begin, cut);\r         root->right = dfs(nums, cut + 1, end);\r         return root;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 108 Convert Sorted Array to Binary Search Tree.cpp\\Solution\\dfs(vector<int>&,int,int)"
    },
    {
        "f": [],
        "fm": "ListNode(int x) : val(x), next(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___ListNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___ListNode",
                                    "dataType": "::ListNode",
                                    "realType": "::ListNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\AKA_INSTANCE___ListNode",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___ListNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___ListNode",
                                            "dataType": "::ListNode",
                                            "realType": "::ListNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\AKA_INSTANCE___ListNode",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                            "rawType": "::ListNode",
                                            "selectedConstructor": "ListNode(int)",
                                            "variableType": "::ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "ListNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___ListNode",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___ListNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___ListNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "next",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___ListNode->next",
                                                    "dataType": "ListNode*",
                                                    "realType": "ListNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___ListNode",
                                    "virtual_name": "AKA_INSTANCE___ListNode",
                                    "dataType": "::ListNode",
                                    "realType": "::ListNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\AKA_INSTANCE___ListNode",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___ListNode",
                                            "virtual_name": "AKA_INSTANCE___ListNode",
                                            "dataType": "::ListNode",
                                            "realType": "::ListNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\AKA_INSTANCE___ListNode",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                            "rawType": "::ListNode",
                                            "selectedConstructor": "ListNode(int)",
                                            "variableType": "::ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "ListNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___ListNode",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___ListNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "-1265268276"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___ListNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "next",
                                                    "virtual_name": "AKA_INSTANCE___ListNode->next",
                                                    "dataType": "ListNode*",
                                                    "realType": "ListNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "ListNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_ListNode_int_random_0(void) {\n{\nAKA_test_case_name=\"ListNode_int_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___ListNode */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___ListNode_x=-1265268276;\nAKA_mark(\"<<PRE-CALLING>> Test ListNode_int_random_0\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___ListNode\\\\AKA_INSTANCE___ListNode\\\\ListNode(int)\");AKA_fCall++;AKA_INSTANCE___ListNode = new ::ListNode(AKA_INSTANCE___ListNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nAKA_INSTANCE___ListNode->next;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___ListNode */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___ListNode_x=-1265268276;\nAKA_mark(\"<<PRE-CALLING>> Test ListNode_int_random_0\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___ListNode\\\\AKA_INSTANCE___ListNode\\\\ListNode(int)\");AKA_fCall++;AKA_INSTANCE___ListNode = new ::ListNode(AKA_INSTANCE___ListNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\nAKA_INSTANCE___ListNode->next;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "-191396944"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_3(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_3\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-191396944;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_3\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=-191396944;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_3\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "TreeNode* sortedListToBST(ListNode* head) {\r         if (!head) return NULL;\r         if (!head->next) return new TreeNode(head->val);\r         \r         ListNode *pi, *ps = head, *pf = head;\r         while (pf && pf->next) {\r             pi = ps;\r             ps = ps->next;\r             pf = pf->next->next;\r         }\r         \r         pi->next = NULL;\r         TreeNode *root = new TreeNode(ps->val);\r         root->left  = sortedListToBST(head);\r         root->right = sortedListToBST(ps->next);\r         pi->next = ps;\r         return root;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "sortedListToBST(ListNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "head",
                                    "virtual_name": "EXPECTED_head",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "head",
                                    "virtual_name": "head",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                    "level": 1,
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "head[0]",
                                            "virtual_name": "head[0]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head\\head[0]",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "head",
                                                    "virtual_name": "head[0]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head\\head",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "head[0]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "head0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "-459404613"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "head[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "955213388"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "head[0].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next",
                                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                            "level": 1,
                                                            "size": 1,
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "next[0]",
                                                                    "virtual_name": "head[0].next[0]",
                                                                    "dataType": "ListNode",
                                                                    "realType": "ListNode",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next\\next[0]",
                                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "next",
                                                                            "virtual_name": "head[0].next[0]",
                                                                            "dataType": "::ListNode",
                                                                            "realType": "::ListNode",
                                                                            "external": false,
                                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next\\next",
                                                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                                            "rawType": "::ListNode",
                                                                            "selectedConstructor": "ListNode(int)",
                                                                            "variableType": "::ListNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "ListNode(int)",
                                                                                    "virtual_name": "head[0].next[0]",
                                                                                    "dataType": "::ListNode",
                                                                                    "realType": "::ListNode",
                                                                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "head0_next0_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)\\x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "-2088496588"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "head[0].next[0].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "-752133790"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "next",
                                                                                    "virtual_name": "head[0].next[0].next",
                                                                                    "dataType": "ListNode*",
                                                                                    "realType": "ListNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next",
                                                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "head[1]",
                                            "virtual_name": "head[1]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head\\head[1]",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "head",
                                                    "virtual_name": "head[1]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head\\head",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "head[1]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "head1_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "-519293663"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "head[1].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "2098841749"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "head[1].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next",
                                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                            "level": 1,
                                                            "size": 1,
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "next[0]",
                                                                    "virtual_name": "head[1].next[0]",
                                                                    "dataType": "ListNode",
                                                                    "realType": "ListNode",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next\\next[0]",
                                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "next",
                                                                            "virtual_name": "head[1].next[0]",
                                                                            "dataType": "::ListNode",
                                                                            "realType": "::ListNode",
                                                                            "external": false,
                                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next\\next",
                                                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                                            "rawType": "::ListNode",
                                                                            "selectedConstructor": "ListNode(int)",
                                                                            "variableType": "::ListNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "ListNode(int)",
                                                                                    "virtual_name": "head[1].next[0]",
                                                                                    "dataType": "::ListNode",
                                                                                    "realType": "::ListNode",
                                                                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "head1_next0_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)\\x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "1403982667"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "head[1].next[0].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "1432428682"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "next",
                                                                                    "virtual_name": "head[1].next[0].next",
                                                                                    "dataType": "ListNode*",
                                                                                    "realType": "ListNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next",
                                                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_sortedListToBST_ListNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_sortedListToBST_ListNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-459404613;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=955213388;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-2088496588;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).val=-752133790;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-519293663;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1).val=2098841749;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_next0_x=1403982667;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1_DOT_next_0 = new ::ListNode(head1_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).val=1432428682;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).next;\nAKA_VECTOR_INIT_head_1_DOT_next.push_back(AKA_VECTOR_INIT_head_1_DOT_next_0);\n(*AKA_VECTOR_INIT_head_1).next = AKA_VECTOR_INIT_head_1_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedListToBST_ListNodemul_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedListToBST(head);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\Solution\\\\sortedListToBST(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=-459404613;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0).val=955213388;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_next0_x=-2088496588;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0_DOT_next_0 = new ::ListNode(head0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).val=-752133790;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0_DOT_next_0).next;\nAKA_VECTOR_INIT_head_0_DOT_next.push_back(AKA_VECTOR_INIT_head_0_DOT_next_0);\n(*AKA_VECTOR_INIT_head_0).next = AKA_VECTOR_INIT_head_0_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_x=-519293663;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::ListNode(head1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1).val=2098841749;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_head_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head1_next0_x=1403982667;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1_DOT_next_0 = new ::ListNode(head1_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).val=1432428682;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_1_DOT_next_0).next;\nAKA_VECTOR_INIT_head_1_DOT_next.push_back(AKA_VECTOR_INIT_head_1_DOT_next_0);\n(*AKA_VECTOR_INIT_head_1).next = AKA_VECTOR_INIT_head_1_DOT_next[0];\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "sortedListToBST(ListNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "TreeNode*",
                            "realType": "TreeNode*",
                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "head",
                                    "virtual_name": "EXPECTED_head",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "head",
                                    "virtual_name": "head",
                                    "dataType": "ListNode*",
                                    "realType": "ListNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head",
                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                    "level": 1,
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "head[0]",
                                            "virtual_name": "head[0]",
                                            "dataType": "ListNode",
                                            "realType": "ListNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head\\head[0]",
                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "head",
                                                    "virtual_name": "head[0]",
                                                    "dataType": "::ListNode",
                                                    "realType": "::ListNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\head\\head",
                                                    "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                    "rawType": "::ListNode",
                                                    "selectedConstructor": "ListNode(int)",
                                                    "variableType": "::ListNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "ListNode(int)",
                                                            "virtual_name": "head[0]",
                                                            "dataType": "::ListNode",
                                                            "realType": "::ListNode",
                                                            "functionNode": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "head0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\ListNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "0"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "head[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "next",
                                                            "virtual_name": "head[0].next",
                                                            "dataType": "ListNode*",
                                                            "realType": "ListNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode\\next",
                                                            "correspondingType": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\ListNode",
                                                            "level": 1,
                                                            "size": 0
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)\\RETURN",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_sortedListToBST_ListNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_sortedListToBST_ListNodemul_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next = nullptr;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sortedListToBST_ListNodemul_directed_0\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sortedListToBST(head);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\Solution\\\\sortedListToBST(ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_head;\n\n\n/* SubStructDataNode head */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint head0_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\\\sortedListToBST(ListNode*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::ListNode(head0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_head_0).next = nullptr;\n\nAKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0);\n\nListNode* head = AKA_VECTOR_INIT_head[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* PointerStructureDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     TreeNode* sortedListToBST(ListNode* head) {\r         if (!head) return NULL;\r         if (!head->next) return new TreeNode(head->val);\r         \r         ListNode *pi, *ps = head, *pf = head;\r         while (pf && pf->next) {\r             pi = ps;\r             ps = ps->next;\r             pf = pf->next->next;\r         }\r         \r         pi->next = NULL;\r         TreeNode *root = new TreeNode(ps->val);\r         root->left  = sortedListToBST(head);\r         root->right = sortedListToBST(ps->next);\r         pi->next = ps;\r         return root;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 109 Convert Sorted List to Binary Search Tree.cpp\\Solution\\sortedListToBST(ListNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 110 Balanced Binary Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "771935589"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_4(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_4\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=771935589;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_4\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=771935589;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_4\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "bool isBalanced(TreeNode* root) {\r         return dfs(root) > -1;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 110 Balanced Binary Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "isBalanced(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "bool",
                            "realType": "bool",
                            "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)\\root\\root[0]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "1096457277"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[1]",
                                            "virtual_name": "root[1]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)\\root\\root[1]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[1]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[1]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root1_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "-818815311"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[1].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[1].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[1].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "bool",
                                    "realType": "bool",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)\\RETURN",
                                    "correspondingType": "bool",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_isBalanced_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1096457277;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-818815311;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\Solution\\\\isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1096457277;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-818815311;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool isBalanced(TreeNode* root) {\r         return dfs(root) > -1;\r     }\r     \r private:\r     int dfs(TreeNode *root) {\r         if (!root) return 0;\r         \r         int ld = dfs(root->left);\r         if (ld < 0) {\r             return -1;\r         }\r         \r         int rd = dfs(root->right);\r         if (rd < 0 || abs(ld - rd) > 1) {\r             return -1;\r         }\r         return max(ld, rd) + 1;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\isBalanced(TreeNode*)"
    },
    {
        "f": [],
        "fm": "int dfs(TreeNode *root) {\r         if (!root) return 0;\r         \r         int ld = dfs(root->left);\r         if (ld < 0) {\r             return -1;\r         }\r         \r         int rd = dfs(root->right);\r         if (rd < 0 || abs(ld - rd) > 1) {\r             return -1;\r         }\r         return max(ld, rd) + 1;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 110 Balanced Binary Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\dfs(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "dfs(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\dfs(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\dfs(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\dfs(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\dfs(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 0
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\dfs(TreeNode*)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_dfs_TreeNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dfs(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\Solution\\\\dfs(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 110 Balanced Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nTreeNode* root = nullptr;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool isBalanced(TreeNode* root) {\r         return dfs(root) > -1;\r     }\r     \r private:\r     int dfs(TreeNode *root) {\r         if (!root) return 0;\r         \r         int ld = dfs(root->left);\r         if (ld < 0) {\r             return -1;\r         }\r         \r         int rd = dfs(root->right);\r         if (rd < 0 || abs(ld - rd) > 1) {\r             return -1;\r         }\r         return max(ld, rd) + 1;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 110 Balanced Binary Tree.cpp\\Solution\\dfs(TreeNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 111 Minimum Depth of Binary Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\TreeNode(int)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.StructDataNode",
                                    "name": "AKA_INSTANCE___TreeNode",
                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                    "dataType": "::TreeNode",
                                    "realType": "::TreeNode",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                            "name": "AKA_INSTANCE___TreeNode",
                                            "virtual_name": "AKA_INSTANCE___TreeNode",
                                            "dataType": "::TreeNode",
                                            "realType": "::TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\AKA_INSTANCE___TreeNode",
                                            "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                            "rawType": "::TreeNode",
                                            "selectedConstructor": "TreeNode(int)",
                                            "variableType": "::TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "TreeNode(int)",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\TreeNode(int)",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "x",
                                                            "virtual_name": "AKA_INSTANCE___TreeNode_x",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\TreeNode(int)\\x",
                                                            "correspondingType": "int",
                                                            "value": "224809459"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                    "name": "val",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->val",
                                                    "dataType": "int",
                                                    "realType": "int",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\val",
                                                    "correspondingType": "int",
                                                    "value": "null"
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "left",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->left",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\left",
                                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                },
                                                {
                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                    "name": "right",
                                                    "virtual_name": "AKA_INSTANCE___TreeNode->right",
                                                    "dataType": "TreeNode*",
                                                    "realType": "TreeNode*",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\right",
                                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode",
                                                    "level": 1
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "TreeNode(int)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "",
                            "realType": "",
                            "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\TreeNode(int)"
                        }
                    ]
                },
                "td": "void AKA_TEST_TreeNode_int_random_6(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_6\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=224809459;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_6\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=224809459;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_6\");AKA_mark(\"Calling: .\\\\json36\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "int minDepth(TreeNode* root) {\r         if (!root) return 0;\r         if (!root->left)  return minDepth(root->right) + 1;\r         if (!root->right) return minDepth(root->left)  + 1;\r         return min(minDepth(root->left), minDepth(root->right)) + 1;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 111 Minimum Depth of Binary Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minDepth(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 1,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root\\root[0]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "0"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1,
                                                            "size": 0
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1,
                                                            "size": 0
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minDepth_TreeNodemul_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_minDepth_TreeNodemul_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right = nullptr;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minDepth_TreeNodemul_directed_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minDepth(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\Solution\\\\minDepth(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left = nullptr;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right = nullptr;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {
                    "type": "com.dse.testdata.object.UnitUnderTestNode",
                    "name": "LeetCode 111 Minimum Depth of Binary Tree.cpp",
                    "virtual_name": "NON_VALUE",
                    "sourceNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp",
                    "children": [
                        {
                            "type": "com.dse.testdata.object.GlobalRootDataNode",
                            "name": "GLOBAL",
                            "virtual_name": "NON_VALUE",
                            "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "EXPECTED_AKA_GLOBAL_AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution"
                                }
                            ],
                            "level": "GLOBAL",
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.ClassDataNode",
                                    "name": "AKA_INSTANCE___Solution",
                                    "virtual_name": "AKA_INSTANCE___Solution",
                                    "dataType": "::Solution",
                                    "realType": "::Solution",
                                    "external": true,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                    "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution",
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.SubClassDataNode",
                                            "name": "AKA_INSTANCE___Solution",
                                            "virtual_name": "AKA_INSTANCE___Solution",
                                            "dataType": "::Solution",
                                            "realType": "::Solution",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\AKA_INSTANCE___Solution",
                                            "correspondingType": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution",
                                            "rawType": "::Solution",
                                            "selectedConstructor": "Solution()",
                                            "variableType": "::Solution",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                    "name": "Solution()",
                                                    "virtual_name": "AKA_INSTANCE___Solution",
                                                    "dataType": "::Solution",
                                                    "realType": "::Solution",
                                                    "functionNode": "\\Solution()"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "com.dse.testdata.object.SubprogramNode",
                            "name": "minDepth(TreeNode*)",
                            "virtual_name": "NON_VALUE",
                            "dataType": "int",
                            "realType": "int",
                            "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)",
                            "paramExpectedOuputs": [
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "EXPECTED_root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1
                                }
                            ],
                            "children": [
                                {
                                    "type": "com.dse.testdata.object.RootDataNode",
                                    "name": "STATIC",
                                    "virtual_name": "NON_VALUE",
                                    "functionNode": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)",
                                    "level": "STATIC"
                                },
                                {
                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                    "name": "root",
                                    "virtual_name": "root",
                                    "dataType": "TreeNode*",
                                    "realType": "TreeNode*",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root",
                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                    "level": 1,
                                    "size": 2,
                                    "children": [
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[0]",
                                            "virtual_name": "root[0]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root\\root[0]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[0]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[0]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root0_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "891566245"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[0].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[0].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[0].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1,
                                                            "size": 3,
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "right[0]",
                                                                    "virtual_name": "root[0].right[0]",
                                                                    "dataType": "TreeNode",
                                                                    "realType": "TreeNode",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right\\right[0]",
                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "right",
                                                                            "virtual_name": "root[0].right[0]",
                                                                            "dataType": "::TreeNode",
                                                                            "realType": "::TreeNode",
                                                                            "external": false,
                                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right\\right",
                                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                            "rawType": "::TreeNode",
                                                                            "selectedConstructor": "TreeNode(int)",
                                                                            "variableType": "::TreeNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "TreeNode(int)",
                                                                                    "virtual_name": "root[0].right[0]",
                                                                                    "dataType": "::TreeNode",
                                                                                    "realType": "::TreeNode",
                                                                                    "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "root0_right0_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "-2070330564"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "root[0].right[0].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "null"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "left",
                                                                                    "virtual_name": "root[0].right[0].left",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "right",
                                                                                    "virtual_name": "root[0].right[0].right",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "right[1]",
                                                                    "virtual_name": "root[0].right[1]",
                                                                    "dataType": "TreeNode",
                                                                    "realType": "TreeNode",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right\\right[1]",
                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "right",
                                                                            "virtual_name": "root[0].right[1]",
                                                                            "dataType": "::TreeNode",
                                                                            "realType": "::TreeNode",
                                                                            "external": false,
                                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right\\right",
                                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                            "rawType": "::TreeNode",
                                                                            "selectedConstructor": "TreeNode(int)",
                                                                            "variableType": "::TreeNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "TreeNode(int)",
                                                                                    "virtual_name": "root[0].right[1]",
                                                                                    "dataType": "::TreeNode",
                                                                                    "realType": "::TreeNode",
                                                                                    "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "root0_right1_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "0"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "root[0].right[1].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "null"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "left",
                                                                                    "virtual_name": "root[0].right[1].left",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "right",
                                                                                    "virtual_name": "root[0].right[1].right",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "com.dse.testdata.object.StructDataNode",
                                                                    "name": "right[2]",
                                                                    "virtual_name": "root[0].right[2]",
                                                                    "dataType": "TreeNode",
                                                                    "realType": "TreeNode",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right\\right[2]",
                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                    "children": [
                                                                        {
                                                                            "type": "com.dse.testdata.object.SubStructDataNode",
                                                                            "name": "right",
                                                                            "virtual_name": "root[0].right[2]",
                                                                            "dataType": "::TreeNode",
                                                                            "realType": "::TreeNode",
                                                                            "external": false,
                                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right\\right",
                                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                            "rawType": "::TreeNode",
                                                                            "selectedConstructor": "TreeNode(int)",
                                                                            "variableType": "::TreeNode",
                                                                            "children": [
                                                                                {
                                                                                    "type": "com.dse.testdata.object.ConstructorDataNode",
                                                                                    "name": "TreeNode(int)",
                                                                                    "virtual_name": "root[0].right[2]",
                                                                                    "dataType": "::TreeNode",
                                                                                    "realType": "::TreeNode",
                                                                                    "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                                                    "children": [
                                                                                        {
                                                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                            "name": "x",
                                                                                            "virtual_name": "root0_right2_x",
                                                                                            "dataType": "int",
                                                                                            "realType": "int",
                                                                                            "external": false,
                                                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                                            "correspondingType": "int",
                                                                                            "value": "0"
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                                    "name": "val",
                                                                                    "virtual_name": "root[0].right[2].val",
                                                                                    "dataType": "int",
                                                                                    "realType": "int",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                                                    "correspondingType": "int",
                                                                                    "value": "null"
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "left",
                                                                                    "virtual_name": "root[0].right[2].left",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                },
                                                                                {
                                                                                    "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                                                    "name": "right",
                                                                                    "virtual_name": "root[0].right[2].right",
                                                                                    "dataType": "TreeNode*",
                                                                                    "realType": "TreeNode*",
                                                                                    "external": false,
                                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                                                    "level": 1
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "com.dse.testdata.object.StructDataNode",
                                            "name": "root[1]",
                                            "virtual_name": "root[1]",
                                            "dataType": "TreeNode",
                                            "realType": "TreeNode",
                                            "external": false,
                                            "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root\\root[1]",
                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                            "children": [
                                                {
                                                    "type": "com.dse.testdata.object.SubStructDataNode",
                                                    "name": "root",
                                                    "virtual_name": "root[1]",
                                                    "dataType": "::TreeNode",
                                                    "realType": "::TreeNode",
                                                    "external": false,
                                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\root\\root",
                                                    "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                    "rawType": "::TreeNode",
                                                    "selectedConstructor": "TreeNode(int)",
                                                    "variableType": "::TreeNode",
                                                    "children": [
                                                        {
                                                            "type": "com.dse.testdata.object.ConstructorDataNode",
                                                            "name": "TreeNode(int)",
                                                            "virtual_name": "root[1]",
                                                            "dataType": "::TreeNode",
                                                            "realType": "::TreeNode",
                                                            "functionNode": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)",
                                                            "children": [
                                                                {
                                                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                                    "name": "x",
                                                                    "virtual_name": "root1_x",
                                                                    "dataType": "int",
                                                                    "realType": "int",
                                                                    "external": false,
                                                                    "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\TreeNode(int)\\x",
                                                                    "correspondingType": "int",
                                                                    "value": "-841419722"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.NormalNumberDataNode",
                                                            "name": "val",
                                                            "virtual_name": "root[1].val",
                                                            "dataType": "int",
                                                            "realType": "int",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\val",
                                                            "correspondingType": "int",
                                                            "value": "null"
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "left",
                                                            "virtual_name": "root[1].left",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\left",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        },
                                                        {
                                                            "type": "com.dse.testdata.object.PointerStructureDataNode",
                                                            "name": "right",
                                                            "virtual_name": "root[1].right",
                                                            "dataType": "TreeNode*",
                                                            "realType": "TreeNode*",
                                                            "external": false,
                                                            "correspondingVar": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode\\right",
                                                            "correspondingType": ".\\json36\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\TreeNode",
                                                            "level": 1
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "com.dse.testdata.object.NormalNumberDataNode",
                                    "name": "RETURN",
                                    "virtual_name": "AKA_EXPECTED_OUTPUT",
                                    "dataType": "int",
                                    "realType": "int",
                                    "external": false,
                                    "correspondingVar": ".\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)\\RETURN",
                                    "correspondingType": "int",
                                    "value": "null"
                                }
                            ]
                        }
                    ]
                },
                "td": "void AKA_TEST_Solution_minDepth_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_minDepth_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=891566245;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-2070330564;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-841419722;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minDepth_TreeNodemul_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minDepth(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\json36\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\Solution\\\\minDepth(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=891566245;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-2070330564;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=0;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-841419722;\nAKA_mark(\"Calling: .\\\\json36\\\\LeetCode 105 Construct Binary Tree from Preorder and Inorder Traversal.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": true,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int minDepth(TreeNode* root) {\r         if (!root) return 0;\r         if (!root->left)  return minDepth(root->right) + 1;\r         if (!root->right) return minDepth(root->left)  + 1;\r         return min(minDepth(root->left), minDepth(root->right)) + 1;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\prj-data\\gremist_LeetCode\\json36\\LeetCode 111 Minimum Depth of Binary Tree.cpp\\Solution\\minDepth(TreeNode*)"
    }
]