[
    {
        "f": [],
        "fm": "bool checkOnesSegment(string s) {\r     \r         int n = s.length();\r         bool isZero = false, isOne = false;\r \r         if(s[0] == '0')                                                         isZero = true;\r         else                                                                    isOne = true;\r         \r         for(int i=1; i<n; i++) {\r             \r             if(isZero == true && isOne == true && s[i] == '1')                  return false;\r             \r             if(s[i] == '0')                                                     isZero = true;\r             else                                                                isOne = true;\r         }\r         \r         return true;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_checkOnesSegment_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_checkOnesSegment_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1784-check-if-binary-string-has-at-most-one-segment-of-ones.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName106713 = new char[2];akaRandomName106713[0] = 48;akaRandomName106713[1] = '\\0';string s=akaRandomName106713;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkOnesSegment_string_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkOnesSegment(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p49\\\\1784-check-if-binary-string-has-at-most-one-segment-of-ones\\\\1784-check-if-binary-string-has-at-most-one-segment-of-ones.cpp\\\\Solution\\\\checkOnesSegment(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     bool checkOnesSegment(string s) {\r     \r         int n = s.length();\r         bool isZero = false, isOne = false;\r \r         if(s[0] == '0')                                                         isZero = true;\r         else                                                                    isOne = true;\r         \r         for(int i=1; i<n; i++) {\r             \r             if(isZero == true && isOne == true && s[i] == '1')                  return false;\r             \r             if(s[i] == '0')                                                     isZero = true;\r             else                                                                isOne = true;\r         }\r         \r         return true;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p49\\1784-check-if-binary-string-has-at-most-one-segment-of-ones\\1784-check-if-binary-string-has-at-most-one-segment-of-ones.cpp\\Solution\\checkOnesSegment(string)"
    },
    {
        "f": [],
        "fm": "int findCenter(vector<vector<int>>& edges) {\r     \r         vector<int> degree(100001);\r         \r         int maxi = INT_MIN;\r         \r         for(auto &x : edges) {\r            \r             int u = x[0];\r             int v = x[1];\r             \r             // Undirected edge between u and v i.e u <-> v\r             degree[u]++;\r             degree[v]++;\r \r             maxi = max(maxi, max(u, v));\r         }\r         \r         int n = maxi;\r         \r         for(int i=1; i<=n; i++) {\r             if(degree[i] ==  n - 1)             return i;\r         }\r         \r         return -1;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findCenter_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_findCenter_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1791-find-center-of-star-graph.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> edges;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode edges */\nvector<int> edges_element0;\nint edges_element0_element0=460240321;\nedges_element0.push_back(edges_element0_element0);\nint edges_element0_element1=-1132735224;\nedges_element0.push_back(edges_element0_element1);\nint edges_element0_element2=766226252;\nedges_element0.push_back(edges_element0_element2);\nedges.push_back(edges_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findCenter_vector_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findCenter(edges);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p49\\\\1791-find-center-of-star-graph\\\\1791-find-center-of-star-graph.cpp\\\\Solution\\\\findCenter(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_edges;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int findCenter(vector<vector<int>>& edges) {\r     \r         vector<int> degree(100001);\r         \r         int maxi = INT_MIN;\r         \r         for(auto &x : edges) {\r            \r             int u = x[0];\r             int v = x[1];\r             \r             // Undirected edge between u and v i.e u <-> v\r             degree[u]++;\r             degree[v]++;\r \r             maxi = max(maxi, max(u, v));\r         }\r         \r         int n = maxi;\r         \r         for(int i=1; i<=n; i++) {\r             if(degree[i] ==  n - 1)             return i;\r         }\r         \r         return -1;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p49\\1791-find-center-of-star-graph\\1791-find-center-of-star-graph.cpp\\Solution\\findCenter(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int secondHighest(string s) {\r     \r         int res = -1;\r         set<int> dig;\r         \r         for(auto &x : s) {\r             if(x >= '0' && x <= '9')                    dig.insert((int)(x - '0'));\r         }\r         \r         if(dig.size() >= 2) {\r             \r             auto it = dig.end();\r             \r             it--;\r             it--;\r             \r             return *it;\r         }                                \r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_secondHighest_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_secondHighest_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1796-second-largest-digit-in-a-string.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName236359 = new char[2];akaRandomName236359[0] = -112;akaRandomName236359[1] = '\\0';string s=akaRandomName236359;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_secondHighest_string_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->secondHighest(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p49\\\\1796-second-largest-digit-in-a-string\\\\1796-second-largest-digit-in-a-string.cpp\\\\Solution\\\\secondHighest(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_secondHighest_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_secondHighest_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1796-second-largest-digit-in-a-string.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName992539 = new char[2];akaRandomName992539[0] = 62;akaRandomName992539[1] = '\\0';string s=akaRandomName992539;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_secondHighest_string_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->secondHighest(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p49\\\\1796-second-largest-digit-in-a-string\\\\1796-second-largest-digit-in-a-string.cpp\\\\Solution\\\\secondHighest(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-959673596;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r    \r     int secondHighest(string s) {\r     \r         int res = -1;\r         set<int> dig;\r         \r         for(auto &x : s) {\r             if(x >= '0' && x <= '9')                    dig.insert((int)(x - '0'));\r         }\r         \r         if(dig.size() >= 2) {\r             \r             auto it = dig.end();\r             \r             it--;\r             it--;\r             \r             return *it;\r         }                                \r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p49\\1796-second-largest-digit-in-a-string\\1796-second-largest-digit-in-a-string.cpp\\Solution\\secondHighest(string)"
    },
    {
        "f": [],
        "fm": "int maxAscendingSum(vector<int>& a) {\r     \r         int ans = a[0];\r         int n = a.size();\r         \r         int sum = a[0];\r         \r         // Find all ascending subarray\r         for(int i=1; i<n; i++) {\r             \r             if(a[i-1] < a[i])                           sum += a[i];\r             else                                        sum = a[i];\r             \r             ans = max(ans, sum);\r         }\r         \r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maxAscendingSum_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maxAscendingSum_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1800-maximum-ascending-subarray-sum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> a;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode a */\nint a_element0=758456327;\na.push_back(a_element0);\nint a_element1=997842959;\na.push_back(a_element1);\nint a_element2=602439878;\na.push_back(a_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maxAscendingSum_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxAscendingSum(a);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p49\\\\1800-maximum-ascending-subarray-sum\\\\1800-maximum-ascending-subarray-sum.cpp\\\\Solution\\\\maxAscendingSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_a;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int maxAscendingSum(vector<int>& a) {\r     \r         int ans = a[0];\r         int n = a.size();\r         \r         int sum = a[0];\r         \r         // Find all ascending subarray\r         for(int i=1; i<n; i++) {\r             \r             if(a[i-1] < a[i])                           sum += a[i];\r             else                                        sum = a[i];\r             \r             ans = max(ans, sum);\r         }\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p49\\1800-maximum-ascending-subarray-sum\\1800-maximum-ascending-subarray-sum.cpp\\Solution\\maxAscendingSum(vector<int>&)"
    }
]