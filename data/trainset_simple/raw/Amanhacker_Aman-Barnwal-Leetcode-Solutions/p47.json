[
    {
        "f": [],
        "fm": "char findRequired(int ind, string time) {\r         \r         if(ind == 0) {\r             if(time[1] == '?' || time[1] <= '3')          return '2';\r             else                        return '1';\r         }   \r         \r         else if(ind == 1) {\r            if(time[0] <= '1')           return '9';\r             else                        return '3';\r         }\r         \r         else if(ind == 3)               return '5';\r         else if(ind == 4)               return '9';\r         \r         return '0';\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findRequired_int_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_findRequired_int_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1736-latest-time-by-replacing-hidden-digits.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint ind=506671295;\nchar* akaRandomName441418 = new char[2];akaRandomName441418[0] = -93;akaRandomName441418[1] = '\\0';string time=akaRandomName441418;\n\nchar AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode ind */\n/* NormalStringDataNode time */\n/* NormalCharacterDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findRequired_int_string_random_2\");char AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findRequired(ind,time);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1736-latest-time-by-replacing-hidden-digits\\\\1736-latest-time-by-replacing-hidden-digits.cpp\\\\Solution\\\\findRequired(int,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     char findRequired(int ind, string time) {\r         \r         if(ind == 0) {\r             if(time[1] == '?' || time[1] <= '3')          return '2';\r             else                        return '1';\r         }   \r         \r         else if(ind == 1) {\r            if(time[0] <= '1')           return '9';\r             else                        return '3';\r         }\r         \r         else if(ind == 3)               return '5';\r         else if(ind == 4)               return '9';\r         \r         return '0';\r     } \r     \r     string maximumTime(string time) {\r     \r         // Time would be between 00:00 and 23:59\r         \r         // 1st digit - [0, 2],          i.e     i = 0\r         \r         // i.e  i = 1\r         \r         // 2nd digit - [0, 9], if 1st digit = [0, 1]\r         // 2nd digit - [0, 3], if 1st digit = '2'\r         \r         // 3rd digit - [0, 5]           i.e     i = 3\r         // 4th digit - [0, 9]           i.e     i = 4\r         \r         time[0] = time[0] != '?' ? time[0] : (time[1] == '?' || time[1] <= '3') ? '2' : '1';\r         time[1] = time[1] != '?' ? time[1] : time[0] == '2' ? '3' : '9';\r         time[3] = time[3] != '?' ? time[3] : '5';\r         time[4] = time[4] != '?' ? time[4] : '9';\r         \r         return time;\r         \r //         for(int i=0; i<time.length(); i++) {\r //             if(time[i] == '?')                      time[i] = findRequired(i, time);\r //         }\r         \r //         return time;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p47\\1736-latest-time-by-replacing-hidden-digits\\1736-latest-time-by-replacing-hidden-digits.cpp\\Solution\\findRequired(int,string)"
    },
    {
        "f": [],
        "fm": "string maximumTime(string time) {\r     \r         // Time would be between 00:00 and 23:59\r         \r         // 1st digit - [0, 2],          i.e     i = 0\r         \r         // i.e  i = 1\r         \r         // 2nd digit - [0, 9], if 1st digit = [0, 1]\r         // 2nd digit - [0, 3], if 1st digit = '2'\r         \r         // 3rd digit - [0, 5]           i.e     i = 3\r         // 4th digit - [0, 9]           i.e     i = 4\r         \r         time[0] = time[0] != '?' ? time[0] : (time[1] == '?' || time[1] <= '3') ? '2' : '1';\r         time[1] = time[1] != '?' ? time[1] : time[0] == '2' ? '3' : '9';\r         time[3] = time[3] != '?' ? time[3] : '5';\r         time[4] = time[4] != '?' ? time[4] : '9';\r         \r         return time;\r         \r //         for(int i=0; i<time.length(); i++) {\r //             if(time[i] == '?')                      time[i] = findRequired(i, time);\r //         }\r         \r //         return time;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maximumTime_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_maximumTime_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1736-latest-time-by-replacing-hidden-digits.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName21861 = new char[2];akaRandomName21861[0] = -121;akaRandomName21861[1] = '\\0';string time=akaRandomName21861;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode time */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumTime_string_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumTime(time);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1736-latest-time-by-replacing-hidden-digits\\\\1736-latest-time-by-replacing-hidden-digits.cpp\\\\Solution\\\\maximumTime(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     char findRequired(int ind, string time) {\r         \r         if(ind == 0) {\r             if(time[1] == '?' || time[1] <= '3')          return '2';\r             else                        return '1';\r         }   \r         \r         else if(ind == 1) {\r            if(time[0] <= '1')           return '9';\r             else                        return '3';\r         }\r         \r         else if(ind == 3)               return '5';\r         else if(ind == 4)               return '9';\r         \r         return '0';\r     } \r     \r     string maximumTime(string time) {\r     \r         // Time would be between 00:00 and 23:59\r         \r         // 1st digit - [0, 2],          i.e     i = 0\r         \r         // i.e  i = 1\r         \r         // 2nd digit - [0, 9], if 1st digit = [0, 1]\r         // 2nd digit - [0, 3], if 1st digit = '2'\r         \r         // 3rd digit - [0, 5]           i.e     i = 3\r         // 4th digit - [0, 9]           i.e     i = 4\r         \r         time[0] = time[0] != '?' ? time[0] : (time[1] == '?' || time[1] <= '3') ? '2' : '1';\r         time[1] = time[1] != '?' ? time[1] : time[0] == '2' ? '3' : '9';\r         time[3] = time[3] != '?' ? time[3] : '5';\r         time[4] = time[4] != '?' ? time[4] : '9';\r         \r         return time;\r         \r //         for(int i=0; i<time.length(); i++) {\r //             if(time[i] == '?')                      time[i] = findRequired(i, time);\r //         }\r         \r //         return time;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p47\\1736-latest-time-by-replacing-hidden-digits\\1736-latest-time-by-replacing-hidden-digits.cpp\\Solution\\maximumTime(string)"
    },
    {
        "f": [],
        "fm": "int kthLargestValue(vector<vector<int>>& mat, int k) {\r     \r         int n = mat.size();\r         int m = mat[0].size();\r         \r         // Finding value of all elements of matrix \"mat\"\r         vector<vector<int>> dp;\r         dp.resize(n, vector<int>(m));\r         \r         // Form max heap\r         priority_queue<int> pq;\r         \r         int temp = 0;                                           // XORing with 0 will not change the value\r         \r         // Use Prefix sum method to fill XOR of matrix\r         for(int i=0; i<n; i++) {\r             \r             // ith row\r             temp = 0;\r             \r             for(int j=0; j<m; j++) {\r                 temp ^= mat[i][j];\r                 dp[i][j] = temp;\r             }\r         }\r         \r         // Now, XOR all the columns\r         for(int j=0; j<m; j++) {\r             \r             // jth column\r             temp = 0;\r             \r             for(int i=0; i<n; i++) {\r                 temp ^= dp[i][j];\r                 dp[i][j] = temp;\r                 \r                 pq.push(dp[i][j]);\r             }\r         }       \r         \r         if(pq.size() < k)                               return -1;\r         \r         int i = 0;\r         \r         while(i < k && pq.empty() == false) {\r             \r             i++;\r             \r             if(i == k)                                  break;\r             pq.pop();\r         }\r         \r         return pq.top();\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_kthLargestValue_vector_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_kthLargestValue_vector_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1738-find-kth-largest-xor-coordinate-value.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> mat;\n\n\nint k=3;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode mat */\nvector<int> mat_element0;\nint mat_element0_element0=2119542399;\nmat_element0.push_back(mat_element0_element0);\nint mat_element0_element1=-21590868;\nmat_element0.push_back(mat_element0_element1);\nint mat_element0_element2=-628064850;\nmat_element0.push_back(mat_element0_element2);\nmat.push_back(mat_element0);\nvector<int> mat_element1;\nint mat_element1_element0=885831735;\nmat_element1.push_back(mat_element1_element0);\nint mat_element1_element1=2142590610;\nmat_element1.push_back(mat_element1_element1);\nint mat_element1_element2=-1275343679;\nmat_element1.push_back(mat_element1_element2);\nmat.push_back(mat_element1);\nvector<int> mat_element2;\nint mat_element2_element0=-373269461;\nmat_element2.push_back(mat_element2_element0);\nmat.push_back(mat_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_kthLargestValue_vector_vector_int_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->kthLargestValue(mat,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1738-find-kth-largest-xor-coordinate-value\\\\1738-find-kth-largest-xor-coordinate-value.cpp\\\\Solution\\\\kthLargestValue(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_mat;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_kthLargestValue_vector_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_kthLargestValue_vector_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1738-find-kth-largest-xor-coordinate-value.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> mat;\n\n\nint k=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode mat */\nvector<int> mat_element0;\nint mat_element0_element0=-2131936628;\nmat_element0.push_back(mat_element0_element0);\nmat.push_back(mat_element0);\nvector<int> mat_element1;\nint mat_element1_element0=1046053448;\nmat_element1.push_back(mat_element1_element0);\nmat.push_back(mat_element1);\nvector<int> mat_element2;\nint mat_element2_element0=-1187931559;\nmat_element2.push_back(mat_element2_element0);\nmat.push_back(mat_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_kthLargestValue_vector_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->kthLargestValue(mat,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1738-find-kth-largest-xor-coordinate-value\\\\1738-find-kth-largest-xor-coordinate-value.cpp\\\\Solution\\\\kthLargestValue(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_mat;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-959673596;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_kthLargestValue_vector_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_kthLargestValue_vector_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1738-find-kth-largest-xor-coordinate-value.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<vector<int>> mat;\n\n\nint k=0;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode mat */\nvector<int> mat_element0;\nint mat_element0_element0=-360131819;\nmat_element0.push_back(mat_element0_element0);\nint mat_element0_element1=1702930880;\nmat_element0.push_back(mat_element0_element1);\nmat.push_back(mat_element0);\nvector<int> mat_element1;\nint mat_element1_element0=666170783;\nmat_element1.push_back(mat_element1_element0);\nint mat_element1_element1=1361158346;\nmat_element1.push_back(mat_element1_element1);\nint mat_element1_element2=1465616964;\nmat_element1.push_back(mat_element1_element2);\nmat.push_back(mat_element1);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_kthLargestValue_vector_vector_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->kthLargestValue(mat,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1738-find-kth-largest-xor-coordinate-value\\\\1738-find-kth-largest-xor-coordinate-value.cpp\\\\Solution\\\\kthLargestValue(vector<vector<int>>&,int)\");\n\n\nvector<vector<int>> EXPECTED_mat;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1421335167;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1359955834;\n/* PointerStructureDataNode left */\nTreeNode* root0_left0_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode(root0_left0_x,root0_left0_left,root0_left0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_1).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_1);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1359955834;\n/* PointerStructureDataNode left */\nTreeNode* root0_left0_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x,root0_left0_left,root0_left0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1609-even-odd-tree.cpp\\\\isEvenOddTree(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int kthLargestValue(vector<vector<int>>& mat, int k) {\r     \r         int n = mat.size();\r         int m = mat[0].size();\r         \r         // Finding value of all elements of matrix \"mat\"\r         vector<vector<int>> dp;\r         dp.resize(n, vector<int>(m));\r         \r         // Form max heap\r         priority_queue<int> pq;\r         \r         int temp = 0;                                           // XORing with 0 will not change the value\r         \r         // Use Prefix sum method to fill XOR of matrix\r         for(int i=0; i<n; i++) {\r             \r             // ith row\r             temp = 0;\r             \r             for(int j=0; j<m; j++) {\r                 temp ^= mat[i][j];\r                 dp[i][j] = temp;\r             }\r         }\r         \r         // Now, XOR all the columns\r         for(int j=0; j<m; j++) {\r             \r             // jth column\r             temp = 0;\r             \r             for(int i=0; i<n; i++) {\r                 temp ^= dp[i][j];\r                 dp[i][j] = temp;\r                 \r                 pq.push(dp[i][j]);\r             }\r         }       \r         \r         if(pq.size() < k)                               return -1;\r         \r         int i = 0;\r         \r         while(i < k && pq.empty() == false) {\r             \r             i++;\r             \r             if(i == k)                                  break;\r             pq.pop();\r         }\r         \r         return pq.top();\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p47\\1738-find-kth-largest-xor-coordinate-value\\1738-find-kth-largest-xor-coordinate-value.cpp\\Solution\\kthLargestValue(vector<vector<int>>&,int)"
    },
    {
        "f": [],
        "fm": "TreeNode* findLCA(TreeNode* root, int p, int q) {\r     \r         if(root == NULL)                                            return NULL;\r         \r         if(root->val == p || root->val == q)                        return root;\r         \r         TreeNode* l = findLCA(root->left, p, q);\r         TreeNode* r = findLCA(root->right, p, q);\r         \r         if(l != NULL && r != NULL)                                  return root;\r         \r         if(l != NULL)                                               return l;\r         else                                                        return r;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findLCA_TreeNodemul_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_findLCA_TreeNodemul_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1808469710;\nAKA_mark(\"Calling: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\findLCA(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=577276222;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\findLCA(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-1626707278;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=-1846173538;\nAKA_mark(\"Calling: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\findLCA(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1383654762;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\findLCA(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=1690122875;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right0_x=2030521396;\nAKA_mark(\"Calling: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\findLCA(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_0 = new ::TreeNode(root1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).val=-393309103;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_0).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\findLCA(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).val=-358708648;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_1).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_right2_x=1483107327;\nAKA_mark(\"Calling: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\findLCA(TreeNode*,int,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_right_2 = new ::TreeNode(root1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).val=28922524;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_right_2).right;\nAKA_VECTOR_INIT_root_1_DOT_right.push_back(AKA_VECTOR_INIT_root_1_DOT_right_2);\n(*AKA_VECTOR_INIT_root_1).right = AKA_VECTOR_INIT_root_1_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint p=-157514954;\n\n\nint q=1764812614;\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode p */\n/* NormalNumberDataNode q */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findLCA_TreeNodemul_int_int_random_3\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findLCA(root,p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\Solution\\\\findLCA(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     // Distance between node \"node\" and node having value n\r     int findDist(TreeNode* node, int n, int dist) {\r         \r         if(node == NULL)                                    return -1;\r         if(node->val == n)                                  return dist;\r         \r         int d = findDist(node->left, n, dist + 1);\r         if(d != -1)                                         return d;\r         \r         d = findDist(node->right, n, dist + 1);\r         return d;\r     }\r     \r     // Find LCA of two nodes having value p and q\r     TreeNode* findLCA(TreeNode* root, int p, int q) {\r     \r         if(root == NULL)                                            return NULL;\r         \r         if(root->val == p || root->val == q)                        return root;\r         \r         TreeNode* l = findLCA(root->left, p, q);\r         TreeNode* r = findLCA(root->right, p, q);\r         \r         if(l != NULL && r != NULL)                                  return root;\r         \r         if(l != NULL)                                               return l;\r         else                                                        return r;\r     }\r     \r     // Find distance between node having value p and q\r     int findDistance(TreeNode* root, int p, int q) {\r     \r         if(root == NULL)                                    return 0;\r         \r         TreeNode* lca = findLCA(root, p, q);\r         \r         int ans;\r         ans = findDist(lca, p, 0) + findDist(lca, q, 0);\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p47\\1740-find-distance-in-a-binary-tree\\1740-find-distance-in-a-binary-tree.cpp\\Solution\\findLCA(TreeNode*,int,int)"
    },
    {
        "f": [],
        "fm": "int findDistance(TreeNode* root, int p, int q) {\r     \r         if(root == NULL)                                    return 0;\r         \r         TreeNode* lca = findLCA(root, p, q);\r         \r         int ans;\r         ans = findDist(lca, p, 0) + findDist(lca, q, 0);\r         \r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findDistance_TreeNodemul_int_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_findDistance_TreeNodemul_int_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1740-find-distance-in-a-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\n\n\nint p=1115223782;\n\n\nint q=261689195;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode p */\n/* NormalNumberDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findDistance_TreeNodemul_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findDistance(root,p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1740-find-distance-in-a-binary-tree\\\\1740-find-distance-in-a-binary-tree.cpp\\\\Solution\\\\findDistance(TreeNode*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     // Distance between node \"node\" and node having value n\r     int findDist(TreeNode* node, int n, int dist) {\r         \r         if(node == NULL)                                    return -1;\r         if(node->val == n)                                  return dist;\r         \r         int d = findDist(node->left, n, dist + 1);\r         if(d != -1)                                         return d;\r         \r         d = findDist(node->right, n, dist + 1);\r         return d;\r     }\r     \r     // Find LCA of two nodes having value p and q\r     TreeNode* findLCA(TreeNode* root, int p, int q) {\r     \r         if(root == NULL)                                            return NULL;\r         \r         if(root->val == p || root->val == q)                        return root;\r         \r         TreeNode* l = findLCA(root->left, p, q);\r         TreeNode* r = findLCA(root->right, p, q);\r         \r         if(l != NULL && r != NULL)                                  return root;\r         \r         if(l != NULL)                                               return l;\r         else                                                        return r;\r     }\r     \r     // Find distance between node having value p and q\r     int findDistance(TreeNode* root, int p, int q) {\r     \r         if(root == NULL)                                    return 0;\r         \r         TreeNode* lca = findLCA(root, p, q);\r         \r         int ans;\r         ans = findDist(lca, p, 0) + findDist(lca, q, 0);\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p47\\1740-find-distance-in-a-binary-tree\\1740-find-distance-in-a-binary-tree.cpp\\Solution\\findDistance(TreeNode*,int,int)"
    },
    {
        "f": [],
        "fm": "int maximumScore(int a, int b, int c) {\r     \r         int score = 0;\r         \r         // Form max heap\r         priority_queue<int> pq;\r         \r         pq.push(a);\r         pq.push(b);\r         pq.push(c);\r         \r         while(pq.empty() == false) {\r             \r             // When pq contains 0 or 1 element, break\r             if(pq.size() <= 1)                              break;\r             \r             // Pop two elements and decrement 1 stone from each, and then push them back\r             \r             int t1 = pq.top();\r             pq.pop();\r             \r             int t2 = pq.top();\r             pq.pop();\r             \r             t1--;\r             t2--;\r             \r             // Push them back to pq\r             if(t1 >= 1)                                      pq.push(t1);\r             if(t2 >= 1)                                      pq.push(t2);\r             \r             score++;\r         } \r         \r         return score;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_maximumScore_int_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_maximumScore_int_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1753-maximum-score-from-removing-stones.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint a=-1405162592;\n\n\nint b=570572008;\n\n\nint c=172198255;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalNumberDataNode c */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_maximumScore_int_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maximumScore(a,b,c);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p47\\\\1753-maximum-score-from-removing-stones\\\\1753-maximum-score-from-removing-stones.cpp\\\\Solution\\\\maximumScore(int,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1609-even-odd-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=1724709837;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root0_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root0_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root0_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root0_left_0).right;\nAKA_VECTOR_INIT_root0_left.push_back(AKA_VECTOR_INIT_root0_left_0);\nTreeNode* root0_left = AKA_VECTOR_INIT_root0_left[0];\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p41\\\\1609-even-odd-tree\\\\1609-even-odd-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\1609-even-odd-tree.cpp\\\\bfs(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int maximumScore(int a, int b, int c) {\r     \r         int score = 0;\r         \r         // Form max heap\r         priority_queue<int> pq;\r         \r         pq.push(a);\r         pq.push(b);\r         pq.push(c);\r         \r         while(pq.empty() == false) {\r             \r             // When pq contains 0 or 1 element, break\r             if(pq.size() <= 1)                              break;\r             \r             // Pop two elements and decrement 1 stone from each, and then push them back\r             \r             int t1 = pq.top();\r             pq.pop();\r             \r             int t2 = pq.top();\r             pq.pop();\r             \r             t1--;\r             t2--;\r             \r             // Push them back to pq\r             if(t1 >= 1)                                      pq.push(t1);\r             if(t2 >= 1)                                      pq.push(t2);\r             \r             score++;\r         } \r         \r         return score;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p47\\1753-maximum-score-from-removing-stones\\1753-maximum-score-from-removing-stones.cpp\\Solution\\maximumScore(int,int,int)"
    }
]