[
    {
        "f": [],
        "fm": "void dfs(int node, unordered_map<int, vector<int>> &adj, vector<int> &vis, vector<int> &blocked, int &ans) {\r         \r         vis[node] = 1;\r         ans++;\r         \r         for(auto &ch : adj[node]) {\r             \r             if(blocked[ch] == 1) {\r                 vis[ch] = 1;\r                 continue;\r             }   \r             \r             if(vis[ch] == 0) {\r                 dfs(ch, adj, vis, blocked, ans);\r             }\r         }\r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_int_unordered_map_int_vector_int_vector_int_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_dfs_int_unordered_map_int_vector_int_vector_int_vector_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2368-reachable-nodes-with-restrictions.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint node=-650371781;\nunordered_map<int, vector<int>> adj;\nvector<int> vis;\nvector<int> blocked;\n\n\nint ans=-987467995;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode node */\n/* UnorderedMapDataNode adj */\n/* VectorDataNode vis */\nint vis_element0=573082712;\nvis.push_back(vis_element0);\nint vis_element1=2137585635;\nvis.push_back(vis_element1);\nint vis_element2=1752912686;\nvis.push_back(vis_element2);\n/* VectorDataNode blocked */\nint blocked_element0=-1958463723;\nblocked.push_back(blocked_element0);\nint blocked_element1=843889574;\nblocked.push_back(blocked_element1);\nint blocked_element2=-1085623570;\nblocked.push_back(blocked_element2);\n/* NormalNumberDataNode ans */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_int_unordered_map_int_vector_int_vector_int_vector_int_int_random_1\");AKA_INSTANCE___Solution->dfs(node,adj,vis,blocked,ans);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\2368-reachable-nodes-with-restrictions\\\\2368-reachable-nodes-with-restrictions.cpp\\\\Solution\\\\dfs(int,unordered_map<int,vector<int>>&,vector<int>&,vector<int>&,int&)\");\n\n/* error assertion */\nunordered_map<int, vector<int>> EXPECTED_adj;\n\nvector<int> EXPECTED_vis;\n\nvector<int> EXPECTED_blocked;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     void dfs(int node, unordered_map<int, vector<int>> &adj, vector<int> &vis, vector<int> &blocked, int &ans) {\r         \r         vis[node] = 1;\r         ans++;\r         \r         for(auto &ch : adj[node]) {\r             \r             if(blocked[ch] == 1) {\r                 vis[ch] = 1;\r                 continue;\r             }   \r             \r             if(vis[ch] == 0) {\r                 dfs(ch, adj, vis, blocked, ans);\r             }\r         }\r         \r         return;\r     }\r     \r     int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {\r     \r         int ans = 0;\r         \r         unordered_map<int, vector<int>> adj;\r         \r         // Build the Undirected Graph\r         \r         for(auto &x : edges) {\r             adj[x[0]].push_back(x[1]);\r             adj[x[1]].push_back(x[0]);\r         }\r         \r         vector<int> vis(n, 0), blocked(n, 0);\r         \r         for(auto x : restricted) {\r             blocked[x] = 1;\r         }\r         \r         dfs(0, adj, vis, blocked, ans);\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p74\\2368-reachable-nodes-with-restrictions\\2368-reachable-nodes-with-restrictions.cpp\\Solution\\dfs(int,unordered_map<int,vector<int>>&,vector<int>&,vector<int>&,int&)"
    },
    {
        "f": [],
        "fm": "int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {\r     \r         int ans = 0;\r         \r         unordered_map<int, vector<int>> adj;\r         \r         // Build the Undirected Graph\r         \r         for(auto &x : edges) {\r             adj[x[0]].push_back(x[1]);\r             adj[x[1]].push_back(x[0]);\r         }\r         \r         vector<int> vis(n, 0), blocked(n, 0);\r         \r         for(auto x : restricted) {\r             blocked[x] = 1;\r         }\r         \r         dfs(0, adj, vis, blocked, ans);\r         \r         return ans;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_reachableNodes_int_vector_vector_int_vector_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_reachableNodes_int_vector_vector_int_vector_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2368-reachable-nodes-with-restrictions.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=461161902;\nvector<vector<int>> edges;\nvector<int> restricted;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode edges */\nvector<int> edges_element0;\nint edges_element0_element0=483633172;\nedges_element0.push_back(edges_element0_element0);\nint edges_element0_element1=-1999016028;\nedges_element0.push_back(edges_element0_element1);\nedges.push_back(edges_element0);\n/* VectorDataNode restricted */\nint restricted_element0=-2101389012;\nrestricted.push_back(restricted_element0);\nint restricted_element1=1981932073;\nrestricted.push_back(restricted_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reachableNodes_int_vector_vector_int_vector_int_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reachableNodes(n,edges,restricted);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\2368-reachable-nodes-with-restrictions\\\\2368-reachable-nodes-with-restrictions.cpp\\\\Solution\\\\reachableNodes(int,vector<vector<int>>&,vector<int>&)\");\n\n\nvector<vector<int>> EXPECTED_edges;\n\nvector<int> EXPECTED_restricted;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     void dfs(int node, unordered_map<int, vector<int>> &adj, vector<int> &vis, vector<int> &blocked, int &ans) {\r         \r         vis[node] = 1;\r         ans++;\r         \r         for(auto &ch : adj[node]) {\r             \r             if(blocked[ch] == 1) {\r                 vis[ch] = 1;\r                 continue;\r             }   \r             \r             if(vis[ch] == 0) {\r                 dfs(ch, adj, vis, blocked, ans);\r             }\r         }\r         \r         return;\r     }\r     \r     int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {\r     \r         int ans = 0;\r         \r         unordered_map<int, vector<int>> adj;\r         \r         // Build the Undirected Graph\r         \r         for(auto &x : edges) {\r             adj[x[0]].push_back(x[1]);\r             adj[x[1]].push_back(x[0]);\r         }\r         \r         vector<int> vis(n, 0), blocked(n, 0);\r         \r         for(auto x : restricted) {\r             blocked[x] = 1;\r         }\r         \r         dfs(0, adj, vis, blocked, ans);\r         \r         return ans;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p74\\2368-reachable-nodes-with-restrictions\\2368-reachable-nodes-with-restrictions.cpp\\Solution\\reachableNodes(int,vector<vector<int>>&,vector<int>&)"
    },
    {
        "f": [],
        "fm": "void deleteNode(ListNode* node) {\r     \r         // Storing value of next node into node\r         node->val = node->next->val;\r         node->next = node->next->next;              \r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_deleteNode_ListNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_deleteNode_ListNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\237-delete-node-in-a-linked-list.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=545107889;\nAKA_mark(\"Calling: .\\\\p74\\\\237-delete-node-in-a-linked-list\\\\237-delete-node-in-a-linked-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\237-delete-node-in-a-linked-list.cpp\\\\deleteNode(ListNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::ListNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=-1964008908;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_node_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_next0_x=-624616535;\nAKA_mark(\"Calling: .\\\\p74\\\\237-delete-node-in-a-linked-list\\\\237-delete-node-in-a-linked-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\237-delete-node-in-a-linked-list.cpp\\\\deleteNode(ListNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_next_0 = new ::ListNode(node0_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_next_0).val=1451818302;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_node_0_DOT_next_0).next;\nAKA_VECTOR_INIT_node_0_DOT_next.push_back(AKA_VECTOR_INIT_node_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_next1_x=-656871032;\nAKA_mark(\"Calling: .\\\\p74\\\\237-delete-node-in-a-linked-list\\\\237-delete-node-in-a-linked-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\237-delete-node-in-a-linked-list.cpp\\\\deleteNode(ListNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_next_1 = new ::ListNode(node0_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_next_1).val=-769679484;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_node_0_DOT_next_1).next;\nAKA_VECTOR_INIT_node_0_DOT_next.push_back(AKA_VECTOR_INIT_node_0_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint node0_next2_x=-2077291316;\nAKA_mark(\"Calling: .\\\\p74\\\\237-delete-node-in-a-linked-list\\\\237-delete-node-in-a-linked-list.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\237-delete-node-in-a-linked-list.cpp\\\\deleteNode(ListNode*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0_DOT_next_2 = new ::ListNode(node0_next2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0_DOT_next_2).val=-1096102363;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_node_0_DOT_next_2).next;\nAKA_VECTOR_INIT_node_0_DOT_next.push_back(AKA_VECTOR_INIT_node_0_DOT_next_2);\n(*AKA_VECTOR_INIT_node_0).next = AKA_VECTOR_INIT_node_0_DOT_next[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\nListNode* node = AKA_VECTOR_INIT_node[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_deleteNode_ListNodemul_random_2\");AKA_INSTANCE___Solution->deleteNode(node);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\237-delete-node-in-a-linked-list\\\\237-delete-node-in-a-linked-list.cpp\\\\Solution\\\\deleteNode(ListNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void deleteNode(ListNode* node) {\r     \r         // Storing value of next node into node\r         node->val = node->next->val;\r         node->next = node->next->next;              \r         \r         return;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p74\\237-delete-node-in-a-linked-list\\237-delete-node-in-a-linked-list.cpp\\Solution\\deleteNode(ListNode*)"
    },
    {
        "f": [],
        "fm": "void dfsGraph(int node, unordered_map<int, vector<int>> &adj, vector<int> &dist, vector<int> &vis, int &maxi, int d) {\r         \r         vis[node] = 1;\r         dist[node] = d;\r         \r         for(auto &ch : adj[node]) {\r             \r             if(vis[ch] == 0) {\r                 \r                 dist[ch] = dist[node] + 1;\r                 maxi = max(maxi, dist[ch]);\r                 \r                 dfsGraph(ch, adj, dist, vis, maxi, d + 1);\r             }\r         }\r \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfsGraph_int_unordered_map_int_vector_int_vector_int_vector_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_dfsGraph_int_unordered_map_int_vector_int_vector_int_vector_int_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint node=-607196471;\nunordered_map<int, vector<int>> adj;\nvector<int> dist;\nvector<int> vis;\n\n\nint maxi=-532888257;\n\n\nint d=1590403625;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode node */\n/* UnorderedMapDataNode adj */\n/* VectorDataNode dist */\nint dist_element0=-1640593084;\ndist.push_back(dist_element0);\nint dist_element1=1566029109;\ndist.push_back(dist_element1);\n/* VectorDataNode vis */\nint vis_element0=1955817452;\nvis.push_back(vis_element0);\nint vis_element1=990524971;\nvis.push_back(vis_element1);\n/* NormalNumberDataNode maxi */\n/* NormalNumberDataNode d */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfsGraph_int_unordered_map_int_vector_int_vector_int_vector_int_int_int_random_1\");AKA_INSTANCE___Solution->dfsGraph(node,adj,dist,vis,maxi,d);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\Solution\\\\dfsGraph(int,unordered_map<int,vector<int>>&,vector<int>&,vector<int>&,int&,int)\");\n\n/* error assertion */\nunordered_map<int, vector<int>> EXPECTED_adj;\n\nvector<int> EXPECTED_dist;\n\nvector<int> EXPECTED_vis;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void dfsGraph(int node, unordered_map<int, vector<int>> &adj, vector<int> &dist, vector<int> &vis, int &maxi, int d) {\r         \r         vis[node] = 1;\r         dist[node] = d;\r         \r         for(auto &ch : adj[node]) {\r             \r             if(vis[ch] == 0) {\r                 \r                 dist[ch] = dist[node] + 1;\r                 maxi = max(maxi, dist[ch]);\r                 \r                 dfsGraph(ch, adj, dist, vis, maxi, d + 1);\r             }\r         }\r \r         return;\r     }\r     \r     void dfs(TreeNode* root, unordered_map<int, vector<int>> &adj) {\r         \r         if(root == NULL)                        return;\r         \r         if(root->left != NULL) {\r             \r             adj[root->val].push_back(root->left->val);\r             adj[root->left->val].push_back(root->val);\r             \r             dfs(root->left, adj);\r         }   \r         \r         if(root->right != NULL) {\r              \r             adj[root->val].push_back(root->right->val);\r             adj[root->right->val].push_back(root->val);\r             \r             dfs(root->right, adj);            \r         }   \r         \r         return;\r     }\r     \r     int amountOfTime(TreeNode* root, int start) {\r     \r         int maxi = 0;\r         \r         // Form a graph\r         \r         unordered_map<int, vector<int>> adj;\r         vector<int> dist(100001, 0), vis(100001, 0);\r                          \r         dfs(root, adj);\r         \r         dfsGraph(start, adj, dist, vis, maxi, 0);\r         \r         return maxi;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p74\\2385-amount-of-time-for-binary-tree-to-be-infected\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\Solution\\dfsGraph(int,unordered_map<int,vector<int>>&,vector<int>&,vector<int>&,int&,int)"
    },
    {
        "f": [],
        "fm": "void dfs(TreeNode* root, unordered_map<int, vector<int>> &adj) {\r         \r         if(root == NULL)                        return;\r         \r         if(root->left != NULL) {\r             \r             adj[root->val].push_back(root->left->val);\r             adj[root->left->val].push_back(root->val);\r             \r             dfs(root->left, adj);\r         }   \r         \r         if(root->right != NULL) {\r              \r             adj[root->val].push_back(root->right->val);\r             adj[root->right->val].push_back(root->val);\r             \r             dfs(root->right, adj);            \r         }   \r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_TreeNodemul_unordered_map_int_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_unordered_map_int_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nunordered_map<int, vector<int>> adj;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* UnorderedMapDataNode adj */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_unordered_map_int_vector_int_random_1\");AKA_INSTANCE___Solution->dfs(root,adj);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\Solution\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\");\n\n/* error assertion */\nunordered_map<int, vector<int>> EXPECTED_adj;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_dfs_TreeNodemul_unordered_map_int_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_unordered_map_int_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-937526421;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=948197623;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=781036073;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left1_x=594994033;\n/* PointerStructureDataNode left */\nTreeNode* root0_left1_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left1_right;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x,root0_left1_left,root0_left1_right);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-812501399;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode();\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=-1502984735;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1379721737;\n/* PointerStructureDataNode left */\nTreeNode* root0_right0_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_right0_right;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x,root0_right0_left,root0_right0_right);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-58017781;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=-376171117;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=26786714;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=-256087019;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=-1803277085;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nunordered_map<int, vector<int>> adj;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* UnorderedMapDataNode adj */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_unordered_map_int_vector_int_random_3\");AKA_INSTANCE___Solution->dfs(root,adj);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\Solution\\\\dfs(TreeNode*,unordered_map<int,vector<int>>&)\");\n\n/* error assertion */\nunordered_map<int, vector<int>> EXPECTED_adj;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=-981407064;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void dfsGraph(int node, unordered_map<int, vector<int>> &adj, vector<int> &dist, vector<int> &vis, int &maxi, int d) {\r         \r         vis[node] = 1;\r         dist[node] = d;\r         \r         for(auto &ch : adj[node]) {\r             \r             if(vis[ch] == 0) {\r                 \r                 dist[ch] = dist[node] + 1;\r                 maxi = max(maxi, dist[ch]);\r                 \r                 dfsGraph(ch, adj, dist, vis, maxi, d + 1);\r             }\r         }\r \r         return;\r     }\r     \r     void dfs(TreeNode* root, unordered_map<int, vector<int>> &adj) {\r         \r         if(root == NULL)                        return;\r         \r         if(root->left != NULL) {\r             \r             adj[root->val].push_back(root->left->val);\r             adj[root->left->val].push_back(root->val);\r             \r             dfs(root->left, adj);\r         }   \r         \r         if(root->right != NULL) {\r              \r             adj[root->val].push_back(root->right->val);\r             adj[root->right->val].push_back(root->val);\r             \r             dfs(root->right, adj);            \r         }   \r         \r         return;\r     }\r     \r     int amountOfTime(TreeNode* root, int start) {\r     \r         int maxi = 0;\r         \r         // Form a graph\r         \r         unordered_map<int, vector<int>> adj;\r         vector<int> dist(100001, 0), vis(100001, 0);\r                          \r         dfs(root, adj);\r         \r         dfsGraph(start, adj, dist, vis, maxi, 0);\r         \r         return maxi;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p74\\2385-amount-of-time-for-binary-tree-to-be-infected\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\Solution\\dfs(TreeNode*,unordered_map<int,vector<int>>&)"
    },
    {
        "f": [],
        "fm": "int amountOfTime(TreeNode* root, int start) {\r     \r         int maxi = 0;\r         \r         // Form a graph\r         \r         unordered_map<int, vector<int>> adj;\r         vector<int> dist(100001, 0), vis(100001, 0);\r                          \r         dfs(root, adj);\r         \r         dfsGraph(start, adj, dist, vis, maxi, 0);\r         \r         return maxi;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_amountOfTime_TreeNodemul_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_amountOfTime_TreeNodemul_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_x=-776744458;\n/* PointerStructureDataNode left */\nTreeNode* root0_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_right;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\amountOfTime(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x,root0_left,root0_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\amountOfTime(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\amountOfTime(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint start=-1193026788;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_amountOfTime_TreeNodemul_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->amountOfTime(root,start);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\Solution\\\\amountOfTime(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_amountOfTime_TreeNodemul_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_amountOfTime_TreeNodemul_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=840379481;\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\amountOfTime(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\amountOfTime(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint start=-560755586;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode start */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_amountOfTime_TreeNodemul_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->amountOfTime(root,start);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p74\\\\2385-amount-of-time-for-binary-tree-to-be-infected\\\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\\\Solution\\\\amountOfTime(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=-981407064;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void dfsGraph(int node, unordered_map<int, vector<int>> &adj, vector<int> &dist, vector<int> &vis, int &maxi, int d) {\r         \r         vis[node] = 1;\r         dist[node] = d;\r         \r         for(auto &ch : adj[node]) {\r             \r             if(vis[ch] == 0) {\r                 \r                 dist[ch] = dist[node] + 1;\r                 maxi = max(maxi, dist[ch]);\r                 \r                 dfsGraph(ch, adj, dist, vis, maxi, d + 1);\r             }\r         }\r \r         return;\r     }\r     \r     void dfs(TreeNode* root, unordered_map<int, vector<int>> &adj) {\r         \r         if(root == NULL)                        return;\r         \r         if(root->left != NULL) {\r             \r             adj[root->val].push_back(root->left->val);\r             adj[root->left->val].push_back(root->val);\r             \r             dfs(root->left, adj);\r         }   \r         \r         if(root->right != NULL) {\r              \r             adj[root->val].push_back(root->right->val);\r             adj[root->right->val].push_back(root->val);\r             \r             dfs(root->right, adj);            \r         }   \r         \r         return;\r     }\r     \r     int amountOfTime(TreeNode* root, int start) {\r     \r         int maxi = 0;\r         \r         // Form a graph\r         \r         unordered_map<int, vector<int>> adj;\r         vector<int> dist(100001, 0), vis(100001, 0);\r                          \r         dfs(root, adj);\r         \r         dfsGraph(start, adj, dist, vis, maxi, 0);\r         \r         return maxi;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p74\\2385-amount-of-time-for-binary-tree-to-be-infected\\2385-amount-of-time-for-binary-tree-to-be-infected.cpp\\Solution\\amountOfTime(TreeNode*,int)"
    }
]