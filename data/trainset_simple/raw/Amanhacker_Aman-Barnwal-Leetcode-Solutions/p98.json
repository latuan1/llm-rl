[
    {
        "f": [],
        "fm": "vector<double> averageOfLevels(TreeNode* root) {\r     \r         vector<double> res;\r         \r         if(root == NULL)                            return res;\r         \r         int h = height(root);\r         \r         for(int i=1; i<=h; i++) {\r             \r             int count = 0;\r             double sum = 0;\r             \r             findLevelOrder(root, i, h, count, sum);\r             \r             double avg = sum / count;\r             res.push_back(avg);\r         }\r         \r         return res;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_averageOfLevels_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_averageOfLevels_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1356247379;\nAKA_mark(\"Calling: .\\\\p98\\\\637-average-of-levels-in-binary-tree\\\\637-average-of-levels-in-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\averageOfLevels(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p98\\\\637-average-of-levels-in-binary-tree\\\\637-average-of-levels-in-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\averageOfLevels(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\p98\\\\637-average-of-levels-in-binary-tree\\\\637-average-of-levels-in-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\averageOfLevels(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<double> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_averageOfLevels_TreeNodemul_random_0\");vector<double> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->averageOfLevels(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p98\\\\637-average-of-levels-in-binary-tree\\\\637-average-of-levels-in-binary-tree.cpp\\\\Solution\\\\averageOfLevels(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1356247379;\nAKA_mark(\"Calling: .\\\\p98\\\\637-average-of-levels-in-binary-tree\\\\637-average-of-levels-in-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\averageOfLevels(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p98\\\\637-average-of-levels-in-binary-tree\\\\637-average-of-levels-in-binary-tree.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\averageOfLevels(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\p98\\\\637-average-of-levels-in-binary-tree\\\\637-average-of-levels-in-binary-tree.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\637-average-of-levels-in-binary-tree.cpp\\\\averageOfLevels(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<double> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     int height(TreeNode* root) {\r         \r         int h = 0;\r         \r         if(root == NULL)                            return h;\r         \r         int left_h = height(root->left);\r         int right_h = height(root->right);\r         \r         return 1 + max(left_h, right_h);\r     }\r     \r     void findLevelOrder(TreeNode* root, int lev, int h, int &count, double &sum) {\r         \r         if(root == NULL)                            return;\r         \r         if(lev == 1) {\r             \r             sum += (double)(root->val);\r             count++;\r             \r             return;\r         }\r         \r         else if(lev > 1) {\r             findLevelOrder(root->left, lev - 1, h, count, sum);\r             findLevelOrder(root->right, lev - 1, h, count, sum);\r         }\r         \r         return;\r     }\r     \r     vector<double> averageOfLevels(TreeNode* root) {\r     \r         vector<double> res;\r         \r         if(root == NULL)                            return res;\r         \r         int h = height(root);\r         \r         for(int i=1; i<=h; i++) {\r             \r             int count = 0;\r             double sum = 0;\r             \r             findLevelOrder(root, i, h, count, sum);\r             \r             double avg = sum / count;\r             res.push_back(avg);\r         }\r         \r         return res;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p98\\637-average-of-levels-in-binary-tree\\637-average-of-levels-in-binary-tree.cpp\\Solution\\averageOfLevels(TreeNode*)"
    },
    {
        "f": [],
        "fm": "void extendPalindrome(string s, int left, int right, int &count) {\r         \r         int n = s.length();\r \r         if(left < 0 || right >= n)                  return;\r         \r         while(left >=0 && right < n && s[left] == s[right]) {\r             \r             left--;\r             right++;\r             \r             count++;\r         }        \r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_extendPalindrome_string_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_extendPalindrome_string_int_int_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\647-palindromic-substrings.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName920681 = new char[2];akaRandomName920681[0] = -125;akaRandomName920681[1] = '\\0';string s=akaRandomName920681;\n\n\nint left=5;\n\n\nint right=9;\n\n\nint count=859631856;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode left */\n/* NormalNumberDataNode right */\n/* NormalNumberDataNode count */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_extendPalindrome_string_int_int_int_random_1\");AKA_INSTANCE___Solution->extendPalindrome(s,left,right,count);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p98\\\\647-palindromic-substrings\\\\647-palindromic-substrings.cpp\\\\Solution\\\\extendPalindrome(string,int,int,int&)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\647-palindromic-substrings.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName955323 = new char[2];akaRandomName955323[0] = -125;akaRandomName955323[1] = '\\0';string s=akaRandomName955323;\n\n\nint left=5;\n\n\nint right=9;\n\n\nint count=859631856;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode left */\n/* NormalNumberDataNode right */\n/* NormalNumberDataNode count */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     void extendPalindrome(string s, int left, int right, int &count) {\r         \r         int n = s.length();\r \r         if(left < 0 || right >= n)                  return;\r         \r         while(left >=0 && right < n && s[left] == s[right]) {\r             \r             left--;\r             right++;\r             \r             count++;\r         }        \r         \r         return;\r     }\r     \r     int countSubstrings(string s) {\r     \r         int count = 0;\r         int n = s.length();\r         \r         if(n == 0)                                         return 0;\r         \r         for(int i=0; i<n; i++) {\r             \r             // Considering i as the mid point\r             \r             extendPalindrome(s, i, i, count);              // Odd length\r             extendPalindrome(s, i, i + 1, count);          // Even length\r         }\r         \r         return count;        \r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p98\\647-palindromic-substrings\\647-palindromic-substrings.cpp\\Solution\\extendPalindrome(string,int,int,int&)"
    },
    {
        "f": [],
        "fm": "int countSubstrings(string s) {\r     \r         int count = 0;\r         int n = s.length();\r         \r         if(n == 0)                                         return 0;\r         \r         for(int i=0; i<n; i++) {\r             \r             // Considering i as the mid point\r             \r             extendPalindrome(s, i, i, count);              // Odd length\r             extendPalindrome(s, i, i + 1, count);          // Even length\r         }\r         \r         return count;        \r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countSubstrings_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_countSubstrings_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\647-palindromic-substrings.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName643616 = new char[2];akaRandomName643616[0] = -60;akaRandomName643616[1] = '\\0';string s=akaRandomName643616;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countSubstrings_string_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countSubstrings(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p98\\\\647-palindromic-substrings\\\\647-palindromic-substrings.cpp\\\\Solution\\\\countSubstrings(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\647-palindromic-substrings.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName153298 = new char[2];akaRandomName153298[0] = -60;akaRandomName153298[1] = '\\0';string s=akaRandomName153298;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     void extendPalindrome(string s, int left, int right, int &count) {\r         \r         int n = s.length();\r \r         if(left < 0 || right >= n)                  return;\r         \r         while(left >=0 && right < n && s[left] == s[right]) {\r             \r             left--;\r             right++;\r             \r             count++;\r         }        \r         \r         return;\r     }\r     \r     int countSubstrings(string s) {\r     \r         int count = 0;\r         int n = s.length();\r         \r         if(n == 0)                                         return 0;\r         \r         for(int i=0; i<n; i++) {\r             \r             // Considering i as the mid point\r             \r             extendPalindrome(s, i, i, count);              // Odd length\r             extendPalindrome(s, i, i + 1, count);          // Even length\r         }\r         \r         return count;        \r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p98\\647-palindromic-substrings\\647-palindromic-substrings.cpp\\Solution\\countSubstrings(string)"
    },
    {
        "f": [],
        "fm": "bool isNumber(string s) {\r     \r         int n = s.length();\r         \r         bool pointSeen = false;\r         bool eSeen = false;\r         bool noSeen = false;\r         bool noAfterE = true;\r         \r         for(int i=0; i<n; i++) {\r             \r             if(s[i] >= '0' && s[i] <= '9') {\r                 noSeen = true;\r                 noAfterE = true;\r             }\r             \r             else if(s[i] == '.') {\r                 \r                 if(eSeen == true || pointSeen == true)                      return false;\r                 \r                 pointSeen = true;\r             }\r             \r             else if(s[i] == 'e' || s[i] == 'E') {\r                 \r                 if(eSeen == true || noSeen == false)                        return false;\r                 \r                 noAfterE = false;\r                 eSeen = true;\r             }\r             \r             else if(s[i] == '-' || s[i] == '+') {\r                 \r                 if(i != 0 && s[i-1] != 'e')                                 return false;\r             }\r             \r             else                                                            return false;\r         }\r         \r         return noSeen && noAfterE;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\65-valid-number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName657580 = new char[2];akaRandomName657580[0] = 59;akaRandomName657580[1] = '\\0';string s=akaRandomName657580;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_string_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p98\\\\65-valid-number\\\\65-valid-number.cpp\\\\Solution\\\\isNumber(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\65-valid-number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName220966 = new char[2];akaRandomName220966[0] = 59;akaRandomName220966[1] = '\\0';string s=akaRandomName220966;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isNumber_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isNumber_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\65-valid-number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName328358 = new char[2];akaRandomName328358[0] = 22;akaRandomName328358[1] = '\\0';string s=akaRandomName328358;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isNumber_string_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isNumber(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p98\\\\65-valid-number\\\\65-valid-number.cpp\\\\Solution\\\\isNumber(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\65-valid-number.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName141725 = new char[2];akaRandomName141725[0] = 22;akaRandomName141725[1] = '\\0';string s=akaRandomName141725;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     bool isNumber(string s) {\r     \r         int n = s.length();\r         \r         bool pointSeen = false;\r         bool eSeen = false;\r         bool noSeen = false;\r         bool noAfterE = true;\r         \r         for(int i=0; i<n; i++) {\r             \r             if(s[i] >= '0' && s[i] <= '9') {\r                 noSeen = true;\r                 noAfterE = true;\r             }\r             \r             else if(s[i] == '.') {\r                 \r                 if(eSeen == true || pointSeen == true)                      return false;\r                 \r                 pointSeen = true;\r             }\r             \r             else if(s[i] == 'e' || s[i] == 'E') {\r                 \r                 if(eSeen == true || noSeen == false)                        return false;\r                 \r                 noAfterE = false;\r                 eSeen = true;\r             }\r             \r             else if(s[i] == '-' || s[i] == '+') {\r                 \r                 if(i != 0 && s[i-1] != 'e')                                 return false;\r             }\r             \r             else                                                            return false;\r         }\r         \r         return noSeen && noAfterE;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p98\\65-valid-number\\65-valid-number.cpp\\Solution\\isNumber(string)"
    },
    {
        "f": [],
        "fm": "bool findTarget(TreeNode* root, int k) {\r     \r         if(root == NULL)                                    return false;\r         if(root->left == NULL && root->right == NULL)       return false;\r         \r         vector<int> v;\r         inorder(root, v);\r         \r         for(int i=0; i<v.size()-1; i++) {\r             \r             int t = v[i];\r             auto it = find(v.begin() + i + 1, v.end(), k - t);\r             \r             if(it != v.end())                   return true;\r         }\r         \r         return false;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_findTarget_TreeNodemul_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_findTarget_TreeNodemul_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=325651913;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\n/* PointerStructureDataNode left */\nTreeNode* root0_left1_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left1_right;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x,root0_left1_left,root0_left1_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\n/* PointerStructureDataNode left */\nTreeNode* root0_left2_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left2_right;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x,root0_left2_left,root0_left2_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1226323726;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint k=677415186;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findTarget_TreeNodemul_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findTarget(root,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\Solution\\\\findTarget(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=325651913;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\n/* PointerStructureDataNode left */\nTreeNode* root0_left1_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left1_right;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x,root0_left1_left,root0_left1_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int,TreeNode*,TreeNode*) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\n/* PointerStructureDataNode left */\nTreeNode* root0_left2_left;\n/* PointerStructureDataNode right */\nTreeNode* root0_left2_right;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int,TreeNode*,TreeNode*)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int,TreeNode*,TreeNode*)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x,root0_left2_left,root0_left2_right);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1226323726;\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p98\\\\653-two-sum-iv-input-is-a-bst\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\653-two-sum-iv-input-is-a-bst.cpp\\\\findTarget(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint k=677415186;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r    \r     void inorder(TreeNode* root, vector<int> &v) {\r         \r         if(root == NULL)                        return;\r         \r         // inorder means left -> root -> right\r         inorder(root->left, v);\r         v.push_back(root->val);\r         inorder(root->right, v);\r         \r         return;\r     }\r     \r     bool findTarget(TreeNode* root, int k) {\r     \r         if(root == NULL)                                    return false;\r         if(root->left == NULL && root->right == NULL)       return false;\r         \r         vector<int> v;\r         inorder(root, v);\r         \r         for(int i=0; i<v.size()-1; i++) {\r             \r             int t = v[i];\r             auto it = find(v.begin() + i + 1, v.end(), k - t);\r             \r             if(it != v.end())                   return true;\r         }\r         \r         return false;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p98\\653-two-sum-iv-input-is-a-bst\\653-two-sum-iv-input-is-a-bst.cpp\\Solution\\findTarget(TreeNode*,int)"
    }
]