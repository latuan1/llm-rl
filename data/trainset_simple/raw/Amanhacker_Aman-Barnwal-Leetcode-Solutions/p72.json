[
    {
        "f": [],
        "fm": "ListNode* mergeKLists(vector<ListNode*>& lists) {\r     \r         ListNode* head = NULL;\r         vector<int> v;\r         \r         for(auto &x : lists) {\r             \r             ListNode* node = x;\r             \r             while(node != NULL) {\r                 v.push_back(node->val);\r                 node = node->next;\r             }\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&head, x);\r         }\r         \r         return head;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_mergeKLists_vector_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_mergeKLists_vector_ListNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\23-merge-k-sorted-lists.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<ListNode*> lists;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode lists */\nstd::vector<ListNode*> AKA_VECTOR_INIT_lists_element0;\n/* SubStructDataNode  */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: C:\\\\Users\\\\daidu\\\\Desktop\\\\Projects\\\\AKAUT\\\\prj-data\\\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\\\p72\\\\23-merge-k-sorted-lists\\\\23-merge-k-sorted-lists.cpp\\\\ListNode\\\\ListNode()|ROOT\\\\23-merge-k-sorted-lists.cpp\\\\mergeKLists(vector<ListNode*>&)\\\\lists\\\\element #0\\\\element #0[0]\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_lists_element0_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_lists_element0_0).next;\nAKA_VECTOR_INIT_lists_element0.push_back(AKA_VECTOR_INIT_lists_element0_0);\nListNode* lists_element0 = AKA_VECTOR_INIT_lists_element0[0];\nlists.push_back(lists_element0);\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_mergeKLists_vector_ListNodemul_random_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->mergeKLists(lists);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\23-merge-k-sorted-lists\\\\23-merge-k-sorted-lists.cpp\\\\Solution\\\\mergeKLists(vector<ListNode*>&)\");\n\n\nvector<ListNode*> EXPECTED_lists;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void addNodeAtBeginning(ListNode** head, int val) {\r         \r         ListNode* temp = new ListNode(val);\r         \r         if(head == NULL) {\r             *head = temp;\r             return;\r         }\r         \r         else {\r             temp->next = *head;\r             *head = temp;\r         }\r         \r         return;\r     }\r     \r     ListNode* mergeKLists(vector<ListNode*>& lists) {\r     \r         ListNode* head = NULL;\r         vector<int> v;\r         \r         for(auto &x : lists) {\r             \r             ListNode* node = x;\r             \r             while(node != NULL) {\r                 v.push_back(node->val);\r                 node = node->next;\r             }\r         }\r         \r         sort(v.begin(), v.end(), greater<int>());\r         \r         for(auto &x : v) {\r             addNodeAtBeginning(&head, x);\r         }\r         \r         return head;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p72\\23-merge-k-sorted-lists\\23-merge-k-sorted-lists.cpp\\Solution\\mergeKLists(vector<ListNode*>&)"
    },
    {
        "f": [],
        "fm": "void inorder(TreeNode* root, vector<int> &v) {\r         \r         if(root == NULL)                        return;\r         \r         inorder(root->left, v);\r         v.push_back(root->val);\r         inorder(root->right, v);\r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_inorder_TreeNodemul_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_inorder_TreeNodemul_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\230-kth-smallest-element-in-a-bst.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nvector<int> v;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode v */\nint v_element0=-90917187;\nv.push_back(v_element0);\nint v_element1=1219624976;\nv.push_back(v_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_inorder_TreeNodemul_vector_int_random_0\");AKA_INSTANCE___Solution->inorder(root,v);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\230-kth-smallest-element-in-a-bst\\\\230-kth-smallest-element-in-a-bst.cpp\\\\Solution\\\\inorder(TreeNode*,vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_v;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     void inorder(TreeNode* root, vector<int> &v) {\r         \r         if(root == NULL)                        return;\r         \r         inorder(root->left, v);\r         v.push_back(root->val);\r         inorder(root->right, v);\r         \r         return;\r     }\r     \r     int kthSmallest(TreeNode* root, int k) {\r     \r         vector<int> v;\r         inorder(root, v);\r         \r         if(v.size() < k)                        return -1;\r         \r         return v[k-1];\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p72\\230-kth-smallest-element-in-a-bst\\230-kth-smallest-element-in-a-bst.cpp\\Solution\\inorder(TreeNode*,vector<int>&)"
    },
    {
        "f": [],
        "fm": "int kthSmallest(TreeNode* root, int k) {\r     \r         vector<int> v;\r         inorder(root, v);\r         \r         if(v.size() < k)                        return -1;\r         \r         return v[k-1];\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_kthSmallest_TreeNodemul_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_kthSmallest_TreeNodemul_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\230-kth-smallest-element-in-a-bst.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode() */\nAKA_mark(\"Calling: .\\\\p72\\\\230-kth-smallest-element-in-a-bst\\\\230-kth-smallest-element-in-a-bst.cpp\\\\TreeNode\\\\TreeNode()|ROOT\\\\230-kth-smallest-element-in-a-bst.cpp\\\\kthSmallest(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint k=2128149848;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_kthSmallest_TreeNodemul_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->kthSmallest(root,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\230-kth-smallest-element-in-a-bst\\\\230-kth-smallest-element-in-a-bst.cpp\\\\Solution\\\\kthSmallest(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r \r     void inorder(TreeNode* root, vector<int> &v) {\r         \r         if(root == NULL)                        return;\r         \r         inorder(root->left, v);\r         v.push_back(root->val);\r         inorder(root->right, v);\r         \r         return;\r     }\r     \r     int kthSmallest(TreeNode* root, int k) {\r     \r         vector<int> v;\r         inorder(root, v);\r         \r         if(v.size() < k)                        return -1;\r         \r         return v[k-1];\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p72\\230-kth-smallest-element-in-a-bst\\230-kth-smallest-element-in-a-bst.cpp\\Solution\\kthSmallest(TreeNode*,int)"
    },
    {
        "f": [],
        "fm": "bool isPowerOfTwo(int n) {\r     \r         if(n == 1)                                      return true;\r         if(n <= 0)                                      return false;                           \r         \r         if(n % 2 == 0) {\r             \r             while(n >= 2 && n % 2 == 0) {\r                 n = n / 2;\r             }\r             \r             return (n <= 2);\r         }\r         \r         else                                            return false;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPowerOfTwo_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isPowerOfTwo_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\231-power-of-two.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=4;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPowerOfTwo_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPowerOfTwo(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\231-power-of-two\\\\231-power-of-two.cpp\\\\Solution\\\\isPowerOfTwo(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isPowerOfTwo_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_isPowerOfTwo_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\231-power-of-two.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPowerOfTwo_int_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPowerOfTwo(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\231-power-of-two\\\\231-power-of-two.cpp\\\\Solution\\\\isPowerOfTwo(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=-981407064;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     bool isPowerOfTwo(int n) {\r     \r         if(n == 1)                                      return true;\r         if(n <= 0)                                      return false;                           \r         \r         if(n % 2 == 0) {\r             \r             while(n >= 2 && n % 2 == 0) {\r                 n = n / 2;\r             }\r             \r             return (n <= 2);\r         }\r         \r         else                                            return false;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p72\\231-power-of-two\\231-power-of-two.cpp\\Solution\\isPowerOfTwo(int)"
    },
    {
        "f": [],
        "fm": "long long countPairs(int n, vector<vector<int>>& edges) {\r     \r         long long count = 0;\r         unordered_map<int, vector<int>> adj;\r         \r         for(auto &x : edges) {\r             adj[x[0]].push_back(x[1]);\r             adj[x[1]].push_back(x[0]);\r         }        \r         \r         vector<int> vis(n, 0);\r         \r         // No of total pairs\r         count = ( (long long)n * (n-1) )/2;\r         \r         for(int i=0; i<n; i++) {\r             \r             if(vis[i] == 0) {\r                 \r                 long long nodesCount = 0;\r                 dfs(i, adj, vis, nodesCount);\r                 \r                 // No of pairs formed by this connected components which are reachable from each other, so we need to subtract this\r                 count -= (nodesCount * (nodesCount - 1) ) / 2;\r             }\r         }\r         \r         return count;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_countPairs_int_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_countPairs_int_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\2316-count-unreachable-pairs-of-nodes-in-an-undirected-graph.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\nvector<vector<int>> edges;\n\n\nlong long AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* VectorDataNode edges */\nvector<int> edges_element0;\nint edges_element0_element0=1925482791;\nedges_element0.push_back(edges_element0_element0);\nint edges_element0_element1=1943233560;\nedges_element0.push_back(edges_element0_element1);\nint edges_element0_element2=-1098809772;\nedges_element0.push_back(edges_element0_element2);\nedges.push_back(edges_element0);\nvector<int> edges_element1;\nint edges_element1_element0=-1199780682;\nedges_element1.push_back(edges_element1_element0);\nedges.push_back(edges_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_countPairs_int_vector_vector_int_random_0\");long long AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->countPairs(n,edges);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\2316-count-unreachable-pairs-of-nodes-in-an-undirected-graph\\\\2316-count-unreachable-pairs-of-nodes-in-an-undirected-graph.cpp\\\\Solution\\\\countPairs(int,vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_edges;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     \r     void dfs(int node, unordered_map<int, vector<int>> &adj, vector<int> &vis, long long &nodeCount) {\r         \r         vis[node] = 1;\r         nodeCount++;\r         \r         for(auto &ch : adj[node]) {\r             if(vis[ch] == 0) {\r                 vis[ch] = 1;\r                 dfs(ch, adj, vis, nodeCount);\r             }\r         }\r \r         return;\r     }\r     \r     long long countPairs(int n, vector<vector<int>>& edges) {\r     \r         long long count = 0;\r         unordered_map<int, vector<int>> adj;\r         \r         for(auto &x : edges) {\r             adj[x[0]].push_back(x[1]);\r             adj[x[1]].push_back(x[0]);\r         }        \r         \r         vector<int> vis(n, 0);\r         \r         // No of total pairs\r         count = ( (long long)n * (n-1) )/2;\r         \r         for(int i=0; i<n; i++) {\r             \r             if(vis[i] == 0) {\r                 \r                 long long nodesCount = 0;\r                 dfs(i, adj, vis, nodesCount);\r                 \r                 // No of pairs formed by this connected components which are reachable from each other, so we need to subtract this\r                 count -= (nodesCount * (nodesCount - 1) ) / 2;\r             }\r         }\r         \r         return count;\r     }\r     \r };",
        "c": [
            ""
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p72\\2316-count-unreachable-pairs-of-nodes-in-an-undirected-graph\\2316-count-unreachable-pairs-of-nodes-in-an-undirected-graph.cpp\\Solution\\countPairs(int,vector<vector<int>>&)"
    },
    {
        "f": [
            "stack<int> s1;",
            "stack<int> s2;"
        ],
        "fm": "void push(int x) {\r         \r         while(s2.empty() == false)                          s2.pop();\r         \r         // Push all the elements form s1 to s2\r         while(s1.empty() == false) {\r             s2.push(s1.top());\r             s1.pop();\r         }\r         \r         // Now, push the element x into stack s2\r         s2.push(x);\r         \r         // Now, copy all the elements from s2 to s1\r         \r         while(s2.empty() == false) {\r             s1.push(s2.top());\r             s2.pop();\r         }\r         \r         return;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_MyQueue_push_int_random_0(void) {\n{\nAKA_test_case_name=\"MyQueue_push_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___MyQueue */\n/* ConstructorDataNode MyQueue() */\nAKA_mark(\"Calling: .\\\\p72\\\\232-implement-queue-using-stacks\\\\232-implement-queue-using-stacks.cpp\\\\MyQueue\\\\MyQueue()|ROOT\\\\232-implement-queue-using-stacks.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyQueue\\\\AKA_INSTANCE___MyQueue\\\\MyQueue()\");AKA_fCall++;AKA_INSTANCE___MyQueue = new ::MyQueue();\n/* StackDataNode s1 */\nint AKA_INSTANCE___MyQueue_s1_element1=1171305409;\nAKA_INSTANCE___MyQueue->s1.push(AKA_INSTANCE___MyQueue_s1_element1);\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyQueue->s1.push(AKA_INSTANCE___MyQueue_s1_element0);\n/* StackDataNode s2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyQueue->s2.push(AKA_INSTANCE___MyQueue_s2_element0);\n\n\n\n\nint x=1639582782;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test MyQueue_push_int_random_0\");AKA_INSTANCE___MyQueue->push(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\232-implement-queue-using-stacks\\\\232-implement-queue-using-stacks.cpp\\\\MyQueue\\\\push(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class MyQueue {\r public:\r     \r     stack<int> s1, s2;\r     \r     MyQueue() {\r     \r         \r     }\r     \r     void push(int x) {\r         \r         while(s2.empty() == false)                          s2.pop();\r         \r         // Push all the elements form s1 to s2\r         while(s1.empty() == false) {\r             s2.push(s1.top());\r             s1.pop();\r         }\r         \r         // Now, push the element x into stack s2\r         s2.push(x);\r         \r         // Now, copy all the elements from s2 to s1\r         \r         while(s2.empty() == false) {\r             s1.push(s2.top());\r             s2.pop();\r         }\r         \r         return;\r     }\r     \r     int pop() {\r         \r         int top = s1.top();\r         s1.pop();\r         \r         return top;\r     }\r     \r     int peek() {\r         \r         int top = s1.top();\r         return top;\r     }\r     \r     bool empty() {\r         \r         return (s1.size() == 0);\r     }\r     \r };",
        "c": [
            "MyQueue() {\r\n    \r\n        \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p72\\232-implement-queue-using-stacks\\232-implement-queue-using-stacks.cpp\\MyQueue\\push(int)"
    },
    {
        "f": [
            "stack<int> s1;",
            "stack<int> s2;"
        ],
        "fm": "int peek() {\r         \r         int top = s1.top();\r         return top;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_MyQueue_peek_random_0(void) {\n{\nAKA_test_case_name=\"MyQueue_peek_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___MyQueue */\n/* ConstructorDataNode MyQueue() */\nAKA_mark(\"Calling: .\\\\p72\\\\232-implement-queue-using-stacks\\\\232-implement-queue-using-stacks.cpp\\\\MyQueue\\\\MyQueue()|ROOT\\\\232-implement-queue-using-stacks.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyQueue\\\\AKA_INSTANCE___MyQueue\\\\MyQueue()\");AKA_fCall++;AKA_INSTANCE___MyQueue = new ::MyQueue();\n/* StackDataNode s1 */\nint AKA_INSTANCE___MyQueue_s1_element2=-1610059359;\nAKA_INSTANCE___MyQueue->s1.push(AKA_INSTANCE___MyQueue_s1_element2);\nint AKA_INSTANCE___MyQueue_s1_element1=1676790444;\nAKA_INSTANCE___MyQueue->s1.push(AKA_INSTANCE___MyQueue_s1_element1);\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyQueue->s1.push(AKA_INSTANCE___MyQueue_s1_element0);\n/* StackDataNode s2 */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test MyQueue_peek_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___MyQueue->peek();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\p72\\\\232-implement-queue-using-stacks\\\\232-implement-queue-using-stacks.cpp\\\\MyQueue\\\\peek()\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___MyStack */\n/* ConstructorDataNode MyStack() */\nAKA_mark(\"Calling: .\\\\p71\\\\225-implement-stack-using-queues\\\\225-implement-stack-using-queues.cpp\\\\MyStack\\\\MyStack()|ROOT\\\\225-implement-stack-using-queues.cpp\\\\GLOBAL\\\\AKA_INSTANCE___MyStack\\\\AKA_INSTANCE___MyStack\\\\MyStack()\");AKA_fCall++;AKA_INSTANCE___MyStack = new ::MyStack();\n/* QueueDataNode q1 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element0);\nint AKA_INSTANCE___MyStack_q1_element1=52648014;\nAKA_INSTANCE___MyStack->q1.push(AKA_INSTANCE___MyStack_q1_element1);\n/* QueueDataNode q2 */\n/* element #0 : null value -> no code */\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element0);\nint AKA_INSTANCE___MyStack_q2_element1=-993234708;\nAKA_INSTANCE___MyStack->q2.push(AKA_INSTANCE___MyStack_q2_element1);\n\n\n\n\nint x=-179605686;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class MyQueue {\r public:\r     \r     stack<int> s1, s2;\r     \r     MyQueue() {\r     \r         \r     }\r     \r     void push(int x) {\r         \r         while(s2.empty() == false)                          s2.pop();\r         \r         // Push all the elements form s1 to s2\r         while(s1.empty() == false) {\r             s2.push(s1.top());\r             s1.pop();\r         }\r         \r         // Now, push the element x into stack s2\r         s2.push(x);\r         \r         // Now, copy all the elements from s2 to s1\r         \r         while(s2.empty() == false) {\r             s1.push(s2.top());\r             s2.pop();\r         }\r         \r         return;\r     }\r     \r     int pop() {\r         \r         int top = s1.top();\r         s1.pop();\r         \r         return top;\r     }\r     \r     int peek() {\r         \r         int top = s1.top();\r         return top;\r     }\r     \r     bool empty() {\r         \r         return (s1.size() == 0);\r     }\r     \r };",
        "c": [
            "MyQueue() {\r\n    \r\n        \r\n    }"
        ],
        "path_fm": "C:\\Users\\daidu\\Desktop\\Projects\\AKAUT\\prj-data\\Amanhacker_Aman-Barnwal-Leetcode-Solutions\\p72\\232-implement-queue-using-stacks\\232-implement-queue-using-stacks.cpp\\MyQueue\\peek()"
    }
]