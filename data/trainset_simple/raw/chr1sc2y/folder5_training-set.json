[
    {
        "f": [],
        "fm": "vector<vector<int>> levelOrder(TreeNode *root) {\r         if (!root)\r             return {};\r         vector<vector<int>> traversal;\r         vector<int> currentLevel = vector<int>();\r         queue<TreeNode *> que;\r         que.push(root);\r         int size = 1;\r         while (!que.empty()) {\r             TreeNode *temp = que.front();\r             que.pop();\r             if (temp->left) que.push(temp->left);\r             if (temp->right) que.push(temp->right);\r             currentLevel.push_back(temp->val);\r             --size;\r             if (size == 0) {\r                 size = que.size();\r                 traversal.push_back(currentLevel);\r                 currentLevel = vector<int>();\r             }\r         }\r         return traversal;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_levelOrder_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_levelOrder_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\102.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1449200532;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\levelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-789754791;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\levelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\levelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_levelOrder_TreeNodemul_random_0\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->levelOrder(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\102.cpp\\\\Solution\\\\levelOrder(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\102.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1449200532;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\levelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-789754791;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\levelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\levelOrder(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_levelOrder_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_levelOrder_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\102.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_levelOrder_TreeNodemul_random_2\");vector<vector<int>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->levelOrder(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\102.cpp\\\\Solution\\\\levelOrder(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\102.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\nvector<vector<int>> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<vector<int>> levelOrder(TreeNode *root) {\r         if (!root)\r             return {};\r         vector<vector<int>> traversal;\r         vector<int> currentLevel = vector<int>();\r         queue<TreeNode *> que;\r         que.push(root);\r         int size = 1;\r         while (!que.empty()) {\r             TreeNode *temp = que.front();\r             que.pop();\r             if (temp->left) que.push(temp->left);\r             if (temp->right) que.push(temp->right);\r             currentLevel.push_back(temp->val);\r             --size;\r             if (size == 0) {\r                 size = que.size();\r                 traversal.push_back(currentLevel);\r                 currentLevel = vector<int>();\r             }\r         }\r         return traversal;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\102.cpp\\Solution\\levelOrder(TreeNode*)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_int_random_0(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_0\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=210309163;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=210309163;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_0\");AKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\102.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\102.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [
            "int dir_x[4] = {0, 1, 0, -1};",
            "int dir_y[4] = {1, 0, -1, 0};"
        ],
        "fm": "void DFS(vector<vector<int>> &A, int i, int j) {\r         A[i][j] = 2;\r         for (int k = 0; k < 4; ++k) {\r             int x = i + dir_x[k];\r             int y = j + dir_y[k];\r             if (x >= 0 && x < A.size() && y >= 0 && y < A[0].size() && A[x][y] == 1)\r                 DFS(A, x, y);\r         }\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_DFS_vector_vector_int_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_DFS_vector_vector_int_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode dir_x */\n;\n/* NormalNumberDataNode dir_x[0] */\n/* dir_x[0] : null value -> no code */\n/* NormalNumberDataNode dir_x[1] */\n/* dir_x[1] : null value -> no code */\n/* NormalNumberDataNode dir_x[2] */\n/* dir_x[2] : null value -> no code */\n/* NormalNumberDataNode dir_x[3] */\n/* dir_x[3] : null value -> no code */\n/* OneDimensionNumberDataNode dir_y */\n;\n/* NormalNumberDataNode dir_y[0] */\n/* dir_y[0] : null value -> no code */\n/* NormalNumberDataNode dir_y[1] */\n/* dir_y[1] : null value -> no code */\n/* NormalNumberDataNode dir_y[2] */\n/* dir_y[2] : null value -> no code */\n/* NormalNumberDataNode dir_y[3] */\n/* dir_y[3] : null value -> no code */\n\n\nvector<vector<int>> A;\n\n\nint i=1793417967;\n\n\nint j=-978831177;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nvector<int> A_element0;\nint A_element0_element0=-1715034827;\nA_element0.push_back(A_element0_element0);\nA.push_back(A_element0);\nvector<int> A_element1;\nint A_element1_element0=1830932471;\nA_element1.push_back(A_element1_element0);\nA.push_back(A_element1);\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_DFS_vector_vector_int_int_int_random_0\");AKA_INSTANCE___Solution->DFS(A,i,j);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\1020.cpp\\\\Solution\\\\DFS(vector<vector<int>>&,int,int)\");\n\n/* error assertion */\nvector<vector<int>> EXPECTED_A;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode dir_x */\n;\n/* NormalNumberDataNode dir_x[0] */\n/* dir_x[0] : null value -> no code */\n/* NormalNumberDataNode dir_x[1] */\n/* dir_x[1] : null value -> no code */\n/* NormalNumberDataNode dir_x[2] */\n/* dir_x[2] : null value -> no code */\n/* NormalNumberDataNode dir_x[3] */\n/* dir_x[3] : null value -> no code */\n/* OneDimensionNumberDataNode dir_y */\n;\n/* NormalNumberDataNode dir_y[0] */\n/* dir_y[0] : null value -> no code */\n/* NormalNumberDataNode dir_y[1] */\n/* dir_y[1] : null value -> no code */\n/* NormalNumberDataNode dir_y[2] */\n/* dir_y[2] : null value -> no code */\n/* NormalNumberDataNode dir_y[3] */\n/* dir_y[3] : null value -> no code */\n\n\nvector<vector<int>> A;\n\n\nint i=1793417967;\n\n\nint j=-978831177;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nvector<int> A_element0;\nint A_element0_element0=-1715034827;\nA_element0.push_back(A_element0_element0);\nA.push_back(A_element0);\nvector<int> A_element1;\nint A_element1_element0=1830932471;\nA_element1.push_back(A_element1_element0);\nA.push_back(A_element1);\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r     int dir_x[4] = {0, 1, 0, -1};\r     int dir_y[4] = {1, 0, -1, 0};\r \r     void DFS(vector<vector<int>> &A, int i, int j) {\r         A[i][j] = 2;\r         for (int k = 0; k < 4; ++k) {\r             int x = i + dir_x[k];\r             int y = j + dir_y[k];\r             if (x >= 0 && x < A.size() && y >= 0 && y < A[0].size() && A[x][y] == 1)\r                 DFS(A, x, y);\r         }\r     }\r \r public:\r     int numEnclaves(vector<vector<int>> &A) {\r         int m = A.size(), n = m != 0 ? A[0].size() : 0;\r         if (m == 0)\r             return 0;\r         for (int i = 0; i < m; ++i) {\r             if (A[i][0] == 1)\r                 DFS(A, i, 0);\r             if (A[i][n - 1] == 1)\r                 DFS(A, i, n - 1);\r         }\r         for (int j = 1; j < n - 1; ++j) {\r             if (A[0][j] == 1)\r                 DFS(A, 0, j);\r             if (A[m - 1][j] == 1)\r                 DFS(A, m - 1, j);\r         }\r         int total = 0;\r         for (int i = 0; i < m; ++i) {\r             for (int j = 0; j < n; ++j)\r                 total += (A[i][j] == 1);\r         }\r         return total;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\1020.cpp\\Solution\\DFS(vector<vector<int>>&,int,int)"
    },
    {
        "f": [
            "int dir_x[4] = {0, 1, 0, -1};",
            "int dir_y[4] = {1, 0, -1, 0};"
        ],
        "fm": "int numEnclaves(vector<vector<int>> &A) {\r         int m = A.size(), n = m != 0 ? A[0].size() : 0;\r         if (m == 0)\r             return 0;\r         for (int i = 0; i < m; ++i) {\r             if (A[i][0] == 1)\r                 DFS(A, i, 0);\r             if (A[i][n - 1] == 1)\r                 DFS(A, i, n - 1);\r         }\r         for (int j = 1; j < n - 1; ++j) {\r             if (A[0][j] == 1)\r                 DFS(A, 0, j);\r             if (A[m - 1][j] == 1)\r                 DFS(A, m - 1, j);\r         }\r         int total = 0;\r         for (int i = 0; i < m; ++i) {\r             for (int j = 0; j < n; ++j)\r                 total += (A[i][j] == 1);\r         }\r         return total;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numEnclaves_vector_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_numEnclaves_vector_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode dir_x */\n;\n/* NormalNumberDataNode dir_x[0] */\n/* dir_x[0] : null value -> no code */\n/* NormalNumberDataNode dir_x[1] */\n/* dir_x[1] : null value -> no code */\n/* NormalNumberDataNode dir_x[2] */\n/* dir_x[2] : null value -> no code */\n/* NormalNumberDataNode dir_x[3] */\n/* dir_x[3] : null value -> no code */\n/* OneDimensionNumberDataNode dir_y */\n;\n/* NormalNumberDataNode dir_y[0] */\n/* dir_y[0] : null value -> no code */\n/* NormalNumberDataNode dir_y[1] */\n/* dir_y[1] : null value -> no code */\n/* NormalNumberDataNode dir_y[2] */\n/* dir_y[2] : null value -> no code */\n/* NormalNumberDataNode dir_y[3] */\n/* dir_y[3] : null value -> no code */\n\n\nvector<vector<int>> A;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nvector<int> A_element0;\nint A_element0_element0=471282750;\nA_element0.push_back(A_element0_element0);\nint A_element0_element1=-552726525;\nA_element0.push_back(A_element0_element1);\nint A_element0_element2=-1219384134;\nA_element0.push_back(A_element0_element2);\nA.push_back(A_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numEnclaves_vector_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numEnclaves(A);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\1020.cpp\\\\Solution\\\\numEnclaves(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_A;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* OneDimensionNumberDataNode dir_x */\n;\n/* NormalNumberDataNode dir_x[0] */\n/* dir_x[0] : null value -> no code */\n/* NormalNumberDataNode dir_x[1] */\n/* dir_x[1] : null value -> no code */\n/* NormalNumberDataNode dir_x[2] */\n/* dir_x[2] : null value -> no code */\n/* NormalNumberDataNode dir_x[3] */\n/* dir_x[3] : null value -> no code */\n/* OneDimensionNumberDataNode dir_y */\n;\n/* NormalNumberDataNode dir_y[0] */\n/* dir_y[0] : null value -> no code */\n/* NormalNumberDataNode dir_y[1] */\n/* dir_y[1] : null value -> no code */\n/* NormalNumberDataNode dir_y[2] */\n/* dir_y[2] : null value -> no code */\n/* NormalNumberDataNode dir_y[3] */\n/* dir_y[3] : null value -> no code */\n\n\nvector<vector<int>> A;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nvector<int> A_element0;\nint A_element0_element0=471282750;\nA_element0.push_back(A_element0_element0);\nint A_element0_element1=-552726525;\nA_element0.push_back(A_element0_element1);\nint A_element0_element2=-1219384134;\nA_element0.push_back(A_element0_element2);\nA.push_back(A_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r     int dir_x[4] = {0, 1, 0, -1};\r     int dir_y[4] = {1, 0, -1, 0};\r \r     void DFS(vector<vector<int>> &A, int i, int j) {\r         A[i][j] = 2;\r         for (int k = 0; k < 4; ++k) {\r             int x = i + dir_x[k];\r             int y = j + dir_y[k];\r             if (x >= 0 && x < A.size() && y >= 0 && y < A[0].size() && A[x][y] == 1)\r                 DFS(A, x, y);\r         }\r     }\r \r public:\r     int numEnclaves(vector<vector<int>> &A) {\r         int m = A.size(), n = m != 0 ? A[0].size() : 0;\r         if (m == 0)\r             return 0;\r         for (int i = 0; i < m; ++i) {\r             if (A[i][0] == 1)\r                 DFS(A, i, 0);\r             if (A[i][n - 1] == 1)\r                 DFS(A, i, n - 1);\r         }\r         for (int j = 1; j < n - 1; ++j) {\r             if (A[0][j] == 1)\r                 DFS(A, 0, j);\r             if (A[m - 1][j] == 1)\r                 DFS(A, m - 1, j);\r         }\r         int total = 0;\r         for (int i = 0; i < m; ++i) {\r             for (int j = 0; j < n; ++j)\r                 total += (A[i][j] == 1);\r         }\r         return total;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\1020.cpp\\Solution\\numEnclaves(vector<vector<int>>&)"
    },
    {
        "f": [],
        "fm": "string removeOuterParentheses(string S) {\r         string ret;\r         int empty = 0, start = 0;\r         for (int i = 0; i < S.size(); ++i) {\r             char c = S[i];\r             if (c == '(')\r                 ++empty;\r             else if (c == ')')\r                 --empty;\r             if (empty == 0) {\r                 ret += S.substr(start + 1, i - start - 1);\r                 start = i + 1;\r             }\r         }\r         return ret;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_removeOuterParentheses_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_removeOuterParentheses_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1021.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName826308 = new char[2];akaRandomName826308[0] = -8;akaRandomName826308[1] = '\\0';string S=akaRandomName826308;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeOuterParentheses_string_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeOuterParentheses(S);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\1021.cpp\\\\Solution\\\\removeOuterParentheses(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1021.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName13130 = new char[2];akaRandomName13130[0] = -8;akaRandomName13130[1] = '\\0';string S=akaRandomName13130;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode S */\n/* NormalStringDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     string removeOuterParentheses(string S) {\r         string ret;\r         int empty = 0, start = 0;\r         for (int i = 0; i < S.size(); ++i) {\r             char c = S[i];\r             if (c == '(')\r                 ++empty;\r             else if (c == ')')\r                 --empty;\r             if (empty == 0) {\r                 ret += S.substr(start + 1, i - start - 1);\r                 start = i + 1;\r             }\r         }\r         return ret;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\1021.cpp\\Solution\\removeOuterParentheses(string)"
    },
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_int_random_1(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_1\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=877388865;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_1\");AKA_mark(\"Calling: .\\\\folder_5\\\\1022.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=877388865;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_1\");AKA_mark(\"Calling: .\\\\folder_5\\\\1022.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\1022.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [
            "int mod = static_cast<int>(pow(10, 9) + 7);"
        ],
        "fm": "int sumRootToLeaf(TreeNode *root) {\r         if (!root)\r             return 0;\r         return Sum(root, 0);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_sumRootToLeaf_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_sumRootToLeaf_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode mod */\n/* mod : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=310079253;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\sumRootToLeaf(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1122248120;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\sumRootToLeaf(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sumRootToLeaf_TreeNodemul_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sumRootToLeaf(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\1022.cpp\\\\Solution\\\\sumRootToLeaf(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode mod */\n/* mod : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=310079253;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\sumRootToLeaf(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1122248120;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\sumRootToLeaf(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_sumRootToLeaf_TreeNodemul_random_4(void) {\n{\nAKA_test_case_name=\"Solution_sumRootToLeaf_TreeNodemul_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode mod */\n/* mod : null value -> no code */\n\n\nTreeNode* root;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_sumRootToLeaf_TreeNodemul_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sumRootToLeaf(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\1022.cpp\\\\Solution\\\\sumRootToLeaf(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode mod */\n/* mod : null value -> no code */\n\n\nTreeNode* root;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r     int mod = static_cast<int>(pow(10, 9) + 7);\r public:\r     int sumRootToLeaf(TreeNode *root) {\r         if (!root)\r             return 0;\r         return Sum(root, 0);\r     }\r \r     int Sum(TreeNode *node, int &&curr) {\r         int sum = 0;\r         if (!node->left && !node->right)\r             return curr * 2 + node->val % mod;\r         if (node->left)\r             sum += Sum(node->left, curr * 2 + node->val % mod);\r         if (node->right)\r             sum += Sum(node->right, curr * 2 + node->val % mod);\r         return sum;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\1022.cpp\\Solution\\sumRootToLeaf(TreeNode*)"
    },
    {
        "f": [
            "int mod = static_cast<int>(pow(10, 9) + 7);"
        ],
        "fm": "int Sum(TreeNode *node, int &&curr) {\r         int sum = 0;\r         if (!node->left && !node->right)\r             return curr * 2 + node->val % mod;\r         if (node->left)\r             sum += Sum(node->left, curr * 2 + node->val % mod);\r         if (node->right)\r             sum += Sum(node->right, curr * 2 + node->val % mod);\r         return sum;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_Sum_TreeNodemul_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_Sum_TreeNodemul_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode mod */\n/* mod : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=-224788327;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=2114454766;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_x=-1240999378;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1 = new ::TreeNode(node1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1).val=-474823092;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_left0_x=1735926719;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_left_0 = new ::TreeNode(node1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).val=-1683888400;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).right;\nAKA_VECTOR_INIT_node_1_DOT_left.push_back(AKA_VECTOR_INIT_node_1_DOT_left_0);\n(*AKA_VECTOR_INIT_node_1).left = AKA_VECTOR_INIT_node_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_1);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_x=1390848128;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2 = new ::TreeNode(node2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2).val=320976863;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left0_x=1304816543;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_0 = new ::TreeNode(node2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).val=1476398139;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left1_x=-511796597;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_1 = new ::TreeNode(node2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).val=389040715;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left2_x=-1011050415;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_2 = new ::TreeNode(node2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).val=167823916;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_2);\n(*AKA_VECTOR_INIT_node_2).left = AKA_VECTOR_INIT_node_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right0_x=181083488;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_0 = new ::TreeNode(node2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).val=-338911121;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right1_x=-379553116;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_1 = new ::TreeNode(node2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).val=-1058482461;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right2_x=305732268;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_2 = new ::TreeNode(node2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).val=-1029538511;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_2);\n(*AKA_VECTOR_INIT_node_2).right = AKA_VECTOR_INIT_node_2_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_2);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\nint curr;\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* OtherUnresolvedDataNode curr */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_Sum_TreeNodemul_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->Sum(node,curr);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\1022.cpp\\\\Solution\\\\Sum(TreeNode*,int&&)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1022.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode mod */\n/* mod : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node;\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node0_x=-224788327;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::TreeNode(node0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_0).val=2114454766;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_0).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_x=-1240999378;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1 = new ::TreeNode(node1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1).val=-474823092;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node1_left0_x=1735926719;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_left_0 = new ::TreeNode(node1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).val=-1683888400;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1_DOT_left_0).right;\nAKA_VECTOR_INIT_node_1_DOT_left.push_back(AKA_VECTOR_INIT_node_1_DOT_left_0);\n(*AKA_VECTOR_INIT_node_1).left = AKA_VECTOR_INIT_node_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_1).right;\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_1);\n\n\n/* SubStructDataNode node */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_x=1390848128;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2 = new ::TreeNode(node2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2).val=320976863;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left0_x=1304816543;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_0 = new ::TreeNode(node2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).val=1476398139;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_0).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left1_x=-511796597;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_1 = new ::TreeNode(node2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).val=389040715;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_1).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_left2_x=-1011050415;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_left_2 = new ::TreeNode(node2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).val=167823916;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_left_2).right;\nAKA_VECTOR_INIT_node_2_DOT_left.push_back(AKA_VECTOR_INIT_node_2_DOT_left_2);\n(*AKA_VECTOR_INIT_node_2).left = AKA_VECTOR_INIT_node_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_node_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right0_x=181083488;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_0 = new ::TreeNode(node2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).val=-338911121;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_0).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right1_x=-379553116;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_1 = new ::TreeNode(node2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).val=-1058482461;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_1).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint node2_right2_x=305732268;\nAKA_mark(\"Calling: .\\\\folder_5\\\\102.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\1022.cpp\\\\Sum(TreeNode*,int&&)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_right_2 = new ::TreeNode(node2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).val=-1029538511;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_node_2_DOT_right_2).right;\nAKA_VECTOR_INIT_node_2_DOT_right.push_back(AKA_VECTOR_INIT_node_2_DOT_right_2);\n(*AKA_VECTOR_INIT_node_2).right = AKA_VECTOR_INIT_node_2_DOT_right[0];\n\nAKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_2);\n\nTreeNode* node = AKA_VECTOR_INIT_node[0];\nint curr;\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode node */\n/* OtherUnresolvedDataNode curr */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r     int mod = static_cast<int>(pow(10, 9) + 7);\r public:\r     int sumRootToLeaf(TreeNode *root) {\r         if (!root)\r             return 0;\r         return Sum(root, 0);\r     }\r \r     int Sum(TreeNode *node, int &&curr) {\r         int sum = 0;\r         if (!node->left && !node->right)\r             return curr * 2 + node->val % mod;\r         if (node->left)\r             sum += Sum(node->left, curr * 2 + node->val % mod);\r         if (node->right)\r             sum += Sum(node->right, curr * 2 + node->val % mod);\r         return sum;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\1022.cpp\\Solution\\Sum(TreeNode*,int&&)"
    },
    {
        "f": [],
        "fm": "vector<bool> camelMatch(vector<string> &queries, string &pattern) {\r         vector<bool> ret;\r         int n = pattern.size();\r         for (auto &query:queries) {\r             bool res = true;\r             int i = 0;\r             for (auto &q:query) {\r                 if (q < 'Z') {\r                     if (i >= n || q != pattern[i]) {\r                         res = false;\r                         break;\r                     }\r                     ++i;\r                 } else if (q == pattern[i])\r                     ++i;\r             }\r             ret.push_back(res && i == n);\r         }\r         return ret;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_camelMatch_vector_string_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_camelMatch_vector_string_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1023.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> queries;\nchar* akaRandomName881968 = new char[2];akaRandomName881968[0] = 82;akaRandomName881968[1] = '\\0';string pattern=akaRandomName881968;\nvector<bool> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode queries */\nchar* akaRandomName80083 = new char[2];akaRandomName80083[0] = -3;akaRandomName80083[1] = '\\0';string queries_element0=akaRandomName80083;\nqueries.push_back(queries_element0);\nchar* akaRandomName495099 = new char[2];akaRandomName495099[0] = -55;akaRandomName495099[1] = '\\0';string queries_element1=akaRandomName495099;\nqueries.push_back(queries_element1);\nchar* akaRandomName165702 = new char[2];akaRandomName165702[0] = 100;akaRandomName165702[1] = '\\0';string queries_element2=akaRandomName165702;\nqueries.push_back(queries_element2);\n/* NormalStringDataNode pattern */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_camelMatch_vector_string_string_random_1\");vector<bool> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->camelMatch(queries,pattern);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_5\\\\1023.cpp\\\\Solution\\\\camelMatch(vector<string>&,string&)\");\n\n\nvector<string> EXPECTED_queries;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1023.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<string> queries;\nchar* akaRandomName38033 = new char[2];akaRandomName38033[0] = 82;akaRandomName38033[1] = '\\0';string pattern=akaRandomName38033;\nvector<bool> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode queries */\nchar* akaRandomName403306 = new char[2];akaRandomName403306[0] = -3;akaRandomName403306[1] = '\\0';string queries_element0=akaRandomName403306;\nqueries.push_back(queries_element0);\nchar* akaRandomName344560 = new char[2];akaRandomName344560[0] = -55;akaRandomName344560[1] = '\\0';string queries_element1=akaRandomName344560;\nqueries.push_back(queries_element1);\nchar* akaRandomName166871 = new char[2];akaRandomName166871[0] = 100;akaRandomName166871[1] = '\\0';string queries_element2=akaRandomName166871;\nqueries.push_back(queries_element2);\n/* NormalStringDataNode pattern */\n/* VectorDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     vector<bool> camelMatch(vector<string> &queries, string &pattern) {\r         vector<bool> ret;\r         int n = pattern.size();\r         for (auto &query:queries) {\r             bool res = true;\r             int i = 0;\r             for (auto &q:query) {\r                 if (q < 'Z') {\r                     if (i >= n || q != pattern[i]) {\r                         res = false;\r                         break;\r                     }\r                     ++i;\r                 } else if (q == pattern[i])\r                     ++i;\r             }\r             ret.push_back(res && i == n);\r         }\r         return ret;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "E:\\OneDrive - vnu.edu.vn\\test\\folder_5\\1023.cpp\\Solution\\camelMatch(vector<string>&,string&)"
    }
]