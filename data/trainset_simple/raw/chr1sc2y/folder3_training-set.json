[
    {
        "f": [],
        "fm": "TreeNode(int x) : val(x), left(NULL), right(NULL) {}",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_TreeNode_int_random_2(void) {\n{\nAKA_test_case_name=\"TreeNode_int_random_2\";\n\n// set up\n;\n\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=991990891;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_2\");AKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n\n\n\n\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubStructDataNode AKA_INSTANCE___TreeNode */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint AKA_INSTANCE___TreeNode_x=991990891;\nAKA_mark(\"<<PRE-CALLING>> Test TreeNode_int_random_2\");AKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___TreeNode\\\\AKA_INSTANCE___TreeNode\\\\TreeNode(int)\");AKA_fCall++;AKA_INSTANCE___TreeNode = new ::TreeNode(AKA_INSTANCE___TreeNode_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nAKA_INSTANCE___TreeNode->left;\n/* PointerStructureDataNode right */\nAKA_INSTANCE___TreeNode->right;\n\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "",
        "c": [],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_3\\101.cpp\\TreeNode\\TreeNode(int)"
    },
    {
        "f": [],
        "fm": "bool isSymmetric(TreeNode *root) {\r         if (!root)\r             return true;\r         return compareNode(root->left, root->right);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSymmetric_TreeNodemul_random_5(void) {\n{\nAKA_test_case_name=\"Solution_isSymmetric_TreeNodemul_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1385858970;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1027280104;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=86678228;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSymmetric_TreeNodemul_random_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_3\\\\101.cpp\\\\Solution\\\\isSymmetric(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1385858970;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1027280104;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=86678228;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSymmetric_TreeNodemul_random_8(void) {\n{\nAKA_test_case_name=\"Solution_isSymmetric_TreeNodemul_random_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSymmetric_TreeNodemul_random_8\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_3\\\\101.cpp\\\\Solution\\\\isSymmetric(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nTreeNode* root;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 2,
                "dt": {},
                "td": "void AKA_TEST_Solution_isSymmetric_TreeNodemul_random_7(void) {\n{\nAKA_test_case_name=\"Solution_isSymmetric_TreeNodemul_random_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1681738308;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=642201888;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-2099903850;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isSymmetric_TreeNodemul_random_7\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isSymmetric(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_3\\\\101.cpp\\\\Solution\\\\isSymmetric(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1681738308;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=642201888;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-2099903850;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\isSymmetric(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool isSymmetric(TreeNode *root) {\r         if (!root)\r             return true;\r         return compareNode(root->left, root->right);\r     }\r \r     bool compareNode(TreeNode *p, TreeNode *q) {\r         if (!p && !q)\r             return true;\r         else if (!p || !q || p->val != q->val)\r             return false;\r         return compareNode(p->left, q->right) && compareNode(p->right, q->left);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_3\\101.cpp\\Solution\\isSymmetric(TreeNode*)"
    },
    {
        "f": [],
        "fm": "bool compareNode(TreeNode *p, TreeNode *q) {\r         if (!p && !q)\r             return true;\r         else if (!p || !q || p->val != q->val)\r             return false;\r         return compareNode(p->left, q->right) && compareNode(p->right, q->left);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_compareNode_TreeNodemul_TreeNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_compareNode_TreeNodemul_TreeNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=-643109031;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_0\\\\p\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-430007765;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0).right;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-88161754;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=-1637615093;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=855619714;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=1039957863;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left1_x=1523314469;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_1 = new ::TreeNode(q0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).val=-521436572;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_1);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=1924538837;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=-1882352494;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right1_x=-1937321973;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_1 = new ::TreeNode(q0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).val=-1357316562;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right2_x=-1461733599;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_2 = new ::TreeNode(q0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).val=-449867182;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_2);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_x=942432221;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1 = new ::TreeNode(q1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1).val=-663288164;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left0_x=443626016;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_0 = new ::TreeNode(q1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).val=1352297768;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left1_x=-1235416467;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_1 = new ::TreeNode(q1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).val=-1775756677;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_1);\n(*AKA_VECTOR_INIT_q_1).left = AKA_VECTOR_INIT_q_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right0_x=-591133672;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_0 = new ::TreeNode(q1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).val=2137022808;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right1_x=867353237;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_1 = new ::TreeNode(q1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).val=1540149527;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right2_x=1564014515;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_2 = new ::TreeNode(q1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).val=-1403301926;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_2);\n(*AKA_VECTOR_INIT_q_1).right = AKA_VECTOR_INIT_q_1_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_1);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_x=-558416292;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2 = new ::TreeNode(q2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2).val=-1650981228;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left0_x=-278962562;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_0 = new ::TreeNode(q2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).val=-101938719;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left1_x=-2144408605;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_1 = new ::TreeNode(q2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_1).val=1585898269;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_1).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left2_x=1192505152;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_2 = new ::TreeNode(q2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_2).val=-1744500424;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_2).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_2);\n(*AKA_VECTOR_INIT_q_2).left = AKA_VECTOR_INIT_q_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2).right;\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_2);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_compareNode_TreeNodemul_TreeNodemul_random_3\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->compareNode(p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_3\\\\101.cpp\\\\Solution\\\\compareNode(TreeNode*,TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\101.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_p;\n\n\n/* SubStructDataNode p */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint p0_x=-643109031;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\p\\\\AKA_VECTOR_INIT_p_0\\\\p\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_p_0 = new ::TreeNode(p0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_p_0).val=-430007765;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_p_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_p_0).right;\n\nAKA_VECTOR_INIT_p.push_back(AKA_VECTOR_INIT_p_0);\n\nTreeNode* p = AKA_VECTOR_INIT_p[0];\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q;\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_x=-88161754;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0 = new ::TreeNode(q0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0).val=-1637615093;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left0_x=855619714;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_0 = new ::TreeNode(q0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).val=1039957863;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_0).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_left1_x=1523314469;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_left_1 = new ::TreeNode(q0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).val=-521436572;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_left_1).right;\nAKA_VECTOR_INIT_q_0_DOT_left.push_back(AKA_VECTOR_INIT_q_0_DOT_left_1);\n(*AKA_VECTOR_INIT_q_0).left = AKA_VECTOR_INIT_q_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right0_x=1924538837;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_0 = new ::TreeNode(q0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).val=-1882352494;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_0).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right1_x=-1937321973;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_1 = new ::TreeNode(q0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).val=-1357316562;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_1).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q0_right2_x=-1461733599;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_0\\\\q\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_0_DOT_right_2 = new ::TreeNode(q0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).val=-449867182;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_0_DOT_right_2).right;\nAKA_VECTOR_INIT_q_0_DOT_right.push_back(AKA_VECTOR_INIT_q_0_DOT_right_2);\n(*AKA_VECTOR_INIT_q_0).right = AKA_VECTOR_INIT_q_0_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_0);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_x=942432221;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1 = new ::TreeNode(q1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1).val=-663288164;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left0_x=443626016;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_0 = new ::TreeNode(q1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).val=1352297768;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_0).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_left1_x=-1235416467;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_left_1 = new ::TreeNode(q1_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).val=-1775756677;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_left_1).right;\nAKA_VECTOR_INIT_q_1_DOT_left.push_back(AKA_VECTOR_INIT_q_1_DOT_left_1);\n(*AKA_VECTOR_INIT_q_1).left = AKA_VECTOR_INIT_q_1_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_1_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right0_x=-591133672;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_0 = new ::TreeNode(q1_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).val=2137022808;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_0).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right1_x=867353237;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_1 = new ::TreeNode(q1_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).val=1540149527;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_1).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q1_right2_x=1564014515;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_1\\\\q\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_1_DOT_right_2 = new ::TreeNode(q1_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).val=-1403301926;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_1_DOT_right_2).right;\nAKA_VECTOR_INIT_q_1_DOT_right.push_back(AKA_VECTOR_INIT_q_1_DOT_right_2);\n(*AKA_VECTOR_INIT_q_1).right = AKA_VECTOR_INIT_q_1_DOT_right[0];\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_1);\n\n\n/* SubStructDataNode q */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_x=-558416292;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2 = new ::TreeNode(q2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2).val=-1650981228;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_q_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left0_x=-278962562;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_0 = new ::TreeNode(q2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).val=-101938719;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_0).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left1_x=-2144408605;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_1 = new ::TreeNode(q2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_1).val=1585898269;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_1).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint q2_left2_x=1192505152;\nAKA_mark(\"Calling: .\\\\folder_3\\\\101.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\101.cpp\\\\compareNode(TreeNode*,TreeNode*)\\\\q\\\\AKA_VECTOR_INIT_q_2\\\\q\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_q_2_DOT_left_2 = new ::TreeNode(q2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_q_2_DOT_left_2).val=-1744500424;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_q_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2_DOT_left_2).right;\nAKA_VECTOR_INIT_q_2_DOT_left.push_back(AKA_VECTOR_INIT_q_2_DOT_left_2);\n(*AKA_VECTOR_INIT_q_2).left = AKA_VECTOR_INIT_q_2_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_q_2).right;\n\nAKA_VECTOR_INIT_q.push_back(AKA_VECTOR_INIT_q_2);\n\nTreeNode* q = AKA_VECTOR_INIT_q[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode p */\n/* PointerStructureDataNode q */\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool isSymmetric(TreeNode *root) {\r         if (!root)\r             return true;\r         return compareNode(root->left, root->right);\r     }\r \r     bool compareNode(TreeNode *p, TreeNode *q) {\r         if (!p && !q)\r             return true;\r         else if (!p || !q || p->val != q->val)\r             return false;\r         return compareNode(p->left, q->right) && compareNode(p->right, q->left);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_3\\101.cpp\\Solution\\compareNode(TreeNode*,TreeNode*)"
    },
    {
        "f": [],
        "fm": "int numPairsDivisibleBy60(vector<int> &time) {\r         unordered_map<int, int> match;\r         int total = 0, n = time.size();\r         for (auto &t:time) {\r             int target = (60 - t % 60) % 60;\r             if (match.find(target) != match.end())\r                 total += match[target];\r             ++match[t % 60];\r         }\r         return total;\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_numPairsDivisibleBy60_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_numPairsDivisibleBy60_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1010.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> time;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode time */\nint time_element0=1312035611;\ntime.push_back(time_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_numPairsDivisibleBy60_vector_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numPairsDivisibleBy60(time);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_3\\\\1010.cpp\\\\Solution\\\\numPairsDivisibleBy60(vector<int>&)\");\n\n\nvector<int> EXPECTED_time;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1010.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> time;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode time */\nint time_element0=1312035611;\ntime.push_back(time_element0);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     int numPairsDivisibleBy60(vector<int> &time) {\r         unordered_map<int, int> match;\r         int total = 0, n = time.size();\r         for (auto &t:time) {\r             int target = (60 - t % 60) % 60;\r             if (match.find(target) != match.end())\r                 total += match[target];\r             ++match[t % 60];\r         }\r         return total;\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_3\\1010.cpp\\Solution\\numPairsDivisibleBy60(vector<int>&)"
    },
    {
        "f": [],
        "fm": "bool canThreePartsEqualSum(vector<int>& A) {\r         int sum = 0, n = A.size();\r         for (int i = 0; i < n; ++i)\r             sum += A[i];\r         if (sum % 3 != 0)\r             return false;\r         int part = 0, cum = 0;\r         sum /= 3;\r         for (int i = 0; i < n; ++i) {\r             cum += A[i];\r             if (cum == sum) {\r                 ++part;\r                 cum = 0;\r             }\r         }\r         return (part == 3 && cum == 0);\r     }",
        "datatest": [
            {
                "id": 0,
                "dt": {},
                "td": "void AKA_TEST_Solution_canThreePartsEqualSum_vector_int_random_5(void) {\n{\nAKA_test_case_name=\"Solution_canThreePartsEqualSum_vector_int_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1013.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=680175805;\nA.push_back(A_element0);\nint A_element1=234756905;\nA.push_back(A_element1);\nint A_element2=-969482440;\nA.push_back(A_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_canThreePartsEqualSum_vector_int_random_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->canThreePartsEqualSum(A);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_3\\\\1013.cpp\\\\Solution\\\\canThreePartsEqualSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_A;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1013.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=680175805;\nA.push_back(A_element0);\nint A_element1=234756905;\nA.push_back(A_element1);\nint A_element2=-969482440;\nA.push_back(A_element2);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            },
            {
                "id": 1,
                "dt": {},
                "td": "void AKA_TEST_Solution_canThreePartsEqualSum_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_canThreePartsEqualSum_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1013.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=-621262994;\nA.push_back(A_element0);\nint A_element1=1788298568;\nA.push_back(A_element1);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_canThreePartsEqualSum_vector_int_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->canThreePartsEqualSum(A);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_3\\\\1013.cpp\\\\Solution\\\\canThreePartsEqualSum(vector<int>&)\");\n\n\nvector<int> EXPECTED_A;\n\n\n\n// tear down\n;\n}\n}\n",
                "simplified_t": "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\1013.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> A;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode A */\nint A_element0=-621262994;\nA.push_back(A_element0);\nint A_element1=1788298568;\nA.push_back(A_element1);\n/* NormalNumberDataNode RETURN */\n\n",
                "isAutomated": false,
                "testpath": [],
                "executed_fm": "",
                "executed_fm_masked": "",
                "executed_m": "",
                "executed_m_masked": ""
            }
        ],
        "m": {
            "called_m": [],
            "stub_called_m": [],
            "callee_m": []
        },
        "fc": "class Solution {\r public:\r     bool canThreePartsEqualSum(vector<int>& A) {\r         int sum = 0, n = A.size();\r         for (int i = 0; i < n; ++i)\r             sum += A[i];\r         if (sum % 3 != 0)\r             return false;\r         int part = 0, cum = 0;\r         sum /= 3;\r         for (int i = 0; i < n; ++i) {\r             cum += A[i];\r             if (cum == sum) {\r                 ++part;\r                 cum = 0;\r             }\r         }\r         return (part == 3 && cum == 0);\r     }\r };",
        "c": [
            ""
        ],
        "path_fm": "D:\\py\\test\\chr1sc2y\\folder_3\\1013.cpp\\Solution\\canThreePartsEqualSum(vector<int>&)"
    }
]